{"scripts":"async function update_staffs() {\n    const staffs = await Context.fields.staffs.fetchAll();\n    const position = await Context.data.position.fetch();\n    const type_employment = Context.data.type_employment;\n    let promises = [];\n    for (const staff of staffs) {\n        const employment_table = staff.data.employment_table;\n        const line = employment_table.find(f =\u003e { var _a; return ((_a = f.position) === null || _a === void 0 ? void 0 : _a.id) == position.id; });\n        if (!line) {\n            const id = employment_table.length \u003e 0 ? employment_table[employment_table.length - 1].id + 1 : 0;\n            const new_line = employment_table.insert();\n            new_line.id = id;\n            new_line.position = position;\n            if (position.data.organization)\n                new_line.organization = position.data.organization;\n            if (position.data.subdivision)\n                new_line.subdivision = position.data.subdivision;\n            new_line.type_employment = type_employment;\n            new_line.admission_date_position = new TDate();\n            new_line.admission_date_organization = new TDate();\n        }\n        else {\n            line.type_employment = type_employment;\n            line.admission_date_position = new TDate();\n            line.admission_date_organization = new TDate();\n        }\n        promises.push(staff.save());\n        if (promises.length \u003e 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\n","gatewayPairs":{},"hasTranslations":false}
