{"scripts":"async function timer_10() {\n    let currentTime = new Datetime();\n    let needTime = new Datetime().add(new Duration(10, 'seconds'));\n    while (!currentTime.after(needTime)) {\n        currentTime = new Datetime();\n    }\n}\nasync function get_task_id() {\n    const current_process = await System.processes._searchInstances().where(f =\u003e f.__id.eq(Context.id)).first();\n    const parent_process = await System.processes._searchInstances().where(f =\u003e f.__id.eq(current_process.data.__parentId)).first();\n    if (!parent_process) {\n        Context.data.error = `Не удалось найти экземпляр родительского процесса. ID текущего процесса: ${current_process.id}`;\n        throw new Error(Context.data.error);\n    }\n    const parent_process_template = await parent_process.getTemplate();\n    const proccess_data = parent_process_template.namespace.split('.');\n    const templateNsAndCode = `${proccess_data.join('.')}:${parent_process_template.code}`;\n    const tasks = await System.processes._searchTasks()\n        .where((f, g) =\u003e g.and(g.or(f.state.like('in_progress'), f.state.like('assignment')), f.templateNsAndCode.eq(templateNsAndCode)))\n        .sort(\"__createdAt\", false)\n        .size(1000)\n        .all();\n    let parent_process_tasks = tasks.filter(f =\u003e f.data.instance \u0026\u0026 f.data.instance.__id == (parent_process === null || parent_process === void 0 ? void 0 : parent_process.id));\n    if (parent_process_tasks.length == 0) {\n        Context.data.error = `Не найдена задача, которую нужно отслеживать. ID текущего процесса: ${Context.id}; ID родительского процесса: ${parent_process.id};`;\n        throw new Error(Context.data.error);\n    }\n    const need_task = parent_process_tasks[0];\n    if (need_task \u0026\u0026 !need_task.data.dueDate) {\n        Context.data.error = `Для задачи ${need_task.data.__name} не установлено время выполнения.`;\n        throw new Error(Context.data.error);\n    }\n    Context.data.task_id = need_task.id;\n    Context.data.execution_time = need_task.data.dueDate;\n    Context.data.parent_process_link = `${System.getBaseUrl()}/admin/monitor/${parent_process.data.__templateId}(p:history/${parent_process.id})`;\n    Context.data.task_link = `${System.getBaseUrl()}/admin/monitor/${parent_process.data.__templateId}(p:task/${need_task.id})`;\n}\nasync function interrupt() {\n    const candidate = await Context.data.candidate_database.fetch();\n    if (candidate.data.id_process) {\n        const status = Context.fields.candidate_database.app.fields.__status.variants.refused;\n        await candidate.setStatus(status);\n        const process = await System.processes._searchInstances().where(f =\u003e f.__id.eq(candidate.data.id_process)).first();\n        await process.interrupt('Работа с кандидатом прервана инициатором');\n    }\n}\n","gatewayPairs":{"/items/967e7db9-6856-42e7-a93c-b03434348cee":"/items/98804586-0006-45cc-91e0-77dcbc8edec5"},"hasTranslations":false}
