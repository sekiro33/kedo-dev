{"scripts":"async function getSettingsKEDO() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const select_person_responsible_employment = settings.find(f =\u003e f.data.code == 'select_person_responsible_employment');\n    Context.data.select_person_responsible_employment = select_person_responsible_employment ? select_person_responsible_employment.data.status : true;\n    if (Context.data.select_person_responsible_employment) {\n        Context.data.responsible_reception = Context.data.__createdBy;\n    }\n    const security_check = settings.find(f =\u003e f.data.code == 'security_check');\n    Context.data.security_check = security_check ? security_check.data.status : true;\n    const document_recognition = settings.find(f =\u003e f.data.code == 'document_recognition');\n    Context.data.document_recognition = document_recognition ? document_recognition.data.status : false;\n    const opening_account_employer = settings.find(f =\u003e f.data.code == 'opening_account_employer');\n    Context.data.opening_account_employer = opening_account_employer ? opening_account_employer.data.status : false;\n    const date_reminder_employment_candidate = settings.find(f =\u003e f.data.code == 'date_reminder_employment_candidate');\n    Context.data.date_reminder_responsible = date_reminder_employment_candidate ? (date_reminder_employment_candidate.data.quantity ? date_reminder_employment_candidate.data.quantity : 5) : 5;\n    const deadline_filling_questionnaire_candidate = settings.find(f =\u003e f.data.code == 'deadline_filling_questionnaire_candidate');\n    const day_deadline_filling_questionnaire_candidate = deadline_filling_questionnaire_candidate ? (deadline_filling_questionnaire_candidate.data.quantity ? deadline_filling_questionnaire_candidate.data.quantity : 4) : 4;\n    Context.data.deadline_filling_questionnaire_candidate = (new Datetime).add(new Duration(day_deadline_filling_questionnaire_candidate, 'days'));\n    const period_displaying_portal_candidate_after_completion_review = settings.find(f =\u003e f.data.code == 'period_displaying_portal_candidate_after_completion_review');\n    Context.data.period_displaying_portal_candidate_after_completion_review = period_displaying_portal_candidate_after_completion_review ? (period_displaying_portal_candidate_after_completion_review.data.quantity ? period_displaying_portal_candidate_after_completion_review.data.quantity : 5) : 5;\n}\nasync function getPeriodVerification() {\n    const setting = await Namespace.app.settings.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('period_verification_consideration_candidate'))).first();\n    if (setting) {\n        const period_verification_consideration_candidate = setting.data.quantity ? setting.data.quantity : 2;\n        Context.data.period_verification_consideration_candidate = (new Datetime).add(new Duration(period_verification_consideration_candidate, 'days'));\n    }\n}\nasync function blocking_access() {\n    if (Context.data.external_staff) {\n        Context.fields.external_staff.app.block(Context.data.external_staff);\n    }\n    if (Context.data.candidate) {\n        await Context.data.candidate.block();\n    }\n}\nasync function linkForUser() {\n    try {\n        const candidate = await Context.data.candidate_database.fetch();\n        const ext_user = Context.fields.external_staff.app.create();\n        ext_user.data.__name = candidate.data.__name;\n        ext_user.data.fullname = candidate.data.fullname;\n        ext_user.data.phone = (ext_user.data.phone || []).concat(candidate.data.phone);\n        if (ext_user.data.phone \u0026\u0026 ext_user.data.phone.length \u003e 0) {\n            ext_user.data.phone.forEach(phone =\u003e phone.type = PhoneType.Work);\n        }\n        ;\n        if (candidate.data.email) {\n            ext_user.data.email = candidate.data.email.email;\n        }\n        await ext_user.save();\n        const portal = await System.portals.get('kedo_ext');\n        await portal.grantAccess(ext_user);\n        const user = await portal.addUser(ext_user);\n        const link = await portal.signupUrl(ext_user, { withSign: true, refresh: true });\n        candidate.data.external_user = ext_user;\n        candidate.data.candidate = user;\n        await candidate.save();\n        Context.data.external_staff = ext_user;\n        Context.data.candidate = user;\n        Context.data.link = link;\n        Context.data.alert = `Приглашаем вас на портал обмена кадровыми электронными документами.\n        На портале вы сможете создавать и подписывать кадровые документы в электронном виде.\n        Перейдите по ссылке и пройдите процедуру регистрации на портале.`;\n    }\n    catch (err) {\n        Context.data.error_string = `Ошибка создания внешнего пользователя: ${err.message}`;\n        throw new Error(\"Ошибка создания внешнего пользователя: \" + err.message);\n    }\n}\nasync function setTableAdditionDocuments() {\n    const type_docs = await Context.fields.table_personal_documents.fields.document_type.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.default.eq(true), f.required_for_candidate.eq(false))).size(10000).all();\n    for (let item of type_docs) {\n        const row = Context.data.additional_personal_documents.insert();\n        row.document_type = item;\n    }\n    Context.data.additional_personal_documents = Context.data.additional_personal_documents;\n}\nasync function getDeadlineSigningJobOffer() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const deadline_signing_job_offer = settings.find(f =\u003e f.data.code == 'deadline_signing_job_offer');\n    const day_deadline_signing_job_offer = deadline_signing_job_offer ? (deadline_signing_job_offer.data.quantity ? deadline_signing_job_offer.data.quantity : 4) : 4;\n    Context.data.deadline_signing_job_offer = (new Datetime).add(new Duration(day_deadline_signing_job_offer, 'days'));\n    Context.data.comment_candidate = '';\n}\nasync function setDeadlineFormationDocuments() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const deadline_formation_documents_candidate = settings.find(f =\u003e f.data.code == 'deadline_formation_documents_candidate');\n    const day_deadline_formation_documents_candidate = deadline_formation_documents_candidate ? (deadline_formation_documents_candidate.data.quantity ? deadline_formation_documents_candidate.data.quantity : 3) : 3;\n    Context.data.deadline_formation_documents_candidate = (new Datetime).add(new Duration(day_deadline_formation_documents_candidate, 'days'));\n}\nasync function setDeadlineVerificationSecurityService() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const period_verification_security_service = settings.find(f =\u003e f.data.code == 'security_check');\n    const day_period_verification_security_service = period_verification_security_service ? (period_verification_security_service.data.quantity ? period_verification_security_service.data.quantity : 4) : 4;\n    Context.data.period_verification_security_service = (new Datetime).add(new Duration(day_period_verification_security_service, 'days'));\n}\nasync function setDeadlineFinalDecision() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const deadline_making_final_decision_candidate = settings.find(f =\u003e f.data.code == 'deadline_making_final_decision_candidate');\n    const day_deadline_making_final_decision_candidate = deadline_making_final_decision_candidate ? (deadline_making_final_decision_candidate.data.quantity ? deadline_making_final_decision_candidate.data.quantity : 5) : 5;\n    Context.data.deadline_making_final_decision_candidate = (new Datetime).add(new Duration(day_deadline_making_final_decision_candidate, 'days'));\n}\nasync function prepareData() {\n    let fio = (await Context.data.candidate_database.fetch()).data.full_name;\n    if (fio) {\n        Context.data.firstname = fio.firstname;\n        Context.data.lastname = fio.lastname;\n        Context.data.middlename = fio.middlename;\n    }\n}\nasync function setIdProcess() {\n    if (Context.data.reconsideration) {\n        const candidate = await Context.data.candidate_database.fetch();\n        const old_process = await System.processes._searchInstances().where(f =\u003e f.__id.eq(candidate.data.id_process)).first();\n        if (old_process) {\n            try {\n                old_process.interrupt('Процесс неактуален');\n            }\n            catch (_a) { }\n        }\n    }\n    const candidate = await Context.data.candidate_database.fetch();\n    candidate.data.id_process = Context.data.__id;\n    await candidate.save();\n}\nasync function prepareMedicalRequest() {\n    const medical_request = Context.fields.medical_request.app.create();\n    medical_request.data.candidate = Context.data.candidate_database;\n    medical_request.data.starting_from_working_with_candidate = true;\n    medical_request.data.sort_of_medical_examination = medical_request.fields.sort_of_medical_examination.variants.special_examination;\n    medical_request.data.new_position = Context.data.planned_position;\n    await medical_request.save();\n}\nasync function runRecognition() {\n    await getFiles();\n    const passport_url = Context.data.passport ? (await Context.data.passport.getDownloadUrl()) : '';\n    const passport_name = Context.data.passport ? (await Context.data.passport.fetch()).data.__name : '';\n    const snils_url = Context.data.snils_file ? (await Context.data.snils_file.getDownloadUrl()) : '';\n    const snils_name = Context.data.snils_file ? (await Context.data.snils_file.fetch()).data.__name : '';\n    const inn_url = Context.data.inn_file ? (await Context.data.inn_file.getDownloadUrl()) : '';\n    const inn_name = Context.data.inn_file ? (await Context.data.inn_file.fetch()).data.__name : '';\n    const candidate_id = Context.data.candidate.id;\n    const host = System.getBaseUrl();\n    const apiKey = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first().then(resp =\u003e resp.data.value);\n    try {\n        const run_process = await fetch(`${host}/pub/v1/bpm/template/document_recognition/recognition_candidate_documents/run`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                'context': {\n                    \"id_candidate\": candidate_id,\n                    \"passport_url\": passport_url,\n                    \"passport_name\": passport_name,\n                    \"snils_url\": snils_url,\n                    \"snils_name\": snils_name,\n                    \"inn_url\": inn_url,\n                    \"inn_name\": inn_name,\n                }\n            }),\n            method: \"POST\",\n        });\n        Context.data.response = run_process.statusText;\n    }\n    catch (e) {\n        throw new Error(`error at run_process: ${e.message}`);\n    }\n}\nasync function setTimerReminder() {\n    if (Context.data.date_reminder_responsible) {\n        Context.data.reminder_timer_responsible = Context.data.possible_date_employment.asDatetime(new TTime).add(new Duration(-Context.data.date_reminder_responsible, 'days'));\n    }\n    const date_start = Context.data.possible_date_employment.format('DD.MM.YYYY');\n    Context.data.alert_body = `Напоминаем Вам о дате трудоустройства в компанию ${Context.data.name_entity}. Ваш первый рабочий день ${date_start}. Вы можете пройти на портал, чтобы ознакомиться с подробной информацией.`;\n}\nasync function getFiles() {\n    const passport_type = await Context.fields.table_personal_documents.fields.document_type.app.search().where(f =\u003e f.__name.eq('Паспорт. Страница с фото и данными')).first();\n    const snils_type = await Context.fields.table_personal_documents.fields.document_type.app.search().where(f =\u003e f.__name.eq('СНИЛС')).first();\n    const inn_type = await Context.fields.table_personal_documents.fields.document_type.app.search().where(f =\u003e f.__name.eq('ИНН')).first();\n    if (Context.data.table_personal_documents) {\n        for (let document of Context.data.table_personal_documents) {\n            if (passport_type \u0026\u0026 document.document_type.id == passport_type.id) {\n                Context.data.passport = document.file_document;\n            }\n            if (snils_type \u0026\u0026 document.document_type.id == snils_type.id) {\n                Context.data.snils_file = document.file_document;\n            }\n            if (inn_type \u0026\u0026 document.document_type.id == inn_type.id) {\n                Context.data.inn_file = document.file_document;\n            }\n        }\n    }\n}\nasync function getTermRequestDocument() {\n    const setting = await Namespace.app.settings.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('deadline_requesting_additional_information_employment'))).first();\n    if (setting) {\n        const deadline_requesting_additional_information_employment = setting.data.quantity ? setting.data.quantity : 2;\n        Context.data.deadline_requesting_additional_information_employment = await System.productionSchedule.calcDate(Context.data.possible_date_employment.asDatetime(new TTime(0, 0, 0, 0)), new Duration(-deadline_requesting_additional_information_employment, 'days'));\n    }\n}\nasync function getTermProvidingAdditionalDocuments() {\n    const setting = await Namespace.app.settings.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('deadline_providing_additional_information_employment_and_verifying'))).first();\n    if (setting) {\n        const deadline_providing_additional_information_employment_and_verifying = setting.data.quantity ? setting.data.quantity : 1;\n        Context.data.deadline_providing_additional_information_employment_and_verifying = await System.productionSchedule.calcDate(new Datetime, new Duration(deadline_providing_additional_information_employment_and_verifying, 'days'));\n    }\n}\nasync function setAlertInvite() {\n    const setting = await Namespace.app.settings.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('deadline_filling_questionnaire_candidate'))).first();\n    if (setting) {\n        const deadline_filling_questionnaire_candidate = setting.data.quantity ? setting.data.quantity : 2;\n        Context.data.alert_body = `Приглашаем вас на портал для заполнения анкеты кандидата и дальнейшего трудоустройства в ${Context.data.name_entity}. Перейдите по ссылке и пройдите процедуру регистрации на портале. Вам необходимо заполнить анкету кандидата в течение ${deadline_filling_questionnaire_candidate} дней.`;\n    }\n}\nasync function setAlertOffer() {\n    Context.data.alert_body = `Поздравляем! Вы получили предложение о работе от компании ${Context.data.name_entity}. Пожалуйста, пройдите на портал, чтобы посмотреть информацию и подтвердить выход на работу.`;\n}\nasync function setAlertOfferReminder() {\n    Context.data.alert_body = `Напоминаем Вам о необходимости ознакомиться с предложением о работе от компании ${Context.data.name_entity}. Пожалуйста, пройдите на портал, чтобы посмотреть информацию и подтвердить выход на работу.`;\n}\nasync function setAlertFillingFormReminder() {\n    Context.data.alert_body = `Напоминаем, что Вам необходимо заполнить анкету кандидата для трудоустройства в компанию ${Context.data.name_entity}. Пройдите на портал для заполнения анкеты. В случае сложностей, пожалуйста, свяжитесь с представителем компании. `;\n}\nasync function checkFillingForm() {\n    const candidate = await Context.data.candidate_database.fetch();\n    if (candidate.data.__status.code == candidate.fields.__status.variants.questionnaire_completed.code) {\n        return 1;\n    }\n    const now = new Datetime;\n    if (Context.data.deadline_filling_questionnaire_candidate \u0026\u0026 now.after(Context.data.deadline_filling_questionnaire_candidate)) {\n        return 2;\n    }\n    return 3;\n}\nasync function checkSigningJobOffer() {\n    const candidate = await Context.data.candidate_database.fetch();\n    const now = new Datetime;\n    if (candidate.data.__status.code == candidate.fields.__status.variants.job_offer_signed.code) {\n        return 1;\n    }\n    if (candidate.data.__status.code == candidate.fields.__status.variants.clarifying_job_offer.code) {\n        return 2;\n    }\n    if ((Context.data.deadline_signing_job_offer \u0026\u0026 now.after(Context.data.deadline_signing_job_offer)) || candidate.data.__status.code == candidate.fields.__status.variants.security_rejection.code) {\n        return 3;\n    }\n    return 4;\n}\n","gatewayPairs":{"/items/f669dd7d-1454-4f0d-8df0-2d84e8b5e22d":"/items/26257e80-fc7b-4758-9101-f8f099b656f9"},"hasTranslations":false}
