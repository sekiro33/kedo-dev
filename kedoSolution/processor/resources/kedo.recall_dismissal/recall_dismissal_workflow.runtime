{"scripts":"async function check_kedo_agreement() {\n    let staff = await Context.data.staff.fetch();\n    if (staff.data.kedo_agreement) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function check_condition() {\n    let app = await Context.data.letter_of_resignation.fetch();\n    let id = app.data.__id;\n    let process = await Context.fields.staff.app.processes.the_dismissal_process._searchInstances().where((proc, g) =\u003e g.and(proc.__id.eq(id))).first();\n    if (process \u0026\u0026 (process.data.__state == ProcessInstanceState.done || process.data.__state == ProcessInstanceState.error || process.data.__state == ProcessInstanceState.cancel)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nasync function findAgregationApp() {\n    const aggregationApp = await Context.fields.aggregate_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff))).first();\n    Context.data.aggregate_app = aggregationApp;\n}\n;\nasync function createStatusObj(app, status) {\n    const obj_status = {\n        'app': {\n            'namespace': app.namespace,\n            'code': app.code,\n            'id': app.id,\n        },\n        'status': status,\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function createStatusSigning() {\n    createStatusObj(Context.data.recall_dismissal, 'signing');\n}\nasync function createStatusCancelled() {\n    createStatusObj(Context.data.recall_dismissal, 'cancelled');\n}\nasync function createStatusPaperPrepare() {\n    createStatusObj(Context.data.recall_dismissal, 'paper_prepare');\n}\nasync function createStatusAppMakingCancellation() {\n    createStatusObj(Context.data.aggregate_app, 'making_cancellation');\n}\nasync function createStatusMakingCancellation() {\n    createStatusObj(Context.data.letter_of_resignation, 'making_cancellation');\n}\nasync function setStatuses() {\n    if (Context.data.aggregate_app) {\n        const app_status = await Context.data.aggregate_app.fetch();\n        if (app_status.data.kedo_status) {\n            const app_status_fetch = await app_status.data.kedo_status.fetch();\n            Context.fields.enum_status.data.variants.push({ code: app_status_fetch.data.code, name: app_status_fetch.data.name });\n            Context.data.enum_status = Context.fields.enum_status.data.variants.find(e =\u003e e.code == app_status_fetch.data.code);\n        }\n    }\n    if (Context.data.letter_of_resignation) {\n        const app_status = await Context.data.letter_of_resignation.fetch();\n        if (app_status.data.kedo_status) {\n            const app_status_fetch = await app_status.data.kedo_status.fetch();\n            Context.fields.enum_status_application.data.variants.push({ code: app_status_fetch.data.code, name: app_status_fetch.data.name });\n            Context.data.enum_status_application = Context.fields.enum_status_application.data.variants.find(e =\u003e e.code == app_status_fetch.data.code);\n        }\n    }\n}\nasync function createStatusAppBack() {\n    if (Context.data.code_app_status) {\n        createStatusObj(Context.data.aggregate_app, Context.data.code_app_status);\n    }\n}\nasync function createStatusBack() {\n    if (Context.data.code_status) {\n        createStatusObj(Context.data.letter_of_resignation, Context.data.code_status);\n    }\n}\nasync function calcEscalationTime() {\n    if (!Context.data.aggregate_app) {\n        throw new Error(\"Context.data.aggregate_app is undefined\");\n    }\n    const dismissal_app = await Context.data.aggregate_app.fetch();\n    if (!dismissal_app.data.date_of_dismissal) {\n        throw new Error(\"Не указана дата увольнения.\");\n    }\n    const dismissal_escalation_hr = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"dismissal_escalation_hr\")))\n        .first();\n    const hours = dismissal_escalation_hr \u0026\u0026 dismissal_escalation_hr.data.quantity ? dismissal_escalation_hr.data.quantity : 4;\n    const dismissal_date = dismissal_app.data.date_of_dismissal;\n    const settings = await System.productionSchedule.getGeneralSettings();\n    const working_time = settings.daySchedule.workingTime;\n    const escalation_date = dismissal_date\n        .asDatetime(new TTime(0, 0, 0, 0))\n        .add(new Duration(working_time.to, \"seconds\"))\n        .add(new Duration(-hours, \"hours\"));\n    Context.data.escalation_time = escalation_date;\n}\nasync function processingDateForSigning() {\n    if (!Context.data.aggregate_app) {\n        throw new Error(\"Context.data.aggregate_app is undefined\");\n    }\n    const dismissal_app = await Context.data.aggregate_app.fetch();\n    Context.data.signing_date = dismissal_app.data.date_of_dismissal;\n}\n","gatewayPairs":{},"hasTranslations":false}
