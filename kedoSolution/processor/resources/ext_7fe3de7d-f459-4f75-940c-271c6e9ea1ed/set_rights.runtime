{"scripts":"class MyRole {\n    constructor(group, type, code) {\n        this.code = code;\n        this.group = group;\n        this.type = type;\n    }\n    getUsers() {\n        if (this.type == \"group\") {\n            return this.group.users();\n        }\n        else if (this.type == \"orgstruct\") {\n            return System.users.search().where(i =\u003e i.osIds.has(this.group)).size(10000).all();\n        }\n        else\n            return new Promise(() =\u003e this.group);\n    }\n    json() {\n        return {\n            code: this.code,\n            type: this.type\n        };\n    }\n}\nconst app_codes = [\n    \"vacation_docs\",\n    \"vacation_orders\",\n    \"vacations\",\n    \"staff\",\n];\nasync function get_app_type() {\n    if (!Context.data.app) {\n        throw new Error(\"Context.data.app is undefined\");\n    }\n    const app = await Context.data.app.fetch();\n    Context.data.code = app.code;\n    Context.data.namespace = app.namespace;\n}\nasync function check_app_code() {\n    if (!Context.data.code) {\n        return false;\n    }\n    if (app_codes.find(f =\u003e f == Context.data.code)) {\n        return true;\n    }\n    return false;\n}\nasync function set_permissions() {\n    if (!Context.data.access_settings_organization) {\n        Context.data.debug = \"Context.data.access_settings_organization is undefined\";\n        throw new Error(\"Context.data.access_settings_organization is undefined\");\n    }\n    const app = await Context.data.app.fetch();\n    const get_access_settings_organization = await Context.data.access_settings_organization.fetch();\n    const groups = get_access_settings_organization.data[Context.data.code];\n    Context.data.debug += app.id;\n    if (!groups) {\n        Context.data.debug += `access_settings_organization group (${Context.data.code}) is undefined`;\n        throw new Error(`access_settings_organization group (${Context.data.code}) is undefined`);\n    }\n    if (!app.fields.access_group) {\n        Context.data.debug += groups[0].code;\n        throw new Error(`no field access_group in app ${app.code}`);\n    }\n    app.data.access_group = [];\n    const roleGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(groups[0].code))).first();\n    Context.data.debug += roleGroup.data.__id;\n    const newRole = new MyRole(roleGroup, \"group\", roleGroup.id);\n    app.data.access_group = [newRole];\n    await app.save();\n}\nasync function get_access_settings() {\n    const app = await Context.data.app.fetch();\n    let kedo_staff;\n    switch (Context.data.code) {\n        case \"staff\":\n            Context.data.organization = app.data.organization;\n            break;\n        case \"vacations\":\n            if (app.data.kedo_staff) {\n                kedo_staff = await app.data.kedo_staff.fetch();\n                Context.data.organization = kedo_staff.data.organization;\n            }\n            break;\n        case \"vacation_docs\":\n            if (app.data.kedo_staff) {\n                kedo_staff = await app.data.kedo_staff.fetch();\n                Context.data.organization = kedo_staff.data.organization;\n            }\n            break;\n        case \"vacation_orders\":\n            if (app.data.kedo_staff) {\n                kedo_staff = await app.data.kedo_staff.fetch();\n                Context.data.organization = kedo_staff.data.organization;\n            }\n            break;\n        default:\n            break;\n    }\n    if (!Context.data.organization) {\n        Context.data.debug = `Context.data.organization is undefined. App code ${Context.data.code}`;\n        throw new Error(`Context.data.organization is undefined. App code ${Context.data.code}`);\n    }\n    ;\n    const organization = await Context.data.organization.fetch();\n    if (organization.data.access_settings_organization) {\n        const accessSettings = await organization.data.access_settings_organization.fetch();\n        Context.data.access_settings_organization = accessSettings;\n        Context.data.access_settings_name = accessSettings.data.__name;\n    }\n}\nasync function log() {\n    var _a, _b;\n    const token = \"87fd58b9-5c8c-479b-a357-0ae42a56ae45\";\n    const ok = {\n        code: \"ok\",\n        name: \"ok\"\n    };\n    const error = {\n        code: \"error\",\n        name: \"error\"\n    };\n    const currentDatetime = new Datetime().format();\n    const element = await Context.data.app.fetch();\n    const organization = (_a = Context.data.organization) === null || _a === void 0 ? void 0 : _a.id;\n    const acess_setting = (_b = Context.data.access_settings_organization) === null || _b === void 0 ? void 0 : _b.id;\n    const result = Context.data.debug ? error : ok;\n    const body = {\n        \"context\": {\n            \"app\": {\n                \"id\": element.id,\n                \"code\": element.code,\n                \"namespace\": element.namespace\n            },\n            \"error\": Context.data.debug,\n            \"result\": [\n                result\n            ],\n            \"organization\": organization ? [organization] : [],\n            \"access_setting_organization\": acess_setting ? [acess_setting] : [],\n            \"create_datetime\": currentDatetime,\n            \"group_name\": Context.data.access_settings_name\n        }\n    };\n    try {\n        await fetch(`https://kedo-onpremis-test1.sale.elewise.com/pub/v1/app/kedo_tests/access_settings_log/create`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify(body),\n        });\n    }\n    catch (e) {\n        Context.data.debug = JSON.stringify(e);\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
