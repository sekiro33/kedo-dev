{"scripts":"async function check_file_format() {\n    const file = await Context.data.file.fetch();\n    const file_name = file.data.__name;\n    if (file_name.endsWith('.pdf')) {\n        return 1;\n    }\n    else if (file_name.endsWith('.docx') || file_name.endsWith('.DOCX') || file_name.endsWith('.xlsx')) {\n        return 2;\n    }\n    else {\n        return -1;\n    }\n}\nasync function create_file_name() {\n    if (Context.data.file_name) {\n        return;\n    }\n    const file = await Context.data.file.fetch();\n    const file_name = file.data.__name.replace(/\\.[^.$]+$/, '');\n    Context.data.file_name = file_name;\n    Context.data.orignial_file_name = file_name;\n}\nasync function change_file_name() {\n    var _a;\n    const file = await Context.data.file.fetch();\n    const file_url = await file.getDownloadUrl();\n    const file_body = await (await fetch(file_url)).arrayBuffer();\n    const file_name = (_a = Context.data.file_name) !== null \u0026\u0026 _a !== void 0 ? _a : \"empty_name\";\n    Context.data.new_file = await Context.fields.new_file.create(`${file_name}.pdf`, file_body);\n}\nasync function get_new_file_name() {\n    if (!Context.data.new_file) {\n        return;\n    }\n    const file = await Context.data.new_file.fetch();\n    Context.data.new_file_name = file.data.__name.replace(/\\.[^.$]+$/, '');\n}\n","gatewayPairs":{},"hasTranslations":false}
