{"scripts":"class MyRole {\n    constructor(group, type, code) {\n        this.code = code;\n        this.group = group;\n        this.type = type;\n    }\n    getUsers() {\n        if (this.type == \"group\") {\n            return this.group.users();\n        }\n        else if (this.type == \"orgstruct\") {\n            return System.users.search().where(i =\u003e i.osIds.has(this.group)).size(10000).all();\n        }\n        else\n            return new Promise(() =\u003e this.group);\n    }\n    json() {\n        return {\n            code: this.code,\n            type: this.type\n        };\n    }\n}\n;\nlet appCodes = [\n    \"avansovyi_otchet\",\n    \"service_assignments\",\n    \"trip_requests\",\n    \"order_for_a_business_trip\",\n    \"child_personal_data_consent\",\n    \"application_category_assignment\",\n    \"execution_responsibilities_additional_agreement\",\n    \"order_for_transfer\",\n    \"letter_of_resignation\",\n    \"additional_transfer_agreement\",\n    \"order_execution_responsibilities\",\n    \"memo_execution_responsibilities\",\n    \"transfer_approve\",\n    \"docs_1c\",\n    \"labor_contract\",\n    \"passport_data_change_order\",\n    \"electronic_interaction_agreement\",\n    \"additional_agreement_to_the_contract\",\n    \"execution_responsibilities_consent\",\n    \"docs_lna\",\n    \"transfer_application\",\n    \"job_application\",\n    \"additional_agreement\",\n    \"admission_order\",\n    \"dismissal_order\",\n    \"orders_lna\",\n    \"consent_processing_personal_data\",\n    \"recall_dismissal\",\n    \"passport_data_application\",\n    \"personal_documents\",\n    \"information_about_labor_activity\",\n    \"benefit_application\",\n    \"application_for_financial_assistance\",\n    \"setlement_sheet\",\n    \"other_documents\",\n    \"paid_leave\",\n    \"order_financial_assistance\",\n    \"memo_business_trip\",\n    \"application_for_the_transfer_of_salary_to_the_current_account\",\n    \"leave_without_pay\",\n    \"application_for_leave_without_pay\",\n    \"certificate\",\n    \"order_for_business_trip\",\n    \"paid_leave_order\",\n    \"free_from\",\n    \"prochie_dokumenty\",\n    \"vacation_schedule\",\n    \"vacation_orders\",\n    \"offer_vacation_schedule\",\n    \"vacation_docs\",\n    \"mobilization\",\n    \"overtimeWorkOrders\",\n    \"overtimeOrders\",\n    \"overtimeWorkNotifications\",\n    \"overtime_requests\",\n    \"overtimeWorkConsent\",\n    \"overtime_order\",\n    \"staff\",\n    \"transfer_application\",\n    \"execution_duties\",\n    \"category_assignment\",\n    \"employees_personal_data\",\n    \"medical_request\",\n    \"docs_lna\",\n    \"vacations\",\n    \"overtime_work\",\n    \"businesstrip_requests\",\n    \"personnel_documents\",\n    \"structural_subdivision\"\n];\nlet customAppCodes = [];\nasync function logError(message) {\n    const newLogItem = Namespace.params.fields.logs_app.app.create();\n    newLogItem.data.log = message;\n    Context.data.debug = message;\n    await newLogItem.save();\n}\n;\nasync function action() {\n    if (!Context.data.item) {\n        Context.data.debug = \"no item\";\n        return;\n    }\n    ;\n    let item;\n    let customCodesSetting;\n    let appCode = \"\";\n    try {\n        item = await Context.data.item.fetch();\n        customCodesSetting = await Namespace.params.fields.settings.app.search().where(f =\u003e f.code.eq(\"custom_app_codes\")).first();\n        if (customCodesSetting \u0026\u0026 customCodesSetting.data.value) {\n            customAppCodes = customCodesSetting.data.value.split(\",\").map(code =\u003e code.trim());\n            appCodes = appCodes.concat(customAppCodes);\n        }\n        ;\n        appCode = item.code;\n        if (appCode === \"kedo_logs\") {\n            return;\n        }\n        ;\n        if (appCodes.indexOf(appCode) == -1) {\n            return;\n        }\n        ;\n    }\n    catch (err) {\n        Context.data.debug = err.message;\n        return;\n    }\n    ;\n    let staff;\n    try {\n        if (appCode === \"staff\") {\n            staff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(item.id))).first();\n        }\n        else if ([\n            \"vacations\",\n            \"vacation_docs\",\n            \"vacation_orders\",\n            \"offer_vacation_schedule\",\n            \"overtime_work\",\n            \"businesstrip_requests\",\n            \"trip_requests\",\n            \"order_for_a_business_trip\",\n            \"avansovyi_otchet\",\n            \"service_assignments\"\n        ].indexOf(appCode) != -1) {\n            try {\n                staff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(item.data.kedo_staff.id))).first();\n            }\n            catch (err) {\n                throw new Error(`Cоздание элемента: no staff at ${appCode}/${item.id}, error:${err.message}`);\n            }\n            ;\n        }\n        else if (appCode === \"structural_subdivision\") {\n            staff = undefined;\n        }\n        else {\n            try {\n                staff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(item.data.staff.id))).first();\n            }\n            catch (err) {\n                throw new Error(`Cоздание элемента: no staff at ${appCode}/${item.id}, error:${err.message}`);\n            }\n        }\n        ;\n        if (customAppCodes.indexOf(appCode) !== -1) {\n            appCode += \"_extended\";\n        }\n        ;\n        if (staff || appCode === \"structural_subdivision\") {\n            if (staff \u0026\u0026 staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 1) {\n                const staffOrgs = staff.data.employment_table.map(row =\u003e row.organization.id);\n                const orgsWithAccessRights = await Namespace.params.fields.org_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(staffOrgs), f.access_settings_organization.neq(null))).size(10000).all();\n                const orgsAccessSettings = await Promise.all(orgsWithAccessRights.map(org =\u003e org.data.access_settings_organization.fetch())).then(accessSettings =\u003e accessSettings.filter(setting =\u003e setting.data.staff));\n                let accessRightsForElement = await Promise.all(orgsAccessSettings.map(async (accessSetting) =\u003e {\n                    try {\n                        const accessGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(accessSetting.data.staff[0].code))).first();\n                        if (accessGroup) {\n                            const newRole = new MyRole(accessGroup, \"group\", accessGroup.id);\n                            return newRole;\n                        }\n                        ;\n                    }\n                    catch (_a) {\n                        throw new Error(`Cоздание элемента: no code staff at access settings ${accessSetting.id} for item ${appCode}/${item.id}`);\n                    }\n                    ;\n                }));\n                accessRightsForElement = accessRightsForElement.filter(item =\u003e item);\n                item.data.access_group = accessRightsForElement;\n                await item.save();\n            }\n            else {\n                if (!staff \u0026\u0026 appCode !== \"structural_subdivision\") {\n                    await logError(`Cоздание элемента: Приложение - не подразделение и не найдено поле staff: ${appCode}/${item.id}`);\n                    return;\n                }\n                ;\n                if (staff \u0026\u0026 !staff.data.organization) {\n                    await logError(`Cоздание элемента: У сотрудника ${staff.id} не присвоена организация`);\n                    return;\n                }\n                let organization;\n                try {\n                    if (appCode == \"structural_subdivision\") {\n                        organization = await Namespace.params.fields.org_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(item.data.organization.id))).first();\n                    }\n                    else {\n                        organization = await staff.data.organization.fetch();\n                    }\n                }\n                catch (_a) {\n                    throw new Error(`Cоздание элемента: no organization for item ${appCode}/${item.id}`);\n                }\n                ;\n                if (!organization || !organization.data.access_settings_organization) {\n                    await logError(`Cоздание элемента: У сотрудника ${staff.id} не присвоена организация или у организации ${organization ? organization.id : \"undefined\"} не привязаны настройки доступа`);\n                    return;\n                }\n                ;\n                const accessSettings = await organization.data.access_settings_organization.fetch();\n                if (!accessSettings.data[appCode] || accessSettings.data[appCode].length \u003c 1) {\n                    await logError(`Cоздание элемента: У настроек доступа ${accessSettings.id} не заполнено поле ${appCode}`);\n                    return;\n                }\n                ;\n                let accessGroup;\n                try {\n                    accessGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(accessSettings.data[appCode][0].code))).first();\n                }\n                catch (_b) {\n                    throw new Error(`no field ${appCode} at access setting ${accessSettings.id}`);\n                }\n                ;\n                if (accessGroup) {\n                    const newRole = new MyRole(accessGroup, \"group\", accessGroup.id);\n                    item.data.access_group = [newRole];\n                    await item.save();\n                }\n                else {\n                    await logError(`Cоздание элемента: Не найдена группа с id ${accessSettings.data[appCode][0].code}`);\n                    return;\n                }\n                ;\n            }\n        }\n        else {\n            const message = `Cоздание элемента: Не заполнено поле staff у ${appCode}/${item.id}, поле staff: ${item.data.staff.id}, поле kedo_staff: ${item.data.kedo_staff.id}`;\n            await logError(message);\n            return;\n        }\n        ;\n    }\n    catch (err) {\n        await logError(`Cоздание элемента: ${appCode}/${item.id} : ${err.message}`);\n        return;\n    }\n    ;\n}\n;\n","gatewayPairs":{},"hasTranslations":false}
