{"scripts":"async function get_organization_head() {\n    var _a, _b, _c;\n    if (!Context.data.organization) {\n        Context.data.text_error = 'Организация не выбрана.';\n        throw new Error(Context.data.text_error);\n    }\n    const organization = await Context.data.organization.fetch();\n    if (!organization.data.position_head) {\n        Context.data.text_error = `Не указана должность руководителя организации ${organization.data.__name}`;\n        throw new Error(Context.data.text_error);\n    }\n    const position_head = await organization.data.position_head.fetch();\n    const staffs = await Promise.all([\n        ...((_a = position_head.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : []),\n        ...((_b = position_head.data.staff_internal_combination) !== null \u0026\u0026 _b !== void 0 ? _b : []),\n        ...((_c = position_head.data.staff_external_combination) !== null \u0026\u0026 _c !== void 0 ? _c : [])\n    ].map(s =\u003e s.fetch()));\n    if (staffs.length == 0) {\n        Context.data.text_error = `Не указаны сотрудники на должности руководителя организации ${organization.data.__name}`;\n        throw new Error(Context.data.text_error);\n    }\n    const head_staffs = staffs.filter(f =\u003e { var _a; return ((_a = f.data.__status) === null || _a === void 0 ? void 0 : _a.code) == f.fields.__status.variants.signed_documents.code \u0026\u0026 f.data.ext_user; });\n    if (head_staffs \u0026\u0026 head_staffs.length == 0) {\n        Context.data.text_error = `Нет трудоустроенных сотрудников на должности руководителя организации ${organization.data.__name}`;\n        throw new Error(Context.data.text_error);\n    }\n    const head = head_staffs[0];\n    Context.data.organization_head = head;\n    Context.data.organization_head_user = head.data.ext_user;\n}\nasync function get_supervisor() {\n    const supervisor = await System.userGroups.search().where(f =\u003e f.__id.eq('331e62d2-072e-58ac-9581-74abcc67f050')).first();\n    const user = await System.users.search().where(f =\u003e f.groupIds.has(supervisor)).first();\n    const staff = await Context.fields.organization_head.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(user)))\n        .first();\n    Context.data.organization_head_user = user;\n    Context.data.organization_head = staff;\n}\n","gatewayPairs":{},"hasTranslations":false}
