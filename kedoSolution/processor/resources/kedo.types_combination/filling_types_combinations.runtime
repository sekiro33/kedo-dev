{"scripts":"let types = [\n    {\n        code: 'performance_employee_duties',\n        need_memo: true,\n        name: 'Исполнение обязанностей сотрудника',\n    },\n    {\n        code: 'combining_positions',\n        need_memo: true,\n        name: 'Совмещение должностей',\n    },\n    {\n        code: 'expansion_service_areas',\n        need_memo: true,\n        name: 'Расширение зон обслуживания',\n    },\n    {\n        code: 'substitution_only',\n        need_memo: true,\n        name: 'Только замещение',\n    }\n];\nasync function set_types() {\n    const types_code = types.map(f =\u003e f.code);\n    const all_types = await Application.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.in(types_code)))\n        .size(10000)\n        .all();\n    let promises = [];\n    for (const type of types) {\n        if (all_types.find(f =\u003e f.data.code == type.code)) {\n            continue;\n        }\n        const new_type = Application.create();\n        new_type.data.__name = type.name;\n        new_type.data.code = type.code;\n        new_type.data.need_memo = type.need_memo;\n        promises.push(new_type.save());\n        if (promises.length \u003e 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\n","gatewayPairs":{},"hasTranslations":false}
