{"scripts":"async function getKedoSettings() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const alternative_integration = settings.find(f =\u003e f.data.code == \"use_alternative_integration\");\n    Context.data.alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n    const integration_1c = settings.find(f =\u003e f.data.code == \"integration_1c\");\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n}\nasync function checkIntegrationApp() {\n    if (!Context.data.integration_app) {\n        Context.data.error = `Отсутствует приложениt интеграции. Context.data.integration_app is undefined`;\n        throw new Error(Context.data.error);\n    }\n}\nasync function checkPrintFormsTable() {\n    if (!Context.data.print_forms_table || Context.data.print_forms_table.length == 0) {\n        return false;\n    }\n    return true;\n}\nasync function prepareDocuments() {\n    const print_forms_table = Context.data.print_forms_table;\n    const doc_types = await Namespace.app.document_types.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    for (const row of print_forms_table) {\n        const doc_type = doc_types.find(f =\u003e f.id == row.doc_type_1c.id);\n        const app_code = doc_type.data.app_code;\n        if (Context.fields[`${app_code}_file`]) {\n            Context.data[`${app_code}_file`] = row.print_form;\n        }\n        if (app_code === \"additional_agreement\") {\n            push_additional_agreement(row.print_form);\n        }\n        if (app_code == \"additional_agreement_to_the_contract\") {\n            push_other_doc(row.print_form);\n        }\n    }\n}\nfunction push_additional_agreement(file) {\n    const additional_agreement_table = Context.data.additional_agreement_table;\n    const row = additional_agreement_table.insert();\n    row.file = file;\n}\nfunction push_other_doc(file) {\n    const other_docs_table = Context.data.other_docs_table;\n    const row = other_docs_table.insert();\n    row.doc_file = file;\n}\nasync function fillResponsibleFio() {\n    if (!Context.data.hr) {\n        throw new Error(\"Кадровый сотрудник не определен. Context.data.hr is undefined\");\n    }\n    const responsible = await Context.data.hr.fetch();\n    const full_name = responsible.data.fullname;\n    const formatted_name = responsible.data.responsible = (full_name === null || full_name === void 0 ? void 0 : full_name.middlename) ?\n        `${full_name === null || full_name === void 0 ? void 0 : full_name.lastname} ${full_name === null || full_name === void 0 ? void 0 : full_name.firstname[0]}. ${full_name === null || full_name === void 0 ? void 0 : full_name.middlename[0]}.` :\n        `${full_name === null || full_name === void 0 ? void 0 : full_name.lastname} ${full_name === null || full_name === void 0 ? void 0 : full_name.firstname[0]}`;\n    Context.data.responsible_fio = formatted_name;\n}\nasync function getDocumentsSettings() {\n    const settings = await Namespace.app.settings.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null))).size(10000).all();\n    const app_employment = settings.find(f =\u003e f.data.code == 'app_employment');\n    Context.data.job_application_required = app_employment ? app_employment.data.status : false;\n    const admission_order = settings.find(f =\u003e f.data.code == 'admission_order');\n    Context.data.admission_order_required = admission_order ? admission_order.data.status : false;\n    const app_labor = settings.find(f =\u003e f.data.code == 'information_about_labor_activity');\n    Context.data.information_about_labor_activity_required = app_labor ? app_labor.data.status : false;\n}\nasync function resetCounter() {\n    Context.data.counter = 0;\n}\nasync function incCounter() {\n    Context.data.counter += 1;\n}\nasync function checkAdditionalAgreementTable() {\n    const counter = Context.data.counter;\n    if (!Context.data.additional_agreement_table || Context.data.additional_agreement_table.length == 0) {\n        return false;\n    }\n    if (Context.data.additional_agreement_table.length \u003e counter) {\n        return true;\n    }\n    return false;\n}\nasync function checkOtherDocsTable() {\n    const counter = Context.data.counter;\n    if (!Context.data.other_docs_table || Context.data.other_docs_table.length == 0) {\n        return false;\n    }\n    if (Context.data.other_docs_table.length \u003e counter) {\n        return true;\n    }\n    return false;\n}\nasync function getAdditionalAgreement() {\n    const counter = Context.data.counter;\n    const additional_agreement_table = Context.data.additional_agreement_table;\n    const row = additional_agreement_table[counter];\n    Context.data.file = row.file;\n}\nasync function getOtherDoc() {\n    const counter = Context.data.counter;\n    const other_docs_table = Context.data.other_docs_table;\n    const row = other_docs_table[counter];\n    Context.data.file = row.doc_file;\n}\nasync function getLaborContractNumber() {\n}\nasync function getAdmissionOrderNumber() {\n}\nasync function clearTables() {\n    Context.data.additional_agreement_table = Context.fields.additional_agreement_table.create();\n    Context.data.other_docs_table = Context.fields.other_docs_table.create();\n}\nasync function getStaffEmploymentPlacement() {\n    if (!Context.data.staff) {\n        throw new Error(\"Сотрудник не указан\");\n    }\n    const staff = await Context.data.staff.fetch();\n    const employment_table = staff.data.employment_table;\n    if (!employment_table || employment_table.length == 0) {\n        throw new Error(\"У сотрудника не заполнена таблица занятости\");\n    }\n    const employment_placement = employment_table[0].employment_placement_app;\n    if (!employment_placement) {\n        throw new Error(\"В таблице занятости отсуствует ссылка на элемент справочника занятости\");\n    }\n    Context.data.employment_placement = employment_placement;\n}\n","gatewayPairs":{"/items/cd030c28-f004-4ca5-9d42-683c73c5d031":"/items/2479a225-96e6-4886-a9fc-8c01bb6e040d"},"hasTranslations":false}
