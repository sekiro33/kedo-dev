{"scripts":"async function getSettings() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const integration_1c = settings.find(f =\u003e f.data.code == 'integration_1c');\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.use_alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n    Context.data.counter = 0;\n    const deadline_candidate_task_sign_employment_documents = settings.find(f =\u003e f.data.code == 'deadline_candidate_task_sign_employment_documents');\n    let term_signing;\n    if (deadline_candidate_task_sign_employment_documents \u0026\u0026 deadline_candidate_task_sign_employment_documents.data.quantity) {\n        term_signing = await System.productionSchedule.calcDate(new Datetime(), new Duration(deadline_candidate_task_sign_employment_documents.data.quantity, 'hours'));\n    }\n    else {\n        term_signing = await System.productionSchedule.calcDate(new Datetime(), new Duration(16, 'hours'));\n    }\n    Context.data.term_signing = term_signing;\n    Context.data.docs = [];\n    const contract = await Namespace.app.labor_contract.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.kedo_staff), f.__status.neq(Namespace.app.labor_contract.fields.__status.variants.removed), f.__status.neq(Namespace.app.labor_contract.fields.__status.variants.signed)))\n        .first();\n    Context.data.docs = Context.data.docs.concat(contract || []);\n    const admission_order = await Namespace.app.admission_order.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.kedo_staff), f.__status.neq(Namespace.app.admission_order.fields.__status.variants.removed), f.__status.neq(Namespace.app.admission_order.fields.__status.variants.signed)))\n        .first();\n    Context.data.docs = Context.data.docs.concat(admission_order || []);\n    const app_information_labor_activity = await Namespace.app.information_about_labor_activity.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.kedo_staff), f.__status.neq(Namespace.app.information_about_labor_activity.fields.__status.variants.removed), f.__status.neq(Namespace.app.information_about_labor_activity.fields.__status.variants.signed)))\n        .first();\n    Context.data.docs = Context.data.docs.concat(app_information_labor_activity || []);\n    const consent_processing_personal_data = await Namespace.app.consent_processing_personal_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.kedo_staff), f.__status.neq(Namespace.app.information_about_labor_activity.fields.__status.variants.signed)))\n        .first();\n    Context.data.docs = Context.data.docs.concat(consent_processing_personal_data || []);\n    const other_docs = await Namespace.app.additional_agreement_to_the_contract.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.kedo_staff), f.doc_type.neq(null), f.__status.neq(Namespace.app.additional_agreement_to_the_contract.fields.__status.variants.removed), f.__status.neq(Namespace.app.additional_agreement_to_the_contract.fields.__status.variants.signed)))\n        .size(10000)\n        .all();\n    const typesDocs = await Namespace.app.types_other_employment_docs.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const myOtherDocs = other_docs.filter(f =\u003e {\n        const myType = typesDocs.find(i =\u003e i.id == f.data.doc_type.id);\n        if (myType)\n            return f;\n    });\n    Context.data.docs = Context.data.docs.concat(myOtherDocs || []);\n    const additional_agreement = await Namespace.app.additional_agreement.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.kedo_staff), f.__status.neq(Namespace.app.additional_agreement.fields.__status.variants.signed)))\n        .size(10000)\n        .all();\n    Context.data.docs = Context.data.docs.concat(additional_agreement || []);\n    const staff = await Context.data.kedo_staff.fetch();\n    Context.data.sign_type = staff.data.docs_signing_type.code === \"goskey\" ? Context.fields.sign_type.variants.goskey : Context.fields.sign_type.variants.inner_sign;\n}\nasync function setXML() {\n    const doc = await Context.data.doc.fetch();\n    doc.data.xml_file = Context.data.xml;\n    await doc.save();\n}\nasync function getDoc() {\n    if (!Context.data.docs)\n        return false;\n    const countFiles = Context.data.docs.length;\n    if (Context.data.counter \u003c countFiles) {\n        Context.data.doc = Context.data.docs[Context.data.counter];\n        Context.data.counter++;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function set_line_status() {\n    const doc = await Context.data.doc.fetch();\n    doc.data.line_status = `${doc.data.__status.code};${doc.data.__status.name}`;\n    await doc.save();\n}\nasync function set_status() {\n    const doc = await Context.data.doc.fetch();\n    await doc.setStatus(doc.fields.__status.variants.signed);\n}\n","gatewayPairs":{},"hasTranslations":false}
