{"scripts":"async function checkUserProfile() {\n    if (!Context.data.staff) {\n        throw new Error(\"Не указан сотрудник. Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.ext_user) {\n        staff.data.user_already_exists = true;\n        await staff.save();\n    }\n}\nasync function getSettings() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const alternative_user_creation = settings.find(f =\u003e f.data.code == 'alternative_user_creation');\n    Context.data.alternative_user_creation = alternative_user_creation ? alternative_user_creation.data.status : false;\n}\nasync function linkForUser() {\n    try {\n        const staff = await Context.data.staff.fetch();\n        const ext_user = Context.fields.external_staff.app.create();\n        ext_user.data.__name = staff.data.__name;\n        ext_user.data.fullname = {\n            firstname: staff.data.full_name.firstname,\n            lastname: staff.data.full_name.lastname,\n            middlename: staff.data.full_name.middlename ? staff.data.full_name.middlename : ''\n        };\n        ext_user.data.phone = (ext_user.data.phone || []).concat(staff.data.phone);\n        if (ext_user.data.phone \u0026\u0026 ext_user.data.phone.length \u003e 0) {\n            ext_user.data.phone.forEach(phone =\u003e phone.type = PhoneType.Mobile);\n        }\n        ;\n        if (staff.data.email) {\n            ext_user.data.email = staff.data.email.email;\n        }\n        await ext_user.save();\n        const portal = await System.portals.get('kedo_ext');\n        await portal.grantAccess(ext_user);\n        const user = await portal.addUser(ext_user);\n        const link = await portal.signupUrl(ext_user, { withSign: true, refresh: true });\n        staff.data.external_user = (staff.data.external_user || []).concat(ext_user);\n        staff.data.ext_user = user;\n        staff.data.const_invitation_link = link;\n        await staff.save();\n        Context.data.external_staff = ext_user;\n        Context.data.ext_user = user;\n        Context.data.invitation_link_for_new_user = staff.data.const_invitation_link;\n    }\n    catch (err) {\n        Context.data.error_string = `Ошибка создания внешнего пользователя: ${err.message}`;\n        throw new Error(\"Ошибка создания внешнего пользователя: \" + err.message);\n    }\n}\nasync function addPortalUser() {\n    if (!Context.data.staff) {\n        throw new Error(\"Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    const ext_user_app = staff.data.external_user[0];\n    const portal = await System.portals.get('kedo_ext');\n    await portal.grantAccess(ext_user_app);\n    const user = await portal.profiles.getUser(ext_user_app);\n    staff.data.ext_user = user;\n    await staff.save();\n    const ext_user = await ext_user_app.fetch();\n    if (ext_user.data.__user_status \u0026\u0026 ext_user.data.__user_status.code === ext_user.fields.__user_status.variants.not_registered.code) {\n        Context.data.invitation_link_for_new_user = await portal.signupUrl(ext_user, { withSign: true, refresh: true });\n    }\n    Context.data.external_staff = ext_user_app;\n    Context.data.ext_user = user;\n}\nasync function aboutRegistrationClients() {\n    const active = await Context.data.external_staff.fetch();\n    if (active.data.__user_status \u0026\u0026 active.data.__user_status.code === active.fields.__user_status.variants.active.code) {\n        return true;\n    }\n    return false;\n}\nasync function notificationCheck() {\n    const worker = await Context.data.staff.fetch();\n    if (worker.data.notification.code == worker.fields.notification.variants.sms.code) {\n        return true;\n    }\n    return false;\n}\nasync function user_create() {\n    var _a;\n    if (!Context.data.staff) {\n        throw new Error(\"staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    let newUser = System.users.create();\n    newUser.data.fullname = {\n        firstname: staff.data.full_name.firstname,\n        lastname: staff.data.full_name.lastname,\n        middlename: (_a = staff.data.full_name.middlename) !== null \u0026\u0026 _a !== void 0 ? _a : \"\",\n    };\n    newUser.data.mobilePhone = { type: PhoneType.Mobile, tel: staff.data.phone.tel };\n    if (staff.data.email) {\n        newUser.data.email = staff.data.email.email;\n    }\n    await newUser.save();\n    staff.data.ext_user = newUser;\n    await staff.save();\n    Context.data.ext_user = newUser;\n}\nasync function interlal_user_link() {\n    const user = await Context.data.staff.fetch();\n    const entity = await user.data.organization.fetch();\n    Context.data.alert = `Приглашаем вас на портал обмена кадровыми электронными документами ${entity === null || entity === void 0 ? void 0 : entity.data.__name}.\n        На портале вы сможете создавать и подписывать кадровые документы в электронном виде.\n        Перейдите по ссылке и пройдите процедуру регистрации на портале.`;\n}\nasync function exist_user_link() {\n    const user = await Context.data.staff.fetch();\n    const entity = await user.data.organization.fetch();\n    Context.data.alert = `Приглашаем вас на портал обмена кадровыми электронными документами ${entity === null || entity === void 0 ? void 0 : entity.data.__name}.\n        На портале вы сможете создавать и подписывать кадровые документы в электронном виде.\n        Перейдите по ссылке и пройдите процедуру регистрации на портале.`;\n}\nasync function addUserToGroup() {\n    const user = await Context.data.ext_user.fetch();\n    const staff = await Context.data.staff.fetch();\n    const readPermission = [new PermissionValue(user, [PermissionType.READ, PermissionType.ASSIGN, PermissionType.UPDATE])];\n    await staff.setPermissions(new Permissions(readPermission));\n    if (Context.data.access_portal == true) {\n        const kedoUsersGroup = await System.userGroups.search().where(f =\u003e f.__name.eq(\"Внешние сотрудники организации\")).first();\n        if (!kedoUsersGroup) {\n            return;\n        }\n        ;\n        const kedoGroupUsers = await kedoUsersGroup.users(0, 1000);\n        if (kedoGroupUsers.map(u =\u003e u.id).indexOf(user.id) === -1) {\n            await kedoUsersGroup.addItem(user);\n        }\n    }\n    else {\n        const kedoUsersGroup = await System.userGroups.search().where(f =\u003e f.__name.eq(\"Внутренние сотрудники организации\")).first();\n        if (!kedoUsersGroup) {\n            return;\n        }\n        ;\n        const kedoGroupUsers = await kedoUsersGroup.users(0, 1000);\n        if (kedoGroupUsers.map(u =\u003e u.id).indexOf(user.id) === -1) {\n            await kedoUsersGroup.addItem(user);\n        }\n        ;\n    }\n    let userIsHrOrAccounting = false;\n    if (staff.data.position \u0026\u0026 staff.data.organization) {\n        const organization = await staff.data.organization.fetch();\n        const hrPositions = organization.data.hr_department_positions ? organization.data.hr_department_positions.map(pos =\u003e pos.id) : undefined;\n        const accountingPositions = organization.data.accounting_positions ? organization.data.accounting_positions.map(pos =\u003e pos.id) : undefined;\n        if (hrPositions) {\n            const userIsHr = hrPositions.indexOf(staff.data.position.id) != -1;\n            if (userIsHr) {\n                const hrGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"abdecf4b-b6ba-419f-bac7-c1455d2a6159\"))).first();\n                if (hrGroup) {\n                    userIsHrOrAccounting = true;\n                    if (!organization.data.hr_department || organization.data.hr_department.length \u003c 1) {\n                        organization.data.hr_department = [staff];\n                    }\n                    else {\n                        organization.data.hr_department.push(staff);\n                    }\n                    ;\n                    await organization.save();\n                    const hrUsers = await hrGroup.users(0, 1000);\n                    if (hrUsers.map(u =\u003e u.id).indexOf(user.id) === -1) {\n                        await hrGroup.addItem(user);\n                        await hrGroup.save();\n                    }\n                    ;\n                }\n                ;\n            }\n            ;\n        }\n        else if (accountingPositions) {\n            const userIsAccounting = accountingPositions.indexOf(staff.data.position.id) != -1;\n            if (userIsAccounting) {\n                const accountingGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"dfede5be-5011-4ec9-b535-8c9ca3fc4d19\"))).first();\n                if (accountingGroup) {\n                    if (!organization.data.accounting || organization.data.accounting.length \u003c 1) {\n                        organization.data.accounting = [staff];\n                    }\n                    else {\n                        organization.data.accounting.push(staff);\n                    }\n                    ;\n                    userIsHrOrAccounting = true;\n                    await organization.save();\n                    const accountingUsers = await accountingGroup.users(0, 1000);\n                    if (accountingUsers.map(u =\u003e u.id).indexOf(user.id) === -1) {\n                        await accountingGroup.addItem(user);\n                        await accountingGroup.save();\n                    }\n                    ;\n                }\n                ;\n            }\n        }\n    }\n    ;\n}\n;\nasync function updateUserData() {\n    var _a, _b;\n    if (!Context.data.staff) {\n        throw new Error('Отсутствует карточка пользователя.');\n    }\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.ext_user) {\n        const ext_user = await staff.data.ext_user.fetch();\n        if (!Context.data.external_user_app \u0026\u0026 ext_user) {\n            if (ext_user.data.mobilePhone) {\n                ext_user.data.mobilePhone.tel = staff.data.phone.tel;\n                ext_user.data.mobilePhone.ext = staff.data.phone.ext;\n            }\n            else {\n                ext_user.data.mobilePhone = {\n                    tel: staff.data.phone.tel,\n                    type: PhoneType.Mobile,\n                };\n            }\n            if (ext_user.data.email) {\n                ext_user.data.email = (_a = staff.data.email) === null || _a === void 0 ? void 0 : _a.email;\n            }\n            await ext_user.save();\n        }\n        if (Context.data.external_user_app \u0026\u0026 ext_user) {\n            const external_user = await Context.data.external_user_app.fetch();\n            if (external_user) {\n                if (external_user.data.mobilePhone) {\n                    external_user.data.mobilePhone.tel = staff.data.phone.tel;\n                    external_user.data.mobilePhone.ext = staff.data.phone.ext;\n                }\n                else {\n                    external_user.data.mobilePhone = {\n                        tel: staff.data.phone.tel,\n                        type: PhoneType.Mobile,\n                    };\n                }\n                if (external_user.data.email) {\n                    external_user.data.email = (_b = staff.data.email) === null || _b === void 0 ? void 0 : _b.email;\n                }\n                await external_user.save();\n            }\n        }\n    }\n}\nasync function setContextStaff() {\n    if (!Context.data.staff) {\n        throw new Error('staff is required');\n    }\n    const staff = await Context.data.staff.fetch();\n    if (Context.data.user_already_exists == true) {\n        staff.data.user_created = true;\n        Context.data.user_created = true;\n        await staff.save();\n    }\n    else {\n        staff.data.user_created = false;\n        Context.data.user_created = false;\n        await staff.save();\n    }\n}\nasync function checkTypeUser() {\n    if (!Context.data.staff) {\n        throw new Error('staff is required');\n    }\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.external_user \u0026\u0026 staff.data.external_user.length \u003e 0) {\n        return true;\n    }\n    return false;\n}\nasync function checkLoginExternalUser() {\n    if (!Context.data.staff) {\n        throw new Error('staff is required');\n    }\n    const staff = await Context.data.staff.fetch();\n    const status_external_user = await staff.data.external_user[0].fetch();\n    if (status_external_user.data.__user_status \u0026\u0026 status_external_user.data.__user_status.code == \"active\") {\n        Context.data.is_login_user = true;\n        return true;\n    }\n    return false;\n}\nasync function checkLoginExtUser() {\n    if (!Context.data.staff) {\n        throw new Error('staff is required');\n    }\n    const staff = await Context.data.staff.fetch();\n    const status_ext_user = await staff.data.ext_user.fetch();\n    if (status_ext_user.data.__status \u0026\u0026 status_ext_user.data.__status.id == UserStatus.Active) {\n        Context.data.is_login_user = true;\n        return true;\n    }\n    return false;\n}\nasync function interruptProcess() {\n    const staff = await Context.data.staff.fetch();\n    const active_process = await Application.processes.Employment._searchInstances()\n        .where((f, g) =\u003e g.and(g.or(f.__state.like(ProcessInstanceState.exec), f.__state.like(ProcessInstanceState.error), f.__state.like(ProcessInstanceState.wait)), f['__item'].eq(Context.data.staff))).size(100).all();\n    if (active_process) {\n        for (let process of active_process) {\n            await process.interrupt(`Не зарегистрированный пользователь ${staff.data.__name} приглашен снова`);\n        }\n    }\n}\nasync function distributionOrgGroups() {\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 1 \u0026\u0026 staff.data.ext_user) {\n        const orgs = staff.data.employment_table.map(row =\u003e row.organization.id);\n        const orgsWithAccessRights = await Context.fields.staff.app.fields.organization.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(orgs), f.access_settings_organization.neq(null))).size(10000).all();\n        const orgsAccessSettings = await Promise.all(orgsWithAccessRights.map(org =\u003e org.data.access_settings_organization.fetch())).then(accessSettings =\u003e accessSettings.filter(setting =\u003e setting.data.staff));\n        for (let orgRights of orgsAccessSettings) {\n            if (staff.data.staff_access == false \u0026\u0026 orgRights) {\n                if (!orgRights.data.inner_org_users || orgRights.data.inner_org_users.length \u003c 1) {\n                    continue;\n                }\n                ;\n                const group = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(orgRights.data.inner_org_users[0].code))).first();\n                const innerUsersGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"04df3ffc-9921-4854-abe1-59ec199212ae\"))).first();\n                if (innerUsersGroup) {\n                    const innerGroupUsers = await innerUsersGroup.users(0, 1000);\n                    if (innerGroupUsers.map(u =\u003e u.id).indexOf(staff.data.ext_user.id) === -1) {\n                        await innerUsersGroup.addItem(staff.data.ext_user);\n                        await innerUsersGroup.save();\n                    }\n                    ;\n                }\n                ;\n                if (group) {\n                    const groupUsers = await group.users(0, 1000);\n                    if (groupUsers.map(u =\u003e u.id).indexOf(staff.data.ext_user.id) === -1) {\n                        await group.addItem(staff.data.ext_user);\n                        await group.save();\n                    }\n                    ;\n                }\n            }\n            else {\n                if (!orgRights.data.external_org_users || orgRights.data.external_org_users.length \u003c 1) {\n                    continue;\n                }\n                ;\n                const extUsersGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"e50cb6cb-ea63-4d4e-8585-eb234a070256\"))).first();\n                if (extUsersGroup) {\n                    const extGroupUsers = await extUsersGroup.users(0, 1000);\n                    if (extGroupUsers.map(u =\u003e u.id).indexOf(staff.data.ext_user.id) === -1) {\n                        await extUsersGroup.addItem(staff.data.ext_user);\n                        await extUsersGroup.save();\n                    }\n                    ;\n                }\n                ;\n                const group = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(orgRights.data.external_org_users[0].code))).first();\n                if (group) {\n                    const groupUsers = await group.users(0, 1000);\n                    if (groupUsers.map(u =\u003e u.id).indexOf(staff.data.ext_user.id) === -1) {\n                        await group.addItem(staff.data.ext_user);\n                        await group.save();\n                    }\n                    ;\n                }\n                ;\n            }\n            ;\n        }\n    }\n    ;\n}\n","gatewayPairs":{},"hasTranslations":false}
