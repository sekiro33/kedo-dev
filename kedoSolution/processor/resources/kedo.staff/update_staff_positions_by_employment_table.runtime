{"scripts":"async function update_positions() {\n    const staff = await Context.data.staff.fetch();\n    const employment_table = staff.data.employment_table;\n    if (!employment_table || employment_table.length == 0) {\n        return;\n    }\n    const staff_position = await Namespace.app.position.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), g.or(f.staff.has(staff), f.staff_internal_combination.has(staff), f.staff_external_combination.has(staff)))).size(10000).all();\n    await Promise.all(staff_position.map(f =\u003e {\n        const main_pos_index = f.data.staff.findIndex(f =\u003e f.id == staff.id);\n        const external_pos_index = f.data.staff_external_combination.findIndex(f =\u003e f.id == staff.id);\n        const internal_pos_index = f.data.staff_internal_combination.findIndex(f =\u003e f.id == staff.id);\n        if (main_pos_index != -1) {\n            f.data.staff.splice(main_pos_index, 1);\n        }\n        if (external_pos_index != -1) {\n            f.data.staff_external_combination.splice(external_pos_index, 1);\n        }\n        if (internal_pos_index != -1) {\n            f.data.staff_internal_combination.splice(internal_pos_index, 1);\n        }\n        return f.save();\n    }));\n    const positions = await Promise.all(employment_table.map(f =\u003e f.position.fetch()));\n    const combination = positions.map(f =\u003e {\n        var _a;\n        return {\n            position: f,\n            type_employment: (_a = employment_table.find(e =\u003e e.position.id == f.id)) === null || _a === void 0 ? void 0 : _a.type_employment.code\n        };\n    });\n    if (staff.data.__status \u0026\u0026 staff.data.__status.code == \"dismissed\") {\n        await Promise.all(combination.map(f =\u003e {\n            if (f.type_employment == 'main_workplace') {\n                f.position.data.old_staff.push(staff);\n            }\n            if (f.type_employment == 'internal_combination') {\n                f.position.data.old_staff_internal_combination.push(staff);\n            }\n            if (f.type_employment == 'external_combination') {\n                f.position.data.old_staff_external_combination.push(staff);\n            }\n            return f.position.save();\n        }));\n    }\n    else {\n        await Promise.all(combination.map(f =\u003e {\n            if (f.type_employment == 'main_workplace') {\n                f.position.data.staff.push(staff);\n            }\n            if (f.type_employment == 'internal_combination') {\n                f.position.data.staff_internal_combination.push(staff);\n            }\n            if (f.type_employment == 'external_combination') {\n                f.position.data.staff_external_combination.push(staff);\n            }\n            return f.position.save();\n        }));\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
