{"scripts":"async function getKedoSettings() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const integration_1c = settings.find(f =\u003e f.data.code == 'integration_1c');\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const app_employment = settings.find(f =\u003e f.data.code == 'app_employment');\n    Context.data.app_employment = app_employment ? app_employment.data.status : true;\n    const admission_order = settings.find(f =\u003e f.data.code == 'admission_order');\n    Context.data.create_admission_order = admission_order ? admission_order.data.status : true;\n    const app_labor = settings.find(f =\u003e f.data.code == 'information_about_labor_activity');\n    Context.data.create_app_labor = app_labor ? app_labor.data.status : true;\n    const castome_generation = settings.find(f =\u003e f.data.code == 'generation_labor_documents');\n    Context.data.castome_generation = castome_generation ? castome_generation.data.status : false;\n    const additional_documents = settings.find(f =\u003e f.data.code == 'additional_documents_for_employment');\n    Context.data.additional_documents_for_employment = additional_documents ? additional_documents.data.status : false;\n    const checking_generated_documents = settings.find(f =\u003e f.data.code == 'checking_generated_documents');\n    Context.data.checking_generated_documents = checking_generated_documents ? checking_generated_documents.data.status : false;\n}\nasync function setTemplateParams() {\n    Context.data.current_date = new Datetime().format('DD.MM.YYYY');\n    Context.data.counter = 0;\n    if (!Context.data.staff) {\n        throw new Error(\"Приложение сотрудника отсутствует. Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    Context.data.is_employed = staff.data.is_employed;\n    const consent_processing_personal_data = await Context.fields.consent_processing_personal_data.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff))).first();\n    Context.data.need_consent_processing_personal_data = (consent_processing_personal_data == undefined);\n    const region = staff.data.directory_of_regions ? `${(await staff.data.directory_of_regions.fetch()).data.__name},` : ``;\n    const housing = staff.data.housing ? ` к.${staff.data.housing}` : ``;\n    const apartment = staff.data.apartment ? ` кв.${staff.data.apartment}` : ``;\n    staff.data.address = `${region} ${staff.data.city}, ${staff.data.street}, д.${staff.data.home}${housing}${apartment}`.trim();\n    await staff.save();\n}\nasync function fillOtherDocsTable() {\n    if (!Context.data.files_other_docs || Context.data.files_other_docs.length == 0) {\n        return;\n    }\n    for (const file of Context.data.files_other_docs) {\n        const row = Context.data.other_docs.insert();\n        row.view_file = file;\n        row.doc_file = file;\n    }\n}\nasync function deleteOldOtherDocs() {\n    const oldOtherDocs = await Namespace.app.additional_agreement_to_the_contract.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff), f.__status.neq(Namespace.app.additional_agreement_to_the_contract.fields.__status.variants.removed), f.__status.neq(Namespace.app.additional_agreement_to_the_contract.fields.__status.variants.signed)))\n        .size(10000)\n        .all();\n    if (oldOtherDocs \u0026\u0026 oldOtherDocs.length \u003e 0) {\n        await Promise.all(oldOtherDocs.map(f =\u003e f.delete()));\n    }\n}\nasync function setLaborContractNumber() {\n    if (!Context.data.labor_contract) {\n        throw new Error(\"Отсутствует трудовой договор. Context.data.labor_contract is undefined\");\n    }\n    if (Context.data.labor_contract_number) {\n        return;\n    }\n    const labor_contract = await Context.data.labor_contract.fetch();\n    if (labor_contract.data.__index) {\n        Context.data.labor_contract_number = labor_contract.data.__index.toString();\n    }\n    else {\n        Context.data.labor_contract_number = \"1\";\n    }\n}\nasync function setAdmissionOrderNumber() {\n    if (!Context.data.admission_order) {\n        throw new Error(\"Отсутствует приказ о приеме. Context.data.admission_order is undefined\");\n    }\n    if (Context.data.admission_order_number) {\n        return;\n    }\n    const admission_order = await Context.data.admission_order.fetch();\n    if (admission_order.data.__index) {\n        Context.data.admission_order_number = admission_order.data.__index.toString();\n    }\n    else {\n        Context.data.admission_order_number = \"1\";\n    }\n}\nasync function checkAdditionalAgreementTable() {\n    if (Context.data.additional_contract_table[Context.data.counter]) {\n        return true;\n    }\n    return false;\n}\nasync function getAdditionalAgreementFile() {\n    const file = await Context.data.additional_contract_table[Context.data.counter].file.fetch();\n    Context.data.file_name = file.data.__name.replace(/\\.[^.$]+$/, '');\n    Context.data.document_file = file;\n}\nasync function check_other_docs_table() {\n    if (Context.data.other_docs[Context.data.counter]) {\n        return true;\n    }\n    return false;\n}\nasync function getOtherDocFile() {\n    const row = Context.data.other_docs[Context.data.counter];\n    const file = await row.doc_file.fetch();\n    Context.data.file_name = file.data.__name.replace(/\\.[^.$]+$/, '');\n    Context.data.document_file = file;\n    Context.data.other_docs_employment_type = row.doc_type;\n}\nasync function incCounter() {\n    Context.data.counter += 1;\n}\nasync function resetCounter() {\n    Context.data.counter = 0;\n}\nasync function getResponsible() {\n    if (!Context.data.staff_member) {\n        return;\n    }\n    const staff_member = await Context.data.staff_member.fetch();\n    const full_name = staff_member.data.fullname;\n    if (full_name \u0026\u0026 full_name.middlename) {\n        Context.data.responsible_fullname = `${full_name.lastname} ${full_name.firstname[0]}. ${full_name.middlename[0]}.`;\n    }\n    else if (full_name) {\n        Context.data.responsible_fullname = `${full_name.lastname} ${full_name.firstname[0]}.`;\n    }\n}\nasync function setStatus() {\n    if (!Context.data.staff) {\n        throw new Error(\"Отсутствует карточка сотрудника. Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    if (!staff.data.documents_employment || staff.data.documents_employment.length == 0) {\n        return;\n    }\n    const employment_documents = await Promise.all(staff.data.documents_employment.map(doc =\u003e doc.fetch()));\n    const promises = [];\n    for (const doc of employment_documents) {\n        if (!doc.data.__sourceRef) {\n            continue;\n        }\n        const source = await doc.data.__sourceRef.fetch();\n        const statuses = source.fields.__status.all;\n        const status = statuses.find((i) =\u003e i.code == \"new\");\n        if (!status) {\n            continue;\n        }\n        await source.setStatus(status);\n        source.line_status = `${status.code};${status.name}`;\n        promises.push(source.save());\n    }\n    await Promise.all(promises);\n}\nasync function addAdditionalAgreementToEmploymentApp() {\n    const employmentApp = await Context.data.aggregation_app.fetch();\n    if (!employmentApp.data.dopolnitelnoe_soglashenie || employmentApp.data.dopolnitelnoe_soglashenie.length) {\n        employmentApp.data.dopolnitelnoe_soglashenie = [];\n    }\n    ;\n    employmentApp.data.dopolnitelnoe_soglashenie.push(Context.data.additional_agreement);\n    await employmentApp.save();\n}\nasync function addOtherDocumentToEmploymentApp() {\n    const employmentApp = await Context.data.aggregation_app.fetch();\n    if (!employmentApp.data.other_documents || employmentApp.data.other_documents.length) {\n        employmentApp.data.other_documents = [];\n    }\n    ;\n    employmentApp.data.other_documents.push(Context.data.other_docs_employment);\n    await employmentApp.save();\n}\nasync function checkAggregateApp() {\n    if (!Context.data.aggregation_app) {\n        return false;\n    }\n    ;\n    return true;\n}\nasync function generateAppName() {\n    const staff = await Context.data.staff.fetch();\n    const name = staff.data.__name;\n    const appName = `Документы трудоустройства (${name})`;\n    Context.data.app_name = appName;\n}\nasync function setIdProcess() {\n    if (Context.data.staff) {\n        const staff = await Context.data.staff.fetch();\n        if (staff \u0026\u0026 staff.data.id_process_recruitment \u0026\u0026 staff.data.id_process_recruitment.length \u003e 0) {\n            staff.data.id_process_recruitment += ',' + Context.data.__id;\n        }\n        else {\n            staff.data.id_process_recruitment = Context.data.__id;\n        }\n        await staff.save();\n    }\n}\n","gatewayPairs":{"/items/1573dfdf-5b7d-41aa-b6f4-af1e3f80f1fd":"/items/d3302dc9-d355-4f80-ad07-e6933d7c52e6"},"hasTranslations":false}
