{"scripts":"async function staff_add_category() {\n    const staff = await Context.data.staff.fetch();\n    const application = await Context.data.category_assignment.fetch();\n    const category = await application.data.staff_category.fetch();\n    const row = staff.data.categories_table.insert();\n    row.staff_categories = application.data.staff_category;\n    row.expiration_date = Context.data.expiration_date;\n    row.assignment_date = new TDate();\n    if (category.data.possibility_overtime_work)\n        staff.data.refuse_overtime_work_noticed = false;\n    await staff.save();\n    Context.data.alert_body = `Вам присвоена категория ${(await application.data.staff_category.fetch()).data.__name}`;\n    if (category.data.code == 'invalid_child') {\n        if (application.data.residence_child_confirmation) {\n            let app = Context.fields.personal_documents.app.create();\n            app.data.staff = staff;\n            app.data.type_personal_documents = await Context.fields.personal_documents.app.fields.type_personal_documents.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__name.eq('Документ о месте жительства ребёнка-инвалида'))).first();\n            app.data.__file = application.data.residence_child_confirmation;\n            if (application.data.information_about_child) {\n                app.data.family_composition = application.data.information_about_child;\n            }\n            await app.save();\n        }\n        if (application.data.medical_disability_confirmation) {\n            let app = Context.fields.personal_documents.app.create();\n            app.data.staff = staff;\n            app.data.type_personal_documents = await Context.fields.personal_documents.app.fields.type_personal_documents.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__name.eq('Справка об установлении инвалидности'))).first();\n            app.data.__file = application.data.medical_disability_confirmation;\n            app.data.expiration_date = Context.data.validity_period_isability_certificate;\n            if (application.data.information_about_child) {\n                app.data.family_composition = application.data.information_about_child;\n            }\n            await app.save();\n        }\n    }\n}\nasync function set_permissions() {\n    if (!Context.data.head_user) {\n        let staff = await Context.data.staff.fetch();\n        await staff.sendMessage('Отсутствует руководитель', 'Не удалось определить руководителя сотрудника');\n        return;\n    }\n    let app = await Context.data.category_assignment.fetch();\n    const props = Object.getOwnPropertyNames(app.fields);\n    await Promise.all(props.map(async (prop) =\u003e {\n        if (app.fields[prop].type \u0026\u0026 app.fields[prop].type == \"FILE\") {\n            if (app.data[prop]) {\n                if (app.data[prop].length != undefined) {\n                    for (let file of app.data[prop]) {\n                        let old_perms = await file.getPermissions();\n                        old_perms.values.push(new PermissionValue(Context.data.head_user, [PermissionType.READ]));\n                        await file.setPermissions(old_perms);\n                    }\n                }\n                else {\n                    let old_perms = await app.data[prop].getPermissions();\n                    old_perms.values.push(new PermissionValue(Context.data.head_user, [PermissionType.READ]));\n                    await app.data[prop].setPermissions(old_perms);\n                }\n            }\n        }\n    }));\n}\nasync function status_check() {\n    let app = await Context.data.application_category_assignment.fetch();\n    if (app.data.__status \u0026\u0026 app.data.__status.code === app.fields.__status.variants.removed.code)\n        return true;\n    else\n        return false;\n}\nasync function condition_check() {\n    let app = await Context.data.category_assignment.fetch();\n    let staff_category = await app.data.staff_category.fetch();\n    if (staff_category.data.perpetual == false) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function createStatusObj(app, status) {\n    const obj_status = {\n        'app': {\n            'namespace': app.namespace,\n            'code': app.code,\n            'id': app.id,\n        },\n        'status': status,\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function createStatusAssignmentCanceled() {\n    createStatusObj(Context.data.category_assignment, 'cancelled');\n}\nasync function createStatusAssignmentSigningApp() {\n    createStatusObj(Context.data.category_assignment, 'signing_application');\n}\nasync function createStatusCompleted() {\n    createStatusObj(Context.data.category_assignment, 'completed');\n}\nasync function createStatusPending() {\n    createStatusObj(Context.data.category_assignment, 'pending');\n}\nasync function createStatusApproval() {\n    createStatusObj(Context.data.category_assignment, 'approval');\n}\nasync function createStatusCorrection() {\n    createStatusObj(Context.data.category_assignment, 'correction');\n}\nasync function createStatusStatementCorrection() {\n    createStatusObj(Context.data.application_category_assignment, 'correction');\n}\nasync function createStatusStatementAgreedSigned() {\n    createStatusObj(Context.data.application_category_assignment, 'agreed_signed');\n}\nasync function createStatusStatementApproval() {\n    createStatusObj(Context.data.application_category_assignment, 'approval');\n}\n","gatewayPairs":{},"hasTranslations":false}
