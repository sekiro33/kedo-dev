{"scripts":"async function get_user() {\n    Context.data.external_user = Context.data.__createdBy;\n    const user = await Context.data.external_user.fetch();\n    Context.data.staff = await Context.fields.employee.app.search()\n        .where((f, q) =\u003e q.and(f.email.eq(user.data.email), f.__deletedAt.eq(null)))\n        .first();\n}\nasync function status_check() {\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.__status == staff.fields.__status.variants.waiting_for_document_editing) {\n        Context.data.need_a_regeneration = true;\n        return true;\n    }\n    return false;\n}\nasync function comment_clear() {\n    Context.data.comment = '';\n}\nasync function get_date() {\n    Context.data.the_current_date = new Datetime().format('DD.MM.YYYY');\n}\nasync function set_file_name_filed() {\n    let statement = await Context.data.agreement_between_participants_of_electronic_interaction.fetch();\n    statement.data.line_file_name = (await statement.data.__file.fetch()).data.__name;\n    statement.data.line_status = statement.data.__status.code + ';' + statement.data.__status.name;\n    await statement.save();\n}\nasync function checkOldDocs() {\n    let oldSoev = await Namespace.app.electronic_interaction_agreement.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.employee)))\n        .first();\n    if (!!oldSoev) {\n        await oldSoev.delete();\n    }\n}\nasync function checkStaffFields() {\n    Context.data.error_message = 'В карточке Сотрудника найдены пустые поля:\\n';\n    Context.data.fullness_of_fields = true;\n    const staff = await Context.data.employee.fetch();\n    if (!staff.data.full_name) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'ФИО;\\n';\n    }\n    if (!staff.data.inn) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'ИНН;\\n';\n    }\n    if (!staff.data.snils) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'СНИЛС;\\n';\n    }\n    if (!staff.data.address) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'Адрес регистрации;\\n';\n    }\n    if (!staff.data.passport_series) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'Серия паспорта;\\n';\n    }\n    if (!staff.data.passport_number) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'Номер паспорта;\\n';\n    }\n    if (!staff.data.issued_by) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'Кем выдан;\\n';\n    }\n    if (!staff.data.passport_department_code) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'Код подразделения;\\n';\n    }\n    if (!staff.data.date_of_issue) {\n        Context.data.fullness_of_fields = false;\n        Context.data.error_message += 'Дата выдачи;\\n';\n    }\n}\nasync function checkExistingAggregateApp() {\n    const aggregateApp = await Namespace.app.employment_app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.employee))).first();\n    if (aggregateApp) {\n        Context.data.aggregate_app = aggregateApp;\n        return true;\n    }\n    ;\n    return false;\n}\nasync function generateAppName() {\n    const staff = await Context.data.employee.fetch();\n    const name = staff.data.__name;\n    const appName = `Документы трудоустройства (${name})`;\n    Context.data.app_name = appName;\n}\nasync function setStatusApproval() {\n    if (!Context.data.agreement_between_participants_of_electronic_interaction) {\n        throw new Error(\"Context.data.agreement_between_participants_of_electronic_interaction is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.agreement_between_participants_of_electronic_interaction.namespace,\n            code: Context.data.agreement_between_participants_of_electronic_interaction.code,\n            id: Context.data.agreement_between_participants_of_electronic_interaction.id,\n        },\n        status: \"approval\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusCancelled() {\n    if (!Context.data.agreement_between_participants_of_electronic_interaction) {\n        throw new Error(\"Context.data.agreement_between_participants_of_electronic_interaction is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.agreement_between_participants_of_electronic_interaction.namespace,\n            code: Context.data.agreement_between_participants_of_electronic_interaction.code,\n            id: Context.data.agreement_between_participants_of_electronic_interaction.id,\n        },\n        status: \"cancelled\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusSigning() {\n    if (!Context.data.agreement_between_participants_of_electronic_interaction) {\n        throw new Error(\"Context.data.agreement_between_participants_of_electronic_interaction is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.agreement_between_participants_of_electronic_interaction.namespace,\n            code: Context.data.agreement_between_participants_of_electronic_interaction.code,\n            id: Context.data.agreement_between_participants_of_electronic_interaction.id,\n        },\n        status: \"signing\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusSigned() {\n    if (!Context.data.agreement_between_participants_of_electronic_interaction) {\n        throw new Error(\"Context.data.agreement_between_participants_of_electronic_interaction is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.agreement_between_participants_of_electronic_interaction.namespace,\n            code: Context.data.agreement_between_participants_of_electronic_interaction.code,\n            id: Context.data.agreement_between_participants_of_electronic_interaction.id,\n        },\n        status: \"signed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\n","gatewayPairs":{},"hasTranslations":false}
