{"scripts":"async function changeAdress() {\n    let app = await Context.data.staff_personal_data.fetch();\n    if (app.data.personal_data_type.code != app.fields.personal_data_type.variants.change_address_registration.code) {\n        app.data.change_registration_address = undefined;\n        await app.save();\n    }\n}\nasync function refusal_text_generate() {\n    let staff = await Context.data.staff.fetch();\n    let app = await Context.data.staff_personal_data.fetch();\n    app.data.reject_comment = Context.data.refusal_comment;\n    await app.save();\n    Context.data.alert_body = `Уважаемый ${staff.data.full_name.lastname} ${staff.data.full_name.firstname} Вашу заявку необходимо скорректировать по следующей причине: ${Context.data.refusal_comment}`;\n}\nasync function category_check() {\n    Context.data.need_alert = false;\n    let staff = undefined;\n    if (!Context.data.staff)\n        return;\n    staff = await Context.data.staff.fetch();\n    let personal_data = await Context.data.staff_personal_data.fetch();\n    if (personal_data.data.relation_degree) {\n        let family_info = Context.fields.family_info.app.create();\n        let family = await Context.fields.family_info.app.search().where((f, g) =\u003e g.and(f.staff.link(Context.data.staff), f.__deletedAt.eq(null))).size(100).all();\n        if (family) {\n            const find_fam = family.find(map =\u003e map.data.full_name == personal_data.data.full_name_family || map.data.full_name == personal_data.data.child_full_name);\n            if (find_fam) {\n                family_info = find_fam;\n            }\n        }\n        family_info.data.birth_certificate = personal_data.data.family_birth_certificate;\n        family_info.data.birth_date = personal_data.data.birth_date;\n        family_info.data.relation_degree = personal_data.data.relation_degree;\n        family_info.data.staff = staff;\n        family_info.data.sex = personal_data.data.sex;\n        family_info.data.full_name = personal_data.data.full_name_family;\n        family_info.data.marriage_certificate = personal_data.data.marriage_certificate_family;\n        family_info.data.other_documents = personal_data.data.other_documents_family;\n        family_info.data.phone = personal_data.data.relative_phone;\n        family_info.data.user = staff.data.ext_user;\n        await family_info.save();\n        await family_info.setStatus(family_info.fields.__status.variants.valid);\n        if (personal_data.data.relation_degree \u0026\u0026 personal_data.data.relation_degree.code == personal_data.fields.relation_degree.variants.child.code) {\n            if (new Datetime(new Date()).sub(personal_data.data.birth_date.asDatetime(new TTime(0, 0, 0, 0))).days \u003c (365 * 3) \u0026\u0026 staff.data.sex == false) {\n                let staff = await Context.data.staff.fetch();\n                let category = await Context.fields.staff_categories.app.search().where(f =\u003e f.__name.like('Женщина, имеющая детей в возрасте до трех лет')).first();\n                if (category) {\n                    Context.data.need_alert = true;\n                    Context.data.alert_body = 'Вам присвоена категория \"Женщина, имеющая детей в возрасте до трех лет\"';\n                    staff.data.staff_categories.push(category);\n                    let row = staff.data.categories_table.insert();\n                    row.expiration_date = personal_data.data.birth_date.addDate(3, 0, 0);\n                    row.staff_categories = category;\n                    await staff.save();\n                }\n                let category1 = await Context.fields.staff_personal_data.app.search().where((f, q) =\u003e q.and(f.staff.link(staff), f.relation_degree.eq(personal_data.fields.relation_degree.variants.child.code), f.__status.eq(personal_data.fields.__status.variants.agreed))).size(10000).all();\n                let expiration_date = new TDate();\n                if (category1 \u0026\u0026 category1.length \u003e 0) {\n                    if (category1.length \u003e 2) {\n                        let category2 = await Context.fields.staff_categories.app.search().where(f =\u003e f.__name.like('Многодетный родитель')).first();\n                        let childs = await Context.fields.family_info.app.search().where((f, q) =\u003e q.and(f.staff.link(staff), f.relation_degree.eq(Context.fields.family_info.app.fields.relation_degree.variants.child.code), f.__status.eq(Context.fields.family_info.app.fields.__status.variants.valid))).size(10000).all();\n                        let durations = [];\n                        let current_date = new Datetime(new Date());\n                        let young_childs = await Promise.all(childs.map(async (f) =\u003e {\n                            let age = new Datetime(new Date()).sub(f.data.birth_date.asDatetime(new TTime(0, 0, 0, 0))).days;\n                            if (age \u003c (365 * 18)) {\n                                return f;\n                            }\n                        }));\n                        if (!young_childs)\n                            return;\n                        for (let child of young_childs) {\n                            let age = new Datetime(new Date()).sub(child.data.birth_date.asDatetime(new TTime(0, 0, 0, 0))).days;\n                            if (age \u003c (18 * 365) \u0026\u0026 age \u003e (14 * 365))\n                                durations.push((365 * 18) - age);\n                            else if (age \u003c 14)\n                                durations.push(365 * 14) - age;\n                        }\n                        if (category2) {\n                            var min = Math.min.apply(null, durations);\n                            Context.data.need_alert = true;\n                            Context.data.alert_body = 'Вам присвоена категория \"Многодетный родитель';\n                            staff.data.staff_categories.push(category2);\n                            let row = staff.data.categories_table.insert();\n                            row.expiration_date = new Datetime(new Date()).add(new Duration(min, \"days\")).getDate();\n                            row.staff_categories = category2;\n                            await staff.save();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (!Context.data.need_alert) {\n        Context.data.need_alert = true;\n        Context.data.alert_body = 'Ваши личные данные успешно изменены.';\n    }\n    if (personal_data.data.personal_data_type.code == personal_data.fields.personal_data_type.variants.data_invalid_child.code) {\n        if (personal_data.data.location_disabled_child) {\n            let app = Context.fields.personal_documents.app.create();\n            app.data.staff = staff;\n            app.data.type_personal_documents = await Context.fields.personal_documents.app.fields.type_personal_documents.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__name.eq('Документ о месте жительства ребёнка-инвалида'))).first();\n            app.data.__file = personal_data.data.location_disabled_child;\n            if (personal_data.data.family_composition_app) {\n                app.data.family_composition = personal_data.data.family_composition_app;\n            }\n            await app.save();\n        }\n        if (personal_data.data.certificate_disability) {\n            let app = Context.fields.personal_documents.app.create();\n            app.data.staff = staff;\n            app.data.type_personal_documents = await Context.fields.personal_documents.app.fields.type_personal_documents.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__name.eq('Справка об установлении инвалидности'))).first();\n            app.data.__file = personal_data.data.certificate_disability;\n            app.data.expiration_date = personal_data.data.validity_period_isability_certificate;\n            if (personal_data.data.family_composition_app) {\n                app.data.family_composition = personal_data.data.family_composition_app;\n            }\n            await app.save();\n        }\n    }\n}\nasync function fileds_check() {\n    let data = await Context.data.staff_personal_data.fetch();\n    let staff = await Context.data.staff.fetch();\n    if (data.data.snils)\n        staff.data.snils = data.data.snils;\n    if (data.data.specialization)\n        staff.data.specialization = data.data.specialization;\n    if (data.data.profession)\n        staff.data.profession = data.data.profession;\n    if (data.data.expiration_date)\n        staff.data.expiration_date = data.data.expiration_date;\n    if (data.data.institution_name)\n        staff.data.institution_name = data.data.institution_name;\n    if (data.data.completion_certificate \u0026\u0026 data.data.completion_certificate.length \u003e 0)\n        staff.data.certificate_of_completion = data.data.completion_certificate;\n    if (data.data.education_level)\n        staff.data.education_level = data.data.education_level;\n    if (data.data.Consists_military_registration_special)\n        staff.data.consists_military_registration_special = data.data.Consists_military_registration_special;\n    if (data.data.consists_military_registration_general)\n        staff.data.consists_military_registration_general = data.data.consists_military_registration_general;\n    if (data.data.military_record_document_text)\n        staff.data.military_record_document_text = data.data.military_record_document_text;\n    if (data.data.name_military_commissariat)\n        staff.data.name_military_registration = data.data.name_military_commissariat;\n    if (data.data.military_service_category)\n        staff.data.category_for_military_service = data.data.military_service_category;\n    if (data.data.full_code_designation)\n        staff.data.code_designation = data.data.full_code_designation;\n    if (data.data.composition)\n        staff.data.composition = data.data.composition;\n    if (data.data.military_rank)\n        staff.data.military_rank = data.data.military_rank;\n    if (data.data.stock_category)\n        staff.data.stock_category = data.data.stock_category;\n    if (data.data.military_record_document)\n        staff.data.military_record_document = staff.data.military_record_document.concat(data.data.military_record_document);\n    if (data.data.proficience_level)\n        staff.data.proficiency_level = data.data.proficience_level;\n    if (data.data.foreign_language)\n        staff.data.foreign_language = data.data.foreign_language;\n    if (data.data.issue_driver_license_date)\n        staff.data.driver_license_issue_date = data.data.issue_driver_license_date;\n    if (data.data.category)\n        staff.data.category = data.data.category;\n    if (data.data.id_number)\n        staff.data.id_number = data.data.id_number;\n    if (data.data.id_series)\n        staff.data.id_series = data.data.id_series;\n    if (data.data.diver_license)\n        staff.data.driver_license = data.data.diver_license;\n    if (data.data.registration_address)\n        staff.data.address = data.data.registration_address;\n    if (data.data.temporary_registration)\n        staff.data.temporary_registration = data.data.temporary_registration;\n    if (data.data.page_current_registration)\n        staff.data.the_passport_page_with_current_registration = data.data.page_current_registration;\n    if (data.data.address)\n        staff.data.actual_address = data.data.address;\n    if (data.data.page_photos_and_data)\n        staff.data.passport_page_with_photo_and_data = data.data.page_photos_and_data;\n    if (data.data.department_code)\n        staff.data.passport_department_code = data.data.department_code;\n    if (data.data.issued_by)\n        staff.data.issued_by = data.data.issued_by;\n    if (data.data.date_of_issue)\n        staff.data.date_of_issue = data.data.date_of_issue;\n    if (data.data.number)\n        staff.data.passport_number = data.data.number;\n    if (data.data.series)\n        staff.data.passport_series = data.data.series;\n    if (data.data.full_name) {\n        staff.data.full_name = data.data.full_name;\n        await staff.save();\n        let ext_user = await staff.data.ext_user.fetch();\n        ext_user.data.fullname = staff.data.full_name;\n        await ext_user.save();\n        return;\n    }\n    if (data.data.phone) {\n        staff.data.phone = data.data.phone;\n        await staff.save();\n        let ext_user = await staff.data.ext_user.fetch();\n        ext_user.data.fullname = staff.data.full_name;\n        await ext_user.save();\n        return;\n    }\n    await staff.save();\n}\nasync function child_consent_status_check() {\n    let app = await Context.data.child_personal_data_consent.fetch();\n    if (app.data.__status.code == app.fields.__status.variants.signed.code)\n        return true;\n    return false;\n}\nasync function passport_data_application_status_check() {\n    let app = await Context.data.passport_data_application.fetch();\n    if (app.data.__status.code == app.fields.__status.variants.signed.code)\n        return true;\n    return false;\n}\nasync function set_permissions() {\n    if (!Context.data.head_user) {\n        let staff = await Context.data.staff.fetch();\n        await staff.sendMessage('Отсутствует руководитель', 'Не удалось определить руководителя сотрудника');\n        return;\n    }\n    let app = await Context.data.staff_personal_data.fetch();\n    const props = Object.getOwnPropertyNames(app.fields);\n    await Promise.all(props.map(async (prop) =\u003e {\n        if (app.fields[prop].type \u0026\u0026 app.fields[prop].type == \"FILE\") {\n            if (app.data[prop]) {\n                if (app.data[prop].length != undefined) {\n                    for (let file of app.data[prop]) {\n                        let old_perms = await file.getPermissions();\n                        old_perms.values.push(new PermissionValue(Context.data.head_user, [PermissionType.READ]));\n                        await file.setPermissions(old_perms);\n                    }\n                }\n                else {\n                    let old_perms = await app.data[prop].getPermissions();\n                    old_perms.values.push(new PermissionValue(Context.data.head_user, [PermissionType.READ]));\n                    await app.data[prop].setPermissions(old_perms);\n                }\n            }\n        }\n    }));\n}\nasync function documents_status_check() {\n    let app1 = await Context.data.additional_agreement_to_the_contract.fetch();\n    let app2 = await Context.data.passport_data_change_order.fetch();\n    if (app1.data.__status1.code == app1.fields.__status.variants.signed.code || app2.data.__status1.code == app2.fields.__status.variants.signed.code)\n        return true;\n    return false;\n}\nasync function fields_set() {\n    const app = await Context.data.staff_personal_data.fetch();\n    Context.data.refusal_comment = app.data.reject_comment;\n    Context.data.type_personal_data = app.data.personal_data_type;\n    let codes = Object.getOwnPropertyNames(app.fields);\n    codes = codes.filter(f =\u003e !f.includes('__'));\n    for (let code of codes) {\n        if (typeof Context.data[code] == typeof app.data[code])\n            Context.data[code] = app.data[code];\n    }\n}\nasync function app_fields_set() {\n    let app = await Context.data.staff_personal_data.fetch();\n    app.data.reject_comment = Context.data.refusal_comment;\n    let codes = Object.getOwnPropertyNames(app.fields);\n    codes = codes.filter(f =\u003e !f.includes('__'));\n    for (let code of codes) {\n        if (typeof Context.data[code] == typeof app.data[code])\n            app.data[code] = Context.data[code];\n    }\n    await app.save();\n}\nasync function get_kedo_settings() {\n    const integration_1c = await Namespace.app.settings.search().where(f =\u003e f.code.eq('integration_1c')).first();\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const alternative_integration = await Namespace.app.settings.search().where(f =\u003e f.code.eq('use_alternative_integration')).first();\n    Context.data.alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n    const use_alternative_system = await Namespace.app.settings.search().where(f =\u003e f.code.eq('use_alternative_system')).first();\n    Context.data.use_alternative_system = use_alternative_system ? use_alternative_system.data.status : false;\n}\nasync function get_responsible_hr_dep() {\n    let current_user = await System.users.getCurrentUser();\n    if (current_user) {\n        Context.data.responsible_hr_dep = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(current_user))).first();\n    }\n    if (Context.data.staff) {\n        let staff = await Context.data.staff.fetch();\n        if (staff.data.organization) {\n            let org = await staff.data.organization.fetch();\n            if (org.data.accounting \u0026\u0026 org.data.accounting.length \u003e 0) {\n                Context.data.responsible_accounting = org.data.accounting[0];\n            }\n        }\n    }\n}\nasync function initializationVariable() {\n    Context.data.agreed_additionally = true;\n}\nasync function verificationApproval() {\n    if (Context.data.agreed_additionally == true || Context.data.is_agreement == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function createStatusObj(app, status) {\n    const obj_status = {\n        'app': {\n            'namespace': app.namespace,\n            'code': app.code,\n            'id': app.id,\n        },\n        'status': status,\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function checkTypeStaffPersonalData() {\n    Context.data[\"__item\"] = Context.data.staff_personal_data;\n    if (!Context.data.staff_personal_data) {\n        throw new Error(\"staff_personal_data if required\");\n    }\n    if (!Context.data.staff) {\n        throw new Error(\"staff is required\");\n    }\n    const user_staff = await Context.data.staff.fetch();\n    if (!user_staff.data.ext_user) {\n        throw new Error(\"staff_user is required\");\n    }\n    Context.data.user_staff = user_staff.data.ext_user;\n    if (Context.data.type_employment_string == 'Внешнее совместительство') {\n        Context.data.isExternalApp = true;\n    }\n    const personal_data = await Context.data.staff_personal_data.fetch();\n    const types_personal_data = await Context.fields.type_employees_personal_data.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(100).all();\n    if (types_personal_data \u0026\u0026 personal_data.data.personal_data_type) {\n        const current_type_personal_data = types_personal_data.find(map =\u003e map.data.code == personal_data.data.personal_data_type.code);\n        if (current_type_personal_data) {\n            Context.data.is_application_personal_data = current_type_personal_data.data.application_personal_data;\n            Context.data.is_order_personal_data = current_type_personal_data.data.order_personal_data;\n            Context.data.is_additional_agreement_personal_data = current_type_personal_data.data.additional_agreement_personal_data;\n            Context.data.is_child_personal_data = current_type_personal_data.data.child_personal_data;\n        }\n    }\n}\nasync function checkChoice() {\n    if (Context.data.is_order_personal_data == false \u0026\u0026 Context.data.is_additional_agreement_personal_data == false) {\n        Context.data.is_not_order_and_ds = true;\n        return false;\n    }\n    return true;\n}\nasync function processingTable() {\n    if (Context.data.staff) {\n        const staff = await Context.data.staff.fetch();\n        if (staff.data.employment_table) {\n            Context.data.count_type_employment = staff.data.employment_table.length;\n        }\n    }\n    Context.data.is_files = true;\n}\nasync function processingTableForTaskHR() {\n    Context.data.info_additional_table = undefined;\n    if (Context.data.staff) {\n        const staff = await Context.data.staff.fetch();\n        if (staff.data.employment_table) {\n            Context.data.count_type_employment = staff.data.employment_table.length;\n        }\n    }\n}\nasync function getFile() {\n}\n","gatewayPairs":{"/items/b3b2a0a1-40ed-4b6c-9407-5605eb51cb34":"/items/4420199d-d7a0-4f33-9de0-06c5a5bee980"},"hasTranslations":false}
