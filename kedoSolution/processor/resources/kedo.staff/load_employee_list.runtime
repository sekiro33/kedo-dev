{"scripts":"const iterationBatch = 100;\nasync function createNoConnectionsError() {\n    Context.data.error = \"Нет доступных подключений 1С\";\n}\nasync function errorHandler() {\n    if (!Context.data.error) {\n        Context.data.error = \"Обнаружена неизвестная ошибка в сценарии\";\n    }\n}\nasync function parseConnectionsObject() {\n    const connectionsArray = Context.data.connection_object ? JSON.parse(Context.data.connection_object) : [];\n    if (connectionsArray.length === 0)\n        return;\n    Context.data.number_of_iter = connectionsArray.length;\n    Context.data.current_iteration = 0;\n}\nasync function startIteration() {\n    const connectionsArray = Context.data.connection_object ? JSON.parse(Context.data.connection_object) : [];\n    Context.data.connection_name = connectionsArray[Context.data.current_iteration].name;\n}\nasync function fillInfoForRequests() {\n    Context.data.numberOfEmployeesParams = \"Catalog_Сотрудники?$format=json\u0026$skip=999999\u0026$inlinecount=allpages\";\n    Context.data.positionParams = \"InformationRegister_ЗанятостьПозицийШтатногоРасписания?$format=json\";\n    Context.data.batch_size = iterationBatch;\n}\nasync function getNumberOfEmployees() {\n    if (!Context.data.numberOfEmployeesParams) {\n        Context.data.error = \"Couldn\\'t find number of all employees\";\n        return;\n    }\n    const responseObj = JSON.parse(Context.data.employee_number_json);\n    const numberOfEmpl = parseInt(responseObj[\"odata.count\"], 10);\n    if (!!numberOfEmpl) {\n        Context.data.full_iteration_amount = numberOfEmpl;\n        Context.data.iteration_number = 0;\n    }\n    else {\n        Context.data.full_iteration_amount = 0;\n        Context.data.error = \"Не найдены сотрудники в базе\";\n    }\n}\nasync function fillContext() {\n    const startSkip = Context.data.iteration_number;\n    const endSkip = Context.data.iteration_number + iterationBatch;\n    Context.data.iteration_number = endSkip;\n    Context.data.personalInfoParams = `Catalog_ФизическиеЛица?$format=json\u0026$skip=${startSkip}\u0026$top=${endSkip}\u0026$orderby=Ref_Key asc`;\n    Context.data.employeesParams = `Catalog_Сотрудники?$format=json\u0026$skip=${startSkip}\u0026$top=${endSkip}\u0026$orderby=ФизическоеЛицо_Key asc`;\n    Context.data.docsParams = `InformationRegister_ДокументыФизическихЛиц?$format=json\u0026$skip=${startSkip}\u0026$top=${endSkip}\u0026$orderby=Физлицо_Key asc`;\n}\nasync function employeesIterationHandler() {\n    const promises = [];\n    const employees = Context.data.employees ? JSON.parse(Context.data.employees) : undefined;\n    const personalInfo = Context.data.personalInfo ? JSON.parse(Context.data.personalInfo) : undefined;\n    const docs = Context.data.docs ? JSON.parse(Context.data.docs) : undefined;\n    const positions = Context.data.positions ? JSON.parse(Context.data.positions) : undefined;\n    if (!(employees \u0026\u0026 personalInfo \u0026\u0026 docs \u0026\u0026 positions))\n        return;\n    const category = await Namespace.app.employees_categories.search().where(f =\u003e f.__name.eq(\"Сотрудник без ограничений\")).first();\n    const allStaffs = await Namespace.app.staff.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allOrganizations = await Namespace.app.organization.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allSubdivisions = await Namespace.app.structural_subdivision.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allPositions = await Namespace.app.position.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    let positionsArray = [];\n    for (const position of positions.value) {\n        positionsArray = positionsArray.concat(position.RecordSet);\n    }\n    for (let i = 0; i \u003c employees.value.length; i++) {\n        const data = employees.value[i];\n        const employeePersonalInfo = personalInfo.value.find((info) =\u003e info.Ref_Key === data[\"ФизическоеЛицо_Key\"]);\n        const employeePassportInfo = docs.value.find((info) =\u003e info[\"Физлицо_Key\"] === data[\"ФизическоеЛицо_Key\"]);\n        if (!(employeePersonalInfo \u0026\u0026 employeePassportInfo))\n            continue;\n        const address = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info) =\u003e info[\"Тип\"] === \"Адрес\");\n        let addressObj;\n        const email = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info) =\u003e info[\"Тип\"] === \"АдресЭлектроннойПочты\");\n        const phoneNumber = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info) =\u003e info[\"Тип\"] === \"Телефон\");\n        const [birthYear, birthMonth, birthDay] = employeePersonalInfo[\"ДатаРождения\"].split(\"T\")[0].split(\"-\").map((item) =\u003e parseInt(item));\n        const [issueYear, issueMonth, issueDay] = employeePassportInfo[\"ДатаВыдачи\"].split(\"T\")[0].split(\"-\").map((item) =\u003e parseInt(item));\n        let entityUser;\n        let positionUser;\n        let subdivisionUser;\n        const orgId = data[\"ГоловнаяОрганизация_Key\"];\n        const organization = allOrganizations.find(f =\u003e f.data.ref_key === orgId);\n        if (organization) {\n            entityUser = organization.data.entity;\n            const positionsUser = positionsArray.filter(f =\u003e f[\"ФизическоеЛицо_Key\"] === data[\"ФизическоеЛицо_Key\"] \u0026\u0026 f[\"ГоловнаяОрганизация_Key\"] === data[\"ГоловнаяОрганизация_Key\"]);\n            positionUser = allPositions.find(f =\u003e f.data.ref_key === positionsUser[0][\"ПозицияШтатногоРасписания_Key\"]);\n            if (positionUser) {\n                const subdivisions = allSubdivisions.filter(f =\u003e f.data.organization \u0026\u0026 f.data.organization.id === organization.id);\n                subdivisionUser = subdivisions.find(f =\u003e f.data.positions \u0026\u0026 f.data.positions.find(f =\u003e f.id === positionUser.id));\n            }\n        }\n        const singleEmployeeData = {\n            id: data.Ref_Key,\n            code: data.Code,\n            name: {\n                firstname: employeePersonalInfo[\"Имя\"],\n                lastname: employeePersonalInfo[\"Фамилия\"],\n                middlename: employeePersonalInfo[\"Отчество\"],\n            },\n            email: email ? {\n                email: email[\"АдресЭП\"],\n                type: EmailType.Work,\n            } : undefined,\n            phoneNumber: phoneNumber ? {\n                tel: formatPhoneNumber(phoneNumber[\"Представление\"]),\n                type: PhoneType.Work,\n            } : undefined,\n            sex: employeePersonalInfo[\"Пол\"] === \"Мужской\",\n            marriage: false,\n            birthDate: new TDate(birthYear, birthMonth, birthDay),\n            city: addressObj ? addressObj.city || addressObj.area : undefined,\n            street: addressObj ? addressObj.street : undefined,\n            home: addressObj ? addressObj.houseNumber : undefined,\n            apartment: addressObj ? addressObj.apartments ? addressObj.apartments[0].number : undefined : undefined,\n            housing: addressObj ? addressObj.buildings ? addressObj.buildings[0].number : undefined : undefined,\n            passportSeries: employeePassportInfo[\"Серия\"].replace(/\\s/g, ''),\n            passportNumber: employeePassportInfo[\"Номер\"],\n            passportDepCode: employeePassportInfo[\"КодПодразделения\"],\n            passportIssueDate: new TDate(issueYear, issueMonth, issueDay),\n            passportIssuer: employeePassportInfo[\"КемВыдан\"],\n            russianPassport: employeePassportInfo[\"Представление\"].includes(\"Паспорт гражданина РФ\"),\n            snils: employeePersonalInfo[\"СтраховойНомерПФР\"],\n            inn: employeePersonalInfo[\"ИНН\"],\n            individual_id: employeePersonalInfo.Ref_Key,\n            organisation: organization,\n            entity: entityUser,\n            position: positionUser,\n            subdivision: subdivisionUser,\n            value_1: Context.data.value_1 \u0026\u0026 personalInfo[`${Context.data.value_1}`] ? personalInfo[`${Context.data.value_1}`] : undefined,\n            value_2: Context.data.value_2 \u0026\u0026 personalInfo[`${Context.data.value_2}`] ? personalInfo[`${Context.data.value_2}`] : undefined,\n            value_3: Context.data.value_3 \u0026\u0026 personalInfo[`${Context.data.value_3}`] ? personalInfo[`${Context.data.value_3}`] : undefined,\n        };\n        let userApp;\n        const user = allStaffs.find(f =\u003e f.data.id_1c === singleEmployeeData.id);\n        if (user)\n            userApp = user;\n        else\n            userApp = Namespace.app.staff.create();\n        userApp.data.full_name = singleEmployeeData.name;\n        userApp.data.name = singleEmployeeData.name.firstname;\n        userApp.data.surname = singleEmployeeData.name.lastname;\n        userApp.data.middlename = singleEmployeeData.name.middlename;\n        userApp.data.personal_number = singleEmployeeData.code;\n        userApp.data.email = singleEmployeeData.email;\n        userApp.data.phone = singleEmployeeData.phoneNumber;\n        userApp.data.sex = singleEmployeeData.sex;\n        userApp.data.position = singleEmployeeData.position;\n        userApp.data.structural_subdivision = singleEmployeeData.subdivision;\n        userApp.data.marriage = singleEmployeeData.marriage;\n        userApp.data.date_of_birth = singleEmployeeData.birthDate;\n        userApp.data.city = singleEmployeeData.city;\n        userApp.data.street = singleEmployeeData.street;\n        userApp.data.home = singleEmployeeData.home;\n        userApp.data.apartment = singleEmployeeData.apartment;\n        userApp.data.housing = singleEmployeeData.housing;\n        userApp.data.passport_series = singleEmployeeData.passportSeries;\n        userApp.data.passport_number = singleEmployeeData.passportNumber;\n        userApp.data.passport_department_code = singleEmployeeData.passportDepCode;\n        userApp.data.date_of_issue = singleEmployeeData.passportIssueDate;\n        userApp.data.russian_passport = singleEmployeeData.russianPassport;\n        userApp.data.issued_by = singleEmployeeData.passportIssuer;\n        userApp.data.snils = singleEmployeeData.snils;\n        userApp.data.inn = singleEmployeeData.inn;\n        userApp.data.organization = singleEmployeeData.organisation;\n        userApp.data.entity = singleEmployeeData.entity;\n        if (userApp.data.staff_categories \u0026\u0026 userApp.data.staff_categories.length \u003e 0)\n            userApp.data.staff_categories = userApp.data.staff_categories;\n        else if (category)\n            userApp.data.staff_categories = (userApp.data.staff_categories || []).concat(category);\n        userApp.data.notification = userApp.fields.notification.variants.email;\n        userApp.data.id_1c = singleEmployeeData.id;\n        userApp.data.individual_id_1c = singleEmployeeData.individual_id;\n        userApp.data.staff_access = true;\n        userApp.data.address = `\n                ${singleEmployeeData.city ? singleEmployeeData.city : \"\"}\n                ${singleEmployeeData.street ? \", ул. \" + singleEmployeeData.street : \"\"}\n                ${singleEmployeeData.home ? \", д. \" + singleEmployeeData.home : \"\"}\n                ${singleEmployeeData.housing ? \", корп. \" + singleEmployeeData.housing : \"\"}\n                ${singleEmployeeData.apartment ? \", кв. \" + singleEmployeeData.apartment : \"\"}\n            `;\n        userApp.data.value_1 = singleEmployeeData.value_1;\n        userApp.data.value_2 = singleEmployeeData.value_2;\n        userApp.data.value_3 = singleEmployeeData.value_3;\n        promises.push(userApp.save());\n    }\n    await Promise.all(promises);\n}\nasync function endConnectionIteration() {\n    Context.data.current_iteration++;\n}\nasync function array_length() {\n    if (Context.data.staff)\n        return Context.data.staff.length;\n    return 0;\n}\nasync function check_fields() {\n    let filled = false;\n    let fetched_staff = Context.data.staff.map(async (f) =\u003e {\n        let staff = await f.fetch();\n        if (!staff.data.email || !staff.data.phone) {\n            if (staff) {\n                let row = Context.data.staff_table.insert();\n                row.staff = staff;\n                if (staff.data.phone)\n                    row.phone = staff.data.phone;\n                if (staff.data.email)\n                    row.email = staff.data.email;\n            }\n        }\n    });\n    await Promise.all(fetched_staff);\n    if (Context.data.staff_table \u0026\u0026 Context.data.staff_table.length \u003e 0) {\n        return false;\n    }\n    return true;\n}\nasync function staff_set() {\n    let promises = [];\n    for (let row of Context.data.staff_table) {\n        if (row.staff) {\n            let staff = await row.staff.fetch();\n            staff.data.email = row.email;\n            staff.data.phone = row.phone;\n            promises.push(staff.save());\n        }\n    }\n    await Promise.all(promises);\n}\nasync function prepare_staffs() {\n    Context.data.max_count = Math.floor(Context.data.staff.length / 3);\n    Context.data.bp_staffs = [];\n    if (Context.data.current_count \u003e Context.data.max_count)\n        return true;\n    for (let i = Context.data.current_count * 3; i \u003c (Context.data.current_count + 1) * 3; i++) {\n        if (Context.data.staff[i])\n            Context.data.bp_staffs.push(Context.data.staff[i]);\n    }\n    Context.data.current_count += 1;\n    return false;\n}\nasync function getParams() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.is_alternative = alternative_integration ? alternative_integration.data.status : false;\n}\nfunction formatPhoneNumber(phoneNumber, plus = true) {\n    debugger;\n    const startsWith = plus ? '+7' : '8';\n    let phone = phoneNumber.replace(/[^0-9]/g, '');\n    if (phone.startsWith('7') \u0026\u0026 plus) {\n        phone = phone.substring(1);\n    }\n    if (phone.startsWith('8')) {\n        phone = phone.substring(1);\n    }\n    return phone.replace(/(\\d{3})(\\d{3})(\\d{2})(\\d{2})/g, `${startsWith}$1$2$3$4`);\n}\n","gatewayPairs":{},"hasTranslations":false}
