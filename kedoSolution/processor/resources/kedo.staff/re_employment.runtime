{"scripts":"async function user_unban() {\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.external_user \u0026\u0026 staff.data.external_user.length \u003e 0) {\n        const ext_user = await staff.data.external_user[0].fetch();\n        if (ext_user.data.__user_status \u0026\u0026 ext_user.data.__user_status.code == ext_user.fields.__user_status.variants.blocked.code)\n            await staff.fields.external_user.app.unblock(staff.data.external_user[0]);\n    }\n    else if (staff.data.ext_user) {\n        const user = await staff.data.ext_user.fetch();\n        if (user.data.__status \u0026\u0026 user.data.__status.index == UserStatus.Blocked)\n            await staff.data.ext_user.unblock();\n    }\n    if (!staff.data.email || staff.data.email.email !== Context.data.email.email) {\n        staff.data.user_already_exists = false;\n        staff.data.ext_user = undefined;\n        staff.data.email = Context.data.email;\n    }\n    if (!staff.data.phone || staff.data.phone.tel !== Context.data.phone.tel) {\n        staff.data.phone = Context.data.phone;\n    }\n    await staff.save();\n}\nasync function update_employment_table() {\n    const staff = await Context.data.staff.fetch();\n    const employment_table = staff.data.employment_table;\n    let row = employment_table.find(f =\u003e f.position.id == Context.data.position.id);\n    if (!row) {\n        row = employment_table.insert();\n    }\n    row.position = Context.data.position;\n    row.organization = Context.data.organization;\n    row.subdivision = Context.data.subdivision;\n    row.admission_date_organization = Context.data.admission_date;\n    row.admission_date_position = Context.data.admission_date;\n    row.type_employment = Context.data.employment_type;\n    await staff.save();\n}\nasync function interrupt_process() {\n    const staff = await Context.data.staff.fetch();\n    const active_process = await Application.processes.Employment._searchInstances()\n        .where((f, g) =\u003e g.and(g.or(f.__state.like(ProcessInstanceState.exec), f.__state.like(ProcessInstanceState.error), f.__state.like(ProcessInstanceState.wait)), f['__item'].eq(Context.data.staff))).size(100).all();\n    if (active_process) {\n        active_process.forEach(map =\u003e {\n            map.interrupt(`Запущено повторное трудоустройство для ${staff.data.__name}`);\n        });\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
