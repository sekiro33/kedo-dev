{"scripts":"async function checkStaffCategory() {\n    const codes = [\n        \"employee_category\"\n    ];\n    const settings = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.in(codes)))\n        .size(codes.length)\n        .all();\n    const employee_category = settings.find(f =\u003e f.data.code == \"employee_category\");\n    if (!employee_category) {\n        throw new Error(\"Не найдена категория по умолчанию. Выполните первичную настройку решения.\");\n    }\n    if (!Context.data.staff) {\n        throw new Error(\"Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    if (!staff.data.staff_categories || staff.data.staff_categories.length == 0) {\n        const default_category = employee_category.data.feature;\n        const ref_default_category = new RefItem(\"kedo\", \"employees_categories\", default_category.id);\n        const item = await ref_default_category.fetch();\n        staff.data.categories_table = staff.fields.categories_table.create();\n        const row = staff.data.categories_table.insert();\n        row.staff_categories = item;\n        row.assignment_date = new TDate();\n    }\n    await staff.save();\n}\nasync function setStaffFIO() {\n    var _a, _b, _c;\n    if (!Context.data.staff) {\n        throw new Error(\"Не указан сотрудник. Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    staff.data.full_name = {\n        firstname: (_a = staff.data.name) !== null \u0026\u0026 _a !== void 0 ? _a : '',\n        lastname: (_b = staff.data.surname) !== null \u0026\u0026 _b !== void 0 ? _b : '',\n        middlename: (_c = staff.data.middlename) !== null \u0026\u0026 _c !== void 0 ? _c : '',\n    };\n    await staff.save();\n}\nasync function checkStaffFields() {\n    var _a, _b;\n    if (!Context.data.staff) {\n        throw new Error(\"Не указан сотрудник. Context.data.staff is undefined\");\n    }\n    const personal_data_employee = Context.data.personal_data_employee;\n    const staff = await Context.data.staff.fetch();\n    const main_fields = !staff.data.name ||\n        !staff.data.surname ||\n        !staff.data.full_name ||\n        !staff.data.phone ||\n        ((((_a = staff.data.notification) === null || _a === void 0 ? void 0 : _a.code) == \"email\" || ((_b = staff.data.notification) === null || _b === void 0 ? void 0 : _b.code) == \"email_and_sms\") \u0026\u0026 !staff.data.email) ||\n        !staff.data.employment_table ||\n        staff.data.employment_table.length == 0;\n    const personal_data = !staff.data.inn ||\n        !staff.data.snils ||\n        !staff.data.passport_number ||\n        !staff.data.passport_series ||\n        !staff.data.date_of_issue ||\n        !staff.data.issued_by ||\n        !staff.data.passport_department_code ||\n        !staff.data.home ||\n        !staff.data.city ||\n        !staff.data.street;\n    if (main_fields || (personal_data_employee === false \u0026\u0026 personal_data)) {\n        return false;\n    }\n    return true;\n}\nasync function setAddress() {\n    var _a;\n    if (!Context.data.staff) {\n        throw new Error(\"Не указан сотрудник. Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    const region_app = await ((_a = staff.data.directory_of_regions) === null || _a === void 0 ? void 0 : _a.fetch());\n    const region = region_app ? `${region_app.data.__name},` : ``;\n    const housing = staff.data.housing ? ` к.${staff.data.housing}` : ``;\n    const apartment = staff.data.apartment ? ` кв.${staff.data.apartment}` : ``;\n    staff.data.address = `${region} г. ${staff.data.city}, ул. ${staff.data.street}, д.${staff.data.home}${housing}${apartment}`.trim();\n    await staff.save();\n}\n","gatewayPairs":{},"hasTranslations":false}
