{"scripts":"async function handleJSON() {\n    if (!Context.data.transfers) {\n        return;\n    }\n    let data = JSON.parse(Context.data.transfers);\n    Context.data.array_length = data.length;\n    Context.data.iterator++;\n    if (Context.data.iterator \u003e= Context.data.array_length) {\n        Context.data.loop_end = true;\n        return;\n    }\n    Context.data.staff = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.individual_id_1c.eq(data[Context.data.iterator].employeeIndividualId))).first();\n    let transfer_datetime = new Datetime(data[Context.data.iterator].transferDate);\n    Context.data.transfer_date = new TDate(transfer_datetime.year, transfer_datetime.month, transfer_datetime.day);\n    Context.data.type_work_relation = data[Context.data.iterator].typeWorkRelation;\n    Context.data.debug = data[Context.data.iterator].transferDate;\n    Context.data.position = await Context.fields.position.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ref_key.eq(data[Context.data.iterator].posId))).first();\n    Context.data.subdivision = await Context.fields.subdivision.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ref_key.eq(data[Context.data.iterator].subdivisionId))).first();\n    Context.data.organization = await Context.fields.organization.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ref_key.eq(data[Context.data.iterator].orgId))).first();\n    Context.data.id_1c = data[Context.data.iterator].id_1c;\n    Context.data.rate = data[Context.data.iterator].rate;\n    Context.data.type_from_data = data[Context.data.iterator].typeFromData;\n    Context.data.existing_positions = data[Context.data.iterator].existingPositions;\n}\n","gatewayPairs":{},"hasTranslations":false}
