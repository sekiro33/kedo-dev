{"scripts":"async function getSettings() {\n    const settings = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null)))\n        .size(10000)\n        .all();\n    const custom_definition_head = settings.find(f =\u003e f.data.code == 'custom_definition_head');\n    Context.data.custom_definition_head = custom_definition_head ? custom_definition_head.data.status : false;\n}\nasync function action() {\n    if (!Context.data.staff \u0026\u0026 (!Context.data.staffs_many || Context.data.staffs_many.length == 0)) {\n        throw new Error(\"Не указаны сотрудники\");\n    }\n    let staff;\n    if (Context.data.staff) {\n        staff = await Context.data.staff.fetch();\n    }\n    else {\n        staff = await Context.data.staffs_many[0].fetch();\n    }\n    if (!staff.data.organization) {\n        throw new Error(\"У сотрудника не указана организация\");\n    }\n    if (!staff.data.position) {\n        throw new Error(\"У сотрудника не указана позиция ШР\");\n    }\n    if (!staff.data.structural_subdivision) {\n        throw new Error(\"У сотрудника не указано подразделение\");\n    }\n    const [organization, position, subdivision] = await Promise.all([\n        staff.data.organization.fetch(),\n        staff.data.position.fetch(),\n        staff.data.structural_subdivision.fetch(),\n    ]);\n    Context.data.organization = organization;\n    const subdivisions = await staff.fields.structural_subdivision.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organization)))\n        .size(10000)\n        .all();\n    const positions = await staff.fields.position.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organization)))\n        .size(10000)\n        .all();\n    const staffs = await Context.fields.staff.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.neq(null), f.organization.link(organization), f.__status.eq(staff.fields.__status.variants.signed_documents)))\n        .size(10000)\n        .all();\n    if (!position.data.subdivision) {\n        Context.data.chief = (await organization_get_head(organization, positions)) || undefined;\n    }\n    else {\n        Context.data.chief = (await subdivision_get_head(position.data.subdivision, positions, subdivisions, staffs, organization, staff)) || undefined;\n    }\n    if (Context.data.chief) {\n        const staff_chief = await Context.fields.staff.app.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(Context.data.chief)))\n            .first();\n        Context.data.chief_app = staff_chief;\n    }\n    async function subdivision_get_head(subdivision, positions, subdivisions, staffs, organization, staff) {\n        var _a, _b, _c;\n        const division = subdivisions.find(f =\u003e f.id == subdivision.id);\n        if (!division) {\n            return await organization_get_head(organization, positions);\n        }\n        if (!division.data.position) {\n            if (!division.data.subdivision) {\n                return await organization_get_head(organization, positions);\n            }\n            else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff);\n            }\n        }\n        const position_head = positions.find(f =\u003e { var _a; return f.id == ((_a = division.data.position) === null || _a === void 0 ? void 0 : _a.id); });\n        const positions_staffs_app = await Promise.all([\n            ...((_a = position_head.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : []),\n            ...((_b = position_head.data.staff_internal_combination) !== null \u0026\u0026 _b !== void 0 ? _b : []),\n            ...((_c = position_head.data.staff_external_combination) !== null \u0026\u0026 _c !== void 0 ? _c : []),\n        ]\n            .map(f =\u003e f.fetch()));\n        const positions_staffs = positions_staffs_app.filter(f =\u003e {\n            var _a;\n            return f.data.ext_user\n                \u0026\u0026 ((_a = f.data.__status) === null || _a === void 0 ? void 0 : _a.code) == f.fields.__status.variants.signed_documents.code\n                \u0026\u0026 f.id != staff.id;\n        });\n        if (positions_staffs.length == 0) {\n            if (!division.data.subdivision) {\n                return await organization_get_head(organization, positions);\n            }\n            else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff);\n            }\n        }\n        else {\n            return positions_staffs[0].data.ext_user;\n        }\n    }\n    async function organization_get_head(organization, positions) {\n        var _a, _b, _c;\n        if (!organization.data.position_head) {\n            return undefined;\n        }\n        const position_head = positions.find(f =\u003e { var _a; return f.id == ((_a = organization.data.position_head) === null || _a === void 0 ? void 0 : _a.id); });\n        if (!position_head) {\n            return undefined;\n        }\n        const staffs_app = await Promise.all([\n            ...((_a = position_head.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : []),\n            ...((_b = position_head.data.staff_internal_combination) !== null \u0026\u0026 _b !== void 0 ? _b : []),\n            ...((_c = position_head.data.staff_external_combination) !== null \u0026\u0026 _c !== void 0 ? _c : []),\n        ]\n            .map(f =\u003e f.fetch()));\n        const organization_heads = staffs_app.filter(f =\u003e { var _a; return f.data.ext_user \u0026\u0026 ((_a = f.data.__status) === null || _a === void 0 ? void 0 : _a.code) == f.fields.__status.variants.signed_documents.code; });\n        if (organization_heads.length == 0) {\n            return undefined;\n        }\n        else {\n            return organization_heads[0].data.ext_user;\n        }\n    }\n}\nasync function getSupervisor() {\n    const supervisor = await System.userGroups.search().where(f =\u003e f.__id.eq('331e62d2-072e-58ac-9581-74abcc67f050')).first();\n    const user = await System.users.search().where(f =\u003e f.groupIds.has(supervisor)).first();\n    const staff = await Context.fields.staff.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(user)))\n        .first();\n    Context.data.chief = user;\n    Context.data.chief_app = staff;\n}\nasync function getStaffChief() {\n    if (!Context.data.staff_employment) {\n        throw new Error(\"Место занятости сотрудника не указано; Context.data.staff_employment is undefined\");\n    }\n    const staff_employment = await Context.data.staff_employment.fetch();\n    if (!staff_employment.data.position) {\n        throw new Error(\"В выбранному месту занятости не указана позиция ШР сотрудника\");\n    }\n    if (!staff_employment.data.organization) {\n        throw new Error(\"В выбранному месту занятости не указана организация сотрудника\");\n    }\n    const staff = await staff_employment.data.staff.fetch();\n    const position = await staff_employment.data.position.fetch();\n    const organization = await staff_employment.data.organization.fetch();\n    Context.data.organization = organization;\n    const subdivisions = await staff_employment.fields.subdivision.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organization)))\n        .size(10000)\n        .all();\n    const positions = await staff_employment.fields.position.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organization)))\n        .size(10000)\n        .all();\n    const staffs = await staff_employment.fields.staff.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.neq(null), f.organization.link(organization), f.__status.eq(staff.fields.__status.variants.signed_documents)))\n        .size(10000)\n        .all();\n    if (!position.data.subdivision) {\n        Context.data.chief = (await organization_get_head(organization, positions)) || undefined;\n    }\n    else {\n        Context.data.chief = (await subdivision_get_head(position.data.subdivision, positions, subdivisions, staffs, organization, staff)) || undefined;\n    }\n    if (Context.data.chief) {\n        const staff_chief = await Context.fields.staff.app.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(Context.data.chief)))\n            .first();\n        Context.data.chief_app = staff_chief;\n    }\n    async function subdivision_get_head(subdivision, positions, subdivisions, staffs, organization, staff) {\n        var _a, _b, _c;\n        const division = subdivisions.find(f =\u003e f.id == subdivision.id);\n        if (!division) {\n            return await organization_get_head(organization, positions);\n        }\n        if (!division.data.position) {\n            if (!division.data.subdivision) {\n                return await organization_get_head(organization, positions);\n            }\n            else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff);\n            }\n        }\n        const position_head = positions.find(f =\u003e { var _a; return f.id == ((_a = division.data.position) === null || _a === void 0 ? void 0 : _a.id); });\n        const positions_staffs_app = await Promise.all([\n            ...((_a = position_head.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : []),\n            ...((_b = position_head.data.staff_internal_combination) !== null \u0026\u0026 _b !== void 0 ? _b : []),\n            ...((_c = position_head.data.staff_external_combination) !== null \u0026\u0026 _c !== void 0 ? _c : []),\n        ]\n            .map(f =\u003e f.fetch()));\n        const positions_staffs = positions_staffs_app.filter(f =\u003e {\n            var _a;\n            return f.data.ext_user\n                \u0026\u0026 ((_a = f.data.__status) === null || _a === void 0 ? void 0 : _a.code) == f.fields.__status.variants.signed_documents.code\n                \u0026\u0026 f.id != staff.id;\n        });\n        if (positions_staffs.length == 0) {\n            if (!division.data.subdivision) {\n                return await organization_get_head(organization, positions);\n            }\n            else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff);\n            }\n        }\n        else {\n            return positions_staffs[0].data.ext_user;\n        }\n    }\n    async function organization_get_head(organization, positions) {\n        var _a, _b, _c;\n        if (!organization.data.position_head) {\n            return undefined;\n        }\n        const position_head = positions.find(f =\u003e { var _a; return f.id == ((_a = organization.data.position_head) === null || _a === void 0 ? void 0 : _a.id); });\n        if (!position_head) {\n            return undefined;\n        }\n        const staffs_app = await Promise.all([\n            ...((_a = position_head.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : []),\n            ...((_b = position_head.data.staff_internal_combination) !== null \u0026\u0026 _b !== void 0 ? _b : []),\n            ...((_c = position_head.data.staff_external_combination) !== null \u0026\u0026 _c !== void 0 ? _c : []),\n        ]\n            .map(f =\u003e f.fetch()));\n        const organization_heads = staffs_app.filter(f =\u003e { var _a; return f.data.ext_user \u0026\u0026 ((_a = f.data.__status) === null || _a === void 0 ? void 0 : _a.code) == f.fields.__status.variants.signed_documents.code; });\n        if (organization_heads.length == 0) {\n            return undefined;\n        }\n        else {\n            return organization_heads[0].data.ext_user;\n        }\n    }\n}\nasync function getFutureChief() {\n    var _a, _b, _c;\n    if (!Context.data.new_position) {\n        throw new Error('Не указана новая позиция ШР');\n    }\n    const new_position = await Context.data.new_position.fetch();\n    if (new_position.data.subdivision) {\n        const subdivision = await new_position.data.subdivision.fetch();\n        if (subdivision.data.position) {\n            const position_chief = await subdivision.data.position.fetch();\n            const chieffs_app = await Promise.all([\n                ...((_a = position_chief.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : []),\n                ...((_b = position_chief.data.staff_internal_combination) !== null \u0026\u0026 _b !== void 0 ? _b : []),\n                ...((_c = position_chief.data.staff_external_combination) !== null \u0026\u0026 _c !== void 0 ? _c : []),\n            ]\n                .map(f =\u003e f.fetch()));\n            if (chieffs_app) {\n                const current_chieff = chieffs_app.filter(f =\u003e { var _a; return f.data.ext_user \u0026\u0026 ((_a = f.data.__status) === null || _a === void 0 ? void 0 : _a.code) == f.fields.__status.variants.signed_documents.code; });\n                if (current_chieff) {\n                    Context.data.chief = current_chieff[0].data.ext_user;\n                }\n            }\n        }\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
