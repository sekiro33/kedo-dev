{"scripts":"async function get_creator() {\n    const staff = await Context.data.staff.fetch();\n    const organisation = await staff.data.organization.fetch();\n    if (!organisation.data.provider \u0026\u0026 (!organisation.data.sign_provider || organisation.data.sign_provider.length \u003c 1)) {\n        throw new Error(`Не заполнен провайдер у организации ${organisation.data.__name}`);\n    }\n    ;\n    Context.data.api_key = organisation.data.api_key;\n    if (organisation.data.sign_provider \u0026\u0026 organisation.data.sign_provider.length \u003e 0) {\n        const provider = organisation.data.sign_provider;\n        if (provider \u0026\u0026 (provider.map(p =\u003e p.code).indexOf(\"kontur\") !== -1 || provider.map(p =\u003e p.code).indexOf(\"sign_me\") !== -1)) {\n            Context.data.provider = provider.map(p =\u003e p.code).indexOf(\"kontur\") !== -1 ? Context.fields.provider.variants.kontur : Context.fields.provider.variants.sign_me;\n        }\n        else {\n            Context.data.elctronic_sign_not_required = true;\n            return;\n        }\n        ;\n    }\n    else {\n        const provider = organisation.data.provider;\n        if (provider \u0026\u0026 provider.find(p =\u003e p.code === \"kontur\")) {\n            Context.data.provider = Context.fields.provider.variants.kontur;\n        }\n        else {\n            Context.data.provider = Context.fields.provider.variants.sign_me;\n        }\n    }\n    const entity = await organisation.data.entity.fetch();\n    Context.data.user_status = staff.data.__status.code;\n    Context.data.user = staff.data.ext_user;\n    Context.data.hr_user = staff.data.staff_member;\n    if (staff.data.sex == true) {\n        Context.data.line_for_issuing_UNEP = 'M';\n        Context.data.gender = Context.fields.gender.variants.m;\n    }\n    else {\n        Context.data.line_for_issuing_UNEP = 'F';\n        Context.data.gender = Context.fields.gender.variants.f;\n    }\n    Context.data.date_of_birth = staff.data.date_of_birth;\n    Context.data.phone = staff.data.phone;\n    Context.data.elektronnaya_pochta = staff.data.email;\n    Context.data.line_name = staff.data.full_name.firstname;\n    Context.data.line_surname = staff.data.full_name.lastname;\n    Context.data.line_middle_name = staff.data.full_name.middlename;\n    Context.data.line_region = staff.data.region;\n    Context.data.city = staff.data.city;\n    Context.data.line_country = 'ru';\n    Context.data.snils = staff.data.snils;\n    Context.data.line_OGRN = entity.data._ogrn ? entity.data._ogrn : undefined;\n    Context.data.series = staff.data.passport_series;\n    Context.data.number = staff.data.passport_number;\n    Context.data.date_of_issue = staff.data.date_of_issue;\n    Context.data.issued_by = staff.data.issued_by;\n    Context.data.tin = staff.data.inn;\n    Context.data.department_code = staff.data.passport_department_code;\n    const start = staff.data.email.email.indexOf('+');\n    if (start != -1) {\n        let reduce = staff.data.email.email.substring(start, staff.data.email.email.indexOf('@'));\n        Context.data.elektronnaya_pochta = { email: staff.data.email.email.replace(reduce, ''), type: EmailType.Work };\n    }\n    else {\n        Context.data.elektronnaya_pochta = staff.data.email;\n    }\n    if (staff.data.russian_passport) {\n        Context.data.document_type = { name: \"Паспорт\", code: \"passport\" };\n    }\n    else {\n        Context.data.document_type = { name: \"Иной документ\", code: \"other_identity\" };\n    }\n    ;\n    Context.data.first_page = staff.data.passport_page_with_photo_and_data;\n    Context.data.second_page = staff.data.the_passport_page_with_current_registration;\n    Context.data.skan_snils = staff.data.snils_file;\n    Context.data.issue_confirm_type_kontur = organisation.data.issue_confirm_type_kontur;\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const nep = settings.find(f =\u003e f.data.code == 'new_method_create_sign');\n    Context.data.new_method_create_sign = nep ? nep.data.status : false;\n}\nasync function certificate_date_change() {\n    const staff = await Context.data.staff.fetch();\n    staff.data.date_receipt_signing_certificate = new Datetime().getDate();\n    await staff.save();\n}\nasync function getUserStatus() {\n    const user = await Context.data.staff.fetch();\n    if (user.data.__status.code === \"signed_documents\") {\n        const domen = await Namespace.app.settings.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('domen'))).first();\n        Context.data.portal_link = `https://${domen.data.value}/_portal/kedo_ext/user_page`;\n    }\n    ;\n}\n;\nasync function checkUserStatus() {\n    const user = await Context.data.staff.fetch();\n    return user.data.__status.code === \"signed_documents\";\n}\n;\nasync function checkContextStatus() {\n    return Context.data.user_status === \"signed_documents\";\n}\n;\nasync function checkActiveProcess() {\n    if (!Context.data.staff) {\n        throw new Error(\"Context.data.staff is undefined\");\n    }\n    const signme_release_active_process = await Application.processes.signme_release._searchInstances()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.neq(Context.id), g.or(f.__state.like(ProcessInstanceState.exec), f.__state.like(ProcessInstanceState.wait)), f.__item.eq(Context.data.staff)))\n        .size(100)\n        .all();\n    if (signme_release_active_process \u0026\u0026 signme_release_active_process.length \u003e 0) {\n        return true;\n    }\n    return false;\n}\n","gatewayPairs":{},"hasTranslations":false}
