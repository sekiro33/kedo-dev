{"scripts":"async function loadData() {\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.table_name.eq(\"AccumulationRegister_ДниЧасыОтгулов\")))\n        .where((f, g) =\u003e g.or(f.is_processed.eq(false), f.is_processed.eq(null)))\n        .size(10000)\n        .all();\n    if (tables.length === 0) {\n        return;\n    }\n    const sortedApps = tables.sort((a, b) =\u003e {\n        const aDate = a.data.__createdAt.asDate();\n        const bDate = b.data.__createdAt.asDate();\n        return aDate - bDate;\n    });\n    const externalData = parseData(sortedApps, \"AccumulationRegister_ДниЧасыОтгулов\");\n    await updatePaidLeaveData(externalData);\n    let promises = [];\n    for (let app of tables) {\n        app.data.is_processed = true;\n        promises.push(app.save());\n        if (promises.length \u003e= 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nconst parseData = (data, tableName) =\u003e {\n    const result = [];\n    data.forEach(item =\u003e {\n        if (item.data.table_name === tableName \u0026\u0026 !!item.data.table_data) {\n            result.push(...JSON.parse(item.data.table_data));\n        }\n    });\n    return result;\n};\nasync function updatePaidLeaveData(data) {\n    const employeeIds = data.map((item) =\u003e item.data[\"Record\"][0][\"Сотрудник\"]);\n    if (employeeIds.length == 0) {\n        return;\n    }\n    const allEmployees = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.id_1c.in(employeeIds))).size(10000).all();\n    const workLeaves = [];\n    for (let i = 0; i \u003c data.length; i++) {\n        const employee = workLeaves.find((item) =\u003e item.employeeId === data[i].data[\"Record\"][0][\"Сотрудник\"]);\n        if (!!employee) {\n            employee.daysAmount += data[i].data[\"Record\"][0][\"Дни\"];\n            employee.hoursAmount += data[i].data[\"Record\"][0][\"Часы\"];\n            continue;\n        }\n        workLeaves.push({\n            employeeId: data[i].data[\"Record\"][0][\"Сотрудник\"],\n            daysAmount: data[i].data[\"Record\"][0][\"Дни\"],\n            hoursAmount: data[i].data[\"Record\"][0][\"Часы\"]\n        });\n    }\n    let promises = [];\n    for (let i = 0; i \u003c allEmployees.length; i++) {\n        const currentEmployee = allEmployees[i];\n        let shouldSave = false;\n        const mainEmployeeData = workLeaves.find((item) =\u003e item.employeeId === currentEmployee.data.id_1c);\n        if (!!mainEmployeeData) {\n            currentEmployee.data.remaining_work_leave_days = mainEmployeeData.daysAmount;\n            currentEmployee.data.remaining_work_leave_hours = mainEmployeeData.hoursAmount;\n            shouldSave = true;\n        }\n        if (currentEmployee.data.employment_table \u0026\u0026 currentEmployee.data.employment_table.length \u003e 0) {\n            for (let j = 0; j \u003c currentEmployee.data.employment_table.length; j++) {\n                const row = currentEmployee.data.employment_table[j];\n                const rowLeaveData = workLeaves.find((item) =\u003e item.employeeId === row.id_1c);\n                if (rowLeaveData) {\n                    row.remaining_leave_days = rowLeaveData.daysAmount;\n                    row.remaining_leave_hours = rowLeaveData.hoursAmount;\n                    shouldSave = true;\n                }\n            }\n        }\n        if (shouldSave) {\n            promises.push(currentEmployee.save());\n            if (promises.length \u003e 50) {\n                await Promise.all(promises);\n                promises = [];\n            }\n        }\n    }\n    await Promise.all(promises);\n}\n","gatewayPairs":{},"hasTranslations":false}
