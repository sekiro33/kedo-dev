{"scripts":"const userId = \"9a81cb30-4aef-11ed-b0f9-f557cda0de1e\";\nconst token = \"UUsybjl6dlgzdVB5VmVzdE8xeng6VmswejBFSmh0TnRhZ3BwTzhNSVJiVkNZb3F5TDZYZHpSZ3BHRmJBUQ==\";\nconst docKindId = \"ETD.OtherDoc\";\nconst groupId = \"ETD.LoadingFiles\";\nconst notificationURL = \"null.ru\";\nasync function sendDoc() {\n    Context.data.wrong_document = \"\";\n    Context.data.doc_links = \"\";\n    Context.data.doc_ids = \"\";\n    let staff = await Context.data.staff.fetch();\n    let snils = staff.data.snils.replace(/-/g, \"\").replace(/\\s/g, \"\");\n    let staffDocs = await Context.fields.staff_docs_contract.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(staff))).size(10000).all();\n    let docs = await Context.fields.docs_contract.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(staff))).size(10000).all();\n    let sources = await Promise.all([...staffDocs, ...docs].map(doc =\u003e { var _a; return (_a = doc.data.__sourceRef) === null || _a === void 0 ? void 0 : _a.fetch(); }));\n    Context.data.debug = sources.map(doc =\u003e doc.data.__name).join(\"\\n\");\n    let allDocs = await Promise.all(sources.map(async (source) =\u003e {\n        const fileName = await source.data.__file.fetch().then((r) =\u003e r.data.__name);\n        return {\n            name: fileName,\n            link: await source.data.__file.getDownloadUrl()\n        };\n    }));\n    for (let doc of allDocs) {\n        let docLink = doc.link;\n        let docBuffer = await fetch(docLink).then(doc =\u003e doc.arrayBuffer());\n        let base64String = _arrayBufferToBase64(docBuffer);\n        let fileName = doc.name;\n        let comment = \"\";\n        let body = JSON.stringify({\n            userId,\n            snils,\n            name: fileName,\n            comment,\n            file: base64String,\n            groupId,\n            docKindId,\n            notificationURL,\n            fileName\n        });\n        let response = await fetch(\"https://ekd-integration.trudvsem.ru/createLaborerDocs\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Basic ${token}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body\n        });\n        let responseText = await response.text();\n        if (!response.ok || JSON.parse(responseText).error) {\n            if (responseText.includes(\"валидации\") || responseText.includes(\"PDF\")) {\n                Context.data.wrong_document += fileName;\n                Context.data.wrong_document += \"\\n\";\n                Context.data.debug += responseText;\n                continue;\n            }\n            ;\n            Context.data.error_exists = true;\n            let error = responseText;\n            Context.data.error = error;\n            return;\n        }\n        ;\n        let responseJson = JSON.parse(responseText);\n        let docId = responseJson.documentId;\n        let documentLink = responseJson.documentLink;\n        Context.data.doc_links += documentLink;\n        Context.data.doc_links += \"\\n\";\n        Context.data.doc_ids += docId;\n        Context.data.doc_ids += \"\\n\";\n        await _sleep(1000);\n    }\n    ;\n}\n;\nfunction _arrayBufferToBase64(buffer) {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n    let len = bytes.byteLength;\n    for (let i = 0; i \u003c len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    ;\n    return btoa(binary);\n}\n;\nasync function _sleep(milliseconds) {\n    return new Promise(resolve =\u003e setTimeout(resolve, milliseconds));\n}\n","gatewayPairs":{},"hasTranslations":false}
