{"scripts":"async function documents_status_change(status_code) {\n    let staff = await Context.data.staff.fetch();\n    let documents = staff.data.documents_employment;\n    let mapped_documents = documents.map(async (f) =\u003e {\n        let doc = await f.fetch();\n        let source_doc = doc.data.__sourceRef;\n        let fetched_source = await source_doc.fetch();\n        let statuses = fetched_source.fields.__status.all;\n        let status = statuses.find((i) =\u003e i.code == status_code);\n        await fetched_source.setStatus(status);\n        await fetched_source.save();\n    });\n    await Promise.all(mapped_documents);\n}\nasync function action(code, doc) {\n    let app = await doc.fetch();\n    let statuses = app.fields.__status.all;\n    let status = statuses.find((i) =\u003e i.code == code);\n    await app.setStatus(status);\n    await app.save();\n}\nasync function docs_rejected() {\n}\nasync function order_create() {\n    let order = Context.fields.resignation_letter.app.fields.linked_order.app.create();\n    let full_name = (await Context.data.responsible.fetch()).data.fullname;\n    order.data.responsible_string = full_name.lastname + ' ' + full_name.firstname.slice(1, 0) + '.' + full_name.middlename ? full_name.middlename.slice(1, 0) + '.' : '';\n    await order.save();\n    Context.data.dismissal_order = order;\n    let statement = await Context.data.resignation_letter.fetch();\n    statement.data.linked_order = order;\n    await statement.save();\n}\nasync function labor_contract_get() {\n    Context.data.labor_contract = await Context.fields.labor_contract.app.search().where((f, g) =\u003e g.and(f.staff.link(Context.data.staff), f.__deletedAt.eq(null))).first();\n}\nasync function staff_get() {\n    let ext_user;\n    let user = await Context.data.__createdBy.fetch();\n    let group = await System.userGroups.search().where(f =\u003e f.__id.eq('f25906e4-41c3-5a89-8ec2-06648dd1f614')).first();\n    if (group)\n        ext_user = (await group.users(0, group.users.length)).find(f =\u003e f == user);\n    else {\n        await get_int_user();\n        return;\n    }\n    if (ext_user)\n        await get_ext_user(ext_user);\n    else\n        await get_int_user();\n}\nasync function get_ext_user(ext_user) {\n    Context.data.staff_user = ext_user;\n    let statement = await Context.data.resignation_letter.fetch();\n    Context.data.staff = statement.data.staff;\n}\nasync function get_int_user() {\n    let statement = await Context.data.resignation_letter.fetch();\n    Context.data.staff = statement.data.staff;\n    let staff = await statement.data.staff.fetch();\n    Context.data.staff_user = staff.data.ext_user;\n}\nasync function comment_get() {\n    const item = await Context.data.resignation_letter.fetch();\n    const approvalLists = await item.docflow().getApprovalLists();\n    let list = approvalLists[approvalLists.length - 1];\n    let respondets = list.respondents;\n    for (let respondent of respondets) {\n        if (respondent.status == \"rejected\") {\n            Context.data.comment = respondent.comment;\n            Context.data.responsible = await System.users.search().where(f =\u003e f.__id.eq(respondent.id)).first();\n            break;\n        }\n    }\n}\nasync function alert_create() {\n    let date_format = await Context.data.resignation_letter.fetch();\n    let date_str = `${date_format.data.date_of_dismissal.day}.${date_format.data.date_of_dismissal.month}.${date_format.data.date_of_dismissal.year}`;\n    Context.data.alert_body = `Сотрудник ${(await Context.data.staff.fetch()).data.__name} увольняется ${date_str}. Причина: ${(await Context.data.resignation_letter.fetch()).data.reason_for_leaving}`;\n    Context.data.alert_title = `Оповещение`;\n}\nasync function responsible_set() {\n    var _a, _b, _c;\n    if (!Context.data.staff) {\n        throw new Error('Не указан сотрудник.');\n    }\n    if (!Context.data.resignation_letter) {\n        throw new Error('Отсутствует заявление на увольнение');\n    }\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.kedo_agreement) {\n        Context.data.alert_body = `Ваше заявление на увольнение согласовано.\u003cbr\u003e Подпишите его электронной подписью на портале КЭДО.`;\n    }\n    else {\n        Context.data.alert_body = `Ваше заявление на увольнение согласовано.\u003cbr\u003e Идет оформление приказа.`;\n    }\n    const resignation_letter = await Context.data.resignation_letter.fetch();\n    const approvalLists = await resignation_letter.docflow().getApprovalLists();\n    if (approvalLists.length == 0) {\n        throw new Error(\"Не найдены листы согласования\");\n    }\n    let approvalList = approvalLists[0];\n    let respondets = approvalList.respondents;\n    let responsible = undefined;\n    for (let respondent of respondets) {\n        if (respondent \u0026\u0026 respondent.id \u0026\u0026 respondent.status == \"approved\") {\n            responsible = await System.users.search().where(f =\u003e f.__id.eq(respondent.id)).first();\n            break;\n        }\n    }\n    if (responsible) {\n        Context.data.responsible = responsible;\n        resignation_letter.data.responsible_user = responsible;\n        resignation_letter.data.responsible = `${(_a = responsible.data.fullname) === null || _a === void 0 ? void 0 : _a.lastname} ${(_b = responsible.data.fullname) === null || _b === void 0 ? void 0 : _b.firstname.slice(0, 1)}. ${(_c = responsible.data.fullname) === null || _c === void 0 ? void 0 : _c.middlename.slice(0, 1)}.`;\n        await resignation_letter.save();\n    }\n}\nasync function set_contract_field() {\n    let statement = await Context.data.resignation_letter.fetch();\n    statement.data.line_status = statement.data.__status.code + ';' + statement.data.__status.name;\n    await statement.save();\n}\nasync function set_filed_order() {\n    let decree = await Context.data.dismissal_order.fetch();\n    decree.data.line_status = decree.data.__status.code + ';' + decree.data.__status.name;\n    await decree.save();\n}\nasync function set_field_file_name() {\n    let decree = await Context.data.dismissal_order.fetch();\n    decree.data.line_file_name = (await Context.data.document_file.fetch()).data.__name;\n    await decree.save();\n}\nasync function prepareData() {\n    Context.data.current_date = new TDate();\n    await labor_contract_get();\n}\nasync function get_kedo_settings() {\n    if (Context.data.resignation_letter) {\n        let app = await Context.data.resignation_letter.fetch();\n        app.data.id_process = Context.data.__id;\n        await app.save();\n    }\n    const custom_generate_resignation_letter = await Context.fields.kedo_settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('custom_generate_resignation_letter')))\n        .first();\n    Context.data.custom_generate_resignation_letter = custom_generate_resignation_letter ? custom_generate_resignation_letter.data.status : false;\n    const integration_1c = await Context.fields.kedo_settings.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('integration_1c'))).first();\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const alternative_system = await Context.fields.kedo_settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('use_alternative_system')))\n        .first();\n    Context.data.use_alternative_system = alternative_system ? alternative_system.data.status : false;\n    const accounting_in_processes = await Context.fields.kedo_settings.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('accounting_in_processes'))).first();\n    Context.data.accounting_in_processes = accounting_in_processes ? accounting_in_processes.data.status : false;\n}\nasync function check_kedo_agreement() {\n    let staff = await Context.data.staff.fetch();\n    if (staff.data.kedo_agreement) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function checkAggregationApp() {\n    const aggregationApp = await Context.fields.aggregate_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff))).first();\n    if (aggregationApp) {\n        Context.data.aggregate_app = aggregationApp;\n        return true;\n    }\n    ;\n    return false;\n}\nasync function addFiringData() {\n    Context.data.debug += ' before if ';\n    if (Context.data.staff) {\n        Context.data.debug += ' in if ';\n        const staff = await Context.data.staff.fetch();\n        Context.data.debug += ` employment_table ${!!staff.data.employment_table} `;\n        Context.data.debug += ` firing_date ${!!Context.data.date_of_dismissal} `;\n        if (staff.data.employment_table \u0026\u0026 Context.data.date_of_dismissal) {\n            Context.data.debug += ' in second if ';\n            try {\n                for (let row of staff.data.employment_table) {\n                    row.date_by = Context.data.date_of_dismissal;\n                }\n                await staff.save();\n            }\n            catch (e) {\n                Context.data.debug += String(e);\n            }\n        }\n    }\n}\nasync function createStatusObj(app, status) {\n    const obj_status = {\n        'app': {\n            'namespace': app.namespace,\n            'code': app.code,\n            'id': app.id,\n        },\n        'status': status,\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function createStatusFiringSigned() {\n    createStatusObj(Context.data.resignation_letter, 'agreed_signed');\n}\nasync function createStatusFiringSigning() {\n    createStatusObj(Context.data.resignation_letter, 'signing');\n}\nasync function createStatusApproval() {\n    createStatusObj(Context.data.resignation_letter, 'approval');\n}\nasync function createStatusFiringCanceled() {\n    createStatusObj(Context.data.resignation_letter, 'cancelled');\n}\nasync function createStatusFiringCorrection() {\n    createStatusObj(Context.data.resignation_letter, 'correction');\n}\nasync function createStatusFiringPaperPrepare() {\n    createStatusObj(Context.data.resignation_letter, 'paper_prepare');\n}\nasync function createStatusDismissalPaperPrepare() {\n    createStatusObj(Context.data.dismissal_order, 'paper_prepare');\n}\nasync function createStatusDismissalPaperSigned() {\n    createStatusObj(Context.data.dismissal_order, 'paper_signed');\n}\nasync function createStatusDismissalNew() {\n    createStatusObj(Context.data.dismissal_order, 'new');\n}\nasync function createStatuDismissalsNeedDecision() {\n    createStatusObj(Context.data.dismissal_order, 'need_decision');\n}\nasync function createStatusAppSigning() {\n    createStatusObj(Context.data.aggregate_app, 'signing_application');\n}\nasync function createStatusAppApproval() {\n    createStatusObj(Context.data.aggregate_app, 'approval');\n}\nasync function createStatusAppPaperPrepare() {\n    createStatusObj(Context.data.aggregate_app, 'paper_prepare');\n}\nasync function createStatusAppPaperSigned() {\n    createStatusObj(Context.data.aggregate_app, 'paper_signed');\n}\nasync function createStatusAppNeedDecision() {\n    createStatusObj(Context.data.aggregate_app, 'need_decision');\n}\nasync function createStatusAppCorrection() {\n    createStatusObj(Context.data.aggregate_app, 'correction');\n}\nasync function createStatusAppOrderPrepare() {\n    createStatusObj(Context.data.aggregate_app, 'order_prepare');\n}\nasync function calcEscalationTime() {\n    const dismissal_escalation_hr = await Context.fields.kedo_settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"dismissal_escalation_hr\")))\n        .first();\n    const hours = dismissal_escalation_hr \u0026\u0026 dismissal_escalation_hr.data.quantity ? dismissal_escalation_hr.data.quantity : 4;\n    const dismissal_date = Context.data.date_of_dismissal;\n    const settings = await System.productionSchedule.getGeneralSettings();\n    const working_time = settings.daySchedule.workingTime;\n    const escalation_date = dismissal_date\n        .asDatetime(new TTime(0, 0, 0, 0))\n        .add(new Duration(working_time.to, \"seconds\"))\n        .add(new Duration(-hours, \"hours\"));\n    Context.data.escalation_time = escalation_date;\n}\nasync function formatDataForPosition() {\n    if (Context.data.staff \u0026\u0026 Context.data.firing_position_ref) {\n        let staffApp = await Context.data.staff.fetch();\n        if (staffApp \u0026\u0026 staffApp.data.employment_table) {\n            let row = staffApp.data.employment_table.find(item =\u003e item.id_1c === Context.data.firing_position_ref);\n            if (row) {\n                Context.data.employment_directory = row.employment_placement_app;\n            }\n        }\n    }\n}\n","gatewayPairs":{"/items/853cd5d1-6437-4a90-b306-4efd91160454":"/items/42a2e534-46bb-43ca-a813-aabbe6ebca14"},"hasTranslations":false}
