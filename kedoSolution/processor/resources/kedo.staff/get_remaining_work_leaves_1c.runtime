{"scripts":"const iterationBatch = 100;\nasync function fillEmployeesData() {\n    Context.data.request_url = \"AccumulationRegister_ДниЧасыОтгулов?$format=json\u0026$skip=999999\u0026$inlinecount=allpages\";\n}\nasync function fillIterData() {\n    const response = JSON.parse(Context.data.response);\n    const count = parseInt(response[\"odata.count\"]);\n    Context.data.amount_of_data = count;\n    Context.data.current_iteration = 0;\n    Context.data.full_iteration_amount = Math.ceil(count / iterationBatch) - 1;\n    Context.data.work_leave_data = JSON.stringify([]);\n}\nasync function parseConnectionsObject() {\n    const connectionsArray = Context.data.connections_object ? JSON.parse(Context.data.connections_object) : [];\n    if (connectionsArray.length === 0)\n        return;\n    Context.data.total_number_of_connections = connectionsArray.length;\n}\nasync function getRequestData() {\n    const startSkip = Context.data.current_iteration * iterationBatch;\n    Context.data.request_url = `AccumulationRegister_ДниЧасыОтгулов?$format=json\u0026$skip=${startSkip}\u0026$top=${iterationBatch}`;\n}\nasync function updateIterationData() {\n    Context.data.current_iteration = Context.data.current_iteration + 1;\n}\nasync function writeNoConnectionsError() {\n    Context.data.error = \"Нет доступных подключений 1С\";\n}\nasync function startConnectionsIteration() {\n    const connectionsArray = Context.data.connections_object ? JSON.parse(Context.data.connections_object) : [];\n    if (!Context.data.current_connection_index) {\n        Context.data.current_connection_index = 0;\n    }\n    Context.data.current_connection_name = connectionsArray[Context.data.current_connection_index].name;\n}\nasync function endIteration() {\n    Context.data.current_connection_index = Context.data.current_connection_index + 1;\n    if (Context.data.current_connection_index \u003e= Context.data.current_connection_index) {\n        Context.data.end_iteration = true;\n    }\n}\nasync function parseResponseData() {\n    const response = JSON.parse(Context.data.response);\n    const workLeaves = JSON.parse(Context.data.work_leave_data);\n    for (let i = 0; i \u003c response.value.length; i++) {\n        const currentInstance = response.value[i];\n        for (let j = 0; j \u003c currentInstance[\"RecordSet\"].length; j++) {\n            const employee = workLeaves.find((item) =\u003e item.employeeId === currentInstance[\"RecordSet\"][j][\"Сотрудник_Key\"]);\n            if (!!employee) {\n                employee.amount += currentInstance[\"RecordSet\"][j][\"Дни\"];\n                continue;\n            }\n            workLeaves.push({\n                employeeId: currentInstance[\"RecordSet\"][j][\"Сотрудник_Key\"],\n                amount: currentInstance[\"RecordSet\"][j][\"Дни\"]\n            });\n        }\n    }\n    Context.data.work_leave_data = JSON.stringify(workLeaves);\n}\nasync function updateLeavesData() {\n    const workLeaves = JSON.parse(Context.data.work_leave_data);\n    const employees = await Context.fields.staff.app.search().where(f =\u003e f.__deletedAt.eq(null)).all();\n    for (let i = 0; i \u003c workLeaves.length; i++) {\n        const employee = employees.find((item) =\u003e {\n            return item.data.id_1c === workLeaves[i].employeeId;\n        });\n        if (!!employee) {\n            employee.data.remaining_work_leave_days = workLeaves[i].amount;\n            await employee.save();\n        }\n    }\n}\nasync function getParams() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.is_alternative = alternative_integration ? alternative_integration.data.status : false;\n}\n","gatewayPairs":{},"hasTranslations":false}
