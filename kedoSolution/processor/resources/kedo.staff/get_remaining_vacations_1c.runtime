{"scripts":"const iterationBatch = 100;\nasync function fillEmployeesData() {\n    Context.data.request_url = \"InformationRegister_EM_ОстаткиОтпусков?$format=json\u0026$skip=999999\u0026$inlinecount=allpages\";\n}\nasync function fillIterData() {\n    const response = JSON.parse(Context.data.response);\n    const count = parseInt(response[\"odata.count\"]);\n    Context.data.amount_of_data = count;\n    Context.data.current_iteration = 0;\n    Context.data.full_iteration_amount = Math.ceil(count / iterationBatch) - 1;\n    Context.data.vacations_data = JSON.stringify([]);\n}\nasync function getRequestData() {\n    const startSkip = Context.data.current_iteration * iterationBatch;\n    Context.data.request_url = `InformationRegister_EM_ОстаткиОтпусков?$format=json\u0026$skip=${startSkip}\u0026$top=${iterationBatch}`;\n}\nasync function parseData() {\n    const response = JSON.parse(Context.data.response);\n    const vacations = JSON.parse(Context.data.vacations_data);\n    for (let i = 0; i \u003c response.value.length; i++) {\n        const employee = vacations.find((item) =\u003e item.employeeId === response.value[i][\"Сотрудник_Key\"]);\n        if (!!employee) {\n            employee.amount += response.value[i][\"ОстатокДней\"];\n        }\n        else {\n            vacations.push({\n                employeeId: response.value[i][\"Сотрудник_Key\"],\n                amount: response.value[i][\"ОстатокДней\"]\n            });\n        }\n    }\n    Context.data.vacations_data = JSON.stringify(vacations);\n}\nasync function updateIterationData() {\n    Context.data.current_iteration = Context.data.current_iteration + 1;\n}\nasync function updateVacationData() {\n    const vacations = JSON.parse(Context.data.vacations_data);\n    const employees = await Namespace.app.staff.search().where((f, g) =\u003e f.__deletedAt.eq(null)).all();\n    for (let i = 0; i \u003c vacations.length; i++) {\n        const employee = employees.find((item) =\u003e {\n            return item.data.id_1c === vacations[i].employeeId;\n        });\n        if (!!employee) {\n            employee.data.remaining_vacation_days = Math.ceil(vacations[i].amount);\n            await employee.save();\n        }\n    }\n}\nasync function get_kedo_settings() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const integration_1c = settings.find(f =\u003e f.data.code == 'integration_1c');\n    Context.data.integration_is_on = integration_1c ? integration_1c.data.status : false;\n    const use_alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.is_alternative = use_alternative_integration ? use_alternative_integration.data.status : false;\n}\n","gatewayPairs":{},"hasTranslations":false}
