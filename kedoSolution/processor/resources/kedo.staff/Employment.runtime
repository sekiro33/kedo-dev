{"scripts":"async function get_settings() {\n    Context.fields.the_department.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(appFields.is_closed.eq(false)));\n    Context.fields.position.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(appFields.is_closed.eq(false)));\n    if (!Context.data.staff) {\n        const staff = await Application.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(Context.data.__createdBy)))\n            .first();\n        Context.data.staff = staff;\n    }\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const app_employment = settings.find(f =\u003e f.data.code == 'app_employment');\n    Context.data.app_employment = app_employment ? app_employment.data.status : false;\n    const integration_1c = settings.find(f =\u003e f.data.code == 'integration_1c');\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.use_alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n    const custom_lna = settings.find(f =\u003e f.data.code == 'custom_lna');\n    Context.data.custom_lna = custom_lna ? custom_lna.data.status : false;\n    const generation_labor_documents = settings.find(f =\u003e f.data.code == 'generation_labor_documents');\n    Context.data.generation_labor_documents = generation_labor_documents ? generation_labor_documents.data.status : false;\n    const documents_submitted_original = settings.find(f =\u003e f.data.code == 'documents_submitted_original');\n    Context.data.documents_submitted_original = documents_submitted_original ? documents_submitted_original.data.value : '';\n    const control_receipt_paper_originals_during_employment = settings.find(f =\u003e f.data.code == 'control_receipt_paper_originals_during_employment');\n    Context.data.control_receipt_paper_originals_during_employment = control_receipt_paper_originals_during_employment ? control_receipt_paper_originals_during_employment.data.status : false;\n    if (Context.data.staff) {\n        let staff = await Context.data.staff.fetch();\n        staff.data.id_process_recruitment = Context.data.__id;\n        if (staff.data.full_name \u0026\u0026 staff.data.ext_user) {\n            let user = await staff.data.ext_user.fetch();\n            user.data.fullname.middlename = staff.data.full_name.middlename;\n        }\n        await staff.save();\n    }\n}\nasync function comment_clear() {\n    Context.data.comment = '';\n    const user = await Context.data.staff.fetch();\n    user.data.disclaimer_comment = undefined;\n    user.data.invalid_fields = undefined;\n    await user.save();\n    Context.data.invalid_fields_new = undefined;\n    Context.data.invalid_comment = undefined;\n}\nasync function status_check() {\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.__status \u0026\u0026 staff.data.__status.code == staff.fields.__status.variants.waiting_for_document_editing.code) {\n        return true;\n    }\n    return false;\n}\nasync function documents_status_change(status_code) {\n    const promises = [];\n    Context.data.set_documents = [];\n    const contract = await Namespace.app.labor_contract.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff), f.__status.neq(Namespace.app.labor_contract.fields.__status.variants.removed), f.__status.neq(Namespace.app.labor_contract.fields.__status.variants.signed)))\n        .first();\n    if (contract \u0026\u0026 contract.data.__status \u0026\u0026 contract.data.__status.code != 'signed') {\n        const statuses = contract.fields.__status.all;\n        const status = statuses.find((i) =\u003e i.code == status_code);\n        await contract.setStatus(status);\n        contract.data.line_status = `${status.code};${status.name}`;\n        promises.push(contract.save());\n        Context.data.set_documents.push(contract);\n    }\n    const admission_order = await Namespace.app.admission_order.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff), f.__status.neq(Namespace.app.admission_order.fields.__status.variants.removed), f.__status.neq(Namespace.app.admission_order.fields.__status.variants.signed)))\n        .first();\n    if (admission_order \u0026\u0026 admission_order.data.__status \u0026\u0026 admission_order.data.__status.code != 'signed') {\n        const statuses = admission_order.fields.__status.all;\n        const status = statuses.find((i) =\u003e i.code == status_code);\n        await admission_order.setStatus(status);\n        admission_order.data.line_status = `${status.code};${status.name}`;\n        promises.push(admission_order.save());\n        Context.data.set_documents.push(admission_order);\n    }\n    const app_provision_information = await Namespace.app.information_about_labor_activity.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff), f.__status.neq(Namespace.app.information_about_labor_activity.fields.__status.variants.removed), f.__status.neq(Namespace.app.information_about_labor_activity.fields.__status.variants.signed)))\n        .first();\n    if (app_provision_information \u0026\u0026 app_provision_information.data.__status \u0026\u0026 app_provision_information.data.__status.code != 'signed') {\n        const statuses = app_provision_information.fields.__status.all;\n        const status = statuses.find((i) =\u003e i.code == status_code);\n        await app_provision_information.setStatus(status);\n        app_provision_information.data.line_status = `${status.code};${status.name}`;\n        promises.push(app_provision_information.save());\n        Context.data.set_documents.push(app_provision_information);\n    }\n    const consent_processing_personal_data = await Namespace.app.consent_processing_personal_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff), f.__status.neq(Namespace.app.consent_processing_personal_data.fields.__status.variants.signed)))\n        .first();\n    if (consent_processing_personal_data \u0026\u0026 consent_processing_personal_data.data.__status \u0026\u0026 consent_processing_personal_data.data.__status.code != 'signed') {\n        const statuses = consent_processing_personal_data.fields.__status.all;\n        const status = statuses.find((i) =\u003e i.code == status_code);\n        if (status) {\n            await consent_processing_personal_data.setStatus(status);\n            consent_processing_personal_data.data.line_status = `${status.code};${status.name}`;\n            promises.push(consent_processing_personal_data.save());\n            Context.data.set_documents.push(consent_processing_personal_data);\n        }\n    }\n    const other_docs = await Namespace.app.additional_agreement_to_the_contract.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff), f.__status.neq(Namespace.app.additional_agreement_to_the_contract.fields.__status.variants.removed), f.__status.neq(Namespace.app.additional_agreement_to_the_contract.fields.__status.variants.signed)))\n        .size(10000)\n        .all();\n    if (other_docs \u0026\u0026 other_docs.length \u003e 0) {\n        Context.data.set_documents = Context.data.set_documents.concat(other_docs);\n        const statuses = other_docs[0].fields.__status.all;\n        const status = statuses.find((i) =\u003e i.code == status_code);\n        if (status) {\n            await Promise.all(other_docs.map(f =\u003e f.setStatus(status)));\n            other_docs.forEach(doc =\u003e {\n                doc.data.line_status = `${status.code};${status.name}`;\n                promises.push(doc.save());\n            });\n        }\n    }\n    const additional_agreement = await Namespace.app.additional_agreement.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(Context.data.staff), f.__status.neq(Namespace.app.additional_agreement.fields.__status.variants.signed)))\n        .size(1000)\n        .all();\n    if (additional_agreement \u0026\u0026 additional_agreement.length \u003e 0) {\n        Context.data.set_documents = Context.data.set_documents.concat(additional_agreement);\n        const additional_agreement_statuses = Namespace.app.additional_agreement.fields.__status.all;\n        const status = additional_agreement_statuses.find((s) =\u003e s.code == status_code);\n        if (status) {\n            await Promise.all(additional_agreement.map(f =\u003e f.setStatus(status)));\n            additional_agreement.forEach(doc =\u003e {\n                doc.data.line_status = `${status.code};${status.name}`;\n                promises.push(doc.save());\n            });\n        }\n    }\n    Context.data.set_documents = Context.data.set_documents;\n    Context.data.number_documents = Context.data.set_documents.length;\n    await Promise.all(promises);\n}\nasync function soev_notification() {\n    Context.data.alert_body = 'Подпишите соглашение об электронном взаимодействии.';\n}\nasync function employee_notification() {\n    Context.data.alert_body = `Процедура трудоустройства завершена и вы получили доступ в портал.\nТеперь вы имеете возможность отправлять руководству заявления и служебные записки, ознакамливаться с приказами и распоряжениями компании.\nПерейдите на портал для использования кадрового электронного документооборота.`;\n}\nasync function employement_notification() {\n    let user = await Context.data.staff.fetch();\n    let name = '';\n    let entity = await user.data.entity;\n    if (entity)\n        name = (await entity.fetch()).data.__name;\n    Context.data.alert_body = `Вы успешно прошли процедуру трудоустройства в компании ${name}.\nТеперь вы имеете возможность отправлять руководству заявления и служебные записки, ознакамливаться с приказами и распоряжениями компании.\nПерейдите на портал для использования кадрового электронного документооборота.`;\n}\nasync function status_signed() {\n    await documents_status_change('signed');\n}\nasync function status_signing() {\n    await documents_status_change('signing');\n}\nasync function status_removed() {\n    await documents_status_change('removed');\n}\nasync function regenerate_soev() {\n    Context.data.alert_body = `Для вас заново сгенерировано СоЭВ. Перейдите на портал и подпишите соглашение.`;\n}\nasync function soev_field_clear() {\n    let staff = await Context.data.staff.fetch();\n    staff.data.scan_soev = undefined;\n    await staff.save();\n}\nasync function set_contract_filed() {\n    let statement = await Context.data.agreement_between_participants_of_electronic_interaction.fetch();\n    statement.data.line_status = statement.data.__status.code + ';' + statement.data.__status.name;\n    await statement.save();\n}\nasync function set_file_name_filed() {\n    let statement = await Context.data.agreement_between_participants_of_electronic_interaction.fetch();\n    statement.data.line_file_name = (await statement.data.__file.fetch()).data.__name;\n    await statement.save();\n}\nasync function search_LNA() {\n    const staff = await Context.data.staff.fetch();\n    const organization = staff.data.organization;\n    const position = await staff.data.position.fetch();\n    const lnaGroups = await Namespace.app.groups_lna.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.positions.has(position))).size(10000).all();\n    const commonLna = await Context.fields.docs_lna.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null))).size(10000).all();\n    const lnaForSign = commonLna.filter(doc =\u003e {\n        var _a, _b, _c;\n        let positionIds = [];\n        if (doc.data.groups_lna) {\n            const localGroups = lnaGroups.filter(gr =\u003e lnaGroups.indexOf(gr) != -1);\n            positionIds = [].concat.apply([], localGroups.map(fr =\u003e fr.data.positions.map(pos =\u003e pos.id)));\n        }\n        ;\n        return (((_a = doc.data.wWho_acquainted) === null || _a === void 0 ? void 0 : _a.code) === \"all\" \u0026\u0026 ((_b = doc.data.organization) === null || _b === void 0 ? void 0 : _b.id) === (organization === null || organization === void 0 ? void 0 : organization.id)) || (((_c = doc.data.wWho_acquainted) === null || _c === void 0 ? void 0 : _c.code) === \"groups\" \u0026\u0026 positionIds.indexOf(position.id) != -1);\n    });\n    Context.data.docs_lna = lnaForSign;\n    staff.data.list_sign_lna = [];\n    await staff.save();\n}\nasync function getHr() {\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.ext_user \u0026\u0026 staff.data.ext_user.id == Context.data.__createdBy.id) {\n        Context.data.staff_member = Context.data.hr_dep[0];\n    }\n    else {\n        Context.data.staff_member = Context.data.__createdBy;\n    }\n}\nasync function checkLNA() {\n    if (Context.data.docs_lna \u0026\u0026 Context.data.docs_lna.length \u003e 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nasync function getUserDocs() {\n    const user = await Context.data.staff.fetch();\n    const docsTable = user.data.documents_for_employment;\n    if (docsTable \u0026\u0026 docsTable.length \u003e 0) {\n        const docs = await Promise.all(docsTable.map(f =\u003e f.doc.fetch()));\n        for (let row of docsTable) {\n            const docType = docs.find(f =\u003e f.id == row.doc.id);\n            const docName = docType.data.__name;\n            if (docName.includes(\"Страница с фото и данными\")) {\n                user.data.passport_page_with_photo_and_data = row.file_doc;\n            }\n            else if (docName.includes(\"Страница с регистрацией\")) {\n                user.data.the_passport_page_with_current_registration = row.file_doc;\n            }\n            else if (docName.includes(\"СНИЛС\")) {\n                user.data.snils_file = row.file_doc;\n            }\n            else if (docName.includes(\"ИНН\")) {\n                user.data.inn_file = row.file_doc;\n            }\n        }\n    }\n    await user.save();\n}\nasync function checkUserOption() {\n    let user = await Context.data.staff.fetch();\n    return user.data.is_employed;\n}\nasync function setUserSettings() {\n    let staff = await Context.data.staff.fetch();\n    staff.data.unep_issue_required = Context.data.unep_issue_required;\n    staff.data.is_employed = Context.data.already_employed;\n    staff.data.signing_soev_office = Context.data.signing_soev_office;\n    staff.data.personal_data_employee = Context.data.personal_data_employee;\n    staff.data.scans_personal_docs = Context.data.doc_scans_required;\n    staff.data.consent_processing_pdn = Context.data.doc_scans_required;\n    Context.data.docs_for_employment = staff.data.documents_for_employment;\n    Context.data.external_user = staff.data.ext_user;\n    await staff.save();\n}\nasync function searchDoubleStaff() {\n    Context.data.staff_double = undefined;\n    const staff = await Context.data.staff.fetch();\n    const doubleStaff = await Application.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), g.or(f.inn.eq(staff.data.inn), f.snils.eq(staff.data.snils)), f.__id.neq(staff.data.__id)))\n        .first();\n    if (doubleStaff) {\n        Context.data.staff_double = doubleStaff;\n    }\n}\nasync function getDoubleStaff() {\n    if (!Context.data.staff_double)\n        return;\n    const staff = await Context.data.staff.fetch();\n    const doubleStaff = await Context.data.staff_double.fetch();\n    doubleStaff.data.__name = staff.data.__name;\n    doubleStaff.data.full_name = staff.data.full_name;\n    doubleStaff.data.name = staff.data.name;\n    doubleStaff.data.middlename = staff.data.middlename;\n    doubleStaff.data.surname = staff.data.surname;\n    doubleStaff.data.phone = staff.data.phone;\n    doubleStaff.data.email = staff.data.email;\n    doubleStaff.data.ext_user = staff.data.ext_user;\n    doubleStaff.data.external_user = staff.data.external_user;\n    doubleStaff.data.staff_access = staff.data.staff_access;\n    doubleStaff.data.user_already_exists = staff.data.user_already_exists;\n    doubleStaff.data.work_start = staff.data.work_start;\n    doubleStaff.data.beginning_of_the_working_year = staff.data.beginning_of_the_working_year;\n    doubleStaff.data.position = staff.data.position;\n    doubleStaff.data.organization = staff.data.organization;\n    doubleStaff.data.structural_subdivision = staff.data.structural_subdivision;\n    doubleStaff.data.notification = staff.data.notification;\n    doubleStaff.data.is_employed = staff.data.is_employed;\n    doubleStaff.data.unep_issue_required = staff.data.unep_issue_required;\n    doubleStaff.data.personal_data_employee = staff.data.personal_data_employee;\n    doubleStaff.data.scans_personal_docs = staff.data.scans_personal_docs;\n    doubleStaff.data.consent_processing_pdn = staff.data.consent_processing_pdn;\n    doubleStaff.data.signing_soev_office = staff.data.signing_soev_office;\n    doubleStaff.data.documents_for_employment = staff.data.documents_for_employment;\n    doubleStaff.data.date_of_birth = staff.data.date_of_birth;\n    doubleStaff.data.sex = staff.data.sex;\n    doubleStaff.data.directory_of_regions = staff.data.directory_of_regions;\n    doubleStaff.data.city = staff.data.city;\n    doubleStaff.data.street = staff.data.street;\n    doubleStaff.data.home = staff.data.home;\n    doubleStaff.data.housing = staff.data.housing;\n    doubleStaff.data.apartment = staff.data.apartment;\n    doubleStaff.data.address = staff.data.address;\n    doubleStaff.data.passport_series = staff.data.passport_series;\n    doubleStaff.data.passport_number = staff.data.passport_number;\n    doubleStaff.data.passport_department_code = staff.data.passport_department_code;\n    doubleStaff.data.date_of_issue = staff.data.date_of_issue;\n    doubleStaff.data.issued_by = staff.data.issued_by;\n    doubleStaff.data.snils = staff.data.snils;\n    doubleStaff.data.inn = staff.data.inn;\n    doubleStaff.data.staff_categories = staff.data.staff_categories;\n    staff.data.ext_user = undefined;\n    staff.data.external_user = undefined;\n    await doubleStaff.save();\n    await doubleStaff.setStatus(doubleStaff.fields.__status.variants.input_data);\n    await staff.setStatus(staff.fields.__status.variants.rejected);\n    await staff.save();\n    Context.data.staff = doubleStaff;\n}\nasync function generateAppName() {\n    const staff = await Context.data.staff.fetch();\n    const name = staff.data.__name;\n    const appName = `Документы трудоустройства (${name})`;\n    Context.data.app_name = appName;\n}\n;\nasync function checkAggregateApp() {\n    if (Context.data.aggregate_app) {\n        return true;\n    }\n    ;\n    return false;\n}\n;\nasync function setDataLaborContract() {\n    if (Context.data.labor_contract \u0026\u0026 Context.data.staff \u0026\u0026 Context.data.position) {\n        const labor_contract = await Context.data.labor_contract.fetch();\n        const number_contract = labor_contract.data.labor_contract_number;\n        const date_contract = labor_contract.data.labor_contract_date ? labor_contract.data.labor_contract_date : new Datetime;\n        const staff = await Context.data.staff.fetch();\n        if (staff.data.employment_table) {\n            for (let row of staff.data.employment_table) {\n                if (row.position.id == Context.data.position.id) {\n                    row.number_employment_contract = number_contract ? number_contract : '1';\n                    row.date_employment_contract = date_contract.format('DD.MM.YYYY');\n                }\n            }\n            await staff.save();\n        }\n    }\n}\nasync function setStatusAgreementNew() {\n    if (!Context.data.agreement_between_participants_of_electronic_interaction) {\n        throw new Error(\"Context.data.agreement_between_participants_of_electronic_interaction is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.agreement_between_participants_of_electronic_interaction.namespace,\n            code: Context.data.agreement_between_participants_of_electronic_interaction.code,\n            id: Context.data.agreement_between_participants_of_electronic_interaction.id,\n        },\n        status: \"new\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusAgreementCancelled() {\n    if (!Context.data.agreement_between_participants_of_electronic_interaction) {\n        throw new Error(\"Context.data.agreement_between_participants_of_electronic_interaction is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.agreement_between_participants_of_electronic_interaction.namespace,\n            code: Context.data.agreement_between_participants_of_electronic_interaction.code,\n            id: Context.data.agreement_between_participants_of_electronic_interaction.id,\n        },\n        status: \"cancelled\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusAgreementSigned() {\n    if (!Context.data.agreement_between_participants_of_electronic_interaction) {\n        throw new Error(\"Context.data.agreement_between_participants_of_electronic_interaction is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.agreement_between_participants_of_electronic_interaction.namespace,\n            code: Context.data.agreement_between_participants_of_electronic_interaction.code,\n            id: Context.data.agreement_between_participants_of_electronic_interaction.id,\n        },\n        status: \"signed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusDocumentsSigning() {\n    await getDocumentFromMassive('signing');\n}\nasync function setStatusDocumentsCancelled() {\n    await getDocumentFromMassive('cancelled');\n}\nasync function setStatusDocumentsSigned() {\n    await getDocumentFromMassive('signed');\n}\nasync function getDocumentFromMassive(status) {\n    if (Context.data.number_documents) {\n        const document = Context.data.set_documents[Context.data.number_documents - 1];\n        const obj_status = {\n            app: {\n                namespace: document.namespace,\n                code: document.code,\n                id: document.id,\n            },\n            status: status,\n        };\n        Context.data.kedo_status = JSON.stringify(obj_status);\n        Context.data.number_documents -= 1;\n    }\n    else {\n        Context.data.number_documents = 0;\n    }\n}\nasync function checkIntegrationAndParametr() {\n    if (Context.data.generation_labor_documents) {\n        return false;\n    }\n    else {\n        if (Context.data.integration_1c) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nasync function cleanUserDocuments() {\n    let staff = await Context.data.staff.fetch();\n    if (staff.data.documents_for_employment) {\n        let table = staff.data.documents_for_employment;\n        for (let i = 0; i \u003c table.length; i++) {\n            const type_doc = await table[i].doc.fetch();\n            if (type_doc.data.deleted == true) {\n                table.delete(i);\n                i--;\n            }\n            table = table;\n        }\n    }\n    await staff.save();\n}\nasync function checkNeedSoevControll() {\n    let staff = await Context.data.staff.fetch();\n    if (staff.data.organization) {\n        let entity = await staff.data.organization.fetch();\n        Context.data.address_HR_department = entity.data.address_HR_department;\n    }\n    let additional_documents = Context.data.documents_submitted_original ? Context.data.documents_submitted_original : '';\n    if (staff.data.signing_soev_office) {\n        Context.data.documents_submitted_original = 'Уведомление о переходе на КЭДО' + `\\n` + additional_documents;\n        return;\n    }\n    if (staff.data.kedo_agreement) {\n        Context.data.documents_submitted_original = 'Уведомление о переходе на КЭДО' + `\\n` + 'СоЭВ' + `\\n` + additional_documents;\n        return;\n    }\n    Context.data.documents_submitted_original = 'Уведомление о переходе на КЭДО' + `\\n` + additional_documents;\n}\nasync function setTermTransferOriginals() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const deadline_confirming_transfer_original_documents_employer = settings.find(f =\u003e f.data.code == 'deadline_confirming_transfer_original_documents_employer');\n    const number_days = deadline_confirming_transfer_original_documents_employer ? (deadline_confirming_transfer_original_documents_employer.data.quantity ? deadline_confirming_transfer_original_documents_employer.data.quantity : 3) : 3;\n    Context.data.deadline_confirming_transfer_original_documents_employer = (new Datetime).add(new Duration(number_days, 'days'));\n}\nasync function setTermReceivingOriginals() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const deadline_confirming_receipt_original_documents_from_employee = settings.find(f =\u003e f.data.code == 'deadline_confirming_receipt_original_documents_from_employee');\n    const number_days = deadline_confirming_receipt_original_documents_from_employee ? (deadline_confirming_receipt_original_documents_from_employee.data.quantity ? deadline_confirming_receipt_original_documents_from_employee.data.quantity : 10) : 10;\n    Context.data.deadline_confirming_receipt_original_documents_from_employee = (new Datetime).add(new Duration(number_days, 'days'));\n}\nasync function setAddress() {\n    var _a;\n    if (!Context.data.staff) {\n        throw new Error(\"Не указан сотрудник. Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    const region_app = await ((_a = staff.data.directory_of_regions) === null || _a === void 0 ? void 0 : _a.fetch());\n    const region = region_app ? `${region_app.data.__name},` : ``;\n    const housing = staff.data.housing ? ` к.${staff.data.housing}` : ``;\n    const apartment = staff.data.apartment ? ` кв.${staff.data.apartment}` : ``;\n    staff.data.address = `${region} г. ${staff.data.city}, ул. ${staff.data.street}, д.${staff.data.home}${housing}${apartment}`.trim();\n    await staff.save();\n}\nasync function checkGoskeyUnep() {\n    var _a;\n    const staff = await Context.data.staff.fetch();\n    return (_a = staff.data.goskey_nep_released) !== null \u0026\u0026 _a !== void 0 ? _a : false;\n}\n;\nasync function checkSignType() {\n    const staff = await Context.data.staff.fetch();\n    const organization = await staff.data.organization.fetch();\n    if (!organization.data.sign_provider) {\n        return;\n    }\n    ;\n    if (organization.data.sign_provider.map(p =\u003e p.code).indexOf(\"goskey\") !== -1 \u0026\u0026 organization.data.sign_provider.length === 1) {\n        Context.data.docs_signing_type = Context.fields.docs_signing_type.variants.goskey;\n        return;\n    }\n    ;\n    Context.data.sign_type_choice = organization.data.leave_choice_to_staff;\n}\nasync function checkStaffSignType() {\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.docs_signing_type.code == \"goskey\") {\n        Context.data.docs_signing_type = Context.fields.docs_signing_type.variants.goskey;\n    }\n    else {\n        Context.data.docs_signing_type = Context.fields.docs_signing_type.variants.inner_sign;\n    }\n    ;\n}\n","gatewayPairs":{},"hasTranslations":false}
