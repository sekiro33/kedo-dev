{"scripts":"class MyRole {\n    constructor(group, type, code) {\n        this.code = code;\n        this.group = group;\n        this.type = type;\n    }\n    getUsers() {\n        if (this.type == \"group\") {\n            return this.group.users();\n        }\n        else if (this.type == \"orgstruct\") {\n            return System.users.search().where(i =\u003e i.osIds.has(this.group)).size(10000).all();\n        }\n        else\n            return new Promise(() =\u003e this.group);\n    }\n    json() {\n        return {\n            code: this.code,\n            type: this.type\n        };\n    }\n}\n;\nasync function createGroupRights() {\n    const organizations = await Context.fields.org_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const mappedGroups = organizations.map(org =\u003e {\n        if (!org.data.org_groups) {\n            return;\n        }\n        ;\n        return {\n            id: org.id,\n            groups: [...org.data.org_groups.map(g =\u003e g.code)]\n        };\n    }).filter((group) =\u003e group);\n    const allGroups = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null))).size(10000).all();\n    let promises = [];\n    Context.data.debug = JSON.stringify(mappedGroups);\n    for (let orgGroups of mappedGroups) {\n        const organization = organizations.find(org =\u003e org.id === orgGroups.id);\n        const allDocsJson = JSON.parse(Context.data.parent_process_json);\n        for (let groupCode of orgGroups.groups) {\n            const group = allGroups.find(g =\u003e g.id === groupCode);\n            const groupRole = new MyRole(group, \"group\", groupCode);\n            const rightsExists = await Context.fields.rights_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__name.eq(`Права доступа ${group.data.__name}`))).first();\n            if (!rightsExists) {\n                const newRightApp = Context.fields.rights_app.app.create();\n                newRightApp.data.org_groups = [];\n                newRightApp.data.__name = `Права доступа ${group.data.__name}`;\n                newRightApp.data.organization = organization;\n                let table = newRightApp.data.doc_table;\n                for (let doc of allDocsJson) {\n                    const newRow = table.insert();\n                    newRow.doc_type = doc.name;\n                    newRow.ns_and_code = doc.path;\n                    newRow.access = true;\n                }\n                ;\n                newRightApp.data.org_groups = [groupRole];\n                newRightApp.data.doc_table = table;\n                promises.push(newRightApp.save());\n            }\n            else {\n                let table = rightsExists.fields.doc_table.create();\n                for (let doc of allDocsJson) {\n                    const newRow = table.insert();\n                    newRow.doc_type = doc.name;\n                    newRow.ns_and_code = doc.path;\n                    newRow.access = true;\n                }\n                ;\n                rightsExists.data.doc_table = table;\n                promises.push(rightsExists.save());\n                Context.data.debug += `group Права доступа ${group.data.__name} exists`;\n            }\n        }\n        ;\n    }\n    ;\n    await Promise.all(promises);\n}\n;\n","gatewayPairs":{},"hasTranslations":false}
