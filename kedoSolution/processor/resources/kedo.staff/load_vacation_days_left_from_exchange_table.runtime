{"scripts":"let batchSize = 5;\nasync function loadDaysLeftData() {\n    const vacationsData = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.table_name.eq(\"InformationRegister_EM_ОстаткиОтпусков\"))).where((f, g) =\u003e g.or(f.is_processed.eq(false), f.is_processed.eq(null)))\n        .size(batchSize).all();\n    Context.data.continue = true;\n    if (!vacationsData || (vacationsData \u0026\u0026 vacationsData.length === 0)) {\n        Context.data.continue = false;\n        Context.data.debug += ` Закончили цикл `;\n        return;\n    }\n    const vacationsType = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.table_name.eq(\"Catalog_ВидыОтпусков\"))).first();\n    const sortedApps = vacationsData.sort((a, b) =\u003e {\n        const aDate = a.data.__createdAt.asDate();\n        const bDate = b.data.__createdAt.asDate();\n        return bDate - aDate;\n    });\n    const baseArray = [];\n    const latestData = baseArray.concat(...(sortedApps.filter(item =\u003e !!item.data.table_data).map(item =\u003e JSON.parse(item.data.table_data))));\n    Context.data.debug += ` latest data ${latestData.length}`;\n    if (!!latestData \u0026\u0026 !!vacationsType) {\n        const types = JSON.parse(vacationsType.data.table_data);\n        const parsedVacationsData = latestData.map((item) =\u003e {\n            return item.data[\"Record\"];\n        });\n        await parseData(parsedVacationsData);\n    }\n    else {\n        Context.data.days_left_data = JSON.stringify([]);\n        Context.data.debug += ` Не загружены данные о типах отпусков или нет данных об остатках отпусков `;\n    }\n}\nasync function parseData(data) {\n    const vacations = [];\n    if (!data) {\n        return;\n    }\n    Context.data.debug += ' data length ' + data.length;\n    let loadPositions = false;\n    if (data \u0026\u0026 data[0] \u0026\u0026 data[0][0] \u0026\u0026 data[0][0].hasOwnProperty(\"ФизЛицо\")) {\n        loadPositions = true;\n    }\n    for (let i = 0; i \u003c data.length; i++) {\n        for (let j = 0; j \u003c data[i].length; j++) {\n            const employeeData = data[i][j];\n            const employee = vacations.find((item) =\u003e item.employeeId === employeeData[\"Сотрудник\"] \u0026\u0026 item.vacType === employeeData[\"ТипОтпуска\"]);\n            if (!employee) {\n                if (!loadPositions) {\n                    vacations.push({\n                        employeeId: employeeData[\"Сотрудник\"],\n                        individualEmployeeId: \"\",\n                        amount: parseFloat(employeeData[\"ОстатокДней\"]),\n                        vacType: employeeData[\"ТипОтпуска\"],\n                    });\n                }\n                else {\n                    vacations.push({\n                        employeeId: employeeData[\"Сотрудник\"],\n                        individualEmployeeId: employeeData[\"ФизЛицо\"],\n                        amount: parseFloat(employeeData[\"ОстатокДней\"]),\n                        vacType: employeeData[\"ТипОтпуска\"],\n                    });\n                }\n            }\n        }\n    }\n    await updateVacationData(vacations, data);\n}\nasync function updateVacationData(vacations_data, days_left_data) {\n    const vacationsLeftovers = await Namespace.app.vacation_leftovers.search()\n        .where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const vacations = vacations_data;\n    if (vacations.length === 0) {\n        return;\n    }\n    let loadPositions = false;\n    if (vacations \u0026\u0026 vacations[0].individualEmployeeId != \"\") {\n        loadPositions = true;\n    }\n    let promises = [];\n    let employees;\n    if (!loadPositions) {\n        const employeesIds = vacations.map((item) =\u003e item.employeeId);\n        employees = await Namespace.app.staff.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.id_1c.in(employeesIds))).size(10000).all();\n        for (let i = 0; i \u003c employees.length; i++) {\n            const currentEmployee = employees[i];\n            const employeeVacations = vacations.filter((item) =\u003e {\n                return item.employeeId === currentEmployee.data.id_1c;\n            });\n            const totalAmount = employeeVacations.reduce((acc, value) =\u003e acc + value.amount, 0);\n            currentEmployee.data.remaining_vacation_days = Math.ceil(totalAmount);\n            promises.push(currentEmployee.save());\n            if (promises.length \u003e= 20) {\n                await Promise.all(promises);\n                promises = [];\n            }\n        }\n    }\n    else {\n        const employeesIds = vacations.map((item) =\u003e item.individualEmployeeId);\n        employees = await Namespace.app.staff.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.individual_id_1c.in(employeesIds))).size(10000).all();\n        for (let i = 0; i \u003c employees.length; i++) {\n            const currentEmployee = employees[i];\n            const employeeVacations = vacations.filter((item) =\u003e {\n                return item.individualEmployeeId === currentEmployee.data.individual_id_1c \u0026\u0026 item.employeeId === currentEmployee.data.id_1c;\n            });\n            const totalAmount = employeeVacations.reduce((acc, value) =\u003e acc + Math.round(value.amount), 0);\n            currentEmployee.data.remaining_vacation_days = Math.ceil(totalAmount);\n            promises.push(currentEmployee.save());\n            if (promises.length \u003e= 20) {\n                await Promise.all(promises);\n                promises = [];\n            }\n        }\n    }\n    await Promise.all(promises);\n    promises = [];\n    const data = days_left_data;\n    const vacationTypes = await Namespace.app.type_vacations_1c.search()\n        .where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    for (let i = 0; i \u003c data.length; i++) {\n        for (let j = 0; j \u003c data[i].length; j++) {\n            const employeeData = data[i][j];\n            const employee = employees.find((item) =\u003e {\n                if (!loadPositions) {\n                    return item.data.id_1c === employeeData[\"Сотрудник\"];\n                }\n                else {\n                    return item.data.individual_id_1c === employeeData[\"ФизЛицо\"];\n                }\n            });\n            if (!!employee) {\n                employee.data.vacation_leftovers = [];\n                if (employee.data.employment_table \u0026\u0026 employee.data.employment_table.length \u003e 0) {\n                    employee.data.employment_table.forEach(item =\u003e {\n                        item.remaining_vacations = [];\n                    });\n                }\n                promises.push(employee.save());\n                if (promises.length \u003e= 20) {\n                    await Promise.all(promises);\n                    promises = [];\n                }\n            }\n        }\n    }\n    await Promise.all(promises);\n    promises = [];\n    const employeeIds = [];\n    for (let i = 0; i \u003c vacations.length; i++) {\n        const employeeData = vacations[i];\n        const vacationType = vacationTypes.find(item =\u003e item.data.guid === employeeData.vacType);\n        let employee;\n        if (!loadPositions) {\n            employee = employees.find((item) =\u003e {\n                if (item.data.id_1c === employeeData.employeeId) {\n                    return true;\n                }\n                else {\n                    if (!item.data.employment_table || item.data.employment_table.length === 0)\n                        return false;\n                    const existsInEmploymentTable = item.data.employment_table.find(row =\u003e row.id_1c === employeeData.employeeId);\n                    return !!existsInEmploymentTable;\n                }\n            });\n        }\n        else {\n            employee = employees.find((item) =\u003e {\n                if (item.data.individual_id_1c === employeeData.individualEmployeeId) {\n                    return true;\n                }\n            });\n        }\n        let position = undefined;\n        let workplace = \"\";\n        if (loadPositions \u0026\u0026 !!employee) {\n            const row = employee.data.employment_table.find(elem =\u003e elem.id_1c === employeeData.employeeId);\n            if (row) {\n                position = row.position;\n            }\n        }\n        let appfind;\n        appfind = vacationsLeftovers.find(item =\u003e item.data.guid_type_vacation === employeeData.vacType \u0026\u0026 item.data.guid_staff === employeeData.employeeId \u0026\u0026 !item.data.__deletedAt);\n        if (!appfind) {\n            appfind = Namespace.app.vacation_leftovers.create();\n        }\n        if (!!employee) {\n            if (!!vacationType) {\n                appfind.data.vacation_type_app = vacationType;\n                appfind.data.vacation_name = vacationType.data.__name;\n                appfind.data.__name = `${employee.data.__name} - ${vacationType.data.__name}`;\n            }\n            appfind.data.guid_staff = employeeData.employeeId;\n            employeeIds.push(employeeData.employeeId);\n            appfind.data.guid_type_vacation = employeeData.vacType;\n            appfind.data.staff = employee;\n            appfind.data.remainder = Math.ceil(employeeData.amount);\n            if (loadPositions) {\n                appfind.data.position = position;\n            }\n            promises.push(appfind.save());\n            if (promises.length \u003e= 50) {\n                await Promise.all(promises);\n                promises = [];\n            }\n        }\n    }\n    await Promise.all(promises);\n    Context.data.employee_ids = JSON.stringify(employeeIds);\n}\nasync function saveEmployee(employee) {\n    try {\n        employee.save();\n    }\n    catch (e) {\n        Context.data.debug += String(e);\n    }\n}\nasync function linkVacations() {\n    if (!Context.data.employee_ids)\n        return;\n    const employeeIds = JSON.parse(Context.data.employee_ids);\n    const employees = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.id_1c.in(employeeIds))).size(10000).all();\n    const vacations = await Namespace.app.vacation_leftovers.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null))).size(10000).all();\n    let promises = [];\n    for (let i = 0; i \u003c employees.length; i++) {\n        const currentEmployee = employees[i];\n        const mainId = currentEmployee.data.id_1c;\n        const additIds = [];\n        if (currentEmployee.data.employment_table) {\n            for (let j = 0; j \u003c currentEmployee.data.employment_table.length; j++) {\n                additIds.push(currentEmployee.data.employment_table[j].id_1c);\n            }\n        }\n        const employeeVacations = vacations.filter(item =\u003e item.data.guid_staff === mainId || !!(additIds.find((id) =\u003e item.data.guid_staff === id)));\n        employeeVacations.forEach(item =\u003e {\n            if (item.data.guid_staff === mainId) {\n                currentEmployee.data.vacation_leftovers.push(item);\n            }\n            if (!currentEmployee.data.employment_table || currentEmployee.data.employment_table.length === 0) {\n                return;\n            }\n            const currentEmployeeRow = currentEmployee.data.employment_table.find(row =\u003e row.id_1c === item.data.guid_staff);\n            if (!currentEmployeeRow) {\n                return;\n            }\n            currentEmployeeRow.remaining_vacations.push(item);\n        });\n        promises.push(saveEmployee(currentEmployee));\n        if (promises.length \u003e= 50) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nasync function markDataAsProcessed() {\n    const vacationsData = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.table_name.eq(\"InformationRegister_EM_ОстаткиОтпусков\"))).where((f, g) =\u003e g.or(f.is_processed.eq(false), f.is_processed.eq(null)))\n        .size(batchSize).all();\n    let promises = [];\n    for (let table of vacationsData) {\n        table.data.is_processed = true;\n        promises.push(table.save());\n        if (promises.length \u003e= 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nasync function fillTheRest() {\n    try {\n        const vacation_leftovers = await Namespace.app.vacation_leftovers.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n        let promises = [];\n        for (let vl of vacation_leftovers) {\n            if (!vl.data.staff || !vl.data.position || !vl.data.type_employment) {\n                const employee = await Namespace.app.staff.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.id_1c.eq(vl.data.guid_staff))).size(10000).first();\n                if (employee) {\n                    vl.data.staff = employee;\n                    vl.data.position = employee.data.position;\n                    vl.data.type_employment = Context.fields.staff.app.fields.employment_table.fields.type_employment.variants.main_workplace.name;\n                    promises.push(vl.save());\n                    if (promises.length \u003e= 20) {\n                        await Promise.all(promises);\n                        promises = [];\n                    }\n                }\n            }\n        }\n        await Promise.all(promises);\n    }\n    catch (e) {\n        Context.data.debug += ` Error while saving the vacation leftovers `;\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
