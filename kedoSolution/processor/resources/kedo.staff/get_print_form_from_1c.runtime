{"scripts":"async function search_integration_apps() {\n    if (!Context.data.integration_apps) {\n        Context.data.integration_apps = [];\n    }\n    const integration_apps = await Context.fields.integration_apps.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.document_odata_name.eq(\"Document_ПриемНаРаботу\"), f.__status.eq(Context.fields.await_document.app.fields.__status.variants.received), f.processed_elma.eq(false)))\n        .size(10000)\n        .sort(\"__createdAt\", true)\n        .all();\n    const staff = await Context.data.staff.fetch();\n    const promises = [];\n    for (const doc of integration_apps) {\n        if (!doc.data.personal_guid_1c) {\n            continue;\n        }\n        const personal_guid_1c = JSON.parse(doc.data.personal_guid_1c);\n        if (personal_guid_1c[0] == staff.data.id_1c || personal_guid_1c[0] == staff.data.individual_id_1c) {\n            Context.data.integration_apps.push(doc);\n            doc.data.processed_elma = true;\n            promises.push(doc.save());\n        }\n    }\n    await Promise.all(promises);\n}\nasync function check_document() {\n    return Context.data.integration_apps \u0026\u0026 Context.data.integration_apps.length \u003e 0 ? true : false;\n}\nasync function get_id_document_1c() {\n    if (Context.data.integration_apps \u0026\u0026 Context.data.integration_apps.length \u003e 0) {\n        const integration_app = await Context.data.integration_apps[0].fetch();\n        Context.data.id_document_1c = integration_app.data.doc_id_1c;\n    }\n}\nasync function getOtherDocFile() {\n    const index = Context.data.row_counter;\n    const file = Context.data.docs[index].doc_file;\n    Context.data.file = file;\n}\nasync function getAdditionalDocFile() {\n    const index = Context.data.row_counter;\n    const file = Context.data.additional_agreements[index].file;\n    Context.data.file = file;\n}\nasync function getFileName() {\n    if (!Context.data.file) {\n        return;\n    }\n    const file = await Context.data.file.fetch();\n    Context.data.file_name = file.data.__name.replace(/\\.[^.$]+$/, '');\n}\nasync function fill_doc_table() {\n    if (!Context.data.integration_apps || Context.data.integration_apps.length == 0) {\n        Context.data.error = 'Не найдено приложение интеграции';\n        throw new Error(Context.data.error);\n    }\n    const integration_apps = await Context.fields.integration_apps.fetchAll();\n    const document_types = await Context.fields.document_types.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const doc_table = Context.data.docs;\n    const additional_agreement = Context.data.additional_agreements;\n    for (const app of integration_apps) {\n        const print_forms_table = app.data.print_forms_table;\n        for (const row of print_forms_table) {\n            const doc_type = document_types.find(f =\u003e f.data.doc_type_id_1c == row.id_1c);\n            if (!doc_type) {\n                continue;\n            }\n            switch (doc_type.data.app_code) {\n                case 'labor_contract':\n                    Context.data.labor_contract_file = row.print_form;\n                    break;\n                case 'admission_order':\n                    Context.data.admission_order_file = row.print_form;\n                    break;\n                case 'job_application':\n                    Context.data.file_job_application = row.print_form;\n                    break;\n                case 'information_about_labor_activity':\n                    Context.data.file_information_about_labor_activity = row.print_form;\n                    break;\n                case 'additional_agreement':\n                    let additional_agreement_row = additional_agreement.find(f =\u003e f.print_form_id == row.id_1c);\n                    if (!additional_agreement_row) {\n                        additional_agreement_row = additional_agreement.insert();\n                    }\n                    additional_agreement_row.file = row.print_form;\n                    additional_agreement_row.view_file = row.print_form;\n                    additional_agreement_row.print_form_id = row.id_1c;\n                    break;\n                case 'additional_agreement_to_the_contract':\n                default:\n                    let other_employment_doc_row = doc_table.find(f =\u003e f.print_form_id == row.id_1c);\n                    if (!other_employment_doc_row) {\n                        other_employment_doc_row = doc_table.insert();\n                    }\n                    other_employment_doc_row.doc_file = row.print_form;\n                    other_employment_doc_row.view_file = row.print_form;\n                    other_employment_doc_row.print_form_id = row.id_1c;\n                    break;\n            }\n        }\n    }\n}\nasync function create_other_docs() {\n    var _a;\n    const index = Context.data.row_counter;\n    const row = Context.data.docs[index];\n    if (row \u0026\u0026 row.doc_type) {\n        const other_doc = Context.fields.additional_agreement_to_the_contract.app.create();\n        other_doc.data.doc_type = (_a = row.doc_type) !== null \u0026\u0026 _a !== void 0 ? _a : undefined;\n        other_doc.data.__file = Context.data.file;\n        other_doc.data.line_file_name = Context.data.file_name;\n        other_doc.data.staff = Context.data.staff;\n        other_doc.data.responsible_user = Context.data.responsible;\n        other_doc.data.responsible = Context.data.responsible_name;\n        await other_doc.save();\n    }\n}\nasync function check_docs_table() {\n    if (!Context.data.docs || Context.data.docs \u0026\u0026 Context.data.docs.length == 0) {\n        return false;\n    }\n    if (Context.data.row_counter \u003c Context.data.docs.length) {\n        return true;\n    }\n    return false;\n}\nasync function inc_counter() {\n    Context.data.row_counter += 1;\n}\nasync function reset_counter() {\n    Context.data.row_counter = 0;\n}\nasync function create_additional_agreement() {\n    const index = Context.data.row_counter;\n    const row = Context.data.additional_agreements[index];\n    if (row) {\n        const additional_agreement = Context.fields.additional_agreement.app.create();\n        additional_agreement.data.__file = Context.data.file;\n        additional_agreement.data.line_file_name = Context.data.file_name;\n        additional_agreement.data.staff = Context.data.staff;\n        additional_agreement.data.responsible_user = Context.data.responsible;\n        additional_agreement.data.responsible = Context.data.responsible_name;\n        await additional_agreement.save();\n    }\n}\nasync function check_additional_agreement_table() {\n    if (!Context.data.additional_agreements || Context.data.additional_agreements \u0026\u0026 Context.data.additional_agreements.length == 0) {\n        return false;\n    }\n    if (Context.data.row_counter \u003c Context.data.additional_agreements.length) {\n        return true;\n    }\n    return false;\n}\nasync function get_kedo_settings() {\n    const settings = await Namespace.app.settings.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null))).size(10000).all();\n    const app_employment = settings.find(f =\u003e f.data.code == 'app_employment');\n    Context.data.app_employment_required = app_employment ? app_employment.data.status : false;\n    const admission_order = settings.find(f =\u003e f.data.code == 'admission_order');\n    Context.data.admission_order_required = admission_order ? admission_order.data.status : false;\n    const app_labor = settings.find(f =\u003e f.data.code == 'information_about_labor_activity');\n    Context.data.app_labor_required = app_labor ? app_labor.data.status : false;\n}\nasync function check_print_forms_table() {\n    if (Context.data.print_forms_table \u0026\u0026 Context.data.print_forms_table.length \u003e 0) {\n        return true;\n    }\n    return false;\n}\nasync function getLaborContractNumber() {\n    if (!Context.data.labor_contract) {\n        throw new Error(\"Не найдено приложение трудового договора. Context.data.labor_contract is undefined\");\n    }\n    const labor_contract = await Context.data.labor_contract.fetch();\n    if (!labor_contract.data.__index) {\n        throw new Error(\"Не удалось получить номер трудового договора. labor_contract.data.__index is undefined\");\n    }\n    Context.data.labor_contract_number = labor_contract.data.__index.toString();\n}\nasync function getAdmissionOrderNumber() {\n    if (!Context.data.admission_order) {\n        throw new Error(\"Не найдено приложение приказа о приеме. Context.data.admission_order is undefined\");\n    }\n    const admission_order = await Context.data.admission_order.fetch();\n    if (!admission_order.data.__index) {\n        throw new Error(\"Не удалось получить номер приказа о приеме. admission_order.data.__index is undefined\");\n    }\n    Context.data.admission_order_number = admission_order.data.__index.toString();\n}\nasync function getResponsibleUser() {\n    if (!Context.data.hr_staff || Context.data.hr_staff.length == 0) {\n        throw new Error(\"Не найден ответственный пользователь. Context.data.hr_staff is empty or undefined\");\n    }\n    const responsible = await Context.data.hr_staff[0].fetch();\n    const full_name = responsible.data.fullname;\n    const formatted_name = responsible.data.responsible = (full_name === null || full_name === void 0 ? void 0 : full_name.middlename) ?\n        `${full_name === null || full_name === void 0 ? void 0 : full_name.lastname} ${full_name === null || full_name === void 0 ? void 0 : full_name.firstname[0]}. ${full_name === null || full_name === void 0 ? void 0 : full_name.middlename[0]}.` :\n        `${full_name === null || full_name === void 0 ? void 0 : full_name.lastname} ${full_name === null || full_name === void 0 ? void 0 : full_name.firstname[0]}`;\n    Context.data.responsible = responsible;\n    Context.data.responsible_name = formatted_name;\n}\n","gatewayPairs":{},"hasTranslations":false}
