{"scripts":"const getModulesIds = () =\u003e {\n    let ids = [\n        \"27c1fb4a-e011-47a6-aa26-cf0fc42c39cd\",\n        \"7fe3de7d-f459-4f75-940c-271c6e9ea1ed\",\n    ];\n    if (Context.data.need_integration_1c == true) {\n        ids.push(\"3c26e96d-9ba5-486d-a26e-47918e61fad3\");\n    }\n    return ids;\n};\nconst VACATION_SOLUTION = \"otpuska\";\nconst BUSINESS_TRIP_SOLUTION = \"komandirovki\";\nasync function setTokenSetting() {\n    let api_key = await Context.fields.settings.app.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n    if (!api_key) {\n        api_key = Context.fields.settings.app.create();\n        api_key.data.code = \"api_key\";\n        api_key.data.__name = \"Api-ключ для методов в модуле\";\n    }\n    api_key.data.value = Context.data.token;\n    await api_key.save();\n}\nasync function checkOrganization() {\n    const organizations = await Namespace.app.organization.search().where(f =\u003e f.__deletedAt.eq(null)).size(100).all();\n    const setting = await Context.fields.settings.app.search().where(f =\u003e f.code.eq('updating_rights_required')).first();\n    const updating_rights_required = setting \u0026\u0026 setting.data.status ? setting.data.status : true;\n    return updating_rights_required \u0026\u0026 organizations.length \u003e 0;\n}\nasync function getModulesRequest(moduleIds) {\n    const modules = [];\n    try {\n        const requests = moduleIds.map(id =\u003e fetch(`${System.getBaseUrl()}/pub/v1/scheme/modules/${id}`, {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${Context.data.token}`,\n            }\n        }));\n        await Promise.all(requests)\n            .then(responses =\u003e Promise.all(responses.map(r =\u003e r.json())))\n            .then(data =\u003e data.forEach(moduleResponse =\u003e {\n            modules.push(moduleResponse.module);\n        }));\n        return modules;\n    }\n    catch (error) {\n        throw new Error(error);\n    }\n}\nasync function getModules() {\n    const modules = await getModulesRequest(getModulesIds());\n    const disabledModules = modules.filter(f =\u003e f != undefined \u0026\u0026 f.enabled == false);\n    if (disabledModules.length \u003e 0) {\n        throw \"Обнаружены выключенные модули\";\n    }\n}\nasync function getSolutionsRequest() {\n    let solutions = [];\n    try {\n        const request = await fetch(`${System.getBaseUrl()}/pub/v1/scheme/solutions`, {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${Context.data.token}`\n            }\n        });\n        if (!request.ok) {\n            throw new Error(JSON.stringify(request));\n        }\n        const response = await request.json();\n        solutions = response.result.result;\n        return solutions;\n    }\n    catch (error) {\n        throw new Error(error);\n    }\n}\nasync function getSolutions() {\n    const solutions = await getSolutionsRequest();\n    Context.data.absences_enabled = solutions.find(f =\u003e f.code == VACATION_SOLUTION) ? true : false;\n    Context.data.business_trips_enabled = solutions.find(f =\u003e f.code == BUSINESS_TRIP_SOLUTION) ? true : false;\n}\nasync function vacationsConfigure() {\n    const request = await fetch(`${System.getBaseUrl()}/pub/v1/bpm/template/absences.settings/initial_setting/run`, {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${Context.data.token}`\n        },\n        body: JSON.stringify({\n            \"context\": {}\n        })\n    });\n    if (!request.ok) {\n        throw new Error(`Не удалось запустить процесс первичной настройки отпусков. \\n Request: ${JSON.stringify(request)}`);\n    }\n}\nasync function businessTripConfigure() {\n    const request = await fetch(`${System.getBaseUrl()}/pub/v1/bpm/template/business_trips.nastroiki/initial_setting/run`, {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${Context.data.token}`\n        },\n        body: JSON.stringify({\n            \"context\": {}\n        })\n    });\n    if (!request.ok) {\n        throw new Error(`Не удалось запустить процесс первичной настройки командировок. \\n Request: ${JSON.stringify(request)}`);\n    }\n}\nasync function enable1cIntegration() {\n    var _a, _b;\n    const integration_1c = await Context.fields.settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('integration_1c')))\n        .first();\n    const alternative_integration = await Context.fields.settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('use_alternative_integration')))\n        .first();\n    if (!alternative_integration || !integration_1c) {\n        throw new Error(\"Не найдены настройки интеграции с 1С\");\n    }\n    alternative_integration.data.status = (_a = Context.data.need_integration_1c) !== null \u0026\u0026 _a !== void 0 ? _a : false;\n    integration_1c.data.status = (_b = Context.data.need_integration_1c) !== null \u0026\u0026 _b !== void 0 ? _b : false;\n    await Promise.all([alternative_integration.save(), integration_1c.save()]);\n}\nasync function setNewMethodCreateSign() {\n    let new_method_create_sign = await Context.fields.settings.app.search().where(f =\u003e f.code.eq('new_method_create_sign')).first();\n    if (!new_method_create_sign) {\n        throw new Error(\"Не найдена настройка 'Использовать модуль Интеграция с УЦ для выдачи НЭП' с кодом 'new_method_create_sign'\");\n    }\n    new_method_create_sign.data.status = true;\n    await new_method_create_sign.save();\n}\nasync function fillRealatedDocumentsTable() {\n    try {\n        const request = await fetch(`${System.getBaseUrl()}/pub/v1/bpm/template/ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed/fill_related_documents_table_workflow/run`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${Context.data.token}`\n            },\n            body: JSON.stringify({ context: {} })\n        });\n        if (!request.ok) {\n            throw new Error(JSON.stringify(request));\n        }\n    }\n    catch (error) {\n        throw new Error(error);\n    }\n}\nasync function fillGUIDTable() {\n    const request = await fetch(`${System.getBaseUrl()}/pub/v1/bpm/template/kedo.staff/filling_the_guid_table/run`, {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${Context.data.token}`\n        },\n        body: JSON.stringify({\n            \"context\": {}\n        })\n    });\n    if (!request.ok) {\n        throw new Error(`Не удалось запустить процесс Заполнения таблицы GUID у сотрудников. \\n Request: ${JSON.stringify(request)}`);\n    }\n}\n","gatewayPairs":{"/items/04851b9d-68e2-4591-8dc5-98dc38ec9489":"/items/216a313b-7315-4983-a61f-5bef3d193d9d"},"hasTranslations":false}
