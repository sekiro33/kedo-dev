{
  "scripts": "var CombinationType;\n(function (CombinationType) {\n    CombinationType[CombinationType[\"EXPANSION_SERVICE_AREAS\"] = 0] = \"EXPANSION_SERVICE_AREAS\";\n    CombinationType[CombinationType[\"PERFOMANCE_DUTIES\"] = 1] = \"PERFOMANCE_DUTIES\";\n    CombinationType[CombinationType[\"PROFESSIONAL_DUTIES\"] = 2] = \"PROFESSIONAL_DUTIES\";\n})(CombinationType || (CombinationType = {}));\nvar SurchargeType;\n(function (SurchargeType) {\n    SurchargeType[SurchargeType[\"FIXED_AMOUNT\"] = 0] = \"FIXED_AMOUNT\";\n    SurchargeType[SurchargeType[\"COMBINATION_PERCENT\"] = 1] = \"COMBINATION_PERCENT\";\n    SurchargeType[SurchargeType[\"MAIN_POSITION_PERCENT\"] = 2] = \"MAIN_POSITION_PERCENT\";\n})(SurchargeType || (SurchargeType = {}));\nconst coefficient = 0.25 / 30;\nfunction round(value, precision) {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n}\nasync function action() {\n    var _a, _b, _c, _d, _e;\n    if (!Context.data.execution_duties_data) {\n        throw new Error(\"Context.data.execution_duties_data is undefined\");\n    }\n    const exectuion_duties_data = JSON.parse(Context.data.execution_duties_data);\n    const current_date = new Datetime();\n    const body = {\n        \"Date\": current_date.format(\"YYYY-MM-DDT00:00:00\"),\n        \"ПериодРегистрации\": current_date.format(\"YYYY-MM-01T00:00:00\"),\n        \"ДатаНачала\": exectuion_duties_data.start_date,\n        \"ДатаОкончания\": exectuion_duties_data.end_date,\n        \"СовмещающийСотрудник_Key\": exectuion_duties_data.replacement_staff.id_1c,\n        \"Организация_Key\": exectuion_duties_data.absent_staff.organization_id,\n        \"Комментарий\": (_a = exectuion_duties_data.comment) !== null && _a !== void 0 ? _a : \"\",\n        \"РазмерДоплатыУтвержден\": true,\n    };\n    switch (exectuion_duties_data.combination_type) {\n        case CombinationType.EXPANSION_SERVICE_AREAS: {\n            body[\"ПричинаСовмещения\"] = \"УвеличениеОбъемаРабот\";\n            body[\"КоличествоСтавок\"] = 0.125;\n            if (exectuion_duties_data.surcharge_type == SurchargeType.MAIN_POSITION_PERCENT || exectuion_duties_data.surcharge_type == SurchargeType.COMBINATION_PERCENT) {\n                body[\"РассчитыватьДоплату\"] = true;\n                body[\"СпособРасчетаДоплаты\"] = \"ПроцентФОТСовмещающего\";\n                body[\"ПроцентДоплаты\"] = exectuion_duties_data.percent;\n            }\n            if (exectuion_duties_data.surcharge_type == SurchargeType.FIXED_AMOUNT) {\n                body[\"РассчитыватьДоплату\"] = false;\n                body[\"РазмерДоплаты\"] = exectuion_duties_data.percent;\n            }\n            break;\n        }\n        case CombinationType.PERFOMANCE_DUTIES: {\n            body[\"ПричинаСовмещения\"] = \"ИсполнениеОбязанностей\";\n            body[\"ОтсутствующийСотрудник_Key\"] = exectuion_duties_data.absent_staff.id_1c;\n            if (exectuion_duties_data.surcharge_type == SurchargeType.MAIN_POSITION_PERCENT || exectuion_duties_data.surcharge_type == SurchargeType.COMBINATION_PERCENT) {\n                body[\"РассчитыватьДоплату\"] = true;\n                body[\"СпособРасчетаДоплаты\"] = \"ПроцентФОТСовмещающего\";\n                body[\"ПроцентДоплаты\"] = exectuion_duties_data.percent;\n            }\n            if (exectuion_duties_data.surcharge_type == SurchargeType.FIXED_AMOUNT) {\n                body[\"РассчитыватьДоплату\"] = false;\n                body[\"РазмерДоплаты\"] = exectuion_duties_data.percent;\n            }\n            break;\n        }\n        case CombinationType.PROFESSIONAL_DUTIES: {\n            body[\"ПричинаСовмещения\"] = \"СовмещениеПрофессийДолжностей\";\n            body[\"СовмещаемаяДолжность_Key\"] = exectuion_duties_data.absent_staff.position_id;\n            body[\"КоличествоСтавок\"] = 0.125;\n            if (exectuion_duties_data.surcharge_type == SurchargeType.COMBINATION_PERCENT) {\n                body[\"РассчитыватьДоплату\"] = true;\n                body[\"СпособРасчетаДоплаты\"] = \"ПроцентФОТ\";\n                body[\"ПроцентДоплаты\"] = exectuion_duties_data.percent;\n                body[\"КоличествоСтавок\"] = round(coefficient * ((_b = exectuion_duties_data.percent) !== null && _b !== void 0 ? _b : 0), 2);\n            }\n            if (exectuion_duties_data.surcharge_type == SurchargeType.MAIN_POSITION_PERCENT) {\n                body[\"РассчитыватьДоплату\"] = true;\n                body[\"СпособРасчетаДоплаты\"] = \"ПроцентФОТСовмещающего\";\n                body[\"ПроцентДоплаты\"] = exectuion_duties_data.percent;\n                body[\"КоличествоСтавок\"] = round(coefficient * ((_c = exectuion_duties_data.percent) !== null && _c !== void 0 ? _c : 0), 2);\n            }\n            if (exectuion_duties_data.surcharge_type == SurchargeType.FIXED_AMOUNT) {\n                body[\"РассчитыватьДоплату\"] = false;\n                body[\"РазмерДоплаты\"] = exectuion_duties_data.percent;\n            }\n            break;\n        }\n        default: {\n            throw new Error(`Неизвестный тип замещения: ${exectuion_duties_data.combination_type}`);\n        }\n    }\n    const accounting1c = Namespace.params.fields.integration_app.app.fields.accounting_systems.variants.zup_1c;\n    const integration_app = Namespace.params.fields.integration_app.app.create();\n    integration_app.data.__name = `Исполнение обязанностей (${exectuion_duties_data.name})`;\n    integration_app.data.document_odata_name = \"Document_Совмещение\";\n    integration_app.data.accounting_systems = accounting1c;\n    integration_app.data.personal_guid_1c = JSON.stringify([]);\n    integration_app.data.document_creation_data = JSON.stringify(body);\n    integration_app.data.additional_info = (_d = Context.data.additional_info) !== null && _d !== void 0 ? _d : \"\";\n    integration_app.data.base_1c_name = (_e = Context.data.connection_name) !== null && _e !== void 0 ? _e : \"\";\n    integration_app.data.related_element = Context.data.app;\n    await integration_app.save();\n    Context.data.integration_app_id = integration_app.data.__id;\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
