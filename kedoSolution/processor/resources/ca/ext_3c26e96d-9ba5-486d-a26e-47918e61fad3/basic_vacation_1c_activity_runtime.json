{
  "scripts": "async function action() {\n    var _a, _b, _c;\n    if (!Context.data.vacation_data) {\n        throw new Error(\"Context.data.vacation_data is undefined\");\n    }\n    const current_date = new Datetime();\n    const vacation_data = JSON.parse(Context.data.vacation_data);\n    let body = {\n        \"Date\": current_date.format(\"YYYY-MM-DDT00:00:00\"),\n        \"ПериодРегистрации\": current_date.format(\"YYYY-MM-01T00:00:00\"),\n        \"Организация_Key\": vacation_data.staff.organization_id,\n        \"ФизическоеЛицо_Key\": vacation_data.staff.individual_id_1c,\n        \"Сотрудник_Key\": vacation_data.staff.id_1c,\n        \"ПланируемаяДатаВыплаты\": vacation_data.planned_pay_date,\n        \"РассчитатьЗарплату\": true,\n        \"АвтозаполнениеПериодовОплаты\": true,\n        \"ПорядокВыплаты\": \"Межрасчет\",\n    };\n    if (vacation_data.provide_basic == true) {\n        body = Object.assign(Object.assign({}, body), { \"ПредоставитьОсновнойОтпуск\": true, \"ДатаНачалаОсновногоОтпуска\": vacation_data.start_date, \"ДатаНачалаПериодаОтсутствия\": vacation_data.start_date, \"ДатаОкончанияПериодаОтсутствия\": vacation_data.end_date, \"ДатаОкончанияОсновногоОтпуска\": vacation_data.end_date, \"КоличествоДнейОсновногоОтпуска\": vacation_data.duration, \"Основание\": vacation_data.statement });\n    }\n    if (vacation_data.provide_additional == true) {\n        body = Object.assign(Object.assign({}, body), { \"ПредоставитьДополнительныйОтпуск\": true, \"ДополнительныеОтпуска\": vacation_data.additional_vacations\n                .map(v => {\n                return {\n                    \"ВидОтпуска_Key\": v.vacation_type,\n                    \"КоличествоДней\": v.duration,\n                    \"ДатаНачала\": v.start_date,\n                    \"ДатаОкончания\": v.end_date,\n                    \"Основание\": v.statement,\n                };\n            }) });\n    }\n    const accounting1c = Namespace.params.fields.integration_app.app.fields.accounting_systems.variants.zup_1c;\n    let integration_app;\n    if (Context.data.vacation_transfer == true && Context.data.document_1c_id) {\n        integration_app = await Namespace.params.fields.integration_app.app.search()\n            .where((f, g) => g.and(f.__deletedAt.eq(null), f.doc_id_1c.eq(Context.data.document_1c_id)))\n            .first();\n        if (!integration_app) {\n            throw new Error(`Не удалось найти приложение интеграции по заданному ID документа 1С: ${Context.data.document_1c_id}`);\n        }\n        const ready_status = Namespace.params.fields.integration_app.app.fields.__status.variants.ready;\n        integration_app.data.document_creation_data = JSON.stringify(body);\n        integration_app.data.isCorrection = true;\n        integration_app.data.status_1c = undefined;\n        integration_app.data.additional_info = (_a = Context.data.additional_info) !== null && _a !== void 0 ? _a : \"\";\n        integration_app.data.base_1c_name = (_b = Context.data.connection_name) !== null && _b !== void 0 ? _b : undefined;\n        integration_app.data.related_element = Context.data.app;\n        await integration_app.setStatus(ready_status);\n    }\n    else {\n        integration_app = Namespace.params.fields.integration_app.app.create();\n        integration_app.data.__name = `Отпуск (${vacation_data.staff.name})`;\n        integration_app.data.document_odata_name = \"Document_Отпуск\";\n        integration_app.data.accounting_systems = accounting1c;\n        integration_app.data.personal_guid_1c = JSON.stringify([vacation_data.staff.individual_id_1c]);\n        integration_app.data.document_creation_data = JSON.stringify(body);\n        integration_app.data.additional_info = (_c = Context.data.additional_info) !== null && _c !== void 0 ? _c : \"\";\n        integration_app.data.base_1c_name = Context.data.connection_name;\n        integration_app.data.related_element = Context.data.app;\n    }\n    await integration_app.save();\n    Context.data.integration_app_id = integration_app.data.__id;\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
