{
  "scripts": "async function action() {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (!Context.data.staff) {\n        throw new Error(\"Не указан сотрудник\");\n    }\n    if (!Context.data.employment_placement) {\n        throw new Error(\"Не указано место занятости сотрудника\");\n    }\n    const current_date = new Datetime();\n    const [staff, employment_placement] = await Promise.all([\n        Context.data.staff.fetch(),\n        Context.data.employment_placement.fetch(),\n    ]);\n    const [position, organization, subdivision] = await Promise.all([\n        (_a = employment_placement.data.position) === null || _a === void 0 ? void 0 : _a.fetch(),\n        (_b = employment_placement.data.organization) === null || _b === void 0 ? void 0 : _b.fetch(),\n        (_c = employment_placement.data.subdivision) === null || _c === void 0 ? void 0 : _c.fetch(),\n    ]);\n    if (!position) {\n        throw new Error(\"По данному месту занятости не указана позиция ШР\");\n    }\n    if (!organization) {\n        throw new Error(\"По данному месту занятости не указана организация\");\n    }\n    if (!subdivision) {\n        throw new Error(\"По данному месту занятости не указано подразделение\");\n    }\n    const id_1c = employment_placement.data.id_1c;\n    const individual_id = staff.data.individual_id_1c;\n    const staff_data = getStaffdata(staff, id_1c, individual_id, organization);\n    const body = {\n        \"Date\": current_date.format('YYYY-MM-DDT00:00:00'),\n        \"Организация_Key\": (_d = organization.data.ref_key) !== null && _d !== void 0 ? _d : \"\",\n        \"Подразделение_Key\": (_e = subdivision.data.ref_key) !== null && _e !== void 0 ? _e : \"\",\n        \"Должность_Key\": (_f = position.data.ref_key) !== null && _f !== void 0 ? _f : \"\",\n        \"Сотрудник_Key\": staff_data[\"Сотрудник\"].Guid,\n        \"ДатаПриема\": (_h = (_g = staff.data.work_start) === null || _g === void 0 ? void 0 : _g.format(\"YYYY-MM-DDT00:00:00\")) !== null && _h !== void 0 ? _h : \"\",\n        \"КоличествоСтавок\": 1,\n        \"ВидЗанятости\": \"ОсновноеМестоРаботы\",\n        \"ВидТарифнойСтавки\": \"МесячнаяТарифнаяСтавка\",\n        \"ВидДоговора\": \"ТрудовойДоговор\",\n        \"СрочныйДоговор\": false,\n        \"СезонныйДоговор\": false,\n        \"ДанныеСотрудников\": [staff_data]\n    };\n    const accounting1c = Namespace.params.fields.integration_app.app.fields.accounting_systems.variants.zup_1c;\n    const integration_app = Namespace.params.fields.integration_app.app.create();\n    integration_app.data.__name = `Прием на работу (${staff.data.__name})`;\n    integration_app.data.document_odata_name = \"Document_ПриемНаРаботу\";\n    integration_app.data.accounting_systems = accounting1c;\n    integration_app.data.document_creation_data = JSON.stringify(body);\n    integration_app.data.personal_guid_1c = JSON.stringify([staff_data[\"ФизЛицо\"].Guid]);\n    integration_app.data.additional_info = `${staff.data.__name} - ${staff.data.id_1c ? \"Сотрудник существует\" : \"Новый\"}`;\n    integration_app.data.base_1c_name = Context.data.connection_name;\n    await integration_app.save();\n    Context.data.integration_app = integration_app;\n}\nfunction getStaffdata(staff, id1c, individualId, organization) {\n    var _a, _b, _c, _d, _e, _f;\n    const staff_info = {\n        \"Сотрудник\": {\n            \"Guid\": id1c !== null && id1c !== void 0 ? id1c : generateGUID(),\n            \"ГоловнаяОрганизация\": (_a = organization.data.ref_key) !== null && _a !== void 0 ? _a : \"\",\n        },\n        \"ФизЛицо\": {\n            \"Guid\": individualId !== null && individualId !== void 0 ? individualId : generateGUID(),\n            \"ДатаРождения\": staff.data.date_of_birth.format(\"YYYY-MM-DDT00:00:00\"),\n            \"Пол\": staff.data.sex == true ? \"Мужской\" : \"Женский\",\n            \"ИНН\": (_b = staff.data.inn) !== null && _b !== void 0 ? _b : \"\",\n            \"ФИО\": staff.data.__name,\n            \"Фамилия\": (_c = staff.data.surname) !== null && _c !== void 0 ? _c : \"\",\n            \"Имя\": (_d = staff.data.name) !== null && _d !== void 0 ? _d : \"\",\n            \"Отчество\": (_e = staff.data.middlename) !== null && _e !== void 0 ? _e : \"\",\n            \"СтраховойНомерПФР\": (_f = staff.data.snils) !== null && _f !== void 0 ? _f : \"\",\n            \"КонтактнаяИнформация\": getContactsData(staff),\n        },\n        \"Документы\": [\n            getPassportData(staff),\n        ],\n    };\n    return staff_info;\n}\nfunction getContactsData(staff) {\n    const contacts = [];\n    if (staff.data.email) {\n        contacts.push({\n            \"Тип\": \"АдресЭлектроннойПочты\",\n            \"Вид_Key\": \"dceee501-d2e6-11e4-8fb4-14dae9b19c71\",\n            \"Значение\": staff.data.email.email,\n        });\n    }\n    if (staff.data.phone) {\n        contacts.push({\n            \"Тип\": \"Телефон\",\n            \"Вид_Key\": \"82bc737b-0a3f-11e3-93c0-001b11b25590\",\n            \"Значение\": staff.data.phone.tel,\n        });\n    }\n    if (staff.data.address) {\n        contacts.push({\n            \"Тип\": \"Адрес\",\n            \"Вид_Key\": \"5d56f793-8eda-4697-b26d-5afc3972f430\",\n            \"Значение\": staff.data.address,\n        });\n    }\n    return contacts;\n}\nfunction getPassportData(staff) {\n    var _a, _b, _c, _d, _e, _f;\n    return {\n        \"ВидДокумента\": \"ПаспортРФ\",\n        \"Серия\": (_a = staff.data.passport_series) !== null && _a !== void 0 ? _a : \"\",\n        \"Номер\": (_b = staff.data.passport_number) !== null && _b !== void 0 ? _b : \"\",\n        \"ДатаВыдачи\": (_d = (_c = staff.data.date_of_issue) === null || _c === void 0 ? void 0 : _c.format(\"YYYY-MM-DDT00:00:00\")) !== null && _d !== void 0 ? _d : \"\",\n        \"КемВыдан\": (_e = staff.data.issued_by) !== null && _e !== void 0 ? _e : \"\",\n        \"КодПодразделения\": (_f = staff.data.passport_department_code) !== null && _f !== void 0 ? _f : \"\",\n        \"ЯвляетсяДокументомУдостоверяющимЛичность\": true,\n    };\n}\nfunction generateGUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
