{
  "scripts": "let baseUrl;\nlet login;\nlet password;\nlet myHeaders;\nasync function action() {\n    const personalInfo = await makeRequest('GET', \"Catalog_ФизическиеЛица?$format=json\");\n    const docs = await makeRequest('GET', \"InformationRegister_ДокументыФизическихЛиц?$format=json\");\n    const employees = await makeRequest('GET', `Catalog_Сотрудники?$format=json&$skip=${Context.data.skip_amount}&$top=${Context.data.batch_size}`);\n    const positions = await makeRequest('GET', \"InformationRegister_ЗанятостьПозицийШтатногоРасписания?$format=json\");\n    let promises = [];\n    if (!(employees && personalInfo && docs && positions))\n        return;\n    const category = await Context.fields.staff_category.app.search().where(f => f.__name.eq(\"Сотрудник без ограничений\")).first();\n    const allStaffs = await Context.fields.staff.app.search().where(f => f.__deletedAt.eq(null)).size(10000).all();\n    const allOrganizations = await Context.fields.organization.app.search().where(f => f.__deletedAt.eq(null)).size(10000).all();\n    const allSubdivisions = await Context.fields.subdivision.app.search().where(f => f.__deletedAt.eq(null)).size(10000).all();\n    const allPositions = await Context.fields.position.app.search().where(f => f.__deletedAt.eq(null)).size(10000).all();\n    let positionsArray = [];\n    for (const position of positions.value) {\n        positionsArray = positionsArray.concat(position.RecordSet);\n    }\n    for (let i = 0; i < employees.value.length; i++) {\n        const data = employees.value[i];\n        const employeePersonalInfo = personalInfo.value.find((info) => info.Ref_Key === data[\"ФизическоеЛицо_Key\"]);\n        const employeePassportInfo = docs.value.find((info) => info[\"Физлицо_Key\"] === data[\"ФизическоеЛицо_Key\"]);\n        if (!(employeePersonalInfo && employeePassportInfo))\n            continue;\n        const address = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info) => info[\"Тип\"] === \"Адрес\");\n        let addressObj;\n        const email = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info) => info[\"Тип\"] === \"АдресЭлектроннойПочты\");\n        const phoneNumber = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info) => info[\"Тип\"] === \"Телефон\");\n        const [birthYear, birthMonth, birthDay] = employeePersonalInfo[\"ДатаРождения\"].split(\"T\")[0].split(\"-\").map((item) => parseInt(item));\n        const [issueYear, issueMonth, issueDay] = employeePassportInfo[\"ДатаВыдачи\"].split(\"T\")[0].split(\"-\").map((item) => parseInt(item));\n        let entityUser;\n        let positionUser;\n        let subdivisionUser;\n        const orgId = data[\"ГоловнаяОрганизация_Key\"];\n        const organization = allOrganizations.find(f => f.data.ref_key === orgId);\n        if (organization) {\n            entityUser = organization.data.entity;\n            const positionsUser = positionsArray.filter(f => f[\"ФизическоеЛицо_Key\"] === data[\"ФизическоеЛицо_Key\"] && f[\"ГоловнаяОрганизация_Key\"] === data[\"ГоловнаяОрганизация_Key\"]);\n            if (positionsUser.length > 0) {\n                positionUser = allPositions.find(f => f.data.ref_key === positionsUser[0][\"ПозицияШтатногоРасписания_Key\"]);\n                if (positionUser) {\n                    const subdivisions = allSubdivisions.filter(f => f.data.organization && f.data.organization.id === organization.id);\n                    subdivisionUser = subdivisions.find(f => f.data.positions && f.data.positions.find(f => f.id === positionUser.id));\n                }\n            }\n        }\n        const singleEmployeeData = {\n            id: data.Ref_Key,\n            code: data.Code,\n            name: {\n                firstname: employeePersonalInfo[\"Имя\"],\n                lastname: employeePersonalInfo[\"Фамилия\"],\n                middlename: employeePersonalInfo[\"Отчество\"],\n            },\n            email: email ? {\n                email: email[\"АдресЭП\"],\n                type: EmailType.Work,\n            } : undefined,\n            phoneNumber: phoneNumber ? {\n                tel: phoneNumber[\"Представление\"].replace(/\\D+/g, \"\"),\n                type: PhoneType.Work,\n            } : undefined,\n            sex: employeePersonalInfo[\"Пол\"] === \"Мужской\",\n            marriage: false,\n            birthDate: new TDate(birthYear, birthMonth, birthDay),\n            city: addressObj ? addressObj.city || addressObj.area : undefined,\n            street: addressObj ? addressObj.street : undefined,\n            home: addressObj ? addressObj.houseNumber : undefined,\n            apartment: addressObj ? addressObj.apartments ? addressObj.apartments[0].number : undefined : undefined,\n            housing: addressObj ? addressObj.buildings ? addressObj.buildings[0].number : undefined : undefined,\n            passportSeries: employeePassportInfo[\"Серия\"].replace(/\\s/g, ''),\n            passportNumber: employeePassportInfo[\"Номер\"],\n            passportDepCode: employeePassportInfo[\"КодПодразделения\"],\n            passportIssueDate: new TDate(issueYear, issueMonth, issueDay),\n            passportIssuer: employeePassportInfo[\"КемВыдан\"],\n            snils: employeePersonalInfo[\"СтраховойНомерПФР\"],\n            inn: employeePersonalInfo[\"ИНН\"],\n            individual_id: employeePersonalInfo.Ref_Key,\n            organisation: organization,\n            entity: entityUser,\n            position: positionUser,\n            subdivision: subdivisionUser,\n            value_1: Context.data.value_1 && personalInfo[`${Context.data.value_1}`] ? personalInfo[`${Context.data.value_1}`] : undefined,\n            value_2: Context.data.value_2 && personalInfo[`${Context.data.value_2}`] ? personalInfo[`${Context.data.value_2}`] : undefined,\n            value_3: Context.data.value_3 && personalInfo[`${Context.data.value_3}`] ? personalInfo[`${Context.data.value_3}`] : undefined,\n        };\n        let userApp;\n        const user = allStaffs.find(f => f.data.id_1c === singleEmployeeData.id);\n        if (user)\n            userApp = user;\n        else\n            userApp = Context.fields.staff.app.create();\n        userApp.data.full_name = singleEmployeeData.name;\n        userApp.data.name = singleEmployeeData.name.firstname;\n        userApp.data.surname = singleEmployeeData.name.lastname;\n        userApp.data.middlename = singleEmployeeData.name.middlename;\n        userApp.data.personal_number = singleEmployeeData.code;\n        userApp.data.email = singleEmployeeData.email;\n        userApp.data.phone = singleEmployeeData.phoneNumber;\n        userApp.data.sex = singleEmployeeData.sex;\n        userApp.data.position = singleEmployeeData.position;\n        userApp.data.structural_subdivision = singleEmployeeData.subdivision;\n        userApp.data.marriage = singleEmployeeData.marriage;\n        userApp.data.date_of_birth = singleEmployeeData.birthDate;\n        userApp.data.city = singleEmployeeData.city;\n        userApp.data.street = singleEmployeeData.street;\n        userApp.data.home = singleEmployeeData.home;\n        userApp.data.apartment = singleEmployeeData.apartment;\n        userApp.data.housing = singleEmployeeData.housing;\n        userApp.data.passport_series = singleEmployeeData.passportSeries;\n        userApp.data.passport_number = singleEmployeeData.passportNumber;\n        userApp.data.passport_department_code = singleEmployeeData.passportDepCode;\n        userApp.data.date_of_issue = singleEmployeeData.passportIssueDate;\n        userApp.data.issued_by = singleEmployeeData.passportIssuer;\n        userApp.data.snils = singleEmployeeData.snils;\n        userApp.data.inn = singleEmployeeData.inn;\n        userApp.data.organization = singleEmployeeData.organisation;\n        userApp.data.entity = singleEmployeeData.entity;\n        if (userApp.data.staff_categories && userApp.data.staff_categories.length > 0)\n            userApp.data.staff_categories = userApp.data.staff_categories;\n        else if (category)\n            userApp.data.staff_categories = (userApp.data.staff_categories || []).concat(category);\n        userApp.data.notification = userApp.fields.notification.variants.email;\n        userApp.data.id_1c = singleEmployeeData.id;\n        userApp.data.individual_id_1c = singleEmployeeData.individual_id;\n        userApp.data.staff_access = true;\n        userApp.data.address = `\n                ${singleEmployeeData.city ? singleEmployeeData.city : \"\"}\n                ${singleEmployeeData.street ? \", ул. \" + singleEmployeeData.street : \"\"}\n                ${singleEmployeeData.home ? \", д. \" + singleEmployeeData.home : \"\"}\n                ${singleEmployeeData.housing ? \", корп. \" + singleEmployeeData.housing : \"\"}\n                ${singleEmployeeData.apartment ? \", кв. \" + singleEmployeeData.apartment : \"\"}\n            `;\n        userApp.data.value_1 = singleEmployeeData.value_1;\n        userApp.data.value_2 = singleEmployeeData.value_2;\n        userApp.data.value_3 = singleEmployeeData.value_3;\n        promises.push(userApp.save());\n        if (promises.length > 10) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nfunction getConnectionInfo() {\n    const connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n    if (!connectionsArray) {\n        return new Error(`Не найдено записей подключения`);\n    }\n    const currentConnection = connectionsArray.length > 1 ? connectionsArray.find((item) => {\n        return item.name === Context.data.connection_name;\n    }) : connectionsArray[0];\n    if (!currentConnection) {\n        return new Error(`Не найдено подключение c именем ${Context.data.connection_name}`);\n    }\n    baseUrl = currentConnection.url;\n    login = currentConnection.login;\n    password = currentConnection.password;\n    myHeaders = {\n        Authorization: `Basic ${btoa(login + ':' + password)}`,\n    };\n    return null;\n}\nasync function makeRequest(method, url, body) {\n    const error = getConnectionInfo();\n    if (error !== null) {\n        Context.data.error = error.message;\n        return null;\n    }\n    const requestOptions = {\n        method: method,\n        headers: myHeaders,\n    };\n    if (!!body) {\n        requestOptions.body = body;\n    }\n    const resUrl = baseUrl + '/' + url;\n    try {\n        const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n        if (!response.ok) {\n            Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n            throw new Error(`res error ${resUrl}`);\n        }\n        const responseJSON = await response.json();\n        return responseJSON;\n    }\n    catch (err) {\n        Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n        throw new Error(err);\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
