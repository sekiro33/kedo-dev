{
  "scripts": "let baseUrl;\nlet login;\nlet password;\nlet myHeaders;\nfunction getConnectionInfo() {\n    const connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n    if (!connectionsArray) {\n        return new Error(`Не найдено записей подключения`);\n    }\n    const currentConnection = connectionsArray.length > 1 ? connectionsArray.find((item) => {\n        return item.name === Context.data.connection_name;\n    }) : connectionsArray[0];\n    if (!currentConnection) {\n        return new Error(`Не найдено подключение c именем ${Context.data.connection_name}`);\n    }\n    baseUrl = currentConnection.url;\n    login = currentConnection.login;\n    password = currentConnection.password;\n    myHeaders = {\n        Authorization: `Basic ${btoa(login + ':' + password)}`,\n    };\n    return null;\n}\nasync function get_staff_info(staff, id1c, individualId, organization) {\n    var _a, _b, _c, _d, _e, _f;\n    const staff_info = {\n        \"Сотрудник\": {\n            \"Guid\": id1c,\n            \"ГоловнаяОрганизация\": (_a = organization.data.ref_key) !== null && _a !== void 0 ? _a : \"\",\n        },\n        \"ФизЛицо\": {\n            \"Guid\": individualId,\n            \"ДатаРождения\": staff.data.date_of_birth.format(\"YYYY-MM-DDT00:00:00\"),\n            \"Пол\": staff.data.sex == true ? \"Мужской\" : \"Женский\",\n            \"ИНН\": (_b = staff.data.inn) !== null && _b !== void 0 ? _b : \"\",\n            \"ФИО\": staff.data.__name,\n            \"Фамилия\": (_c = staff.data.surname) !== null && _c !== void 0 ? _c : \"\",\n            \"Имя\": (_d = staff.data.name) !== null && _d !== void 0 ? _d : \"\",\n            \"Отчество\": (_e = staff.data.middlename) !== null && _e !== void 0 ? _e : \"\",\n            \"СтраховойНомерПФР\": (_f = staff.data.snils) !== null && _f !== void 0 ? _f : \"\",\n            \"КонтактнаяИнформация\": get_contact_info(staff),\n        },\n        \"Документы\": [\n            get_passport(staff),\n        ]\n    };\n    return staff_info;\n}\nfunction get_passport(staff) {\n    return {\n        \"ВидДокумента\": \"ПаспортРФ\",\n        \"Серия\": staff.data.passport_series,\n        \"Номер\": staff.data.passport_number,\n        \"ДатаВыдачи\": staff.data.date_of_issue.format(\"YYYY-MM-DDT00:00:00\"),\n        \"КемВыдан\": staff.data.issued_by,\n        \"КодПодразделения\": staff.data.passport_department_code,\n        \"ЯвляетсяДокументомУдостоверяющимЛичность\": true,\n    };\n}\nfunction get_contact_info(staff) {\n    const contacts = [];\n    if (staff.data.email) {\n        contacts.push({\n            \"Тип\": \"АдресЭлектроннойПочты\",\n            \"Вид_Key\": \"dceee501-d2e6-11e4-8fb4-14dae9b19c71\",\n            \"Значение\": staff.data.email.email,\n        });\n    }\n    if (staff.data.phone) {\n        contacts.push({\n            \"Тип\": \"Телефон\",\n            \"Вид_Key\": \"82bc737b-0a3f-11e3-93c0-001b11b25590\",\n            \"Значение\": staff.data.phone.tel,\n        });\n    }\n    if (staff.data.address) {\n        contacts.push({\n            \"Тип\": \"Адрес\",\n            \"Вид_Key\": \"5d56f793-8eda-4697-b26d-5afc3972f430\",\n            \"Значение\": staff.data.address,\n        });\n    }\n    return contacts;\n}\nasync function action() {\n    var _a, _b, _c, _d, _e;\n    const currentDate = new TDate();\n    const staff = await Context.data.staff.fetch();\n    const [organization, subdivision, position] = await Promise.all([\n        staff.data.organization.fetch(),\n        staff.data.structural_subdivision.fetch(),\n        staff.data.position.fetch(),\n    ]);\n    const id1C = (_a = staff.data.id_1c) !== null && _a !== void 0 ? _a : generateGUID();\n    const individualID = (_b = staff.data.individual_id_1c) !== null && _b !== void 0 ? _b : generateGUID();\n    Context.data.id_1c = id1C;\n    Context.data.individual_id_1c = individualID;\n    const body = {\n        \"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n        \"Организация_Key\": (_c = organization.data.ref_key) !== null && _c !== void 0 ? _c : \"\",\n        \"Подразделение_Key\": (_d = subdivision.data.ref_key) !== null && _d !== void 0 ? _d : \"\",\n        \"Должность_Key\": (_e = position.data.ref_key) !== null && _e !== void 0 ? _e : \"\",\n        \"Сотрудник_Key\": id1C,\n        \"ДатаПриема\": staff.data.work_start.format(\"YYYY-MM-DDT00:00:00\"),\n        \"КоличествоСтавок\": 1,\n        \"ВидЗанятости\": \"ОсновноеМестоРаботы\",\n        \"ГрафикРаботы_Key\": \"899b02dc-7a6b-11e2-9362-001b11b25590\",\n        \"ВидТарифнойСтавки\": \"МесячнаяТарифнаяСтавка\",\n        \"ВидДоговора\": \"ТрудовойДоговор\",\n        \"СрочныйДоговор\": false,\n        \"СезонныйДоговор\": false,\n        \"ДанныеСотрудников\": [\n            await get_staff_info(staff, id1C, individualID, organization),\n        ]\n    };\n    if (Context.data.alternative_integration) {\n        const accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c;\n        const integration_app = Namespace.params.fields.awaiting_docs_table_1c.app.create();\n        integration_app.data.__name = `Прием на работу (${staff.data.__name})`;\n        integration_app.data.document_odata_name = \"Document_ПриемНаРаботу\";\n        integration_app.data.accounting_systems = accounting1c;\n        integration_app.data.document_creation_data = JSON.stringify(body);\n        integration_app.data.personal_guid_1c = JSON.stringify([individualID]);\n        integration_app.data.additional_info = `${staff.data.__name} - ${staff.data.id_1c ? \"Сотрудник существует\" : \"Новый\"}`;\n        integration_app.data.base_1c_name = Context.data.connection_name;\n        await integration_app.save();\n        Context.data.integration_app_id = integration_app.data.__id;\n    }\n    else {\n        const error = getConnectionInfo();\n        if (error != null) {\n            Context.data.error = error.message;\n            return;\n        }\n        const createURL = `${baseUrl}/Document_ПриемНаРаботу?$format=json`;\n        const stringBody = JSON.stringify(body);\n        await makeRequest('POST', createURL, stringBody);\n    }\n}\nfunction generateGUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\nasync function makeRequest(method, url, body) {\n    const requestOptions = {\n        method: method,\n        headers: myHeaders,\n    };\n    if (!!body) {\n        requestOptions.body = body;\n    }\n    const resUrl = url;\n    try {\n        const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n        if (!response.ok) {\n            Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n            throw new Error(`res error ${resUrl}`);\n        }\n        Context.data.response = JSON.stringify(await response.json());\n    }\n    catch (err) {\n        Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n        throw new Error(err);\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
