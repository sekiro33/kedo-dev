{
  "scripts": "async function action() {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const currentDate = new Datetime();\n    const body = {\n        \"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n        \"Организация_Key\": `${Context.data.organization_id}`,\n        \"ДатаНачала\": `${Context.data.start_date}T00:00:00`,\n        \"ДатаОкончания\": `${Context.data.end_date}T00:00:00`,\n        \"СовмещающийСотрудник_Key\": `${Context.data.combining_staff_id_1c}`,\n        \"Комментарий\": `${(_a = Context.data.comment) !== null && _a !== void 0 ? _a : \"\"}`,\n        \"КоличествоСтавок\": (_b = Context.data.bet_size) !== null && _b !== void 0 ? _b : 0.25,\n    };\n    if (Context.data.combination_type) {\n        switch (Context.data.combination_type.code) {\n            case Context.fields.combination_type.variants.expansion_service_areas.code:\n                body['ПричинаСовмещения'] = 'УвеличениеОбъемаРабот';\n                break;\n            case Context.fields.combination_type.variants.performance_duties.code:\n                body['ПричинаСовмещения'] = 'ИсполнениеОбязанностей';\n                body['ОтсутствующийСотрудник_Key'] = `${(_c = Context.data.absent_staff_id_1c) !== null && _c !== void 0 ? _c : \"\"}`;\n                break;\n            case Context.fields.combination_type.variants.professional_duties.code:\n                body['ПричинаСовмещения'] = 'СовмещениеПрофессийДолжностей';\n                body['СовмещаемаяДолжность_Key'] = `${(_d = Context.data.combining_postiion) !== null && _d !== void 0 ? _d : \"\"}`;\n                break;\n        }\n    }\n    if (Context.data.type_surcharge) {\n        switch (Context.data.type_surcharge.code) {\n            case Context.fields.type_surcharge.variants.fixed_amount.code:\n                body['РазмерДоплаты'] = (_e = Context.data.percent) !== null && _e !== void 0 ? _e : 0;\n                break;\n            case Context.fields.type_surcharge.variants.percen_combination.code:\n                body['РассчитыватьДоплату'] = true;\n                body['СпособРасчетаДоплаты'] = 'ПроцентФОТСовмещающего';\n                body['ПроцентДоплаты'] = (_f = Context.data.percent) !== null && _f !== void 0 ? _f : 0;\n                break;\n            case Context.fields.type_surcharge.variants.percent_main_position.code:\n                body['РассчитыватьДоплату'] = true;\n                body['СпособРасчетаДоплаты'] = 'ПроцентФОТ';\n                body['ПроцентДоплаты'] = (_g = Context.data.percent) !== null && _g !== void 0 ? _g : 0;\n                break;\n        }\n    }\n    const accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c;\n    const awaitingApp = Namespace.params.fields.awaiting_docs_table_1c.app.create();\n    awaitingApp.data.__name = \"Исполнение обязанностей\";\n    awaitingApp.data.document_odata_name = \"Document_Совмещение\";\n    awaitingApp.data.accounting_systems = accounting1c;\n    awaitingApp.data.personal_guid_1c = JSON.stringify([Context.data.combining_staff_persoal_id_1c]);\n    awaitingApp.data.document_creation_data = JSON.stringify(body);\n    awaitingApp.data.additional_info = (_h = Context.data.additional_info) !== null && _h !== void 0 ? _h : \"\";\n    if (Context.data.connection_name) {\n        awaitingApp.data.base_1c_name = Context.data.connection_name;\n    }\n    await awaitingApp.save();\n    Context.data.integration_app_id = awaitingApp.data.__id;\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
