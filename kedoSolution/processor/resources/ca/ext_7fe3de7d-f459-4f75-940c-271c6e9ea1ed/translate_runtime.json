{
  "scripts": "const dict = { \" \": \"_\", \"Ё\": \"YO\", \"Й\": \"I\", \"Ц\": \"TS\", \"У\": \"U\", \"К\": \"K\", \"Е\": \"E\", \"Н\": \"N\", \"Г\": \"G\", \"Ш\": \"SH\", \"Щ\": \"SCH\", \"З\": \"Z\", \"Х\": \"H\", \"Ъ\": \"'\", \"ё\": \"yo\", \"й\": \"i\", \"ц\": \"ts\", \"у\": \"u\", \"к\": \"k\", \"е\": \"e\", \"н\": \"n\", \"г\": \"g\", \"ш\": \"sh\", \"щ\": \"sch\", \"з\": \"z\", \"х\": \"h\", \"ъ\": \"'\", \"Ф\": \"F\", \"Ы\": \"I\", \"В\": \"V\", \"А\": \"A\", \"П\": \"P\", \"Р\": \"R\", \"О\": \"O\", \"Л\": \"L\", \"Д\": \"D\", \"Ж\": \"ZH\", \"Э\": \"E\", \"ф\": \"f\", \"ы\": \"i\", \"в\": \"v\", \"а\": \"a\", \"п\": \"p\", \"р\": \"r\", \"о\": \"o\", \"л\": \"l\", \"д\": \"d\", \"ж\": \"zh\", \"э\": \"e\", \"Я\": \"Ya\", \"Ч\": \"CH\", \"С\": \"S\", \"М\": \"M\", \"И\": \"I\", \"Т\": \"T\", \"Ь\": \"'\", \"Б\": \"B\", \"Ю\": \"YU\", \"я\": \"ya\", \"ч\": \"ch\", \"с\": \"s\", \"м\": \"m\", \"и\": \"i\", \"т\": \"t\", \"ь\": \"'\", \"б\": \"b\", \"ю\": \"yu\" };\nasync function action() {\n    const file = await Context.data.file.fetch();\n    const url = await Context.data.file.getDownloadUrl();\n    const buffer = await fetch(url).then(r => r.arrayBuffer());\n    let newName = file.data.__name.split('').map((char) => {\n        return dict[char] || char;\n    }).join(\"\").replace(/[^a-zA-Z0-9_.]/g, \"\");\n    file.data.__name = newName;\n    await file.addVersion(newName, buffer);\n    Context.data.file = file;\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
