{
  "scripts": "var CompensationType;\n(function (CompensationType) {\n    CompensationType[\"IncreasedPay\"] = \"\\u041E\\u0442\\u0433\\u0443\\u043B\";\n    CompensationType[\"CompensatoryHoliday\"] = \"\\u041F\\u043E\\u0432\\u044B\\u0448\\u0435\\u043D\\u043D\\u0430\\u044F\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430\";\n})(CompensationType || (CompensationType = {}));\nlet baseUrl;\nlet login;\nlet password;\nlet myHeaders;\nfunction getConnectionInfo() {\n    const connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n    if (!connectionsArray) {\n        return new Error(`Не найдено записей подключения`);\n    }\n    const currentConnection = connectionsArray.length > 1 ? connectionsArray.find((item) => {\n        return item.name === Context.data.connection_name;\n    }) : connectionsArray[0];\n    if (!currentConnection) {\n        return new Error(`Не найдено подключение c именем ${Context.data.connection_name}`);\n    }\n    baseUrl = currentConnection.url;\n    login = currentConnection.login;\n    password = currentConnection.password;\n    myHeaders = {\n        Authorization: `Basic ${btoa(login + ':' + password)}`,\n    };\n    return null;\n}\nasync function action() {\n    var _a, _b;\n    const currentDate = new TDate();\n    const employeeData = JSON.parse(Context.data.employee_data);\n    const dates = [];\n    employeeData.forEach((item) => {\n        item.dates.forEach((date) => {\n            if (!dates.includes(date)) {\n                dates.push(date);\n            }\n        });\n    });\n    const individuals = [];\n    const workTable = [];\n    const individualIds = [];\n    employeeData.forEach((item, index) => {\n        dates.forEach((date) => {\n            var _a;\n            workTable.push({\n                \"LineNumber\": `${workTable.length + 1}`,\n                \"Сотрудник_Key\": item.id,\n                \"Дата\": `${date}T00:00:00`,\n                \"СпособКомпенсацииПереработки\": (_a = item.compensationType) !== null && _a !== void 0 ? _a : \"ПовышеннаяОплата\",\n                \"ОтработаноЧасов\": item.hours,\n                \"НеРаботал\": !item.dates.includes(date)\n            });\n        });\n        const isEmployeeExisting = individuals.find((individual) => individual[\"ФизическоеЛицо_Key\"] === item.individualId);\n        if (!isEmployeeExisting) {\n            individualIds.push(item.individualId);\n            individuals.push({\n                \"LineNumber\": `${individuals.length + 1}`,\n                \"ФизическоеЛицо_Key\": item.individualId\n            });\n        }\n    });\n    const startDate = dates.sort()[0];\n    const body = {\n        \"СогласиеТребуется\": true,\n        \"ВремяВЧасах\": true,\n        \"ВремяУчтено\": true,\n        \"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n        \"ПериодРегистрации\": `${Context.data.registration_month}-01T00:00:00`,\n        \"Организация_Key\": Context.data.org_id,\n        \"Причина\": Context.data.reason || '',\n        \"ДатаНачалаСобытия\": `${startDate}T00:00:00`,\n        \"СогласиеПолучено\": true,\n        \"Сотрудники\": workTable,\n        \"Комментарий\": (_a = Context.data.comment) !== null && _a !== void 0 ? _a : \"\"\n    };\n    Context.data.post_body = JSON.stringify(body);\n    if (!Context.data.alternative_way) {\n        const error = getConnectionInfo();\n        if (error != null) {\n            Context.data.error = error.message;\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n        };\n        requestOptions.body = JSON.stringify(body);\n        Context.data.debug = 'fetch';\n        const resUrl = `${baseUrl}/Document_РаботаВВыходныеИПраздничныеДни?$format=json`;\n        try {\n            const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n            if (!response.ok) {\n                Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n                throw new Error(`res error ${resUrl}`);\n            }\n            Context.data.response = JSON.stringify(await response.json());\n        }\n        catch (err) {\n            Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n            throw new Error(err.message);\n        }\n    }\n    else {\n        const accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c;\n        const awaitingApp = Namespace.params.fields.awaiting_docs_table_1c.app.create();\n        awaitingApp.data.__name = \"Работа в выходные и праздничные дни\";\n        awaitingApp.data.document_odata_name = \"Document_РаботаВВыходныеИПраздничныеДни\";\n        awaitingApp.data.accounting_systems = accounting1c;\n        awaitingApp.data.personal_guid_1c = JSON.stringify(individualIds);\n        awaitingApp.data.document_creation_data = JSON.stringify(body);\n        awaitingApp.data.additional_info = (_b = Context.data.additional_info) !== null && _b !== void 0 ? _b : \"\";\n        awaitingApp.data.base_1c_name = Context.data.connection_name;\n        await awaitingApp.save();\n        Context.data.integration_app_id = awaitingApp.data.__id;\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
