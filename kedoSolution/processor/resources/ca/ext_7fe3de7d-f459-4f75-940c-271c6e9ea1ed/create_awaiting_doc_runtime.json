{
  "scripts": "let baseUrl;\nlet login;\nlet password;\nlet myHeaders;\nfunction getConnectionInfo() {\n    const connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n    if (!connectionsArray) {\n        return new Error(`Не найдено записей подключения`);\n    }\n    const currentConnection = connectionsArray.length > 1 ? connectionsArray.find((item) => {\n        return item.name === Context.data.connection_name;\n    }) : connectionsArray[0];\n    if (!currentConnection) {\n        return new Error(`Не найдено подключение c именем ${Context.data.connection_name}`);\n    }\n    baseUrl = currentConnection.url;\n    login = currentConnection.login;\n    password = currentConnection.password;\n    myHeaders = {\n        Authorization: `Basic ${btoa(login + ':' + password)}`,\n    };\n    return null;\n}\nasync function action() {\n    Context.data.iteration_number = 0;\n    const error = getConnectionInfo();\n    if (error !== null) {\n        Context.data.error = error.message;\n    }\n    writeToDocApp();\n}\nasync function check() {\n    const error = getConnectionInfo();\n    if (error !== null) {\n        Context.data.error = error.message;\n    }\n    Context.data.request_parameters = 'InformationRegister_EM_ДокументыСотрудников?$format=json';\n    if (!baseUrl || !login) {\n        return true;\n    }\n    await makeRequest('GET', 'InformationRegister_EM_ДокументыСотрудников?$format=json');\n    if (!!Context.data.response_1c_json) {\n        const response = JSON.parse(Context.data.response_1c_json);\n        const documents = response.value.filter((item) => {\n            return item[\"Документ\"] === Context.data.document_id;\n        });\n        if (!!documents) {\n            await getFiles();\n            return true;\n        }\n        Context.data.iteration_number = Context.data.iteration_number ? Context.data.iteration_number + 1 : 1;\n        if (Context.data.iteration_number > 10) {\n            Context.data.error = `Could not find requested document in 10 iterations`;\n            throw new Error(`Could not find requested document in 10 iterations`);\n            return true;\n        }\n    }\n    return false;\n}\n;\nasync function getFiles() {\n    Context.data.request_parameters = `InformationRegister_EM_ПечатныеФормыДокументов?$format=json`;\n    await makeRequest('GET', `InformationRegister_EM_ПечатныеФормыДокументов?$format=json`);\n    await parseFiles();\n}\nasync function changeStatus(docData) {\n    const statusApp = await Namespace.params.fields.statuses_app.app.search().where(f => f.__name.eq('На подписании')).first();\n    if (!!statusApp) {\n        const changeURL = `${docData[\"СтатусДокумента@navigationLinkUrl\"].split('/')[0]}?$format=json`;\n        const body = {\n            \"СтатусДокумента_Key\": statusApp.data.guid,\n        };\n        const stringBody = JSON.stringify(body);\n        await makeRequest('PATCH', changeURL, stringBody);\n    }\n}\nasync function writeToDocApp() {\n    const serverApp = await Namespace.params.fields.additional_app.app.search().first();\n    if (!!serverApp) {\n        const knownDocuments = serverApp.data.massiv_izvestnykh_dokumentov ? JSON.parse(serverApp.data.massiv_izvestnykh_dokumentov) : [];\n        knownDocuments.push(Context.data.document_id);\n        serverApp.data.massiv_izvestnykh_dokumentov = JSON.stringify(knownDocuments);\n        await serverApp.save();\n    }\n}\nasync function parseFiles() {\n    const response = JSON.parse(Context.data.response_1c_json);\n    const documents = response.value.filter((item) => {\n        return item[\"Документ\"] === Context.data.document_id;\n    });\n    if (!!documents) {\n        const allFiles = [];\n        for (let document of documents) {\n            const fileJSON = JSON.parse(document[\"ХранилищеПечатнойФормы\"]);\n            const fileExtension = fileJSON.type;\n            const fileString = fileJSON.data.replace(/\\\\r\\\\n/g, '');\n            const fileArrayBuffer = await getArrayBufferFromBase64(fileString);\n            const newFile = await Context.fields.files.create(`${document[\"ПечатнаяФорма\"]}.${fileExtension.toLowerCase()}`, fileArrayBuffer);\n            await changeStatus(document);\n            allFiles.push(newFile);\n        }\n        Context.data.found_files = allFiles;\n    }\n}\nasync function getArrayBufferFromBase64(base64) {\n    var binary_string = atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\nasync function makeRequest(method, url, body) {\n    const requestOptions = {\n        method: method,\n        headers: myHeaders,\n    };\n    if (!!body) {\n        requestOptions.body = body;\n    }\n    const resUrl = baseUrl + '/' + url;\n    try {\n        const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n        if (!response.ok) {\n            Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n            throw new Error(`res error ${resUrl}`);\n        }\n        Context.data.response_1c_json = JSON.stringify(await response.json());\n    }\n    catch (err) {\n        Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n        throw new Error(err);\n    }\n}\n(async function () {\n    action();\n    const res = await check();\n});\n",
  "execution": [
    {
      "code": "future",
      "name": "Запрос результата"
    }
  ],
  "allowGlobal": false,
  "checkInterval": "1m"
}
