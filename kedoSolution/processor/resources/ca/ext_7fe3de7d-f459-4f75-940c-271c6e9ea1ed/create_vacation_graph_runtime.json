{
  "scripts": "let baseUrl;\nlet login;\nlet password;\nlet myHeaders;\nfunction getConnectionInfo() {\n    const connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n    if (!connectionsArray) {\n        return new Error(`Не найдено записей подключения`);\n    }\n    const currentConnection = connectionsArray.length > 1 ? connectionsArray.find((item) => {\n        return item.name === Context.data.connection_name;\n    }) : connectionsArray[0];\n    if (!currentConnection) {\n        return new Error(`Не найдено подключение c именем ${Context.data.connection_name}`);\n    }\n    baseUrl = currentConnection.url;\n    login = currentConnection.login;\n    password = currentConnection.password;\n    myHeaders = {\n        Authorization: `Basic ${btoa(login + ':' + password)}`,\n    };\n    return null;\n}\nasync function action() {\n    var _a, _b, _c;\n    if (!Context.data.vacation_data) {\n        throw new Error(\"Context.data.vacation_data is undefined\");\n    }\n    const current_date = new Datetime();\n    const vacation_data = JSON.parse(Context.data.vacation_data);\n    const schedule_table = vacation_data.map((line) => {\n        var _a;\n        return {\n            \"Сотрудник_Key\": line.staffId,\n            \"ФизическоеЛицо_Key\": line.staffPersonalId,\n            \"ВидОтпуска_Key\": line.vacationType,\n            \"ДатаНачала\": `${line.startDate}T00:00:00`,\n            \"ДатаОкончания\": `${line.endDate}T00:00:00`,\n            \"КоличествоДней\": line.duration,\n            \"Примечание\": (_a = line.comment) !== null && _a !== void 0 ? _a : \"\",\n        };\n    });\n    const body = {\n        Date: current_date.format(\"YYYY-MM-DDT00:00:00\"),\n        \"Организация_Key\": (_a = Context.data.organization_id) !== null && _a !== void 0 ? _a : \"\",\n        \"ДатаСобытия\": current_date.format(\"YYYY-MM-DDT00:00:00\"),\n        \"Сотрудники\": schedule_table,\n        \"Комментарий\": (_b = Context.data.comment) !== null && _b !== void 0 ? _b : \"\",\n    };\n    if (!Context.data.alternative_way) {\n        const error = getConnectionInfo();\n        if (error != null) {\n            Context.data.error = error.message;\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n        };\n        requestOptions.body = JSON.stringify(body);\n        const resUrl = `${baseUrl}/Document_ГрафикОтпусков?$format=json`;\n        try {\n            const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n            if (!response.ok) {\n                Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n                throw new Error(`res error ${resUrl}`);\n            }\n            Context.data.response = JSON.stringify(await response.json());\n        }\n        catch (err) {\n            Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n            throw new Error(err);\n        }\n    }\n    else {\n        const accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c;\n        const awaitingApp = Namespace.params.fields.awaiting_docs_table_1c.app.create();\n        awaitingApp.data.__name = \"График отпусков\";\n        awaitingApp.data.document_odata_name = \"Document_ГрафикОтпусков\";\n        awaitingApp.data.accounting_systems = accounting1c;\n        awaitingApp.data.personal_guid_1c = JSON.stringify([Context.data.individual_id_1c]);\n        awaitingApp.data.document_creation_data = JSON.stringify(body);\n        awaitingApp.data.additional_info = (_c = Context.data.additional_info) !== null && _c !== void 0 ? _c : \"\";\n        awaitingApp.data.base_1c_name = Context.data.connection_name;\n        await awaitingApp.save();\n        Context.data.integration_app_id = awaitingApp.data.__id;\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
