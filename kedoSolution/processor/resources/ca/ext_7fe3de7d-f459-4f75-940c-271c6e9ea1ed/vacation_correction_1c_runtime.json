{
  "scripts": "let baseUrl;\nlet login;\nlet password;\nlet myHeaders;\nfunction getConnectionInfo() {\n    const connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n    if (!connectionsArray) {\n        return new Error(`Не найдено записей подключения`);\n    }\n    const currentConnection = connectionsArray.length > 1 ? connectionsArray.find((item) => {\n        return item.name === Context.data.connection_name;\n    }) : connectionsArray[0];\n    if (!currentConnection) {\n        return new Error(`Не найдено подключение c именем ${Context.data.connection_name}`);\n    }\n    baseUrl = currentConnection.url;\n    login = currentConnection.login;\n    password = currentConnection.password;\n    myHeaders = {\n        Authorization: `Basic ${btoa(login + ':' + password)}`,\n    };\n    return null;\n}\nasync function action() {\n    var _a, _b;\n    const currentDate = new TDate();\n    const addVacationArr = [];\n    const isAddVacation = Context.data.additional_vacations && Context.data.additional_vacations.length > 0;\n    const body = {\n        \"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n    };\n    if (isAddVacation) {\n        const vacationsData = JSON.parse(Context.data.additional_vacations);\n        vacationsData.forEach((i) => {\n            addVacationArr.push({\n                \"LineNumber\": `${addVacationArr.length + 1}`,\n                \"ВидОтпуска_Key\": i.type_vacation_key,\n                \"КоличествоДней\": i.amount_of_days,\n                \"ДатаНачала\": `${i.start_date}`,\n                \"ДатаОкончания\": `${i.end_date}`,\n                \"Основание\": i.base\n            });\n        });\n        body[\"ДополнительныеОтпуска\"] = addVacationArr;\n        body[\"ПредоставитьДополнительныйОтпуск\"] = true;\n    }\n    if (Context.data.start_date_1c) {\n        body[\"ДатаНачалаОсновногоОтпуска\"] = `${Context.data.start_date_1c}T00:00:00`;\n        body[\"ДатаНачалаПериодаОтсутствия\"] = `${Context.data.start_date_1c}T00:00:00`;\n    }\n    if (Context.data.end_date_1c) {\n        body[\"ДатаОкончанияОсновногоОтпуска\"] = `${Context.data.end_date_1c}T00:00:00`;\n        body[\"ДатаОкончанияПериодаОтсутствия\"] = `${Context.data.end_date_1c}T00:00:00`;\n    }\n    if (Context.data.days_amount) {\n        body[\"КоличествоДнейОсновногоОтпуска\"] = Context.data.days_amount;\n    }\n    if (Context.data.reason) {\n        body[\"Основание\"] = Context.data.reason;\n    }\n    if (!Context.data.alternativnaya_integraciya) {\n        const error = getConnectionInfo();\n        if (error != null) {\n            Context.data.error = error.message;\n            return;\n        }\n        return;\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n        };\n        requestOptions.body = JSON.stringify(body);\n        const resUrl = `${baseUrl}/Document_Отпуск?$format=json`;\n        try {\n            const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n            if (!response.ok) {\n                Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n                throw new Error(`res error ${resUrl}`);\n            }\n            Context.data.response = JSON.stringify(await response.json());\n        }\n        catch (err) {\n            Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n            throw new Error(err);\n        }\n    }\n    else {\n        const awaitingApp = await Namespace.params.fields.awaiting_docs_table_1c.app.search()\n            .where((f, g) => g.and(f.__deletedAt.eq(null), f.__id.eq(Context.data.integration_app_id))).first();\n        if (!awaitingApp) {\n            Context.data.error = `Couldn't find an element of awaiting_docs_table_1c app with id ${Context.data.integration_app_id}`;\n            return;\n        }\n        const readyStatus = Namespace.params.fields.awaiting_docs_table_1c.app.fields.__status.variants.ready;\n        awaitingApp.data.document_creation_data = JSON.stringify(body);\n        awaitingApp.data.isCorrection = true;\n        awaitingApp.data.status_1c = '';\n        awaitingApp.data.additional_info = (_a = Context.data.additional_info) !== null && _a !== void 0 ? _a : \"\";\n        awaitingApp.data.base_1c_name = (_b = Context.data.connection_name) !== null && _b !== void 0 ? _b : undefined;\n        await awaitingApp.save();\n        await awaitingApp.setStatus(readyStatus);\n        Context.data.integration_app_id = awaitingApp.data.__id;\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
