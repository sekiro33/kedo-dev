{
  "scripts": "let baseUrl;\nlet login;\nlet password;\nlet myHeaders;\nfunction getConnectionInfo() {\n    const connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n    if (!connectionsArray) {\n        return new Error(`Не найдено записей подключения`);\n    }\n    const currentConnection = connectionsArray.length > 1 ? connectionsArray.find((item) => {\n        return item.name === Context.data.connection_name;\n    }) : connectionsArray[0];\n    if (!currentConnection) {\n        return new Error(`Не найдено подключение c именем ${Context.data.connection_name}`);\n    }\n    baseUrl = currentConnection.url;\n    login = currentConnection.login;\n    password = currentConnection.password;\n    myHeaders = {\n        Authorization: `Basic ${btoa(login + ':' + password)}`,\n    };\n    return null;\n}\nasync function action() {\n    var _a;\n    if (!Context.data.vacation_data) {\n        throw new Error(`Context.data.vacation_data is undefined`);\n    }\n    const current_date = new Datetime();\n    const vacation_data = JSON.parse(Context.data.vacation_data);\n    const body = {\n        \"Date\": current_date.format(\"YYYY-MM-DDT00:00:00\"),\n        \"ПериодРегистрации\": current_date.format(\"YYYY-MM-01T00:00:00\"),\n        \"Организация_Key\": vacation_data.organization_id,\n        \"Сотрудник_Key\": vacation_data.staff_id,\n        \"ФизическоеЛицо_Key\": vacation_data.individual_id,\n        \"ВидОтпуска_Key\": vacation_data.vacation_type,\n        \"ДатаНачала\": vacation_data.start_date,\n        \"ДатаОтсутствия\": vacation_data.start_date,\n        \"ДатаОкончания\": vacation_data.end_date,\n        \"ОтсутствиеВТечениеЧастиСмены\": vacation_data.part_during,\n        \"ЧасовОтпуска\": vacation_data.duration,\n        \"Основание\": vacation_data.statement,\n        \"Комментарий\": vacation_data.comment,\n        \"ПорядокВыплаты\": \"Межрасчет\",\n    };\n    const correction_body = {\n        \"isCorrection\": Context.data.vacation_move ? Context.data.vacation_move : false,\n        \"Ref_Key\": Context.data.id_document_1c ? Context.data.id_document_1c : \"\",\n    };\n    if (Context.data.alternative_way == true) {\n        const accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c;\n        const awaitingApp = Namespace.params.fields.awaiting_docs_table_1c.app.create();\n        awaitingApp.data.__name = `Отпуск без сохранения оплаты ${Context.data.staff_full_name ? `(${Context.data.staff_full_name})` : \"\"}`;\n        awaitingApp.data.document_odata_name = \"Document_ОтпускБезСохраненияОплаты\";\n        awaitingApp.data.accounting_systems = accounting1c;\n        awaitingApp.data.personal_guid_1c = JSON.stringify([Context.data.individual_id_1c]);\n        awaitingApp.data.document_creation_data = JSON.stringify(Context.data.vacation_move && Context.data.vacation_move == true ? correction_body : body);\n        awaitingApp.data.additional_info = (_a = Context.data.additional_info) !== null && _a !== void 0 ? _a : \"\";\n        awaitingApp.data.base_1c_name = Context.data.connection_name;\n        await awaitingApp.save();\n        Context.data.integration_app_id = awaitingApp.data.__id;\n    }\n    else {\n        const error = getConnectionInfo();\n        if (error != null) {\n            Context.data.error = error.message;\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n        };\n        requestOptions.body = JSON.stringify(body);\n        Context.data.debug = 'fetch';\n        const resUrl = `${baseUrl}/Document_ОтпускБезСохраненияОплаты?$format=json`;\n        try {\n            const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n            if (!response.ok) {\n                Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n                throw new Error(`res error ${resUrl}`);\n            }\n            Context.data.response = JSON.stringify(await response.json());\n        }\n        catch (err) {\n            Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n            throw new Error(err);\n        }\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
