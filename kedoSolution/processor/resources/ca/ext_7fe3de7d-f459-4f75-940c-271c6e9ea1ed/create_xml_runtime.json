{
  "scripts": "const emptyStringRegex = /^\\s*\\n/gm;\nconst otherDocsCode = \"12.999\";\nlet fetchedDoc;\nlet docData;\nlet xmlText = `<edoc:wredcData xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:edoc=\"http://mintrud.gov.ru/work-related-electronic-document\"\n    id= created= version=\"1.0\"\n    xsi:schemaLocation=\"http://mintrud.gov.ru/work-related-electronic-document work-related-electronic-document_20.09.xsd\">\n    <content>\n        <employername></employername>\n        <innemployer></innemployer>\n        <ogrn></ogrn>\n        <kpp></kpp>\n        <jobtitle></jobtitle>\n        <docinfo>   \n            <docName></docName>\n            <docNumber></docNumber>\n            <date></date>\n            <docType></docType>\n            <annotation></annotation>\n            <file></file>\n            <size></size>\n            <signature>\n                <date></date>\n                <x509>\n                    <file></file>\n                    <size></size>\n                </x509>\n            </signature>\n            <employeeinfo>\n                <lastnameinfo></lastnameinfo>\n                <firstnameinfo></firstnameinfo>\n                <patronymicInfo></patronymicInfo>\n                <jobtitle></jobtitle>\n                <signature>\n                    <date></date>\n                    <snils></snils>\n                    <x509>\n                        <file></file>\n                        <size></size>\n                    </x509>\n                </signature>\n            </employeeinfo>\n        </docinfo>\n    </content>\n</edoc:wredcData>`;\nconst globalXmlSchema = [\n    {\n        element_name: \"id\",\n        regex: /id=/,\n        element_type: \"attribute\"\n    },\n    {\n        element_name: \"created\",\n        regex: /created=/,\n        element_type: \"attribute\"\n    },\n    {\n        element_name: \"content\",\n        regex: /(?<open><content>)(?<value>)(?<close><\\/content>)/,\n        element_type: \"object\",\n        fields: [\n            {\n                element_name: \"employername\",\n                regex: /(?<open><employername>)(?<value>)(?<close><\\/employername>)/,\n                element_type: \"field\"\n            },\n            {\n                element_name: \"innemployer\",\n                regex: /(?<open><innemployer>)(?<value>)(?<close><\\/innemployer>)/,\n                element_type: \"field\"\n            },\n            {\n                element_name: \"ogrn\",\n                regex: /(?<open><ogrn>)(?<value>)(?<close><\\/ogrn>)/,\n                element_type: \"field\"\n            },\n            {\n                element_name: \"kpp\",\n                regex: /(?<open><kpp>)(?<value>)(?<close><\\/kpp>)/,\n                element_type: \"field\"\n            },\n            {\n                element_name: \"employeer_jobtitle\",\n                regex: /(?<open><jobtitle>)(?<value>)(?<close><\\/jobtitle>)[\\n\\w\\s\\t]*(?<rest><doc)/,\n                element_type: \"field\"\n            },\n            {\n                element_name: \"docinfo\",\n                regex: /(?<open><docinfo>)(?<value>)(?<close><\\/docinfo>)/,\n                element_type: \"object\",\n                fields: [\n                    {\n                        element_name: \"docName\",\n                        regex: /(?<open><docName>)(?<value>)(?<close><\\/docName>)/,\n                        element_type: \"field\"\n                    },\n                    {\n                        element_name: \"createdAt\",\n                        regex: /(?<open><date>)(?<value>)(?<close><\\/date>)/,\n                        element_type: \"field\"\n                    },\n                    {\n                        element_name: \"docType\",\n                        regex: /(?<open><docType>)(?<value>)(?<close><\\/docType>)/,\n                        element_type: \"field\"\n                    },\n                    {\n                        element_name: \"file_name\",\n                        regex: /(?<open><file>)(?<value>)(?<close><\\/file>)/,\n                        element_type: \"field\"\n                    },\n                    {\n                        element_name: \"file_size\",\n                        regex: /(?<open><size>)(?<value>)(?<close><\\/size>)/,\n                        element_type: \"field\"\n                    },\n                    {\n                        element_name: \"employeer_signature\",\n                        regex: /(?<open><signature>)(?<value>[\\w\\n\\s\\t\\/<>]*)(?<close><\\/signature>)[\\n\\w\\s\\t]*(?<rest><emp)/,\n                        element_type: \"object\",\n                        fields: [\n                            {\n                                element_name: \"employeer_sign_date\",\n                                regex: /(?<open><date>)(?<value>)(?<close><\\/date>)/,\n                                element_type: \"field\"\n                            },\n                            {\n                                element_name: \"x509\",\n                                regex: /(?<open><x509>)(?<value>)(?<close><\\/x509>)/,\n                                element_type: \"object\",\n                                fields: [\n                                    {\n                                        element_name: \"sign_name\",\n                                        regex: /(?<open><file>)(?<value>)(?<close><\\/file>)/,\n                                        element_type: \"field\"\n                                    },\n                                    {\n                                        element_name: \"sign_size\",\n                                        regex: /(?<open><size>)(?<value>)(?<close><\\/size>)/,\n                                        element_type: \"field\"\n                                    },\n                                ]\n                            },\n                        ]\n                    },\n                    {\n                        element_name: \"employeeinfo\",\n                        regex: /(?<open><employeeinfo>)(?<value>)(?<close><\\/employeeinfo>)/,\n                        element_type: \"object\",\n                        fields: [\n                            {\n                                element_name: \"lastnameinfo\",\n                                regex: /(?<open><lastnameinfo>)(?<value>)(?<close><\\/lastnameinfo>)/,\n                                element_type: \"field\"\n                            },\n                            {\n                                element_name: \"firstnameinfo\",\n                                regex: /(?<open><firstnameinfo>)(?<value>)(?<close><\\/firstnameinfo>)/,\n                                element_type: \"field\"\n                            },\n                            {\n                                element_name: \"patronymicInfo\",\n                                regex: /(?<open><patronymicInfo>)(?<value>)(?<close><\\/patronymicInfo>)/,\n                                element_type: \"field\"\n                            },\n                            {\n                                element_name: \"jobtitle\",\n                                regex: /(?<open><jobtitle>)(?<value>)(?<close><\\/jobtitle>)/,\n                                element_type: \"field\"\n                            },\n                            {\n                                element_name: \"staff_signature\",\n                                regex: /(?<open><signature>)(?<value>[\\w\\n\\s\\t\\/<>]*)(?<close><\\/signature>)[\\n\\w\\s\\t]*(?<rest><\\/emp)/,\n                                element_type: \"object\",\n                                fields: [\n                                    {\n                                        element_name: \"staff_sign_date\",\n                                        regex: /(?<open><date>)(?<value>)(?<close><\\/date>)/,\n                                        element_type: \"field\"\n                                    },\n                                    {\n                                        element_name: \"snils\",\n                                        regex: /(?<open><snils>)(?<value>)(?<close><\\/snils>)/,\n                                        element_type: \"field\"\n                                    },\n                                    {\n                                        element_name: \"x509_employeer\",\n                                        regex: /(?<open><x509>)(?<value>)(?<close><\\/x509>)/,\n                                        element_type: \"object\",\n                                        fields: [\n                                            {\n                                                element_name: \"sign_name_staff\",\n                                                regex: /(?<open><file>)(?<value>)(?<close><\\/file>)/,\n                                                element_type: \"field\"\n                                            },\n                                            {\n                                                element_name: \"sign_size_staff\",\n                                                regex: /(?<open><size>)(?<value>)(?<close><\\/size>)/,\n                                                element_type: \"field\"\n                                            },\n                                        ]\n                                    },\n                                ]\n                            },\n                        ]\n                    },\n                ]\n            },\n        ]\n    }\n];\nasync function convertFile() {\n    try {\n        let text = Context.data.generated_xml;\n        let utf8 = [];\n        for (let i = 0; i < text.length; i++) {\n            let charcode = text.charCodeAt(i);\n            if (charcode < 0x80) {\n                utf8.push(charcode);\n            }\n            else if (charcode < 0x800) {\n                utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));\n            }\n            else if (charcode < 0xd800 || charcode >= 0xe000) {\n                utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));\n            }\n            else {\n                i++;\n                charcode = 0x10000 + (((charcode & 0x3ff) << 10) | (text.charCodeAt(i) & 0x3ff));\n                utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));\n            }\n            ;\n        }\n        ;\n        let bufView = new Uint8Array(utf8.length);\n        for (var i = 0; i < utf8.length; i++) {\n            bufView[i] = utf8[i];\n        }\n        let file = await Context.fields.xml_file.create(`wredc_data.xml`, bufView);\n        Context.data.xml_file = file;\n    }\n    catch (err) {\n        Context.data.error = \"xml file generate error\" + err.message;\n        return;\n    }\n    ;\n}\n;\nasync function getData() {\n    try {\n        let doc = await Context.data.doc.fetch();\n        if (!!doc.data.__sourceRef) {\n            fetchedDoc = await doc.data.__sourceRef.fetch();\n        }\n        else {\n            fetchedDoc = doc;\n        }\n        ;\n        let staff = await Context.data.staff.fetch();\n        let extUser = await System.users.search().where(i => i.__id.eq(staff.data.ext_user.id)).first();\n        let file = undefined;\n        let fileLink = \"\";\n        let fileBase64 = \"\";\n        let fileSize = \"0\";\n        let staffSignDate = \"\";\n        let staffSignName = \"\";\n        let staffSignSize = \"\";\n        let signHistory;\n        let signSize = \"\";\n        let signDate = \"\";\n        let employeeSign;\n        let docType = \"\";\n        let organization = await staff.data.organization.fetch();\n        let entity = await organization.data.entity.fetch();\n        let innemployer = entity.data._inn;\n        let ogrn = entity.data._ogrn;\n        let kpp = entity.data._kpp;\n        let employeerSignUser;\n        let employeerSignUserName = \"\";\n        let docTypeApp = await Namespace.params.fields.doc_number_app.app.search()\n            .where((f, g) => g.and(f.__deletedAt.eq(null), f.app_namespace.eq(fetchedDoc.namespace), f.app_code.eq(fetchedDoc.code)))\n            .first();\n        docType = docTypeApp ? docTypeApp.data.code : otherDocsCode;\n        if (!!fetchedDoc) {\n            file = await fetchedDoc.data.__file.fetch();\n            if (!!file) {\n                fileLink = await file.getDownloadUrl();\n                let fileByteArray = await fetch(fileLink).then(async (file) => file.arrayBuffer());\n                fileBase64 = btoa(String.fromCharCode(...new Uint8Array(fileByteArray)));\n                fileSize = fileBase64.length.toString();\n            }\n            ;\n        }\n        ;\n        let fileName = file === null || file === void 0 ? void 0 : file.data.__name;\n        let signName = fileName + \".sig\";\n        try {\n            signHistory = await fetchedDoc.getSignHistory();\n        }\n        catch (_a) {\n        }\n        ;\n        if (signHistory) {\n            let sign = signHistory[0].signs.find((s) => s.userID != extUser.id);\n            employeeSign = signHistory[0].signs.find((sign) => sign.userID === extUser.id);\n            if (!!sign) {\n                employeerSignUser = await System.users.search().where((f, g) => g.and(f.__deletedAt.eq(null), f.__id.eq(sign.userID))).first();\n                if (employeerSignUser) {\n                    employeerSignUserName = employeerSignUser.data.displayedPosition;\n                }\n                let signBase64 = sign.sign;\n                signSize = signBase64.length.toString();\n                signDate = new Datetime(sign.createdAt).format(\"YYYY-MM-DD\");\n            }\n            ;\n        }\n        let firstName = staff.data.full_name.firstname;\n        let lastName = staff.data.full_name.lastname;\n        let patronymic = staff.data.full_name.middlename;\n        if (!!employeeSign) {\n            staffSignName = signName;\n            staffSignDate = new Datetime(employeeSign.createdAt).format(\"YYYY-MM-DD\");\n            staffSignSize = employeeSign.sign.length.toString();\n        }\n        ;\n        let snils = staff.data.snils;\n        let jobTitle = staff.data.position ? await staff.data.position.fetch().then((p) => p.data.__name) : \"Нет должности\";\n        let docData = {\n            id: fetchedDoc.data.__id,\n            created: new Datetime().format(\"YYYY-MM-DD\"),\n            createdAt: doc.data.__createdAt.format(\"YYYY-MM-DD HH:MM:SS\"),\n            employername: \"ELMA\",\n            innemployer,\n            ogrn,\n            kpp,\n            docName: fileName,\n            docType: docType,\n            file_name: fileName,\n            file_size: fileSize,\n            employeer_sign_date: signDate,\n            sign_name: signName,\n            sign_size: signSize,\n            firstnameinfo: firstName,\n            lastnameinfo: lastName,\n            patronymicInfo: patronymic,\n            jobtitle: jobTitle,\n            staff_sign_date: staffSignDate,\n            snils: snils,\n            sign_name_staff: staffSignName,\n            sign_size_staff: staffSignSize,\n            employeer_jobtitle: employeerSignUserName\n        };\n        return docData;\n    }\n    catch (err) {\n        Context.data.error = \"get data error\" + err.message;\n        return;\n    }\n}\n;\nfunction handleElement(regElem, samplePart) {\n    let fieldType = regElem.element_type;\n    switch (fieldType) {\n        case \"attribute\":\n            xmlText = samplePart.replace(regElem.regex, `$&\"${docData[regElem.element_name]}\"`);\n            break;\n        case \"field\":\n            if (regElem.element_name == \"employeer_jobtitle\" && !docData.employeer_jobtitle) {\n                xmlText = samplePart.replace(regElem.regex, \"$4\");\n            }\n            else {\n                xmlText = samplePart.replace(regElem.regex, `$1${docData[regElem.element_name]}$3`);\n            }\n            ;\n            break;\n        case \"object\":\n            let elementName = regElem.element_name;\n            let signExist;\n            switch (elementName) {\n                case \"staff_signature\":\n                    signExist = !!(docData.staff_sign_date && docData.sign_name_staff && docData.sign_size_staff);\n                    if (!signExist) {\n                        xmlText = samplePart.replace(regElem.regex, \"$4\");\n                        return;\n                    }\n                    ;\n                    break;\n                case \"employeer_signature\":\n                    signExist = !!(docData.sign_name && docData.sign_size && docData.employeer_sign_date);\n                    if (!signExist) {\n                        xmlText = samplePart.replace(regElem.regex, \"$4\");\n                        return;\n                    }\n                    ;\n                    break;\n            }\n            for (let field of regElem.fields) {\n                handleElement(field, xmlText);\n            }\n            ;\n            break;\n    }\n    ;\n}\n;\nasync function action() {\n    docData = await getData();\n    if (!docData) {\n        return;\n    }\n    for (let item of globalXmlSchema) {\n        handleElement(item, xmlText);\n    }\n    ;\n    Context.data.generated_xml = xmlText;\n    await convertFile();\n}\n;\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
