{
  "scripts": "const baseUrl = Namespace.params.data.url_1c_odata;\nconst login = Namespace.params.data.login;\nconst password = Namespace.params.data.password;\nconst myHeaders = {\n    Authorization: `Basic ${btoa(login + ':' + password)}`,\n};\nasync function action() {\n    var _a, _b, _c;\n    const currentDate = new TDate();\n    const employeeData = JSON.parse(Context.data.employee_data);\n    const individuals = [];\n    const overtimeWorkTable = [];\n    employeeData.forEach((item) => {\n        overtimeWorkTable.push({\n            \"LineNumber\": `${overtimeWorkTable.length + 1}`,\n            \"Сотрудник_Key\": item.id,\n            \"Дата\": `${item.date}T00:00:00`,\n            \"ОтработаноЧасов\": item.hours,\n            \"СпособКомпенсацииПереработки\": \"ПовышеннаяОплата\"\n        });\n        const isEmployeeExisting = individuals.find((individual) => individual[\"ФизическоеЛицо_Key\"] === item.individualId);\n        if (!isEmployeeExisting) {\n            individuals.push({\n                \"LineNumber\": `${individuals.length + 1}`,\n                \"ФизическоеЛицо_Key\": item.individualId\n            });\n        }\n    });\n    const body = {\n        \"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n        \"ПериодРегистрации\": `${currentDate.format('YYYY-MM')}-01T00:00:00`,\n        \"Организация_Key\": Context.data.org_id,\n        \"Причина\": Context.data.reason || '',\n        \"СогласиеПолучено\": true,\n        \"БухучетЗаданВСтрокахДокумента\": false,\n        \"Сотрудники\": overtimeWorkTable,\n        \"Комментарий\": (_a = Context.data.comment) !== null && _a !== void 0 ? _a : \"\",\n    };\n    if (!Context.data.alternative_way) {\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n        };\n        requestOptions.body = JSON.stringify(body);\n        Context.data.debug = 'fetch';\n        const resUrl = `${baseUrl}/Document_РаботаСверхурочно?$format=json`;\n        try {\n            const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n            if (!response.ok) {\n                Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n                throw new Error(`res error ${resUrl}`);\n            }\n            Context.data.response = JSON.stringify(await response.json());\n        }\n        catch (err) {\n            Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n            throw new Error(err);\n        }\n    }\n    else {\n        const accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c;\n        const awaitingApp = Namespace.params.fields.awaiting_docs_table_1c.app.create();\n        awaitingApp.data.__name = \"Работа в нерабочее время\";\n        awaitingApp.data.document_odata_name = \"Document_РаботаСверхурочно\";\n        awaitingApp.data.accounting_systems = accounting1c;\n        awaitingApp.data.personal_guid_1c = JSON.stringify([Context.data.individual_id_1c]);\n        awaitingApp.data.document_creation_data = JSON.stringify(body);\n        awaitingApp.data.additional_info = (_b = Context.data.additional_info) !== null && _b !== void 0 ? _b : \"\";\n        awaitingApp.data.base_1c_name = (_c = Context.data.base_1c_name) !== null && _c !== void 0 ? _c : undefined;\n        await awaitingApp.save();\n        Context.data.integration_app_id = awaitingApp.data.__id;\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
