{
  "scripts": "const baseUrl = Namespace.params.data.url_1c_odata;\nconst login = Namespace.params.data.login;\nconst password = Namespace.params.data.password;\nconst myHeaders = {\n    Authorization: `Basic ${btoa(login + ':' + password)}`,\n};\nasync function action() {\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n    };\n    const currentDate = new TDate();\n    let planned_payment_date = '';\n    if (!Context.data.planned_payment_date) {\n        const startDate = new Datetime(Context.data.start_date);\n        planned_payment_date = startDate.addDate(0, 0, -3).format('YYYY-MM-DD');\n    }\n    else {\n        planned_payment_date = Context.data.planned_payment_date;\n    }\n    const body = {\n        \"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n        \"ВыплачиватьПособиеДоТрехЛет\": false,\n        \"ПериодРегистрации\": `${currentDate.format('YYYY-MM')}-01T00:00:00`,\n        \"ПланируемаяДатаВыплаты\": `${planned_payment_date}T00:00:00`,\n        \"ДатаЗапрета\": `${Context.data.start_date}T00:00:00`,\n        \"ДатаНачала\": `${Context.data.start_date}T00:00:00`,\n        \"ДатаОкончания\": `${Context.data.end_date}T00:00:00`,\n        \"НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска\": !!Context.data.pay_during_vacation,\n        \"Организация_Key\": Context.data.org_id,\n        \"ОсновнойСотрудник_Key\": Context.data.guid,\n        \"ПорядокВыплаты\": \"Межрасчет\",\n        \"РайонныйКоэффициентРФнаНачалоСобытия\": 1,\n        \"РассчитатьЗарплату\": false,\n        \"РасчетПоПравилам2010Года\": false,\n        \"Сотрудник_Key\": Context.data.guid,\n        \"ФиксПериодРасчетаСреднегоЗаработка\": false\n    };\n    requestOptions.body = JSON.stringify(body);\n    Context.data.debug = 'fetch';\n    const resUrl = `${baseUrl}/Document_ОтпускПоУходуЗаРебенком?$format=json`;\n    try {\n        const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n        if (!response.ok) {\n            Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n            throw new Error(`res error ${resUrl}`);\n        }\n        Context.data.response = JSON.stringify(await response.json());\n    }\n    catch (err) {\n        Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n        throw new Error(err);\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
