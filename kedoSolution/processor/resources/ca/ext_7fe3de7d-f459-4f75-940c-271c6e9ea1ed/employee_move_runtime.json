{
  "scripts": "let baseUrl;\nlet login;\nlet password;\nlet myHeaders;\nasync function log(text) {\n    const response = fetch(`https://sivbciaps6tzy.elma365.ru/pub/v1/app/testovyi/logirovanie_dlya_modulya/create`, {\n        method: 'POST',\n        headers: {\n            Authorization: 'Bearer 4417c175-29f2-4366-b0cf-246ef39f8423',\n        },\n        body: JSON.stringify({\n            \"context\": {\n                \"__name\": \"log\",\n                \"debug\": `${text}`,\n            },\n        })\n    });\n}\nfunction getConnectionInfo() {\n    const connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n    if (!connectionsArray) {\n        return new Error(`Не найдено записей подключения`);\n    }\n    const currentConnection = connectionsArray.length > 1 ? connectionsArray.find((item) => {\n        return item.name === Context.data.connection_name;\n    }) : connectionsArray[0];\n    if (!currentConnection) {\n        return new Error(`Не найдено подключение c именем ${Context.data.connection_name}`);\n    }\n    baseUrl = currentConnection.url;\n    login = currentConnection.login;\n    password = currentConnection.password;\n    myHeaders = {\n        Authorization: `Basic ${btoa(login + ':' + password)}`,\n    };\n    return null;\n}\nasync function action() {\n    var _a, _b, _c, _d, _e;\n    const currentDate = new TDate();\n    const body = {\n        \"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n        \"Организация_Key\": Context.data.org_id,\n        \"Сотрудник_Key\": Context.data.id_employee,\n        \"ФизическоеЛицо_Key\": Context.data.id_personal,\n        \"ДатаНачала\": `${Context.data.move_date}T00:00:00`,\n        \"ВидЗанятости\": \"ОсновноеМестоРаботы\",\n        \"КоличествоСтавок\": 1,\n        \"ВидДоговора\": \"ТрудовойДоговор\",\n        \"КоэффициентИндексации\": 1,\n        \"ДатаЗапрета\": `${Context.data.move_date}T00:00:00`,\n        \"НаименованиеДокумента\": \"Приказ\",\n        \"ПричинаПеревода\": (_a = Context.data.move_reason) !== null && _a !== void 0 ? _a : \"\",\n        \"ОснованиеПеревода\": (_b = Context.data.move_osn) !== null && _b !== void 0 ? _b : \"\",\n        \"ИзменитьСведенияОДоговореКонтракте\": !!Context.data.change_contract,\n        \"Комментарий\": (_c = Context.data.comment) !== null && _c !== void 0 ? _c : \"\"\n    };\n    if (!!Context.data.change_work_place) {\n        body[\"ИзменитьРабочееМесто\"] = true;\n        body[\"РабочееМесто_Key\"] = Context.data.new_workplace_id;\n    }\n    if (!!Context.data.change_remote_work) {\n        body[\"РаботаетДистанционно\"] = Context.data.remote_work;\n        body[\"ИзменитьДистанционнуюРаботу\"] = true;\n    }\n    if (Context.data.id_pos && Context.data.is_subdiv) {\n        body[\"Должность_Key\"] = Context.data.id_pos;\n        body[\"Подразделение_Key\"] = Context.data.is_subdiv;\n        body[\"ИзменитьПодразделениеИДолжность\"] = true;\n    }\n    if (Context.data.id_work_schedule) {\n        body[\"ГрафикРаботы_Key\"] = Context.data.id_work_schedule;\n        body[\"ИзменитьГрафикРаботы\"] = true;\n    }\n    if (Context.data.end_date) {\n        body[\"ДатаОкончания\"] = Context.data.end_date;\n    }\n    log(Context.data.alternative_way ? Context.data.alternative_way == true ? 'true' : 'false' : 'undefined');\n    if (!Context.data.alternative_way) {\n        const error = getConnectionInfo();\n        if (error != null) {\n            Context.data.error = error.message;\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n        };\n        requestOptions.body = JSON.stringify(body);\n        Context.data.debug = 'fetch';\n        const resUrl = `${baseUrl}/Document_КадровыйПеревод?$format=json`;\n        try {\n            const response = await fetch(`${encodeURI(resUrl)}`, requestOptions);\n            if (!response.ok) {\n                const responseText = await response.text();\n                Context.data.error += ` staff data res.status error; resUrl - ${resUrl} `;\n                throw new Error(`status ${response.status} res error ${resUrl}, err text ${responseText}`);\n            }\n            Context.data.response = JSON.stringify(await response.json());\n        }\n        catch (err) {\n            Context.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `;\n            throw new Error(err.message);\n        }\n    }\n    else {\n        const accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c;\n        const awaitingApp = Namespace.params.fields.awaiting_docs_table_1c.app.create();\n        awaitingApp.data.__name = \"Кадровый перевод\";\n        awaitingApp.data.document_odata_name = \"Document_КадровыйПеревод\";\n        awaitingApp.data.accounting_systems = accounting1c;\n        awaitingApp.data.personal_guid_1c = JSON.stringify([Context.data.id_personal]);\n        awaitingApp.data.document_creation_data = JSON.stringify(body);\n        awaitingApp.data.additional_info = (_d = Context.data.additional_info) !== null && _d !== void 0 ? _d : \"\";\n        awaitingApp.data.base_1c_name = (_e = Context.data.connection_name) !== null && _e !== void 0 ? _e : undefined;\n        await awaitingApp.save();\n        Context.data.integration_app_id = awaitingApp.data.__id;\n    }\n}\n(async function () {\n    action();\n});\n",
  "execution": [
    {
      "code": "sync",
      "name": "Синхронное"
    }
  ],
  "allowGlobal": false,
  "checkInterval": ""
}
