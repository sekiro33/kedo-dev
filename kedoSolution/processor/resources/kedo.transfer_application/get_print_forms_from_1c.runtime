{"scripts":"async function get_settings() {\n    const settings = await Context.fields.kedo_settings.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.use_alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n}\nasync function get_integration_app() {\n    if (!Context.data.integration_app_id) {\n        Context.data.error = `Отсутствует идентификатор приложения интеграции. Context.data.integration_app_id is undefined`;\n        throw new Error(Context.data.error);\n    }\n    Context.data.integration_app = await Context.fields.integration_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(Context.data.integration_app_id))).first();\n    if (!Context.data.integration_app) {\n        Context.data.error = `Не удалось найти приложение интеграции по заданому идентификатору: ${Context.data.integration_app_id}`;\n        throw new Error(Context.data.error);\n    }\n}\nasync function get_print_forms() {\n    if (Context.data.await_document) {\n        const await_doc = await Context.data.await_document.fetch();\n        if (!await_doc.data.print_forms_id) {\n            Context.data.error = \"Отсутствуют идентификаторы печатных форм\";\n            throw new Error(Context.data.error);\n        }\n        if (!await_doc.data.print_forms || await_doc.data.print_forms.length == 0) {\n            Context.data.error = \"Отсутствуют печатные формы\";\n            throw new Error(Context.data.error);\n        }\n        const print_forms = await_doc.data.print_forms;\n        const print_forms_id = JSON.parse(await_doc.data.print_forms_id);\n        const print_froms_to_sign = [];\n        const document_types = await Context.fields.document_type.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null))).size(10000).all();\n        const print_forms_types_id = [];\n        if (print_forms \u0026\u0026 print_forms_id \u0026\u0026 print_forms.length == print_forms_id.length) {\n            for (let i = 0; i \u003c print_forms_id.length; i++) {\n                const print_form_type = document_types.find(f =\u003e f.data.doc_type_id_1c === print_forms_id[i]);\n                if (print_form_type \u0026\u0026 print_form_type.data.app_code == 'order_for_transfer') {\n                    Context.data.transer_order_file = print_forms[i];\n                    continue;\n                }\n                if (print_form_type \u0026\u0026 print_form_type.data.app_code == 'additional_transfer_agreement') {\n                    Context.data.additional_transfer_agreement_file = print_forms[i];\n                    continue;\n                }\n                if (print_form_type \u0026\u0026 print_form_type.data.app_code) {\n                    print_forms_types_id.push(print_form_type.data.app_code);\n                    print_froms_to_sign.push(print_forms[i]);\n                }\n                else {\n                    print_forms_types_id.push('other_documents');\n                    print_froms_to_sign.push(print_forms[i]);\n                }\n            }\n        }\n        Context.data.print_forms = print_froms_to_sign;\n        Context.data.print_forms_id_json = JSON.stringify(print_forms_types_id);\n    }\n}\nasync function prepare_data_1c() {\n    if (Context.data.transfer_application) {\n        const transfer_application = await Context.data.transfer_application.fetch();\n        const row = transfer_application.data.transferred_staff_table[0];\n        const staff = await row.staff.fetch();\n        const organization = await staff.data.organization.fetch();\n        Context.data.organization_id_1c = organization.data.ref_key;\n        Context.data.move_date_string = transfer_application.data.date_start.format('YYYY-MM-DD');\n        Context.data.staff_id_1c = staff.data.id_1c;\n        Context.data.staff_personal_id_1c = staff.data.individual_id_1c;\n        if (transfer_application.data.new_position) {\n            const new_position = await transfer_application.data.new_position.fetch();\n            const subdivision = await new_position.data.subdivision.fetch();\n            Context.data.position_id_1c = new_position.data.ref_key;\n            Context.data.subdivision_id_1c = subdivision.data.ref_key;\n        }\n        if (transfer_application.data.date_end) {\n            Context.data.mode_date_end_string = transfer_application.data.date_end.format('YYYY-MM-DD');\n        }\n        if (transfer_application.data.workplace_new) {\n            const workplace_new = await transfer_application.data.workplace_new.fetch();\n            Context.data.change_work_place = true;\n        }\n        if (transfer_application.data.remote_work) {\n            Context.data.remote_work = true;\n            Context.data.change_remote_work = true;\n        }\n        if (transfer_application.data.new_position) {\n            Context.data.change_contract = true;\n        }\n        if (transfer_application.data.schedule_work_new) {\n            const schedule_work_new = await transfer_application.data.schedule_work_new.fetch();\n            Context.data.work_schedules_id_1c = schedule_work_new.data.id_1c;\n        }\n    }\n}\nasync function check_mass_transfer() {\n    if (Context.data.transfer_application) {\n        const transfer_application = await Context.data.transfer_application.fetch();\n        return transfer_application.data.transferred_staff_table.length \u003e 1 ? true : false;\n    }\n    return false;\n}\nasync function prepare_data_1c_mass_transfer() {\n    if (Context.data.transfer_application) {\n        const transfer_application = await Context.data.transfer_application.fetch();\n        const staff_table = transfer_application.data.transferred_staff_table;\n        if (staff_table.length \u003e 0) {\n            const staff = await staff_table[0].staff.fetch();\n            const work_schedules = await transfer_application.data.schedule_work_new.fetch();\n            const organization = await staff.data.organization.fetch();\n            Context.data.organization_id_1c = organization.data.ref_key;\n            Context.data.work_schedules_id_1c = work_schedules.data.id_1c;\n        }\n        Context.data.move_date_string = transfer_application.data.date_start.format('YYYY-MM-DD');\n        if (transfer_application.data.date_end) {\n            Context.data.mode_date_end_string = transfer_application.data.date_end.format('YYYY-MM-DD');\n        }\n        const staff_list = [];\n        for (const row of staff_table) {\n            const staff = await row.staff.fetch();\n            staff_list.push({\n                id_1c: staff.data.id_1c,\n                individual_id_1c: staff.data.individual_id_1c,\n            });\n        }\n        Context.data.staff_list_1c_json = JSON.stringify(staff_list);\n    }\n}\nasync function get_main_print_forms() {\n    const print_forms_table = Context.data.print_forms_table;\n    const doc_types_1c = await Context.fields.document_type.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const order_doc_type = doc_types_1c.filter(f =\u003e f.data.app_code == \"order_for_transfer\");\n    const additional_agreement_doc_type = doc_types_1c.filter(f =\u003e f.data.app_code == \"additional_transfer_agreement\");\n    if (!order_doc_type) {\n        Context.data.error = `Не удалось найти вид печатной формы, соответствующий печатной форме приказа.`;\n        throw new Error(Context.data.error);\n    }\n    if (!additional_agreement_doc_type) {\n        Context.data.error = `Не удалось найти вид печатной формы, соответствующий печатной форме ДС.`;\n        throw new Error(Context.data.error);\n    }\n    for (let i = print_forms_table.length - 1; i \u003e= 0; i--) {\n        const row = print_forms_table[i];\n        if (order_doc_type.find(f =\u003e f.id == row.doc_type_1c.id)) {\n            Context.data.transer_order_file = row.print_form;\n            print_forms_table.delete(i);\n            continue;\n        }\n        if (additional_agreement_doc_type.find(f =\u003e f.id == row.doc_type_1c.id)) {\n            Context.data.additional_transfer_agreement_file = row.print_form;\n            print_forms_table.delete(i);\n        }\n    }\n    if (!Context.data.transer_order_file) {\n        Context.data.error = `Среди полученных печатных форм не удалось найти печатную форму приказа`;\n        throw new Error(Context.data.error);\n    }\n}\nasync function check_print_forms_table() {\n    if (Context.data.print_forms_table \u0026\u0026 Context.data.print_forms_table.length == 0) {\n        return false;\n    }\n    return true;\n}\nasync function get_print_form() {\n    if (!Context.data.print_forms_table[Context.data.table_counter]) {\n        throw new Error(`Не найдена строка в таблице. Context.data.table_counter = ${Context.data.table_counter}`);\n    }\n    const row = Context.data.print_forms_table[Context.data.table_counter];\n    Context.data.print_form = row.print_form;\n    Context.data.document_type = row.doc_type_1c;\n    Context.data.overdue_date = new Datetime().add(new Duration(24, \"hours\"));\n    Context.data.table_counter += 1;\n}\nasync function check_table_length() {\n    if (!Context.data.print_forms_table[Context.data.table_counter]) {\n        return false;\n    }\n    return true;\n}\n","gatewayPairs":{"/items/5ada1a28-2fb7-4670-a23e-9eec77cd8b72":"/items/66c40bbe-8213-4ba1-9a08-04694fb4d01c"},"hasTranslations":false}
