{"scripts":"async function getKedoSettings() {\n}\nasync function getStaffData(employment) {\n    var _a, _b, _c, _d, _e;\n    if (!employment.data.staff) {\n        throw new Error(\"employment_place.data.staff is undefined\");\n    }\n    const staff = await employment.data.staff.fetch();\n    if (!employment.data.organization) {\n        throw new Error(\"employment.data.organization is undefined\");\n    }\n    if (!employment.data.position) {\n        throw new Error(\"employment.data.position is undefined\");\n    }\n    if (!employment.data.subdivision) {\n        throw new Error(\"employment.data.structural_subdivision is undefined\");\n    }\n    const [position, organization, structural_subdivision] = await Promise.all([\n        employment.data.position.fetch(),\n        employment.data.organization.fetch(),\n        employment.data.subdivision.fetch(),\n    ]);\n    const staff_data = {\n        name: staff.data.__name,\n        id_1c: (_a = employment.data.id_1c) !== null \u0026\u0026 _a !== void 0 ? _a : \"\",\n        individual_id_1c: (_b = staff.data.individual_id_1c) !== null \u0026\u0026 _b !== void 0 ? _b : \"\",\n        position_id: (_c = position.data.ref_key) !== null \u0026\u0026 _c !== void 0 ? _c : \"\",\n        organization_id: (_d = organization.data.ref_key) !== null \u0026\u0026 _d !== void 0 ? _d : \"\",\n        structural_subdivision_id: (_e = structural_subdivision.data.ref_key) !== null \u0026\u0026 _e !== void 0 ? _e : \"\",\n    };\n    return staff_data;\n}\nasync function setTransferData() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (!Context.data.transfer_application) {\n        throw new Error(\"Отсутствует заявка на перевод\");\n    }\n    if (!Context.data.transfer_type) {\n        throw new Error(\"Вид перевода не указан\");\n    }\n    const transfer_application = await Context.data.transfer_application.fetch();\n    const transfer_table = transfer_application.data.transfer_table;\n    const transfer_type = Context.data.transfer_type;\n    if (!transfer_table || transfer_table.length == 0) {\n        throw new Error(\"Таблица переводимых сотрудников в заявке не заполнена\");\n    }\n    const row_index = (_a = Context.data.transfer_table_counter) !== null \u0026\u0026 _a !== void 0 ? _a : 0;\n    const transfer_row = transfer_table[row_index];\n    if (transfer_row.transfer_employment_place) {\n        throw new Error(`Место занятости переводимого сотрудника не заполнено (${row_index + 1} строка таблицы)`);\n    }\n    const staff_data = await getStaffData(transfer_row.transfer_employment_place);\n    if (!transfer_application.data.date_start) {\n        throw new Error(\"Не указана дата начала перевода\");\n    }\n    const start_date = transfer_application.data.date_start;\n    const end_date = transfer_application.data.date_end;\n    const transfer_reason = (_b = transfer_application.data.transfer_reason) !== null \u0026\u0026 _b !== void 0 ? _b : \"\";\n    const comment = (_c = transfer_application.data.comment) !== null \u0026\u0026 _c !== void 0 ? _c : \"\";\n    const [position, organization, subdivision, work_schedule] = await Promise.all([\n        (_d = transfer_application.data.new_position) === null || _d === void 0 ? void 0 : _d.fetch(),\n        (_e = transfer_application.data.structural_subdivision) === null || _e === void 0 ? void 0 : _e.fetch(),\n        (_f = transfer_application.data.organization) === null || _f === void 0 ? void 0 : _f.fetch(),\n        (_g = transfer_application.data.schedule_work_new) === null || _g === void 0 ? void 0 : _g.fetch(),\n    ]);\n    const transfer_data = {\n        staff: staff_data,\n        start_date: start_date.format(\"YYYY-MM-DDT00:00:00\"),\n        end_date: end_date === null || end_date === void 0 ? void 0 : end_date.format(\"YYYY-MM-DDT00:00:00\"),\n        reason: transfer_reason,\n        comment: comment,\n        base: \"Личное заявление сотрудника\",\n    };\n    switch (transfer_type.code) {\n        case \"transfer_another_position\": {\n            if (!position) {\n                throw new Error(\"Не указана позиция для перевода\");\n            }\n            if (!subdivision) {\n                throw new Error(\"У указаной позиции для перевода отсутсвует подразделение\");\n            }\n            if (!organization) {\n                throw new Error(\"У указаной позции для перевода не указана организация\");\n            }\n            if (!transfer_application.data.temporary_transfer) {\n                throw new Error(\"Не указн тип перевода (Временный или нет)\");\n            }\n            transfer_data.position_id = position.data.ref_key;\n            transfer_data.work_schedule_id = work_schedule === null || work_schedule === void 0 ? void 0 : work_schedule.data.id_1c;\n            transfer_data.subdivison_id = subdivision === null || subdivision === void 0 ? void 0 : subdivision.data.ref_key;\n            transfer_data.work_schedule_id = work_schedule === null || work_schedule === void 0 ? void 0 : work_schedule.data.id_1c;\n            transfer_data.temporary_transfer = transfer_application.data.temporary_transfer;\n            break;\n        }\n        case \"work_condition_change\": {\n            if (!work_schedule) {\n                throw new Error(\"Не указан новый график работы\");\n            }\n            transfer_data.work_schedule_id = work_schedule === null || work_schedule === void 0 ? void 0 : work_schedule.data.id_1c;\n            transfer_data.remote_work = transfer_application.data.remote_work;\n            break;\n        }\n        case \"change_of_schedule\": {\n            if (!work_schedule) {\n                throw new Error(\"Не указан новый график работы\");\n            }\n            transfer_data.work_schedule_id = work_schedule.data.id_1c;\n            break;\n        }\n        default: {\n            throw new Error(\"Неизвестный вид перевода\");\n        }\n    }\n    Context.data.transfer_data_json = JSON.stringify(transfer_data);\n}\nasync function addIntegrationApp() {\n    var _a;\n    const integration_apps = (_a = Context.data.integration_apps) !== null \u0026\u0026 _a !== void 0 ? _a : [];\n    if (!Context.data.integration_app) {\n        throw new Error(\"Приложение интеграции отсуствует\");\n    }\n    integration_apps.push(Context.data.integration_app);\n    Context.data.integration_apps = integration_apps;\n    Context.data.integration_app = undefined;\n}\n","gatewayPairs":{},"hasTranslations":false}
