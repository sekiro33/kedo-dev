{"scripts":"async function prepareData() {\n    const custom_generate_transfer_application = await Context.fields.kedo_settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('custom_generate_transfer_application')))\n        .first();\n    Context.data.custom_generate_transfer_application = custom_generate_transfer_application ? custom_generate_transfer_application.data.status : false;\n    Context.data.proposed_terms = \"\";\n    if (!Context.data.transfer_application) {\n        throw new Error(\"Отсутствует заявка\");\n    }\n    const transfer_application = await Context.data.transfer_application.fetch();\n    Context.data.transfer_type = transfer_application.data.transfer_type;\n    Context.data.date_start = transfer_application.data.date_start;\n    Context.data.transferred_staff = transfer_application.data.transfer_table[0].transfer_staff;\n    Context.data.staff = transfer_application.data.staff;\n    const staffs = transfer_application.data.transfer_table.map(f =\u003e f.transfer_staff);\n    const staffs_fetched = await Promise.all(staffs.map(f =\u003e f.fetch()));\n    Context.data.transferred_staffs_users = staffs_fetched.map(f =\u003e f.data.ext_user);\n    if (!transfer_application.data.staff \u0026\u0026 transfer_application.data.transfer_table.length \u003e 0) {\n        transfer_application.data.staff = transfer_application.data.transfer_table[0].transfer_staff;\n    }\n    if (transfer_application.data.transfer_table \u0026\u0026 transfer_application.data.transfer_table.length === 1) {\n        if (transfer_application.data.transfer_table[0].transfer_staff.id === transfer_application.data.staff.id) {\n            Context.data.is_iniciator = true;\n        }\n        else {\n            Context.data.is_iniciator = false;\n        }\n    }\n    let app = transfer_application.data;\n    Context.data.proposed_terms += app.date_start ? '- Дата перевода c : ' + app.date_start.format('DD.MM.YYYY') + '\\n' : \"\";\n    Context.data.proposed_terms += app.date_end ? '- Дата перевода по : ' + app.date_end.format('DD.MM.YYYY') + '\\n' : \"\";\n    Context.data.proposed_terms += app.new_position ? '- Должность: ' + (await app.new_position.fetch()).data.__name + '\\n' : \"\";\n    Context.data.proposed_terms += app.schedule_work_new ? '- График работы: ' + (await app.schedule_work_new.fetch()).data.__name + '\\n' : \"\";\n    Context.data.proposed_terms += app.workplace_new ? '- Рабочее место: ' + (await app.workplace_new.fetch()).data.__name + '\\n' : \"\";\n    Context.data.proposed_terms += app.type_employment_relationship ? '- Вид трудовых отношений: ' + (await app.type_employment_relationship.fetch()).data.__name + '\\n' : \"\";\n    Context.data.proposed_terms += app.remote_work ? '- Дистанционная работа: Да' : '- Дистанционная работа: Нет';\n    for (let user of Context.data.transfer_table) {\n        user.current_terms = '';\n        if (user.transfer_work_schedule) {\n            user.current_terms += app.schedule_work_new ? '- График работы: ' + (await user.transfer_work_schedule.fetch()).data.__name + '\\n' : \"\";\n        }\n        if (user.transfer_workplace) {\n            user.current_terms += app.workplace_new ? '- Рабочее место: ' + (await user.transfer_work_schedule.fetch()).data.__name + '\\n' : \"\";\n        }\n        const staff = await user.transfer_staff.fetch();\n        if (staff.data.remote_work) {\n            user.current_terms += '- Дистанционная работа: Да';\n        }\n        else {\n            user.current_terms += '- Дистанционная работа: Нет';\n        }\n    }\n    await get_kedo_settings();\n}\nasync function get_kedo_settings() {\n    const settings = await Context.fields.kedo_settings.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const integration_1c = settings.find(f =\u003e f.data.code == 'integration_1c');\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const use_alternative_system = settings.find(f =\u003e f.data.code == 'use_alternative_system');\n    Context.data.use_alternative_system = use_alternative_system ? use_alternative_system.data.status : false;\n    const custom_lna = settings.find(f =\u003e f.data.code == 'custom_lna');\n    Context.data.custom_lna = custom_lna ? custom_lna.data.status : false;\n    const med_exam_proccess = settings.find(f =\u003e f.data.code == 'med_exam_process');\n    Context.data.on_med_exam_process = med_exam_proccess ? med_exam_proccess.data.status : false;\n}\nasync function getBossApp() {\n    if (Context.data.director_user) {\n        const headApp = await Context.fields.staff.app.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(Context.data.director_user)))\n            .first();\n        Context.data.director = headApp;\n    }\n}\nasync function checkMedExams() {\n    let promises = [];\n    Context.data.medical_requests = [];\n    const transfer_application = await Context.data.transfer_application.fetch();\n    if (transfer_application.data.new_position) {\n        const new_position = await transfer_application.data.new_position.fetch();\n        if (new_position.data.harmful_production_factors \u0026\u0026 new_position.data.harmful_production_factors.length \u003e 0) {\n            for (const row of transfer_application.data.transfer_table) {\n                const medical_request = Context.fields.medical_requests.app.create();\n                medical_request.data.staff = row.transfer_staff;\n                medical_request.data.new_position = new_position;\n                medical_request.data.transfer_date = transfer_application.data.date_start;\n                medical_request.data.transfer_application = transfer_application;\n                medical_request.data.sort_of_medical_examination = medical_request.fields.sort_of_medical_examination.variants.preliminary_examination;\n                promises.push(medical_request.save());\n                Context.data.medical_requests.push(medical_request);\n            }\n        }\n        if (Context.data.medical_requests \u0026\u0026 Context.data.medical_requests.length \u003e 0) {\n            Context.data.required_med_exam = true;\n        }\n        else {\n            Context.data.required_med_exam = false;\n        }\n        await Promise.all(promises);\n    }\n    else {\n        Context.data.required_med_exam = false;\n    }\n}\nasync function getMedExamsResults() {\n    let fit = 0;\n    let partially_fit = 0;\n    let unfit = 0;\n    const medical_requests = await Promise.all(Context.data.medical_requests.map(f =\u003e f.fetch()));\n    const med_exams_array = medical_requests.map(f =\u003e f.data.med_exam).reduce((a, b) =\u003e a.concat(b));\n    const med_exams_fetched = await Promise.all(med_exams_array.map(f =\u003e f.fetch()));\n    let med_exam_lenght = med_exams_fetched.length;\n    for (let med_exam of med_exams_fetched) {\n        if (med_exam.data.satisfactory_results) {\n            switch (med_exam.data.satisfactory_results.code) {\n                case 'fit':\n                    fit++;\n                    break;\n                case 'partially_fit':\n                    partially_fit++;\n                    break;\n                case 'unfit':\n                    unfit++;\n                    break;\n            }\n        }\n    }\n    if (fit === med_exam_lenght) {\n        Context.data.med_exams_results = Context.fields.med_exams_results.variants.passed;\n    }\n    if (partially_fit \u003e 0) {\n        Context.data.med_exams_results = Context.fields.med_exams_results.variants.part_passed;\n    }\n    if (unfit === med_exam_lenght) {\n        Context.data.med_exams_results = Context.fields.med_exams_results.variants.failed;\n    }\n}\nasync function getAllStaffs() {\n    Context.data.staffs_all = [];\n    Context.data.chiefs_users = [];\n    Context.data.employment_placement = [];\n    const transfer_application = await Context.data.transfer_application.fetch();\n    for (let row of transfer_application.data.transfer_table) {\n        Context.data.staffs_all.push(row.transfer_staff);\n        Context.data.employment_placement.push(row.transfer_employment_place);\n    }\n    Context.data.counter = 0;\n    Context.data.amount_staffs = Context.data.staffs_all.length - 1;\n}\nasync function getStaff() {\n    Context.data.staff_chief = Context.data.staffs_all[Context.data.counter];\n    Context.data.employment_place_single = Context.data.employment_placement[Context.data.counter];\n    Context.data.counter++;\n}\nasync function setChief() {\n    if (Context.data.chief_user) {\n        Context.data.chiefs_users.push(Context.data.chief_user);\n    }\n}\nasync function checkStaffsApprove() {\n    Context.data.correct_comment = '';\n    const transfer_application = await Context.data.transfer_application.fetch();\n    const transfers_approve = await Promise.all(transfer_application.data.transfer_approve.map(f =\u003e f.fetch()));\n    Context.data.approve_signed = transfers_approve.every(f =\u003e f.data.approve_signed === true);\n    const transfers_approve_canceled = transfers_approve.filter(f =\u003e f.data.approve_signed === false);\n    if (transfers_approve_canceled \u0026\u0026 transfers_approve_canceled.length \u003e 0) {\n        const staff_canceled = transfers_approve_canceled.map(f =\u003e f.data.staff);\n        const staff_canceled_fetch = await Promise.all(staff_canceled.map(f =\u003e f.fetch()));\n        Context.data.correct_comment += `Сотрудник(и) ${staff_canceled_fetch.map(f =\u003e f.data.__name).join()} отказались в подписании согласия на перевод`;\n    }\n}\nasync function getStaffAndCreateOrder() {\n    Context.data.staff_chief = Context.data.staffs_all[Context.data.counter];\n    Context.data.old_position = (await Context.data.staff_chief.fetch()).data.position;\n    Context.data.counter++;\n}\nasync function prepareDataOrder() {\n    Context.data.order_date = new TDate();\n    Context.data.counter = 0;\n    Context.data.year = Context.data.order_date.year;\n    Context.data.transfer_order = [];\n}\nasync function prepareOrders() {\n    const order = await Context.data.order.fetch();\n    order.data.__file = Context.data.transfer_order_file;\n    await order.save();\n    Context.data.transfer_order.push(order);\n}\nasync function getStaffForLNA() {\n    Context.data.staff_chief = Context.data.staffs_all[Context.data.counter];\n    Context.data.counter++;\n}\nasync function getDocsLNA() {\n    let array_lna_ids = [];\n    const staff = await Context.data.staff_chief.fetch();\n    const position = Context.data.transfer_application ? (await Context.data.transfer_application.fetch()).data.new_position : undefined;\n    if (staff.data.list_sign_lna \u0026\u0026 staff.data.list_sign_lna.length \u003e 0) {\n        array_lna_ids = staff.data.list_sign_lna.map(item =\u003e item.id);\n    }\n    let documents_pull = await Context.fields.docs_lna.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.positions_review.has(position), g.or(f.__status.eq(Context.fields.docs_lna.app.fields.__status.variants.approved), f.__status.eq(Context.fields.docs_lna.app.fields.__status.variants.current))))\n        .size(10000)\n        .all();\n    documents_pull = documents_pull.filter((item) =\u003e {\n        if (array_lna_ids.indexOf(item.data.__id) \u003c= -1) {\n            return item;\n        }\n    });\n    if (documents_pull \u0026\u0026 documents_pull.length \u003e 0) {\n        Context.data.docs_lna = [];\n        Context.data.docs_lna = Context.data.docs_lna.concat(documents_pull);\n        Context.data.find_lna_documents = true;\n    }\n    else {\n        Context.data.find_lna_documents = false;\n    }\n}\nasync function set_contract_filed() {\n    let transfer_application = await Context.data.transfer_application.fetch();\n    transfer_application.data.line_status = `${transfer_application.data.__status.code};${transfer_application.data.__status.name}`;\n    await transfer_application.save();\n}\nasync function set_file_name_filed() {\n    let transfer_application = await Context.data.transfer_application.fetch();\n    transfer_application.data.line_file_name = (await transfer_application.data.__file.fetch()).data.__name;\n    await transfer_application.save();\n}\nasync function setNewPosition() {\n    const transfer_application = await Context.data.transfer_application.fetch();\n    if (transfer_application.data.transfer_table) {\n        let promises = [];\n        if (transfer_application.data.new_position \u0026\u0026 transfer_application.data.transfer_type \u0026\u0026 transfer_application.data.transfer_type.code == \"transfer_another_position\") {\n            const new_position = await transfer_application.data.new_position.fetch();\n            for (let row of transfer_application.data.transfer_table) {\n                const staff = await row.transfer_staff.fetch();\n                const update_employment_place = await row.transfer_employment_place.fetch();\n                if (staff.data.employment_table) {\n                    const employment_table_row = staff.data.employment_table.find(f =\u003e f.employment_placement_app.id === row.transfer_employment_place.id);\n                    if (employment_table_row) {\n                        employment_table_row.position = transfer_application.data.new_position;\n                        if (new_position.data.subdivision) {\n                            employment_table_row.subdivision = new_position.data.subdivision;\n                        }\n                        if (new_position.data.organization) {\n                            employment_table_row.organization = new_position.data.organization;\n                        }\n                        if (transfer_application.data.schedule_work_new) {\n                            employment_table_row.work_schedules = transfer_application.data.schedule_work_new;\n                        }\n                        promises.push(staff.save());\n                    }\n                    if (row.transfer_employment_place) {\n                        update_employment_place.data.position = transfer_application.data.new_position;\n                        if (new_position.data.subdivision) {\n                            update_employment_place.data.subdivision = new_position.data.subdivision;\n                        }\n                        if (new_position.data.organization) {\n                            update_employment_place.data.organization = new_position.data.organization;\n                        }\n                        promises.push(update_employment_place.save());\n                    }\n                }\n                if (promises.length \u003e 20) {\n                    await Promise.all(promises);\n                    promises = [];\n                }\n            }\n        }\n        if (transfer_application.data.transfer_type \u0026\u0026 transfer_application.data.transfer_type.code == \"work_condition_change\") {\n            for (let row of transfer_application.data.transfer_table) {\n                const staff = await row.transfer_staff.fetch();\n                if (staff.data.employment_table) {\n                    const employment_table_row = staff.data.employment_table.find(f =\u003e f.employment_placement_app.id === row.transfer_employment_place.id);\n                    if (employment_table_row) {\n                        if (transfer_application.data.schedule_work_new) {\n                            employment_table_row.work_schedules = transfer_application.data.schedule_work_new;\n                        }\n                        if (transfer_application.data.remote_work != undefined) {\n                            employment_table_row.remote_work = transfer_application.data.remote_work;\n                        }\n                        promises.push(staff.save());\n                    }\n                }\n                if (promises.length \u003e 20) {\n                    await Promise.all(promises);\n                    promises = [];\n                }\n            }\n        }\n        if (transfer_application.data.schedule_work_new \u0026\u0026 transfer_application.data.transfer_type \u0026\u0026 transfer_application.data.transfer_type.code == \"change_of_schedule\") {\n            for (let row of transfer_application.data.transfer_table) {\n                const staff = await row.transfer_staff.fetch();\n                if (staff.data.employment_table) {\n                    const employment_table_row = staff.data.employment_table.find(f =\u003e f.employment_placement_app.id === row.transfer_employment_place.id);\n                    if (employment_table_row) {\n                        employment_table_row.work_schedules = transfer_application.data.schedule_work_new;\n                    }\n                    promises.push(staff.save());\n                }\n                if (promises.length \u003e 20) {\n                    await Promise.all(promises);\n                    promises = [];\n                }\n            }\n        }\n        await Promise.all(promises);\n    }\n}\nasync function create_await_docs() {\n    Context.data.wait_docs = [];\n    if (Context.data.staffs_all \u0026\u0026 Context.data.staffs_all.length \u003e 0) {\n        for (const staff of Context.data.staffs_all) {\n            const staff_app = await staff.fetch();\n            const transfer_application = await Context.data.transfer_application.fetch();\n            const organiaztion = await transfer_application.data.organization.fetch();\n            const current_position = await staff_app.data.position.fetch();\n            const body = {\n                \"Date\": `${new TDate().format('YYYY-MM-DD')}T00:00:00`,\n                \"Организация_Key\": organiaztion.data.ref_key,\n                \"Сотрудник_Key\": staff_app.data.id_1c,\n                \"ФизическоеЛицо_Key\": staff_app.data.individual_id_1c,\n                \"ДатаНачала\": `${transfer_application.data.date_start.format('YYYY-MM-DD')}T00:00:00`,\n                \"ВидЗанятости\": \"ОсновноеМестоРаботы\",\n                \"КоличествоСтавок\": 1,\n                \"ВидДоговора\": \"ТрудовойДоговор\",\n                \"КоэффициентИндексации\": 1,\n                \"ДатаЗапрета\": `${transfer_application.data.date_start.format('YYYY-MM-DD')}T00:00:00`,\n                \"НаименованиеДокумента\": \"Приказ\",\n                \"ПричинаПеревода\": `${transfer_application.data.transfer_reason ? transfer_application.data.transfer_reason : ''}`,\n                \"ОснованиеПеревода\": `Личное заявление сотрудника`,\n                \"ИзменитьСведенияОДоговореКонтракте\": true,\n                \"Комментарий\": `${transfer_application.data.comment}`\n            };\n            body[\"ИзменитьРабочееМесто\"] = false;\n            if (transfer_application.data.workplace_new) {\n                const workplace_new = await transfer_application.data.workplace_new.fetch();\n                body[\"ИзменитьРабочееМесто\"] = true;\n            }\n            body[\"ИзменитьДистанционнуюРаботу\"] = false;\n            if (transfer_application.data.remote_work) {\n                body[\"РаботаетДистанционно\"] = true;\n                body[\"ИзменитьДистанционнуюРаботу\"] = true;\n            }\n            body[\"ИзменитьПодразделениеИДолжность\"] = false;\n            if (transfer_application.data.new_position) {\n                const position = await transfer_application.data.new_position.fetch();\n                if (position.data.__id != current_position.data.__id) {\n                    const subdivision = await position.data.subdivision.fetch();\n                    body[\"Должность_Key\"] = position.data.ref_key;\n                    body[\"Подразделение_Key\"] = subdivision.data.ref_key;\n                    body[\"ИзменитьПодразделениеИДолжность\"] = true;\n                }\n            }\n            body[\"ИзменитьГрафикРаботы\"] = true;\n            if (transfer_application.data.schedule_work_new) {\n                const schedule_work_new = await transfer_application.data.schedule_work_new.fetch();\n                body[\"ГрафикРаботы_Key\"] = schedule_work_new.data.id_1c;\n                body[\"ИзменитьГрафикРаботы\"] = true;\n            }\n            if (transfer_application.data.date_end) {\n                body[\"ДатаОкончания\"] = `${transfer_application.data.date_end.format('YYYY-MM-DD')}T00:00:00`;\n            }\n            const accounting1c = Context.fields.wait_docs.app.fields.accounting_systems.variants.zup_1c;\n            const awaitingApp = Context.fields.wait_docs.app.create();\n            awaitingApp.data.__name = \"Кадровый перевод\";\n            awaitingApp.data.document_odata_name = \"Document_КадровыйПеревод\";\n            awaitingApp.data.accounting_systems = accounting1c;\n            awaitingApp.data.personal_guid_1c = JSON.stringify([staff_app.data.individual_id_1c]);\n            awaitingApp.data.document_creation_data = JSON.stringify(body);\n            await awaitingApp.save();\n            Context.data.wait_docs.push(awaitingApp);\n        }\n    }\n}\nasync function checkSettingsKEDO() {\n    const setting = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('director_signing')))\n        .first();\n    if (setting) {\n        Context.data.director_signing = setting.data.status;\n    }\n}\nasync function fillContext() {\n    if (Context.data.transfer_application) {\n        const app = await Context.data.transfer_application.fetch();\n        if (app.data.transfer_table) {\n            Context.data.table_lenght = app.data.transfer_table.length;\n            for (let row_table_app of app.data.transfer_table) {\n                const row_table_context = Context.data.transfer_table.insert();\n                row_table_context.transfer_staff = row_table_app.transfer_staff;\n                row_table_context.transfer_employment_place = row_table_app.transfer_employment_place;\n                row_table_context.transfer_work_schedule = row_table_app.transfer_work_schedule;\n                row_table_context.transfer_workplace = row_table_app.transfer_workplace;\n            }\n            Context.data.transfer_table = Context.data.transfer_table;\n        }\n    }\n}\nasync function processingData() {\n    if (Context.data.transfer_table \u0026\u0026 Context.data.transfer_table.length \u003e 0) {\n        for (let row of Context.data.transfer_table) {\n            const row_helper_table = Context.data.table_staff.insert();\n            row_helper_table.staffs = row.transfer_staff;\n            row_helper_table.employment_directory = row.transfer_employment_place;\n        }\n        Context.data.table_staff = Context.data.table_staff;\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
