{"scripts":"async function line_status_set() {\n    let doc = await Context.data.dismissal_order.fetch();\n    doc.data.line_status = `${doc.data.__status.code};${doc.data.__status.name}`;\n    await doc.save();\n}\nasync function createStatusObj(app, status) {\n    const obj_status = {\n        'app': {\n            'namespace': app.namespace,\n            'code': app.code,\n            'id': app.id,\n        },\n        'status': status,\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function createStatusCanceled() {\n    createStatusObj(Context.data.dismissal_order, 'cancelled');\n}\nasync function calcEscalationTime() {\n    if (!Context.data.dismissal_app) {\n        throw new Error(\"Context.data.dismissal_app is undefined\");\n    }\n    const dismissal_app = await Context.data.dismissal_app.fetch();\n    if (!dismissal_app.data.date_of_dismissal) {\n        throw new Error(\"Не указана дата увольнения.\");\n    }\n    const dismissal_escalation_hr = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"dismissal_escalation_hr\")))\n        .first();\n    const hours = dismissal_escalation_hr \u0026\u0026 dismissal_escalation_hr.data.quantity ? dismissal_escalation_hr.data.quantity : 4;\n    const dismissal_date = dismissal_app.data.date_of_dismissal;\n    const settings = await System.productionSchedule.getGeneralSettings();\n    const working_time = settings.daySchedule.workingTime;\n    const escalation_date = dismissal_date\n        .asDatetime(new TTime(0, 0, 0, 0))\n        .add(new Duration(working_time.to, \"seconds\"))\n        .add(new Duration(-hours, \"hours\"));\n    Context.data.escalation_time = escalation_date;\n}\n","gatewayPairs":{},"hasTranslations":false}
