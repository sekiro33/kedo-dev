{"scripts":"async function checkSettingsKEDO() {\n    const setting = await Context.fields.kedo_settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('director_signing')))\n        .first();\n    if (setting) {\n        Context.data.director_signing = setting.data.status;\n    }\n}\nasync function set_line_status() {\n    const job_application = await Context.data.job_application.fetch();\n    job_application.data.line_status = `${job_application.data.__status.code};${job_application.data.__status.name}`;\n    await job_application.save();\n}\nasync function getComment() {\n    try {\n        const job_application = await Context.data.job_application.fetch();\n        const signHistory = await job_application.getSignHistory();\n        for (let sign of signHistory[0].signs) {\n            if (sign.__createdBy.id == Context.data.staff_user.id) {\n                Context.data.comment = sign.comment;\n            }\n        }\n    }\n    catch (_a) { }\n}\nasync function setStatusSigning() {\n    if (!Context.data.job_application) {\n        throw new Error(\"Context.data.job_application is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.job_application.namespace,\n            code: Context.data.job_application.code,\n            id: Context.data.job_application.id,\n        },\n        status: \"signing\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusApproval() {\n    if (!Context.data.job_application) {\n        throw new Error(\"Context.data.job_application is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.job_application.namespace,\n            code: Context.data.job_application.code,\n            id: Context.data.job_application.id,\n        },\n        status: \"approval\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusSigned() {\n    if (!Context.data.job_application) {\n        throw new Error(\"Context.data.job_application is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.job_application.namespace,\n            code: Context.data.job_application.code,\n            id: Context.data.job_application.id,\n        },\n        status: \"signed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusCancelled() {\n    if (!Context.data.job_application) {\n        throw new Error(\"Context.data.job_application is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.job_application.namespace,\n            code: Context.data.job_application.code,\n            id: Context.data.job_application.id,\n        },\n        status: \"cancelled\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function processingUsersHR() {\n    if (Context.data.hr_dep) {\n        Context.data.hr_user = Context.data.hr_dep[Context.data.count_hr];\n        Context.data.count_hr++;\n        if (Context.data.count_hr \u003c= (Context.data.hr_dep.length - 1)) {\n            Context.data.everything_is_done = false;\n        }\n        else {\n            Context.data.everything_is_done = true;\n        }\n    }\n}\nasync function interruptFamiliarizationProcesses() {\n    const active_process = await Namespace.processes.reviewing_employment_application._searchInstances()\n        .where((f, g) =\u003e g.and(g.or(f.__state.like(ProcessInstanceState.exec), f.__state.like(ProcessInstanceState.error), f.__state.like(ProcessInstanceState.wait)), f['__item'].eq(Context.data.job_application))).size(100).all();\n    if (active_process) {\n        active_process.forEach(map =\u003e {\n            map.interrupt(`С заявлением на трудоустройство ознакомился сотрудник отдела кадров`);\n        });\n    }\n}\nasync function initializingContext() {\n    Context.data.count_hr = 0;\n}\n","gatewayPairs":{},"hasTranslations":false}
