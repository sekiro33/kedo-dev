{"scripts":"async function get_kedo_settings() {\n    const settings = await Context.fields.kedo_settings.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const remind_frequency = settings.find(f =\u003e f.data.code == 'remind_frequency');\n    Context.data.remind_frequency = remind_frequency \u0026\u0026 remind_frequency.data.quantity ? remind_frequency.data.quantity : 4;\n    const notify_deadline_chief = settings.find(f =\u003e f.data.code == 'notify_deadline_chief');\n    Context.data.notify_deadline_chief = notify_deadline_chief \u0026\u0026 notify_deadline_chief.data.quantity ? notify_deadline_chief.data.quantity : 12;\n    const notify_deadline_hr_dep = settings.find(f =\u003e f.data.code == 'notify_deadline_hr_dep');\n    Context.data.notify_deadline_hr_dep = notify_deadline_hr_dep \u0026\u0026 notify_deadline_hr_dep.data.quantity ? notify_deadline_hr_dep.data.quantity : 8;\n}\nasync function get_current_time() {\n    Context.data.current_datetime = new Datetime();\n}\nasync function set_timer() {\n    if (!Context.data.remind_frequency || Context.data.remind_frequency == 0) {\n        Context.data.remind_frequency = 4;\n    }\n    const current_datetime = new Datetime();\n    Context.data.remind_datetime = await System.productionSchedule.calcDate(current_datetime, new Duration(Context.data.remind_frequency, 'hours'));\n}\nasync function check_overdue() {\n    const currentTime = new Datetime();\n    const limit = Context.data.execution_time;\n    const remind_frequency = Context.data.remind_frequency;\n    if (limit.sub(currentTime).hours \u003e remind_frequency) {\n        return true;\n    }\n    return false;\n}\nasync function check_document() {\n    const task_id = Context.data.task_id;\n    const task = await System.processes._searchTasks().where((f, g) =\u003e g.and(f.__id.eq(task_id))).first();\n    if (task \u0026\u0026 task.data.state != 'in_progress') {\n        return true;\n    }\n    return false;\n}\nasync function generate_alert_body() {\n    const limit = Context.data.execution_time.format('DD.MM.YYYY HH:mm');\n    Context.data.alert_body_email = `Вам поступил документ на подписание. Срок выполнения ${limit}. Перейдите на портал КЭДО.`;\n    Context.data.alert_body_sms = `Вам поступил документ на подписание. Срок выполнения ${limit}. Перейдите на портал КЭДО. (ссылка)`;\n}\nasync function generate_alert_staff() {\n    const limit = Context.data.execution_time.format('DD.MM.YYYY HH:mm');\n    Context.data.alert_body_email = `Внимание! У вас есть не подписанный документ. Срок подписания ${limit}.`;\n    Context.data.alert_body_sms = `Внимание! У вас есть не подписанный документ. Срок подписания ${limit}.`;\n}\nasync function generate_alert_chief() {\n    const staff = await Context.data.staff.fetch();\n    const limit = Context.data.execution_time.format('DD.MM.YYYY HH:mm');\n    Context.data.alert_body_email = `Внимание! У ${staff.data.__name} есть не подписанный документ. Срок подписания ${limit}. Проконтролируйте подписание.`;\n    Context.data.alert_body_sms = `Внимание! У ${staff.data.__name} есть не подписанный документ. Срок подписания ${limit}. Проконтролируйте подписание.`;\n}\nfunction log(text) {\n    if (!Context.data.debug) {\n        Context.data.debug = '';\n    }\n    Context.data.debug += `${text}\\n`;\n}\nasync function get_task_id() {\n    const current_process = await System.processes._searchInstances().where(f =\u003e f.__id.eq(Context.id)).first();\n    const parent_process = await System.processes._searchInstances().where(f =\u003e f.__id.eq(current_process.data.__parentId)).first();\n    if (!parent_process) {\n        Context.data.error = `Не удалось найти экземпляр родительского процесса. ID текущего процесса: ${current_process.id}`;\n        throw new Error(Context.data.error);\n    }\n    const parent_process_template = await parent_process.getTemplate();\n    const proccess_data = parent_process_template.namespace.split('.');\n    const templateNsAndCode = `${proccess_data.join('.')}:${parent_process_template.code}`;\n    const tasks = await System.processes._searchTasks()\n        .where((f, g) =\u003e g.and(g.or(f.state.like('in_progress'), f.state.like('assignment')), f.templateNsAndCode.eq(templateNsAndCode)))\n        .sort(\"__createdAt\", false)\n        .size(1000)\n        .all();\n    let parent_process_tasks = tasks.filter(f =\u003e f.data.instance \u0026\u0026 f.data.instance.__id == (parent_process === null || parent_process === void 0 ? void 0 : parent_process.id));\n    if (parent_process_tasks.length == 0) {\n        Context.data.error = `Не найдена задача, которую нужно отслеживать. ID текущего процесса: ${Context.id}; ID родительского процесса: ${parent_process.id};`;\n        throw new Error(Context.data.error);\n    }\n    const need_task = parent_process_tasks[0];\n    if (need_task \u0026\u0026 !need_task.data.dueDate) {\n        Context.data.error = `Для задачи ${need_task.data.__name} не установлено время выполнения.`;\n        throw new Error(Context.data.error);\n    }\n    Context.data.task_id = need_task.id;\n    Context.data.execution_time = need_task.data.dueDate;\n    Context.data.parent_process_link = `${System.getBaseUrl()}/admin/monitor/${parent_process.data.__templateId}(p:history/${parent_process.id})`;\n    Context.data.task_link = `${System.getBaseUrl()}/admin/monitor/${parent_process.data.__templateId}(p:task/${need_task.id})`;\n}\nasync function calc_time_chief() {\n    const notify_deadline_chief = Context.data.notify_deadline_chief;\n    const limit = Context.data.execution_time;\n    const planned_datetime = limit.add(new Duration(-notify_deadline_chief, 'hours'));\n    if (planned_datetime.before(new Datetime())) {\n        Context.data.notify_chief_datetime = new Datetime().add(new Duration(1, 'hours'));\n    }\n    else {\n        Context.data.notify_chief_datetime = planned_datetime;\n    }\n}\nasync function calc_time_hr() {\n    const notify_deadline_hr = Context.data.notify_deadline_hr_dep;\n    const limit = Context.data.execution_time;\n    const planned_datetime = limit.add(new Duration(-notify_deadline_hr, 'hours'));\n    if (planned_datetime.before(new Datetime())) {\n        Context.data.notify_hr_datetime = new Datetime().add(new Duration(1, 'hours'));\n    }\n    else {\n        Context.data.notify_hr_datetime = planned_datetime;\n    }\n}\nasync function timer_10() {\n    let currentTime = new Datetime();\n    let needTime = new Datetime().add(new Duration(20, 'seconds'));\n    while (!currentTime.after(needTime)) {\n        currentTime = new Datetime();\n    }\n}\nasync function designInPaper() {\n    if (Context.data.task_id) {\n        const task = await System.processes._searchTasks().where(f =\u003e f.__id.eq(Context.data.task_id)).first();\n        if (task) {\n            try {\n                await task.changeDueDate(new Datetime(), 'В бумагу');\n            }\n            catch (_a) { }\n        }\n    }\n}\n","gatewayPairs":{"/items/e92192d9-9734-40fd-b486-5d900fc0d4aa":"/items/67b7868f-e05c-4a37-b58f-694886e0bdce"},"hasTranslations":false}
