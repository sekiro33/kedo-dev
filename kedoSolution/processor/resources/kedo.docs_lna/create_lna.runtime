{"scripts":"async function get_staffs() {\n    const app = await Context.data.docs_lna.fetch();\n    Context.data.staff = app.data.staff;\n    Context.data.lna_file = app.data.file_lna;\n    Context.data.organiaztion = app.data.organization;\n    const positions = await Promise.all(app.data.agreement_position.map(f =\u003e f.fetch()));\n    let staffs = [];\n    for (const position of positions) {\n        if (position.data.staff \u0026\u0026 position.data.staff.length \u003e 0)\n            staffs = staffs.concat(position.data.staff);\n    }\n    let staffsFetch = await Promise.all(staffs.map(f =\u003e f.fetch()));\n    staffsFetch = staffsFetch.filter(f =\u003e f.data.__status \u0026\u0026 f.data.__status.code == f.fields.__status.variants.signed_documents.code);\n    Context.data.approving_persons = [];\n    for (const staff of staffsFetch) {\n        if (staff.data.ext_user)\n            Context.data.approving_persons.push(staff.data.ext_user);\n    }\n}\nasync function getApprovalOrder() {\n    const positions = await Promise.all(Context.data.approval_order.map(f =\u003e f.fetch()));\n    let staffs = [];\n    for (const position of positions) {\n        if (position.data.staff \u0026\u0026 position.data.staff.length \u003e 0)\n            staffs = staffs.concat(position.data.staff);\n    }\n    const staffsFetch = await Promise.all(staffs.map(f =\u003e f.fetch()));\n    Context.data.approval_order_users = [];\n    for (const staff of staffsFetch) {\n        if (staff.data.ext_user)\n            Context.data.approval_order_users.push(staff.data.ext_user);\n    }\n}\nasync function check_order_status() {\n    let app = await Context.data.order_lna.fetch();\n    if (app.data.__status \u0026\u0026 app.data.__status.code == app.fields.__status.variants.rejected.code)\n        return false;\n    else\n        return true;\n}\nasync function get_staffs_for_familiarization() {\n    let app = await Context.data.docs_lna.fetch();\n    let positionsF;\n    if (app.data.wWho_acquainted \u0026\u0026 app.data.wWho_acquainted.code == 'groups') {\n        const groups = await Promise.all(app.data.groups_lna.map(f =\u003e f.fetch()));\n        let positions = [];\n        for (const group of groups) {\n            positions = positions.concat(group.data.positions || []);\n        }\n        positionsF = await Promise.all(positions.map(f =\u003e f.fetch()));\n    }\n    else {\n        positionsF = await Namespace.app.position.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(app.data.organization)))\n            .size(10000)\n            .all();\n    }\n    app.data.positions_review = positionsF;\n    await app.save();\n    let staffs = [];\n    for (const position of positionsF) {\n        if (position.data.staff \u0026\u0026 position.data.staff.length \u003e 0)\n            staffs = staffs.concat(position.data.staff);\n    }\n    let staffsFetch = await Promise.all(staffs.map(f =\u003e f.fetch()));\n    staffsFetch = staffsFetch.filter(item =\u003e item.data.__status.code == item.fields.__status.variants.signed_documents.code);\n    Context.data.familiarizing = [];\n    for (const staff of staffsFetch) {\n        if (staff.data.ext_user)\n            Context.data.familiarizing.push(staff.data.ext_user);\n    }\n    Context.data.review_date = new Datetime().addDate(0, 0, app.data.familiarize_days || 1);\n}\nasync function createStatusObj(app, status) {\n    const obj_status = {\n        'app': {\n            'namespace': app.namespace,\n            'code': app.code,\n            'id': app.id,\n        },\n        'status': status,\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function createStatusLNASigned() {\n    createStatusObj(Context.data.docs_lna, 'signed');\n}\nasync function createStatusLNAAgreed() {\n    createStatusObj(Context.data.docs_lna, 'agreed_signed');\n}\nasync function createStatusLNACancelled() {\n    createStatusObj(Context.data.docs_lna, 'cancelled');\n}\nasync function checkSettingsKEDO() {\n    const setting = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('director_signing')))\n        .first();\n    if (setting) {\n        Context.data.director_signing = setting.data.status;\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
