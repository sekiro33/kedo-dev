{"scripts":"async function findFamiliazing() {\n    if (Context.data.familiarizing == undefined) {\n        Context.data.familiarizing = [];\n    }\n    if (Context.data.organization) {\n        Context.data.familiarizing = Context.data.familiarizing.concat(await Context.fields.familiarizing.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(Context.data.organization))).size(10000).all());\n    }\n    if (Context.data.structural_subdivision) {\n        Context.data.familiarizing = Context.data.familiarizing.concat(await Context.fields.familiarizing.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.structural_subdivision.link(Context.data.structural_subdivision))).size(10000).all());\n    }\n    if (Context.data.include_child_units \u0026\u0026 Context.data.structural_subdivision) {\n        let divisions = await Context.fields.structural_subdivision.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.subdivision.link(Context.data.structural_subdivision))).size(10000).all();\n        if (divisions \u0026\u0026 divisions.length \u003e 0) {\n            for (let i = 0; i \u003c divisions.length; i++) {\n                let division = divisions[i];\n                Context.data.familiarizing = Context.data.familiarizing.concat(await Context.fields.familiarizing.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.structural_subdivision.link(division))).size(10000).all());\n            }\n        }\n    }\n}\nasync function checkAndTakeItem() {\n    if (Context.data.familiarizing \u0026\u0026 Context.data.familiarizing.length \u003e 0) {\n        Context.data.current_staff_familiarizing = Context.data.familiarizing.shift();\n        return true;\n    }\n    return false;\n}\nasync function incrementCountWorkflows() {\n    Context.data.count_workflows++;\n    if (Context.data.count_workflows \u003e 90) {\n        Context.data.count_workflows = 0;\n    }\n}\nasync function isCountHundred() {\n    if (Context.data.count_workflows \u003e 90) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function get_all_users() {\n    Context.data.users = [];\n    let users = [];\n    if (Context.data.familiarizing \u0026\u0026 Context.data.familiarizing.length \u003e 0) {\n        let users_fetch = await Promise.all(Context.data.familiarizing.map(item =\u003e item.fetch()));\n        users_fetch.map(item =\u003e {\n            if (item.data.ext_user) {\n                users.push(item.data.ext_user);\n            }\n        });\n        Context.data.users = Context.data.users.concat(users);\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
