{"scripts":"const numberOfUnloadedElements = 1000;\nasync function createNoConnectionsError() {\n    Context.data.error = \"Нет доступных подключений 1С\";\n}\nasync function errorHandler() {\n    if (!Context.data.error) {\n        Context.data.error = \"Обнаружена неизвестная ошибка в сценарии\";\n    }\n}\nasync function parseConnectionsObject() {\n    const connectionsArray = Context.data.connection_object ? JSON.parse(Context.data.connection_object) : [];\n    if (connectionsArray.length === 0)\n        return;\n    Context.data.number_of_iter = connectionsArray.length;\n    Context.data.current_iteration = 0;\n}\nasync function startIteration() {\n    const connectionsArray = Context.data.connection_object ? JSON.parse(Context.data.connection_object) : [];\n    Context.data.connection_name = connectionsArray[Context.data.current_iteration].name;\n}\nasync function prepareReqForGetData() {\n    Context.data.request_parameters_1c = 'Catalog_ШтатноеРасписание?$format=json';\n    Context.data.error = '';\n}\nasync function parseDataUpdateApps() {\n    if (!Context.data.response_1c_json)\n        return;\n    const data1S = JSON.parse(Context.data.response_1c_json)[\"value\"];\n    let organizationsRefsArray = [];\n    const promises = [];\n    const allDivisions = await Namespace.app.structural_subdivision.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allPositions = await Namespace.app.position.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    for (let i = 0; i \u003c data1S.length; i++) {\n        const data = data1S[i];\n        if (data['Должность_Key'] !== \"00000000-0000-0000-0000-000000000000\") {\n            let app;\n            app = allPositions.find(f =\u003e f.data.ref_key === data[\"Ref_Key\"]);\n            if (!app)\n                app = Namespace.app.position.create();\n            app.data.__name = data[\"Description\"];\n            app.data.ref_key = data[\"Ref_Key\"];\n            app.data.owner_key = data[\"Owner_Key\"];\n            app.data.parent_key = data[\"Parent_Key\"];\n            app.data.position_key = data[\"Должность_Key\"];\n            app.data.base_1c = Context.data.connection_name;\n            const salaryValue = data[\"ОкладТариф\"];\n            app.data.salary = new Money(salaryValue, 'RUB');\n            const date = data[\"ДатаУтверждения\"].split('T')[0].split('-');\n            const year = date[0];\n            const month = date[1];\n            const day = date[2];\n            app.data.approval_date = new TDate(year, month, day);\n            app.data.quantity = Number(data[\"КоличествоСтавок\"]);\n            promises.push(app.save());\n        }\n        else {\n            organizationsRefsArray.push({ ref_key: data['Ref_Key'], owner_key: data['Owner_Key'] });\n            let app;\n            app = allDivisions.find(f =\u003e f.data.ref_key === data[\"Ref_Key\"]);\n            if (!app)\n                app = Namespace.app.structural_subdivision.create();\n            app.data.__name = data[\"Description\"];\n            app.data.ref_key = data[\"Ref_Key\"];\n            app.data.subdiv_key = data[\"Подразделение_Key\"];\n            app.data.owner_key = data[\"Owner_Key\"];\n            app.data.parent_key = data[\"Parent_Key\"];\n            app.data.position_key = data[\"Должность_Key\"];\n            app.data.base_1c = Context.data.connection_name;\n            promises.push(app.save());\n        }\n    }\n    await Promise.all(promises);\n    organizationsRefsArray = organizationsRefsArray.filter((f, i, s) =\u003e i === s.findIndex(t =\u003e t.owner_key === f.owner_key));\n    Context.data.organization_ref_key_array_json = JSON.stringify(organizationsRefsArray);\n    Context.data.organization_array_length = organizationsRefsArray.length;\n}\nasync function prepareReqOrganiztion() {\n    Context.data.error = '';\n    Context.data.response_1c_json = '';\n    const orgsArray = JSON.parse(Context.data.organization_ref_key_array_json);\n    Context.data.request_parameters_1c = `Catalog_ШтатноеРасписание(guid'${orgsArray[Context.data.organization_array_length - 1].ref_key}')/Owner?$format=json`;\n}\nasync function createOwnerApp() {\n    if (!Context.data.response_1c_json) {\n        Context.data.organization_array_length--;\n        Context.data.error += ` Ошибка при запросе данных из 1С по организации `;\n        return;\n    }\n    let appEntity;\n    let appOrganization;\n    const orgsArray = JSON.parse(Context.data.organization_ref_key_array_json);\n    const dataObj = orgsArray[Context.data.organization_array_length - 1];\n    const ownerData = JSON.parse(Context.data.response_1c_json);\n    appOrganization = await Namespace.app.organization.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ref_key.eq(dataObj.owner_key)))\n        .first();\n    if (appOrganization \u0026\u0026 appOrganization.data.entity) {\n        appEntity = await appOrganization.data.entity.fetch();\n    }\n    else {\n        appOrganization = Namespace.app.organization.create();\n    }\n    if (!appEntity) {\n        appEntity = await Context.fields.app_legal_entity.app.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__name.eq(ownerData[\"Description\"])))\n            .first();\n    }\n    if (!appEntity) {\n        appEntity = Context.fields.app_legal_entity.app.create();\n    }\n    if (appEntity) {\n        appEntity.data.__name = ownerData[\"Description\"];\n        appEntity.data._full_legal_name = ownerData[\"НаименованиеПолное\"];\n        appEntity.data._inn = ownerData[\"ИНН\"];\n        appEntity.data._ogrn = ownerData[\"ОГРН\"];\n        await appEntity.save();\n    }\n    appOrganization.data.entity = appEntity;\n    appOrganization.data.ref_key = dataObj.owner_key;\n    appOrganization.data.base_1c = Context.data.connection_name;\n    appOrganization.data.owner_key = '';\n    appOrganization.data.parent_key = '';\n    appOrganization.data.position_key = '';\n    await appOrganization.save();\n    Context.data.organization_array_length--;\n}\nasync function fillAppsLinks() {\n    const allOrganizations = await Namespace.app.organization.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.base_1c.eq(Context.data.connection_name)))\n        .size(10000)\n        .all();\n    const allSubdivisions = await Namespace.app.structural_subdivision.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.base_1c.eq(Context.data.connection_name)))\n        .size(10000)\n        .all();\n    const allPositions = await Namespace.app.position.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.base_1c.eq(Context.data.connection_name)))\n        .size(10000)\n        .all();\n    let promises = [];\n    for (const organiaztion of allOrganizations) {\n        const subdivisions = allSubdivisions.filter(f =\u003e f.data.owner_key === organiaztion.data.ref_key);\n        const positions = allPositions.filter(f =\u003e f.data.owner_key === organiaztion.data.ref_key);\n        for (const subdivision of subdivisions) {\n            subdivision.data.organization = organiaztion;\n            promises.push(subdivision.save());\n        }\n        for (const position of positions) {\n            position.data.organization = organiaztion;\n            promises.push(position.save());\n        }\n    }\n    await Promise.all(promises);\n    promises = [];\n    for (const subdivisionParent of allSubdivisions) {\n        const subdivisionsChild = allSubdivisions.filter(f =\u003e f.data.parent_key === subdivisionParent.data.ref_key);\n        const positionsChild = allPositions.filter(f =\u003e f.data.parent_key === subdivisionParent.data.ref_key);\n        for (const subdivisionChild of subdivisionsChild) {\n            subdivisionChild.data.subdivision = subdivisionParent;\n            promises.push(subdivisionChild.save());\n        }\n        for (const positionChild of positionsChild) {\n            positionChild.data.subdivision = subdivisionParent;\n            promises.push(positionChild.save());\n        }\n    }\n    await Promise.all(promises);\n}\nasync function prepareReqHeadOrgLink() {\n    Context.data.error = '';\n    Context.data.response_1c_json = '';\n    Context.data.request_parameters_1c = `InformationRegister_СведенияОбОтветственныхЛицах?$format=json`;\n}\nasync function prepaereReqHeadPhysRef() {\n    if (!Context.data.response_1c_json)\n        return;\n    let headOrgLink = '';\n    const res = JSON.parse(Context.data.response_1c_json);\n    headOrgLink = res.value[0][\"Руководитель@navigationLinkUrl\"];\n    Context.data.error = '';\n    Context.data.response_1c_json = '';\n    Context.data.request_parameters_1c = `${headOrgLink}?$format=json`;\n}\nasync function getPhysicHistoryArr() {\n    if (!Context.data.response_1c_json)\n        return;\n    let headPhysicRefKey = '';\n    const res = JSON.parse(Context.data.response_1c_json);\n    if (!res[\"Ref_Key\"])\n        return;\n    headPhysicRefKey = res[\"Ref_Key\"];\n    Context.data.error = '';\n    Context.data.response_1c_json = '';\n    Context.data.request_parameters_1c = `InformationRegister_КадроваяИсторияСотрудников?$format=json\u0026$filter=RecordSet/any(d: d/ФизическоеЛицо_Key eq guid'${headPhysicRefKey}')`;\n}\nasync function setOwnersHeader() {\n    if (!Context.data.response_1c_json)\n        return;\n    const res = JSON.parse(Context.data.response_1c_json);\n    if (!res.value)\n        return;\n    const physicHistoryArr = res.value;\n    const headerPositionRef = physicHistoryArr[0][\"RecordSet\"][0][\"Должность_Key\"];\n    const owners = await Namespace.app.organization.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.base_1c.eq(Context.data.connection_name)))\n        .size(10000)\n        .all();\n    const headerPositionApp = await Namespace.app.position.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.position_key.eq(headerPositionRef)))\n        .first();\n    const promises = [];\n    for (const owner of owners) {\n        owner.data.position_head = headerPositionApp;\n        promises.push(owner.save());\n    }\n    await Promise.all(promises);\n}\nasync function endIteration() {\n    Context.data.current_iteration++;\n}\nasync function getParams() {\n    const param = Namespace.params.data.use_alternative_integration;\n    Context.data.is_alternative = !!param;\n}\n","gatewayPairs":{},"hasTranslations":false}
