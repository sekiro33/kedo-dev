{"scripts":"async function loadPositionsAndSubdividions() {\n    const allDivisions = await Namespace.app.structural_subdivision.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allPositions = await Namespace.app.position.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const searchData = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.table_name.eq(\"Catalog_ШтатноеРасписание\")))\n        .first();\n    let data1C = [];\n    if (!!searchData) {\n        data1C = JSON.parse(searchData.data.table_data).map((item) =\u003e item.data);\n    }\n    try {\n        let promises = [];\n        for (let i = 0; i \u003c data1C.length; i++) {\n            const data = data1C[i];\n            if (data['Должность'] !== \"00000000-0000-0000-0000-000000000000\") {\n                let app;\n                app = allPositions.find(f =\u003e f.data.ref_key === data[\"Ref\"]);\n                if (!app)\n                    app = Namespace.app.position.create();\n                app.data.__name = data[\"Description\"];\n                app.data.ref_key = data[\"Ref\"];\n                app.data.owner_key = data[\"Owner\"][\"data\"];\n                app.data.parent_key = data[\"Parent\"];\n                app.data.position_key = data[\"Должность\"];\n                const salaryValue = data[\"ОкладТариф\"];\n                app.data.salary = new Money(salaryValue, 'RUB');\n                const date = data[\"ДатаУтверждения\"].split('T')[0].split('-');\n                const year = date[0];\n                const month = date[1];\n                const day = date[2];\n                app.data.approval_date = new TDate(year, month, day);\n                app.data.quantity = Number(data[\"КоличествоСтавок\"]);\n                promises.push(app.save());\n            }\n            else {\n                Context.data.debug += `${data[\"Description\"]} ${data[\"Ref\"]} ${data[\"Подразделение\"]} ${data[\"Owner\"][\"data\"]} ${data[\"Parent\"]} ${data[\"Должность\"]}`;\n                let app;\n                app = allDivisions.find(f =\u003e f.data.ref_key === data[\"Ref\"]);\n                if (!app)\n                    app = Namespace.app.structural_subdivision.create();\n                app.data.__name = data[\"Description\"];\n                app.data.ref_key = data[\"Ref\"];\n                app.data.subdiv_key = data[\"Подразделение\"];\n                app.data.owner_key = data[\"Owner\"][\"data\"];\n                app.data.parent_key = data[\"Parent\"];\n                app.data.position_key = data[\"Должность\"];\n                await app.save();\n            }\n        }\n        Context.data.debug += `done length ${data1C.length}`;\n        await Promise.all(promises);\n    }\n    catch (e) {\n        Context.data.debug += `An error occured: name ${e.name}, message ${e.message}`;\n    }\n}\nasync function loadOrgs() {\n    const searchData = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.table_name.eq(\"Catalog_Организации\")))\n        .first();\n    let data1C = [];\n    if (!!searchData) {\n        data1C = JSON.parse(searchData.data.table_data).map((item) =\u003e item.data);\n    }\n    for (let i = 0; i \u003c data1C.length; i++) {\n        let appEntity;\n        let appOrganization;\n        const ownerData = data1C[i];\n        appOrganization = await Namespace.app.organization.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ref_key.eq(ownerData.Ref)))\n            .first();\n        if (appOrganization \u0026\u0026 appOrganization.data.entity) {\n            appEntity = await appOrganization.data.entity.fetch();\n        }\n        else {\n            appOrganization = Namespace.app.organization.create();\n        }\n        if (!appEntity) {\n            appEntity = await Context.fields.app_legal_entity.app.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__name.eq(ownerData[\"Description\"])))\n                .first();\n        }\n        if (!appEntity) {\n            appEntity = Context.fields.app_legal_entity.app.create();\n        }\n        if (appEntity) {\n            appEntity.data.__name = ownerData[\"Description\"];\n            appEntity.data._full_legal_name = ownerData[\"НаименованиеПолное\"];\n            appEntity.data._inn = ownerData[\"ИНН\"];\n            appEntity.data._ogrn = ownerData[\"ОГРН\"];\n            await appEntity.save();\n        }\n        appOrganization.data.entity = appEntity;\n        appOrganization.data.ref_key = ownerData.Ref;\n        appOrganization.data.owner_key = '';\n        appOrganization.data.parent_key = '';\n        appOrganization.data.position_key = '';\n        await appOrganization.save();\n    }\n}\nasync function fillAppsLinks() {\n    const allOrganizations = await Namespace.app.organization.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null)))\n        .size(10000)\n        .all();\n    const allSubdivisions = await Namespace.app.structural_subdivision.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null)))\n        .size(10000)\n        .all();\n    const allPositions = await Namespace.app.position.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null)))\n        .size(10000)\n        .all();\n    let promises = [];\n    for (const organiaztion of allOrganizations) {\n        const subdivisions = allSubdivisions.filter(f =\u003e f.data.owner_key === organiaztion.data.ref_key);\n        const positions = allPositions.filter(f =\u003e f.data.owner_key === organiaztion.data.ref_key);\n        for (const subdivision of subdivisions) {\n            subdivision.data.organization = organiaztion;\n            promises.push(subdivision.save());\n        }\n        for (const position of positions) {\n            position.data.organization = organiaztion;\n            promises.push(position.save());\n        }\n    }\n    await Promise.all(promises);\n    promises = [];\n    for (const subdivisionParent of allSubdivisions) {\n        const subdivisionsChild = allSubdivisions.filter(f =\u003e f.data.parent_key === subdivisionParent.data.ref_key);\n        const positionsChild = allPositions.filter(f =\u003e f.data.parent_key === subdivisionParent.data.ref_key);\n        for (const subdivisionChild of subdivisionsChild) {\n            subdivisionChild.data.subdivision = subdivisionParent;\n            promises.push(subdivisionChild.save());\n        }\n        for (const positionChild of positionsChild) {\n            positionChild.data.subdivision = subdivisionParent;\n            promises.push(positionChild.save());\n        }\n    }\n    await Promise.all(promises);\n}\nasync function fillOrgHeadPositions() {\n}\n","gatewayPairs":{},"hasTranslations":false}
