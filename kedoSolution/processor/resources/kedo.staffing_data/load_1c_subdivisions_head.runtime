{"scripts":"async function setRequestData() {\n    Context.data.current_number_of_iter = 0;\n    Context.data.end_iteration = false;\n    Context.data.array_heads = '[]';\n    Context.data.request_url = \"InformationRegister_ПозицииРуководителейПодразделений?$format=json\";\n}\nasync function fillIterData() {\n    if (!Context.data.response)\n        return;\n    const data1C = JSON.parse(Context.data.response)[\"value\"];\n    if (data1C[Context.data.current_number_of_iter]) {\n        Context.data.request_url = data1C[Context.data.current_number_of_iter][\"Подразделение@navigationLinkUrl\"] + \"?$format=json\";\n    }\n    Context.data.current_number_of_iter++;\n    if (data1C.length \u003c Context.data.current_number_of_iter) {\n        Context.data.end_iteration = true;\n    }\n    if (!Context.data.subdivision_response)\n        return;\n    const subdivResponse = JSON.parse(Context.data.subdivision_response);\n    const array_heads = JSON.parse(Context.data.array_heads);\n    array_heads.push(subdivResponse);\n    Context.data.array_heads = JSON.stringify(array_heads);\n}\nasync function setHeadData() {\n    const data1C = JSON.parse(Context.data.response)[\"value\"];\n    const array_heads = JSON.parse(Context.data.array_heads);\n    const allSubdivisions = await Namespace.app.structural_subdivision.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.base_1c.eq(Context.data.base_name)))\n        .size(10000)\n        .all();\n    const allPosisions = await Namespace.app.position.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.base_1c.eq(Context.data.base_name)))\n        .size(10000)\n        .all();\n    const promises = [];\n    for (let i = 0; i \u003c array_heads.length; i++) {\n        const position = allPosisions.find(f =\u003e f.data.ref_key === data1C[i][\"ПозицияШтатногоРасписания_Key\"]);\n        const subdivision = allSubdivisions.find(f =\u003e f.data.subdiv_key === array_heads[i][\"Источник\"]);\n        if (subdivision) {\n            subdivision.data.position = position;\n            promises.push(subdivision.save());\n        }\n    }\n    await Promise.all(promises);\n}\n","gatewayPairs":{},"hasTranslations":false}
