{"scripts":"async function check_integration_app() {\n    if (!Context.data.awaiting_documents_table_1c) {\n        Context.data.error = `Отсутствует приложение интеграции 1С.`;\n        return false;\n    }\n    const integration_app = await Context.data.awaiting_documents_table_1c.fetch();\n    if (integration_app.data.print_forms_table \u0026\u0026 integration_app.data.print_forms_table.length == 0) {\n        Context.data.error = `Отсутствуют печатные формы в приложении интеграции. Убедитесь, что печатные формы были отправлены из ЗУП.`;\n        return false;\n    }\n    return true;\n}\nasync function get_print_forms() {\n    const integration_app = await Context.data.awaiting_documents_table_1c.fetch();\n    const doc_types_1c = await Context.fields.doc_types_1c.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const docs_table = Context.data.print_forms_table;\n    const unknown_docs_table = Context.data.unknown_print_forms_table;\n    for (const row of integration_app.data.print_forms_table) {\n        const doc_type = doc_types_1c.find(f =\u003e f.data.doc_type_id_1c == row.id_1c);\n        if (doc_type) {\n            const docRow = docs_table.insert();\n            docRow.print_form = row.print_form;\n            docRow.id_1c = row.id_1c;\n            docRow.doc_type_1c = doc_type;\n            docRow.integration_app = integration_app;\n        }\n        else {\n            const unknownDocRow = unknown_docs_table.insert();\n            unknownDocRow.print_form = row.print_form;\n            unknownDocRow.print_form_id = row.id_1c;\n            unknownDocRow.integration_app = integration_app;\n        }\n    }\n}\nasync function check_unknown_forms_table() {\n    if (Context.data.unknown_print_forms_table \u0026\u0026 Context.data.unknown_print_forms_table.length \u003e 0) {\n        return true;\n    }\n    return false;\n}\nasync function concat_table() {\n    const unknown_docs_table = Context.data.unknown_print_forms_table;\n    const print_forms_table = Context.data.print_forms_table;\n    for (const row of unknown_docs_table) {\n        const new_row = print_forms_table.insert();\n        new_row.id_1c = row.print_form_id;\n        new_row.print_form = row.print_form;\n        new_row.doc_type_1c = row.doc_type_1c;\n        new_row.integration_app = row.integration_app;\n    }\n    Context.data.print_forms_table = Context.data.print_forms_table;\n}\nasync function check_integration_apps() {\n    const counter = Context.data.integration_app_counter;\n    if (Context.data.integration_apps \u0026\u0026 Context.data.integration_apps[counter]) {\n        return true;\n    }\n    return false;\n}\nasync function get_integration_app() {\n    const counter = Context.data.integration_app_counter;\n    if (Context.data.integration_apps \u0026\u0026 Context.data.integration_apps[counter]) {\n        Context.data.awaiting_documents_table_1c = Context.data.integration_apps[counter];\n    }\n    Context.data.integration_app_counter += 1;\n}\nasync function setTimer2Seconds() {\n    Context.data.timer = new Datetime().add(new Duration(2, \"seconds\"));\n}\n","gatewayPairs":{},"hasTranslations":false}
