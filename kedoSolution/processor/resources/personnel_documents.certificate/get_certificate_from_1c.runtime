{"scripts":"async function get_kedo_settings() {\n    const settings = await Context.fields.kedo_settings.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n}\nasync function getStaffData(employment) {\n    var _a, _b, _c, _d, _e;\n    if (!employment.data.staff) {\n        throw new Error(\"employment_place.data.staff is undefined\");\n    }\n    const staff = await employment.data.staff.fetch();\n    if (!employment.data.organization) {\n        throw new Error(\"employment.data.organization is undefined\");\n    }\n    if (!employment.data.position) {\n        throw new Error(\"employment.data.position is undefined\");\n    }\n    if (!employment.data.subdivision) {\n        throw new Error(\"employment.data.structural_subdivision is undefined\");\n    }\n    const [position, organization, structural_subdivision] = await Promise.all([\n        employment.data.position.fetch(),\n        employment.data.organization.fetch(),\n        employment.data.subdivision.fetch(),\n    ]);\n    const staff_data = {\n        name: staff.data.__name,\n        id_1c: (_a = employment.data.id_1c) !== null \u0026\u0026 _a !== void 0 ? _a : \"\",\n        individual_id_1c: (_b = staff.data.individual_id_1c) !== null \u0026\u0026 _b !== void 0 ? _b : \"\",\n        position_id: (_c = position.data.ref_key) !== null \u0026\u0026 _c !== void 0 ? _c : \"\",\n        organization_id: (_d = organization.data.ref_key) !== null \u0026\u0026 _d !== void 0 ? _d : \"\",\n        structural_subdivision_id: (_e = structural_subdivision.data.ref_key) !== null \u0026\u0026 _e !== void 0 ? _e : \"\",\n    };\n    return staff_data;\n}\nasync function prepareData1C() {\n    var _a, _b;\n    if (!Context.data.certificate) {\n        throw new Error(\"Context.data.certificate is undefined\");\n    }\n    const certificate = await Context.data.certificate.fetch();\n    if (!certificate.data.employment_place) {\n        throw new Error(\"Не указано место занятости сотрудника\");\n    }\n    const employment_place = await certificate.data.employment_place.fetch();\n    const staff_data = await getStaffData(employment_place);\n    const certifiacte_object = {\n        staff: staff_data,\n        period: (_b = (_a = certificate.data.date_from) === null || _a === void 0 ? void 0 : _a.year) !== null \u0026\u0026 _b !== void 0 ? _b : new TDate().year,\n    };\n    Context.data.additional_info = certificate.data.requester_comment;\n    Context.data.certificate_data_json = JSON.stringify(certifiacte_object);\n}\nasync function getIntegrationApp() {\n    if (!Context.data.integration_app_id) {\n        Context.data.error = `Отсутствует идентификатор приложения интеграции. Context.data.integration_app_id is undefined`;\n        throw new Error(Context.data.error);\n    }\n    const integration_app = await Context.fields.integration_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(Context.data.integration_app_id))).first();\n    if (!integration_app) {\n        Context.data.error = `Не удалось найти приложение интеграции по заданному идентификатору. ID: ${Context.data.integration_app_id}`;\n        throw new Error(Context.data.error);\n    }\n    Context.data.integration_app = integration_app;\n}\nasync function getCertificatePrintForm() {\n    const print_forms = Context.data.print_forms_table;\n    const doc_types_1c = await Context.fields.print_forms_table.fields.doc_type_1c.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    for (const row of print_forms) {\n        const doc_type = doc_types_1c.find(f =\u003e f.id == row.doc_type_1c.id);\n        if (!doc_type) {\n            continue;\n        }\n        if (Context.fields[`${doc_type.data.app_code}_print_form`]) {\n            Context.data[`${doc_type.data.app_code}_print_form`] = row.print_form;\n        }\n    }\n    if (!Context.data.certificate_print_form) {\n        Context.data.error = `В полученных печатных формах отсутствует печатная форма справки.`;\n        throw new Error(Context.data.error);\n    }\n}\nasync function checkPrintFormsTable() {\n    if (!Context.data.print_forms_table || Context.data.print_forms_table.length == 0) {\n        return false;\n    }\n    return true;\n}\n","gatewayPairs":{"/items/69c065b5-2dea-46d1-9e69-cf27beb033c7":"/items/2256cac8-4357-4798-a8d8-efbded8c67cf"},"hasTranslations":false}
