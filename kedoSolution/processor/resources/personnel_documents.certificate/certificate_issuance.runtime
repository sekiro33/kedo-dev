{"scripts":"async function alert_create() {\n    if (Context.data.certificate \u0026\u0026 Context.data.responsible) {\n        const user = await Context.data.__createdBy.fetch();\n        const responsible = await Context.data.responsible[0].fetch();\n        const user_timezone = System.timezones.all().find(n =\u003e n.name === user.data.timezone);\n        const certificate = await Context.data.certificate.fetch();\n        if (certificate.data.certificate_type) {\n            Context.data.alert_body =\n                `Здравствуйте, ${user.data.__name}!\u003cbr\u003e\n                \u003cbr\u003e\n                Запрошенная Вами ${certificate.data.__createdAt.getDate(user_timezone ? user_timezone : System.timezones.default).format(\"DD.MM.YYYY\")} справка вида ${(await certificate.data.certificate_type.fetch()).data.__name} готова.\u003cbr\u003e\n                \u003cbr\u003e\n                С уважением,\u003cbr\u003e\n                ${responsible.data.__name}\u003cbr\u003e`;\n        }\n        const responsible_staff = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(responsible))).first();\n        if (responsible_staff \u0026\u0026 responsible_staff.data.structural_subdivision) {\n            Context.data.responsible_department = (await responsible_staff.data.structural_subdivision.fetch()).data.__name;\n        }\n    }\n}\nasync function get_settigns() {\n    const integration_1c = await Context.fields.kedo_settings.app.search().where(f =\u003e f.code.eq('integration_1c')).first();\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    if (Context.data.certificate) {\n        const app = await Context.data.certificate.fetch();\n        if (app.data.certificate_type) {\n            const certificate_type = await app.data.certificate_type.fetch();\n            Context.data.type_string = certificate_type.data.__name;\n        }\n    }\n}\nasync function get_comment() {\n    if (Context.data.certificate) {\n        const app = await Context.data.certificate.fetch();\n        const signHistory = await app.getSignHistory();\n        Context.data.hr_comment = signHistory[0].signs[0].comment;\n    }\n}\nasync function get_user(id) {\n    const user = await System.users.search().where(f =\u003e f.__id.eq(id)).first();\n    return user;\n}\nasync function get_responsible() {\n    if (Context.data.certificate) {\n        const certificate = await Context.data.certificate.fetch();\n        if (certificate.data.certificate_type) {\n            const certificate_type = await certificate.data.certificate_type.fetch();\n            if (certificate_type.data.universal_responsible || certificate_type.data.universal_responsible == undefined) {\n                const roles = certificate_type.data.responsible;\n                let users = [];\n                if (roles \u0026\u0026 roles.length \u003e 0) {\n                    for (const res of roles) {\n                        if (res.type == 'user') {\n                            const user = await get_user(res.code);\n                            if (user)\n                                users.push(user);\n                        }\n                        else if (res.type == 'group') {\n                            users = users.concat(await res.getUsers());\n                        }\n                    }\n                }\n                Context.data.responsible = users;\n            }\n            else {\n                if (certificate.data.staff) {\n                    const organization = (await certificate.data.staff.fetch()).data.organization;\n                    if (organization) {\n                        if (certificate_type.data.organizations_reponsible_table \u0026\u0026 certificate_type.data.organizations_reponsible_table.length \u003e 0) {\n                            const item_current_organization = certificate_type.data.organizations_reponsible_table.find(item =\u003e item.organization.id == organization.id);\n                            Context.data.responsible = item_current_organization ? item_current_organization.responsible : undefined;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            throw new Error('У справки не присвоен вид');\n        }\n    }\n    else {\n        throw new Error('В контексте БП нет справки');\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
