{"scripts":"async function loadTypes() {\n    const vacationsTypes = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.table_name.eq(\"Catalog_ВидыОтпусков\"))).where((f, g) =\u003e g.or(f.is_processed.eq(null), f.is_processed.eq(false)))\n        .size(10000).all();\n    if (vacationsTypes.length === 0) {\n        return;\n    }\n    const sortedApps = vacationsTypes.sort((a, b) =\u003e {\n        const aDate = a.data.__createdAt.asDate();\n        const bDate = b.data.__createdAt.asDate();\n        return bDate - aDate;\n    });\n    const latestData = sortedApps[0];\n    const typeApps = await Namespace.app.type_vacations_1c.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const typeData = JSON.parse(latestData.data.table_data);\n    let promises = [];\n    for (let i = 0; i \u003c typeData.length; i++) {\n        const currentType = typeData[i].data;\n        const existingApp = typeApps.find(item =\u003e item.data.guid === currentType[\"Ref\"]);\n        if (!!existingApp)\n            continue;\n        const newApp = Namespace.app.type_vacations_1c.create();\n        newApp.data.__name = currentType[\"Description\"];\n        newApp.data.guid = currentType[\"Ref\"];\n        promises.push(newApp.save());\n        if (promises.length \u003e 50) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n    promises = [];\n    for (let app of vacationsTypes) {\n        app.data.is_processed = true;\n        promises.push(app.save());\n        if (promises.length \u003e= 30) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\n","gatewayPairs":{},"hasTranslations":false}
