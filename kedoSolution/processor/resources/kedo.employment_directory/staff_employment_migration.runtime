{"scripts":"async function getStaffPack() {\n    var _a;\n    const size = Context.data.size \u0026\u0026 Context.data.size \u003e 0 ? Context.data.size : 100;\n    const from = (_a = Context.data.from) !== null \u0026\u0026 _a !== void 0 ? _a : 0;\n    const staffs = await Context.fields.staffs.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null)))\n        .from(from)\n        .size(size)\n        .all();\n    if (!staffs || staffs.length == 0) {\n        Context.data.staffs = undefined;\n        return;\n    }\n    Context.data.staffs = staffs;\n    Context.data.from = from + size;\n}\nasync function dedublicateEmploymentTable() {\n    if (!Context.data.staffs || Context.data.staffs.length == 0) {\n        return;\n    }\n    const staff_ids = Context.data.staffs.map(s =\u003e s.id);\n    const staffs = await Context.fields.staffs.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(staff_ids)))\n        .size(staff_ids.length)\n        .all();\n    let promises = [];\n    for (const staff of staffs) {\n        const employment_table = staff.data.employment_table;\n        if (!employment_table || employment_table.length == 0) {\n            continue;\n        }\n        promises.push(async function () {\n            await filterEmploymentTable(staff);\n            await dedublicateTable(staff);\n        }());\n        if (promises.length \u003e 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nasync function filterEmploymentTable(staff) {\n    const employment_table = staff.data.employment_table;\n    if (!employment_table || employment_table.length) {\n        return;\n    }\n    for (let i = employment_table.length - 1; i \u003e= 0; i++) {\n        const row = employment_table[i];\n        if (!row.position || !row.type_employment) {\n            employment_table.delete(i);\n        }\n    }\n    return staff.save();\n}\nasync function dedublicateTable(staff) {\n    function checkRow(row) {\n        let score = 0;\n        if (row.id_1c \u0026\u0026 row.id_1c.length !== 0) {\n            score++;\n        }\n        if (row.admission_date_organization) {\n            score++;\n        }\n        if (row.admission_date_position) {\n            score++;\n        }\n        if (row.organization) {\n            score++;\n        }\n        if (row.subdivision) {\n            score++;\n        }\n        if (row.position) {\n            score++;\n        }\n        if (row.type_employment) {\n            score++;\n        }\n        return score;\n    }\n    const employment_table = staff.data.employment_table;\n    if (!employment_table || employment_table.length == 0) {\n        return;\n    }\n    for (let i = employment_table.length - 1; i \u003e= 0; i--) {\n        const row = employment_table[i];\n        const duble_index = employment_table.findIndex((r, index) =\u003e { var _a, _b, _c, _d; return ((_a = r.position) === null || _a === void 0 ? void 0 : _a.id) == ((_b = row.position) === null || _b === void 0 ? void 0 : _b.id) \u0026\u0026 ((_c = r.type_employment) === null || _c === void 0 ? void 0 : _c.code) == ((_d = row.type_employment) === null || _d === void 0 ? void 0 : _d.code) \u0026\u0026 index !== i; });\n        if (duble_index !== -1) {\n            const duble = employment_table[duble_index];\n            const duble_score = checkRow(duble);\n            const current_row_score = checkRow(row);\n            if (duble_score \u003e current_row_score) {\n                employment_table.delete(i);\n            }\n            else {\n                employment_table.delete(duble_index);\n            }\n        }\n    }\n    return staff.save();\n}\nasync function fillEmploymentTable() {\n    if (!Context.data.staffs || Context.data.staffs.length == 0) {\n        return;\n    }\n    const staff_ids = Context.data.staffs.map(f =\u003e f.id);\n    const staffs = await Context.fields.staffs.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(staff_ids)))\n        .size(staff_ids.length)\n        .all();\n    const staff_employment_table = Context.fields.staff_employment_table.create();\n    for (const staff of staffs) {\n        const employment_table = staff.data.employment_table;\n        if (!employment_table || employment_table.length == 0)\n            continue;\n        for (const row of employment_table) {\n            const employment_row = staff_employment_table.insert();\n            employment_row.id = row.id;\n            employment_row.staff = staff;\n            employment_row.id_1c = row.id_1c;\n            employment_row.type_employment = row.type_employment;\n            employment_row.subdivision = row.subdivision;\n            employment_row.position = row.position;\n            employment_row.organization = row.organization;\n            employment_row.date_by = row.date_by;\n            employment_row.admission_date_organization = row.admission_date_organization;\n            employment_row.admission_date_position = row.admission_date_position;\n            employment_row.staff_full_name = staff.data.__name;\n            employment_row.employment_directory = row.employment_placement_app;\n        }\n    }\n    Context.data.staff_employment_table = staff_employment_table;\n}\nasync function updateStaffEmployment() {\n    var _a;\n    if (!Context.data.staff_employment_table || Context.data.staff_employment_table.length == 0) {\n        return;\n    }\n    const employment_table = Context.data.staff_employment_table;\n    const fiiled_employment_app_ids = employment_table\n        .filter(f =\u003e f.employment_directory != undefined)\n        .map(f =\u003e f.employment_directory.id);\n    const employment_directory = await Context.fields.employment_directory.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(fiiled_employment_app_ids)))\n        .size(fiiled_employment_app_ids.length)\n        .all();\n    let promises = [];\n    for (const row of employment_table) {\n        const employment_app = (_a = employment_directory.find(f =\u003e { var _a; return f.id == ((_a = row.employment_directory) === null || _a === void 0 ? void 0 : _a.id); })) !== null \u0026\u0026 _a !== void 0 ? _a : Context.fields.employment_directory.app.create();\n        employment_app.data.staff = row.staff;\n        employment_app.data.position = row.position;\n        employment_app.data.type_employment = row.type_employment;\n        employment_app.data.subdivision = row.subdivision;\n        employment_app.data.organization = row.organization;\n        employment_app.data.id_1c = row.id_1c;\n        employment_app.data.admission_date_organization = row.admission_date_organization;\n        employment_app.data.admission_date_position = row.admission_date_position;\n        employment_app.data.date_by = row.date_by;\n        employment_app.data.staff_full_name = row.staff_full_name;\n        promises.push(employment_app.save()\n            .then(() =\u003e {\n            row.employment_directory = employment_app;\n        }));\n        if (promises.length \u003e 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nasync function setEmploymentValidStatus() {\n    if (!Context.data.staff_employment_table || Context.data.staff_employment_table.length == 0) {\n        return;\n    }\n    const employment_table = Context.data.staff_employment_table;\n    const employment_app_ids = employment_table\n        .filter(f =\u003e f.employment_directory != undefined)\n        .map(f =\u003e f.employment_directory.id);\n    const employment_directory = await Context.fields.employment_directory.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(employment_app_ids)))\n        .size(employment_app_ids.length)\n        .all();\n    let promises = [];\n    const today = new TDate();\n    for (const employment_app of employment_directory) {\n        if (employment_app.data.date_by \u0026\u0026 today.after(employment_app.data.date_by)) {\n            promises.push(employment_app.setStatus(Context.fields.employment_directory.app.fields.__status.variants.not_valid));\n        }\n        else {\n            promises.push(employment_app.setStatus(Context.fields.employment_directory.app.fields.__status.variants.actual));\n        }\n        if (promises.length \u003e 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nasync function udpateStaffEmploymentTable() {\n    var _a;\n    if (!Context.data.staff_employment_table || Context.data.staff_employment_table.length == 0) {\n        return;\n    }\n    if (!Context.data.staffs || Context.data.staffs.length == 0) {\n        return;\n    }\n    const employment_table = Context.data.staff_employment_table;\n    const staff_ids = Context.data.staffs.map(f =\u003e f.id);\n    const staffs = await Context.fields.staffs.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(staff_ids)))\n        .size(staff_ids.length)\n        .all();\n    let promises = [];\n    for (const staff of staffs) {\n        const staff_employment_table = staff.data.employment_table;\n        if (!staff_employment_table || staff_employment_table.length == 0) {\n            continue;\n        }\n        const employment_rows = employment_table.filter(f =\u003e { var _a; return ((_a = f.staff) === null || _a === void 0 ? void 0 : _a.id) === staff.id; });\n        for (const row of employment_rows) {\n            const staff_row = (_a = staff_employment_table.find(f =\u003e f.id == row.id)) !== null \u0026\u0026 _a !== void 0 ? _a : staff_employment_table.insert();\n            staff_row.id = row.id;\n            staff_row.position = row.position;\n            staff_row.organization = row.organization;\n            staff_row.subdivision = row.subdivision;\n            staff_row.type_employment = row.type_employment;\n            staff_row.id_1c = row.id_1c;\n            staff_row.employment_placement_app = row.employment_directory;\n            staff_row.admission_date_organization = row.admission_date_organization;\n            staff_row.admission_date_position = row.admission_date_position;\n            staff_row.date_by = row.date_by;\n        }\n        promises.push(staff.save());\n        if (promises.length \u003e 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nasync function incIterationCounter() {\n    var _a;\n    Context.data.iteration_count = ((_a = Context.data.iteration_count) !== null \u0026\u0026 _a !== void 0 ? _a : 0) + 1;\n}\nasync function resetIterationCounter() {\n    Context.data.iteration_count = 0;\n}\nasync function setNotValidStatus() {\n    let from = 0;\n    const size = 100;\n    const chunk_size = 40;\n    while (true) {\n        const employment_directory = await Context.fields.employment_directory.app.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__deletedAt.eq(null)))\n            .from(from)\n            .size(size)\n            .all();\n        if (!employment_directory || employment_directory.length == 0) {\n            break;\n        }\n        for (let i = 0; i \u003c employment_directory.length; i += chunk_size) {\n            const chunk = employment_directory.slice(i, i + chunk_size);\n            await Promise.all(chunk.map(f =\u003e f.setStatus(Context.fields.employment_directory.app.fields.__status.variants.not_valid)));\n        }\n        from += size;\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
