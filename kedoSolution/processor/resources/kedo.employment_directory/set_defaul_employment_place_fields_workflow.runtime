{"scripts":"const CHUNK_SIZE = 100;\nconst VACATION_SOLUTION = \"otpuska\";\nconst BUSINESS_TRIP_SOLUTION = \"komandirovki\";\nconst namespaces = {\n    \"absences\": {\n        name: \"absences\",\n        apps: [\n            {\n                code: \"vacations\",\n                staff_code: \"kedo_staff\",\n                employment_code: \"employment_place\",\n            }\n        ]\n    },\n    \"kedo\": {\n        name: \"kedo\",\n        apps: [\n            {\n                code: \"execution_duties\",\n                staff_code: \"staff\",\n                employment_code: \"staff_employment_placement\",\n            },\n        ],\n    },\n    \"time_tracking\": {\n        name: \"time_tracking\",\n        apps: [\n            {\n                code: \"overtime_work\",\n                staff_code: \"kedo_staff\",\n                employment_code: \"employment_place\",\n            }\n        ]\n    },\n    \"personnel_documents\": {\n        name: \"personnel_documents\",\n        apps: [\n            {\n                code: \"application_for_leave_without_pay\",\n                staff_code: \"staff\",\n                employment_code: \"employment_placement\",\n            },\n            {\n                code: \"paid_leave\",\n                staff_code: \"staff\",\n                employment_code: \"employment_place\",\n            },\n            {\n                code: 'memo_business_trip',\n                staff_code: \"staff\",\n                employment_code: \"employment_placement\",\n            },\n            {\n                code: \"application_for_financial_assistance\",\n                staff_code: \"staff\",\n                employment_code: \"employment_placement\",\n            },\n            {\n                code: \"benefit_application\",\n                staff_code: \"staff\",\n                employment_code: \"employment_placement\",\n            },\n            {\n                code: \"application_for_the_transfer_of_salary_to_the_current_account\",\n                staff_code: \"staff\",\n                employment_code: \"employment_placement\",\n            },\n            {\n                code: \"free_from\",\n                staff_code: \"staff\",\n                employment_code: \"employment_placement\",\n            },\n            {\n                code: \"certificate\",\n                staff_code: \"staff\",\n                employment_code: \"employment_place\",\n            }\n        ]\n    },\n    \"business_trips\": {\n        name: \"business_trips\",\n        apps: [\n            {\n                code: \"businesstrip_requests\",\n                staff_code: \"kedo_staff\",\n                employment_code: \"employment_placement\",\n            }\n        ]\n    }\n};\nclass ElmaApp {\n    constructor(namespace, code) {\n        this.code = code;\n        this.namespace = namespace;\n    }\n    getListURL() {\n        return `${System.getBaseUrl()}/pub/v1/app/${this.namespace}/${this.code}/list`;\n    }\n    getUpdateElementURL(element_id) {\n        return `${System.getBaseUrl()}/pub/v1/app/${this.namespace}/${this.code}/${element_id}/update`;\n    }\n    async updateEmploymentPlacement(element_id, context) {\n        const token = Context.data.token;\n        try {\n            const request = await fetch(this.getUpdateElementURL(element_id), {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${token}`\n                },\n                body: JSON.stringify(context)\n            });\n        }\n        catch (error) {\n            throw new Error(error);\n        }\n    }\n    async getElements(filter) {\n        const token = Context.data.token;\n        try {\n            const request = await fetch(this.getListURL(), {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${token}`\n                },\n                body: JSON.stringify(filter !== null \u0026\u0026 filter !== void 0 ? filter : {})\n            });\n            const response = await request.json();\n            if (response \u0026\u0026 response.success \u0026\u0026 response.success == true) {\n                return {\n                    success: response.success,\n                    error: response.error,\n                    app_context: response.result.result,\n                    total: response.result.total,\n                };\n            }\n            else {\n                throw new Error(JSON.stringify(response !== null \u0026\u0026 response !== void 0 ? response : request));\n            }\n        }\n        catch (error) {\n            throw new Error(error);\n        }\n    }\n    async getTotalElementsCount(filter) {\n        const response = await this.getElements(filter);\n        if (!response || response.success == false || !response.total)\n            return 0;\n        return response.total;\n    }\n}\nconst filter = (from, size, employment_field_name) =\u003e {\n    return {\n        \"active\": true,\n        \"from\": from,\n        \"size\": size,\n        \"filter\": {\n            \"or\": [\n                {\n                    \"eq\": [\n                        {\n                            \"field\": employment_field_name\n                        },\n                        null\n                    ]\n                },\n                {\n                    \"link\": [\n                        {\n                            \"field\": employment_field_name\n                        },\n                        {\n                            \"list\": []\n                        }\n                    ]\n                }\n            ]\n        }\n    };\n};\nasync function getApiToken() {\n    const api_key = await Namespace.app.settings.search()\n        .where(f =\u003e f.code.eq(\"api_key\"))\n        .first();\n    if (!api_key || !api_key.data.value) {\n        Context.data.error = `Не найден параметр api_key или параметр не заполнен.`;\n        throw new Error(Context.data.error);\n    }\n    Context.data.token = api_key.data.value;\n}\nasync function getSolutions() {\n    let solutions = [];\n    try {\n        const request = await fetch(`${System.getBaseUrl()}/pub/v1/scheme/solutions`, {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${Context.data.token}`\n            }\n        });\n        if (!request.ok) {\n            throw new Error(JSON.stringify(request));\n        }\n        const response = await request.json();\n        solutions = response.result.result;\n    }\n    catch (error) {\n        Context.data.error = JSON.stringify(error);\n        throw new Error(error);\n    }\n    finally {\n        return solutions;\n    }\n}\nasync function getKedoApps() {\n    const solutions = await getSolutions();\n    if (!solutions || solutions.length == 0) {\n        Context.data.error = `Не удалось получить список решений`;\n        throw new Error(Context.data.error);\n    }\n    const apps = [];\n    const kedo_apps = namespaces.kedo.apps;\n    apps.push(...kedo_apps.map(f =\u003e {\n        return {\n            namespace: namespaces.kedo.name,\n            code: f.code,\n            staff_code: f.staff_code,\n            employment_code: f.employment_code,\n        };\n    }));\n    const personnel_documents_apps = namespaces.personnel_documents.apps;\n    apps.push(...personnel_documents_apps.map(f =\u003e {\n        return {\n            namespace: namespaces.personnel_documents.name,\n            code: f.code,\n            staff_code: f.staff_code,\n            employment_code: f.employment_code,\n        };\n    }));\n    if (solutions.find(f =\u003e f.code == BUSINESS_TRIP_SOLUTION)) {\n        Context.data.business_trip_enabled = true;\n        const business_trip_apps = namespaces.business_trips.apps;\n        apps.push(...business_trip_apps.map(f =\u003e {\n            return {\n                namespace: namespaces.business_trips.name,\n                code: f.code,\n                staff_code: f.staff_code,\n                employment_code: f.employment_code,\n            };\n        }));\n    }\n    if (solutions.find(f =\u003e f.code == VACATION_SOLUTION)) {\n        Context.data.absences_enabled = true;\n        const absences_apps = namespaces.absences.apps;\n        apps.push(...absences_apps.map(f =\u003e {\n            return {\n                namespace: namespaces.absences.name,\n                code: f.code,\n                staff_code: f.staff_code,\n                employment_code: f.employment_code,\n            };\n        }));\n        const time_tracking = namespaces.time_tracking.apps;\n        apps.push(...time_tracking.map(f =\u003e {\n            return {\n                namespace: namespaces.time_tracking.name,\n                code: f.code,\n                staff_code: f.staff_code,\n                employment_code: f.employment_code,\n            };\n        }));\n    }\n    Context.data.app_list = JSON.stringify(apps);\n}\nasync function checkAppList() {\n    const app_list = Context.data.app_list ? JSON.parse(Context.data.app_list) : [];\n    if (app_list.length == 0) {\n        return false;\n    }\n    return true;\n}\nasync function getApp() {\n    const app_list = Context.data.app_list ? JSON.parse(Context.data.app_list) : [];\n    if (app_list.length == 0) {\n        throw new Error(\"app_list is empty\");\n    }\n    Context.data.app_data = JSON.stringify(app_list.pop());\n    Context.data.app_list = JSON.stringify(app_list);\n}\nasync function update_employments() {\n    var _a;\n    const app_data = Context.data.app_data ? JSON.parse(Context.data.app_data) : undefined;\n    if (!app_data) {\n        throw new Error(\"app_data is undefined\");\n    }\n    const app = new ElmaApp(app_data.namespace, app_data.code);\n    const total_count = await app.getTotalElementsCount(filter(0, 1, app_data.employment_code));\n    const employment_directory = await Namespace.app.employment_directory.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(Namespace.app.employment_directory.fields.__status.variants.actual)))\n        .size(10000)\n        .all();\n    for (let i = 0; i \u003c total_count; i += CHUNK_SIZE) {\n        const elements = await app.getElements(filter(i, i + CHUNK_SIZE, app_data.employment_code));\n        if (!elements || !elements.app_context)\n            return;\n        let promises = [];\n        for (let el of elements.app_context) {\n            if (!el[app_data.staff_code] || !el[app_data.staff_code][0]) {\n                continue;\n            }\n            const staff_id = el[app_data.staff_code][0];\n            const staff_employment = employment_directory.filter(f =\u003e { var _a; return ((_a = f.data.staff) === null || _a === void 0 ? void 0 : _a.id) == staff_id; });\n            if (!staff_employment || staff_employment.length == 0) {\n                continue;\n            }\n            const employment = (_a = staff_employment.find(f =\u003e { var _a; return ((_a = f.data.type_employment) === null || _a === void 0 ? void 0 : _a.code) == \"main_workplace\"; })) !== null \u0026\u0026 _a !== void 0 ? _a : staff_employment[0];\n            const element_context = {\n                context: {}\n            };\n            element_context.context[`${app_data.employment_code}`] = [employment.id];\n            promises.push(app.updateEmploymentPlacement(el.__id, element_context));\n            if (promises.length \u003e 10) {\n                await Promise.all(promises).then(() =\u003e {\n                    var _a;\n                    Context.data.element_count = ((_a = Context.data.element_count) !== null \u0026\u0026 _a !== void 0 ? _a : 0) + promises.length;\n                });\n                promises = [];\n            }\n        }\n        await Promise.all(promises).then(() =\u003e {\n            var _a;\n            Context.data.element_count = ((_a = Context.data.element_count) !== null \u0026\u0026 _a !== void 0 ? _a : 0) + promises.length;\n        });\n        ;\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
