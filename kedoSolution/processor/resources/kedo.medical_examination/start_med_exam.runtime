{"scripts":"async function defineEndMedExams() {\n    let med_exam_array = [];\n    let position;\n    const med_exam = await Context.data.medical_examination.fetch();\n    const medical_request = await med_exam.data.med_request.fetch();\n    const staff = await med_exam.data.staff.fetch();\n    if (medical_request.data.new_position) {\n        position = await medical_request.data.new_position.fetch();\n    }\n    else {\n        position = await medical_request.data.old_postion.fetch();\n    }\n    if (position.data.harmful_production_factors \u0026\u0026 position.data.harmful_production_factors.length \u003e 0) {\n        const factors = await Promise.all(position.data.harmful_production_factors.map(x =\u003e x.fetch()));\n        for (let factor of factors) {\n            med_exam_array = med_exam_array.concat(factor.data.necessary_preliminary_examinations);\n        }\n        med_exam_array = med_exam_array.filter((f, i, s) =\u003e i === s.findIndex(t =\u003e t.id === f.id));\n    }\n    const activ_med_exams = await Namespace.app.medical_examination.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.neq(Namespace.app.medical_examination.fields.__status.variants.passed), f.staff.link(staff)))\n        .size(10000)\n        .all();\n    if (activ_med_exams \u0026\u0026 activ_med_exams.length \u003e 0)\n        med_exam_array = med_exam_array.filter((f) =\u003e activ_med_exams.find(j =\u003e j.id === f.id));\n    if (med_exam_array.length \u003e 0)\n        medical_request.setStatus(medical_request.fields.__status.variants.end);\n}\nasync function searchUser() {\n    const medical_examination = await Context.data.medical_examination.fetch();\n    if (medical_examination.data.staff) {\n        Context.data.staff_user = (await medical_examination.data.staff.fetch()).data.ext_user;\n    }\n    if (medical_examination.data.candidate) {\n        Context.data.staff_user = (await medical_examination.data.candidate.fetch()).data.candidate;\n    }\n}\nasync function setAlert() {\n    const entity = (await Context.data.medical_examination.fetch()).data.organization;\n    const entity_name = entity ? (await entity.fetch()).data.__name : '';\n    const date = Context.data.due_date ? Context.data.due_date.format('DD.MM.YYYY') : '';\n    Context.data.alert = `Вам необходимо пройти медицинский осмотр для трудоустройства в компанию ${entity_name} до ${date}. Пожалуйста, пройдите на портал, чтобы посмотреть информацию и подтвердить прохождение медосмотра.`;\n}\nasync function setAlertReminder() {\n    const entity = (await Context.data.medical_examination.fetch()).data.organization;\n    const entity_name = entity ? (await entity.fetch()).data.__name : '';\n    const date = Context.data.due_date ? Context.data.due_date.format('DD.MM.YYYY') : '';\n    Context.data.alert = `Напоминаем о необходимости пройти медицинский осмотр для трудоустройства в компанию ${entity_name} до ${date}. Пожалуйста, пройдите на портал, чтобы посмотреть информацию и подтвердить прохождение медосмотра.`;\n}\n","gatewayPairs":{},"hasTranslations":false}
