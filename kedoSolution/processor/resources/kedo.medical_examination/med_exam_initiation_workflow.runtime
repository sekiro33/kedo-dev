{"scripts":"async function getEndingMedExams() {\n    const start = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('med_start_days')))\n        .first();\n    const end = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('med_interval_days')))\n        .first();\n    Context.data.start_days = start \u0026\u0026 start.data.quantity ? start.data.quantity : 30;\n    const end_days = end \u0026\u0026 end.data.quantity ? end.data.quantity : 14;\n    Context.data.end_days = Context.data.start_days + end_days;\n    const current_date = new TDate();\n    const med_exams = await Context.fields.medical_examination.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(Context.fields.medical_examination.app.fields.__status.variants.passed), f.extended.eq(null), f.valid_up_to.gte(current_date.addDate(0, 0, Context.data.start_days)), f.valid_up_to.lte(current_date.addDate(0, 0, Context.data.end_days))))\n        .size(10000)\n        .all();\n    Context.data.debug = med_exams.length.toString();\n    if (med_exams \u0026\u0026 med_exams.length \u003e 0) {\n        let staffs_array = [];\n        let promises = [];\n        Context.data.medical_requests = [];\n        for (const med_exam of med_exams) {\n            if (med_exam.data.staff) {\n                staffs_array.push(med_exam.data.staff);\n            }\n        }\n        staffs_array = staffs_array.filter((f, i, s) =\u003e i === s.findIndex(t =\u003e t.id === f.id));\n        let staffs_result = await Promise.all(staffs_array.map(x =\u003e x.fetch()));\n        for (let i = 0; i \u003c= staffs_result.length - 1; i++) {\n            const staff = staffs_result[i];\n            const my_med_exams = med_exams.filter(f =\u003e f.data.staff \u0026\u0026 f.data.staff.id === staff.id);\n            const medical_request = Context.fields.medical_requests.app.create();\n            medical_request.data.sort_of_medical_examination = medical_request.fields.sort_of_medical_examination.variants.periodic_examination;\n            medical_request.data.staff = staffs_array[i];\n            medical_request.data.categories_table = staff.data.categories_table;\n            medical_request.data.old_postion = staff.data.position;\n            medical_request.data.harmful_factors = my_med_exams.map(f =\u003e f.data.harmful_factors).reduce((a, b) =\u003e a.concat(b));\n            for (let med_exam of my_med_exams) {\n                const row = medical_request.data.structure.insert();\n                row.med_type = med_exam.data.type_of_medical_examination;\n                row.med_organization = med_exam.data.medical_organization;\n            }\n            promises.push(medical_request.save());\n            Context.data.medical_requests.push(medical_request);\n        }\n        await Promise.all(promises);\n        promises = [];\n        for (const med_exam of med_exams) {\n            med_exam.data.extended = 'true';\n            promises.push(med_exam.save());\n        }\n        await Promise.all(promises);\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
