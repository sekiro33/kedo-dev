{"scripts":"async function getStaffPack() {\n    var _a, _b;\n    let from = (_a = Context.data.from) !== null \u0026\u0026 _a !== void 0 ? _a : 0;\n    let size = (_b = Context.data.size) !== null \u0026\u0026 _b !== void 0 ? _b : 100;\n    const staffs = await Context.fields.staffs.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null)))\n        .from(from)\n        .size(size)\n        .all();\n    Context.data.staffs = staffs;\n    from += size;\n    Context.data.from = from;\n}\nasync function checkStaffPack() {\n    return Context.data.staffs != undefined \u0026\u0026 Context.data.staffs.length \u003e 0;\n}\nasync function updateStaffEmployment() {\n    var _a;\n    if (!Context.data.staffs || Context.data.staffs.length == 0) {\n        return;\n    }\n    const staffs = await Context.fields.staffs.fetchAll();\n    const employment_directory = await Namespace.app.employment_directory.search()\n        .where((f, g) =\u003e g.and(f.__id.in(staffs.map(s =\u003e s.id)), f.__deletedAt.eq(null), f.__status.eq(Namespace.app.employment_directory.fields.__status.variants.actual)))\n        .size(10000)\n        .all();\n    const employment_statuses = Namespace.app.employment_directory.fields.__status.variants;\n    let promises = [];\n    let staff_promises = [];\n    for (const staff of staffs) {\n        const employment_table = staff.data.employment_table;\n        const staff_employment = employment_directory.filter(f =\u003e { var _a; return ((_a = f.data.staff) === null || _a === void 0 ? void 0 : _a.id) == staff.id; });\n        if (!employment_table || employment_table.length == 0) {\n            if (staff_employment.length \u003e 0) {\n                await Promise.all(staff_employment.map(f =\u003e f.setStatus(employment_statuses.not_valid)));\n            }\n            continue;\n        }\n        for (const employment of employment_table) {\n            let app = (_a = employment_directory.find(f =\u003e { var _a; return f.id == ((_a = employment.employment_placement_app) === null || _a === void 0 ? void 0 : _a.id); })) !== null \u0026\u0026 _a !== void 0 ? _a : Namespace.app.employment_directory.create();\n            app.data.position = employment.position;\n            app.data.organization = employment.organization;\n            app.data.subdivision = employment.subdivision;\n            app.data.staff = staff;\n            app.data.type_employment = employment.type_employment;\n            app.data.admission_date_organization = employment.admission_date_organization;\n            app.data.admission_date_position = employment.admission_date_position;\n            employment.employment_placement_app = app;\n            promises.push(app.save());\n            if (promises.length \u003e 20) {\n                await Promise.all(promises);\n                promises = [];\n            }\n        }\n        staff_promises.push(staff.save());\n        if (staff_promises.length \u003e 20) {\n            await Promise.all(promises);\n            await Promise.all(staff_promises);\n            promises = [];\n            staff_promises = [];\n        }\n    }\n    if (promises.length \u003e 0) {\n        await Promise.all(promises);\n    }\n    if (staff_promises.length \u003e 0) {\n        await Promise.all(staffs);\n    }\n}\nasync function resetIterationCounter() {\n    Context.data.iteration_count = 0;\n}\nasync function incIterationCounter() {\n    var _a;\n    Context.data.iteration_count = ((_a = Context.data.iteration_count) !== null \u0026\u0026 _a !== void 0 ? _a : 0) + 1;\n}\n","gatewayPairs":{},"hasTranslations":false}
