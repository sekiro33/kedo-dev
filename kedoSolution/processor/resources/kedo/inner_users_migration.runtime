{"scripts":"const chunkSize = Context.data.chunk_size;\nasync function migrateInnerUsers() {\n    const allStaff = await Context.fields.staff_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all().then(r =\u003e r.filter(s =\u003e s.data.ext_user));\n    const allOrgs = await Context.fields.organization_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allGroups = await System.userGroups.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allOrgRights = await Context.fields.access_rights_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allUsers = await System.users.search().size(10000).all();\n    const staffChunk = Context.data.id_chunks[Context.data.iteration];\n    const promises = [];\n    let idsWithPositions = [];\n    if (Context.data.staff_with_roles) {\n        idsWithPositions = Context.data.staff_with_roles;\n    }\n    else if (!Context.data.add_hr_and_accounting_to_inner_users) {\n        idsWithPositions = [].concat.apply([], Array.from(new Set(allOrgs.map(org =\u003e {\n            const hrIds = org.data.hr_department \u0026\u0026 org.data.hr_department.length \u003e 0 ? org.data.hr_department.map(item =\u003e {\n                const staff = allStaff.find(s =\u003e s.id === item.id);\n                if (staff \u0026\u0026 staff.data.ext_user) {\n                    const user = allUsers.find(u =\u003e u.id === staff.data.ext_user.id);\n                    if (user) {\n                        return user.id;\n                    }\n                }\n                return \"\";\n            }) : [];\n            const accountingIds = org.data.accounting \u0026\u0026 org.data.accounting.length \u003e 0 ? org.data.accounting.map(item =\u003e {\n                const staff = allStaff.find(s =\u003e s.id === item.id);\n                if (staff \u0026\u0026 staff.data.ext_user) {\n                    const user = allUsers.find(u =\u003e u.id === staff.data.ext_user.id);\n                    if (user) {\n                        return user.id;\n                    }\n                }\n                return \"\";\n            }) : [];\n            const specialsIds = org.data.special_access_new \u0026\u0026 org.data.special_access_new.length \u003e 0 ? org.data.special_access_new.map(item =\u003e {\n                const staff = allStaff.find(s =\u003e s.id === item.id);\n                if (staff \u0026\u0026 staff.data.ext_user) {\n                    const user = allUsers.find(u =\u003e u.id === staff.data.ext_user.id);\n                    if (user) {\n                        return user.id;\n                    }\n                }\n                return \"\";\n            }) : [];\n            return [].concat.apply([], [...hrIds, ...accountingIds, ...specialsIds]);\n        }))));\n        Context.data.staff_with_roles = idsWithPositions;\n    }\n    ;\n    for (let item of staffChunk) {\n        const staff = allStaff.find(s =\u003e s.id === item.id);\n        if (!staff || !staff.data.organization || !staff.data.ext_user) {\n            Context.data.debug += `no organization at staff ${item.id} or no staff `;\n            continue;\n        }\n        ;\n        if (idsWithPositions.indexOf(staff.data.ext_user.id) != -1) {\n            Context.data.debug += `skip staff ${staff.data.__name}`;\n            continue;\n        }\n        ;\n        const staffAccessNamespace = item.access;\n        if (staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 1) {\n            const staffOrgsIds = staff.data.employment_table.filter(row =\u003e row.organization).map(row =\u003e row.organization.id);\n            const staffAccessIds = allOrgs.filter(org =\u003e staffOrgsIds.indexOf(org.id) != -1 \u0026\u0026 org.data.access_settings_organization).map(org =\u003e org.data.access_settings_organization.id);\n            const staffAccess = allOrgRights.filter(access =\u003e staffAccessIds.indexOf(access.id) != -1 \u0026\u0026 access.data.inner_org_users);\n            for (let access of staffAccess) {\n                let userGroup;\n                if (staffAccessNamespace === \"portal\") {\n                    userGroup = allGroups.find(g =\u003e g.id === access.data.external_org_users[0].code);\n                }\n                else {\n                    userGroup = allGroups.find(g =\u003e g.id === access.data.inner_org_users[0].code);\n                }\n                if (userGroup) {\n                    const user = allUsers.find(u =\u003e u.id === staff.data.ext_user.id);\n                    if (!userGroup.data.subOrgunitIds || userGroup.data.subOrgunitIds.length \u003c 1) {\n                        userGroup.data.subOrgunitIds = [];\n                    }\n                    ;\n                    if (userGroup.data.subOrgunitIds.indexOf(staff.data.ext_user.id) === -1) {\n                        userGroup.data.subOrgunitIds.push(staff.data.ext_user.id);\n                        await userGroup.save().catch(err =\u003e {\n                            Context.data.debug += `error at userId ${user.id}: ${err}`;\n                        });\n                    }\n                    ;\n                }\n                ;\n            }\n            ;\n            continue;\n        }\n        const org = allOrgs.find(org =\u003e org.id === staff.data.organization.id);\n        if (!org.data.access_settings_organization) {\n            Context.data.debug += `no access settings at org ${staff.data.organization.id} or no org `;\n            continue;\n        }\n        ;\n        const orgRights = allOrgRights.find(right =\u003e right.id === org.data.access_settings_organization.id);\n        if (!orgRights.data.inner_org_users || orgRights.data.inner_org_users.length \u003c 1) {\n            Context.data.debug += `no inner user role at access settings ${org.data.access_settings_organization.id} or no access settings `;\n            continue;\n        }\n        ;\n        let userGroup;\n        if (staffAccessNamespace === \"portal\") {\n            userGroup = allGroups.find(g =\u003e g.id === orgRights.data.external_org_users[0].code);\n        }\n        else {\n            userGroup = allGroups.find(g =\u003e g.id === orgRights.data.inner_org_users[0].code);\n        }\n        if (userGroup) {\n            const user = allUsers.find(u =\u003e u.id === staff.data.ext_user.id);\n            if (user \u0026\u0026 !user.data.__deletedAt) {\n                if (!userGroup.data.subOrgunitIds || userGroup.data.subOrgunitIds.length \u003c 1) {\n                    userGroup.data.subOrgunitIds = [];\n                }\n                ;\n                if (userGroup.data.subOrgunitIds.indexOf(staff.data.ext_user.id) === -1) {\n                    userGroup.data.subOrgunitIds.push(staff.data.ext_user.id);\n                    await userGroup.save().catch(err =\u003e {\n                        Context.data.debug += `error at userId ${user.id}: ${err}`;\n                    });\n                }\n                ;\n            }\n            else {\n                Context.data.debug += `deleted user at staffId ${item.id}`;\n            }\n        }\n        ;\n    }\n    ;\n    Context.data.iteration++;\n    if (staffChunk.length \u003c chunkSize) {\n        Context.data.all_staff_processed = true;\n    }\n    ;\n}\n;\nasync function getAndSplitUsers() {\n    let staffIdsChunks = [];\n    const allStaff = await Context.fields.staff_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all().then(r =\u003e r.filter(s =\u003e s.data.ext_user));\n    const mappedStaff = allStaff.map(s =\u003e {\n        return {\n            id: s.id,\n            access: s.data.staff_access ? \"portal\" : \"system\"\n        };\n    });\n    for (let i = 0; i \u003c mappedStaff.length; i += chunkSize) {\n        const chunk = mappedStaff.slice(i, i + chunkSize);\n        staffIdsChunks.push(chunk);\n    }\n    ;\n    if (staffIdsChunks.length \u003e 0) {\n        Context.data.users_exists = true;\n        Context.data.id_chunks = staffIdsChunks;\n    }\n    ;\n}\n","gatewayPairs":{},"hasTranslations":false}
