{"scripts":"let signVariants;\nlet moduleCodes;\nasync function checkModules() {\n    if (Context.data.work_docs_sign) {\n        Context.data.sign_type = Context.fields.sign_type.variants.goskey;\n        return;\n    }\n    ;\n    const baseUrl = System.getBaseUrl();\n    const tokenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n    if (!tokenSetting || !tokenSetting.data.value) {\n        Context.data.module_codes = JSON.stringify([\"null\"]);\n        return;\n    }\n    ;\n    let goskeyEnabled = false;\n    let commonIntegrationEnabled = false;\n    const goskeyResponse = await fetch(`${baseUrl}/pub/v1/scheme/modules/7fb0a0d0-fc8d-452e-843f-6a7f2f28a8bf`, {\n        headers: {\n            Authorization: `Bearer ${tokenSetting.data.value}`\n        }\n    });\n    if (goskeyResponse.ok) {\n        const responseJson = await goskeyResponse.json();\n        goskeyEnabled = responseJson.module.enabled;\n    }\n    ;\n    const commonIntegrationResponse = await fetch(`${baseUrl}/pub/v1/scheme/modules/27c1fb4a-e011-47a6-aa26-cf0fc42c39cd`, {\n        headers: {\n            Authorization: `Bearer ${tokenSetting.data.value}`\n        }\n    });\n    if (commonIntegrationResponse.ok) {\n        const responseJson = await commonIntegrationResponse.json();\n        commonIntegrationEnabled = responseJson.module.enabled;\n    }\n    ;\n    Context.data.module_codes = [goskeyEnabled, commonIntegrationEnabled].every(item =\u003e item) ? JSON.stringify([\"all\"]) :\n        goskeyEnabled ? JSON.stringify([\"goskey\"]) :\n            commonIntegrationEnabled ? JSON.stringify([\"inner_sign\"]) : JSON.stringify([\"null\"]);\n    await checkStaffSignType();\n}\n;\nasync function checkStaffSignType() {\n    if (!Context.data.staff) {\n        Context.data.sign_type = Context.fields.sign_type.variants.inner_sign;\n        return;\n    }\n    ;\n    const staff = await Context.data.staff.fetch();\n    if (!staff.data.organization) {\n        Context.data.sign_type = Context.fields.sign_type.variants.null;\n        return;\n    }\n    ;\n    moduleCodes = JSON.parse(Context.data.module_codes);\n    if (checkModuleCodes(\"null\")) {\n        Context.data.sign_type = Context.fields.sign_type.variants.null;\n        return;\n    }\n    ;\n    const employmentPositions = await Context.fields.employment_directory_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(Context.fields.employment_directory_app.app.fields.__status.variants.actual), f.staff.link(staff))).size(100).all();\n    if (!employmentPositions || employmentPositions.length \u003c 1) {\n        Context.data.sign_type = Context.fields.sign_type.variants.inner_sign;\n        return;\n    }\n    ;\n    let organization;\n    const mainWorkPlace = employmentPositions.find(pos =\u003e pos.data.type_employment \u0026\u0026 pos.data.type_employment.code === pos.fields.type_employment.variants.main_workplace.code);\n    const additionalWorkPlace = employmentPositions.find(pos =\u003e pos.data.type_employment \u0026\u0026 pos.data.type_employment.code === pos.fields.type_employment.variants.external_combination.code);\n    if (mainWorkPlace \u0026\u0026 mainWorkPlace.data.organization) {\n        organization = await mainWorkPlace.data.organization.fetch();\n    }\n    else if (additionalWorkPlace \u0026\u0026 additionalWorkPlace.data.organization) {\n        organization = await additionalWorkPlace.data.organization.fetch();\n    }\n    else {\n        Context.data.sign_type = Context.fields.sign_type.variants.null;\n        return;\n    }\n    ;\n    const signType = organization.data.sign_provider;\n    signVariants = organization.fields.sign_provider.variants;\n    if (signType) {\n        if (checkModuleCodes(\"all\") \u0026\u0026 (checkSignVariants(signVariants.sign_me, signType) || checkSignVariants(signVariants.kontur, signType)) \u0026\u0026 checkSignVariants(signVariants.goskey, signType) \u0026\u0026 organization.data.leave_choice_to_staff) {\n            if (staff.data.docs_signing_type) {\n                const staffSignVariants = staff.fields.docs_signing_type.variants;\n                Context.data.debug = \"staff choice\";\n                switch (true) {\n                    case (checkModuleCodes(\"goskey\") || checkModuleCodes(\"all\")) \u0026\u0026 staff.data.docs_signing_type.code === staffSignVariants.goskey.code:\n                        Context.data.sign_type = Context.fields.sign_type.variants.goskey;\n                        break;\n                    case (checkModuleCodes(\"inner_sign\") || checkModuleCodes(\"all\")) \u0026\u0026 staff.data.docs_signing_type.code === staffSignVariants.inner_sign.code:\n                        Context.data.sign_type = Context.fields.sign_type.variants.inner_sign;\n                        break;\n                    case checkModuleCodes(\"all\") \u0026\u0026 staff.data.docs_signing_type.code === staffSignVariants.make_choice.code:\n                        Context.data.sign_type = Context.fields.sign_type.variants.staff_choice;\n                        break;\n                }\n                ;\n                return;\n            }\n        }\n        else if (checkModuleCodes(\"all\") \u0026\u0026 (checkSignVariants(signVariants.sign_me, signType) || checkSignVariants(signVariants.kontur, signType)) \u0026\u0026 checkSignVariants(signVariants.goskey, signType) \u0026\u0026 !organization.data.leave_choice_to_staff) {\n            const variantCode = organization.data.sign_provider[0].code;\n            switch (variantCode) {\n                case \"sign_me\":\n                case \"kontur\":\n                    Context.data.debug = \"test\";\n                    Context.data.sign_type = Context.fields.sign_type.variants.inner_sign;\n                    break;\n                case \"goskey\":\n                    Context.data.sign_type = Context.fields.sign_type.variants.goskey;\n                    break;\n            }\n            ;\n            return;\n        }\n        else if ((checkModuleCodes(\"inner_sign\") || checkModuleCodes(\"all\")) \u0026\u0026 (checkSignVariants(signVariants.kontur, signType) || checkSignVariants(signVariants.sign_me, signType))) {\n            Context.data.sign_type = Context.fields.sign_type.variants.inner_sign;\n            return;\n        }\n        else if ((checkModuleCodes(\"goskey\") || checkModuleCodes(\"all\")) \u0026\u0026 checkSignVariants(signVariants.goskey, signType)) {\n            Context.data.sign_type = Context.fields.sign_type.variants.goskey;\n            return;\n        }\n        ;\n    }\n    else if (staff.data.docs_signing_type) {\n        if ((checkModuleCodes(\"goskey\") || checkModuleCodes(\"all\")) \u0026\u0026 staff.data.docs_signing_type == staff.fields.docs_signing_type.variants.goskey) {\n            Context.data.sign_type = Context.fields.sign_type.variants.goskey;\n            return;\n        }\n        else if ((checkModuleCodes(\"inner_sign\") || checkModuleCodes(\"all\")) \u0026\u0026 staff.data.docs_signing_type == staff.fields.docs_signing_type.variants.inner_sign) {\n            Context.data.sign_type = Context.fields.sign_type.variants.inner_sign;\n            return;\n        }\n        else if (checkModuleCodes(\"all\") \u0026\u0026 staff.data.docs_signing_type == staff.fields.docs_signing_type.variants.make_choice) {\n            Context.data.sign_type = Context.fields.sign_type.variants.staff_choice;\n            return;\n        }\n        ;\n    }\n    ;\n}\n;\nasync function runGoskeyProcess() {\n    const staff = await Context.data.staff.fetch();\n    const snils = staff.data.snils;\n    const goskeyFiles = Context.data.goskey_docs.map(item =\u003e {\n        return {\n            namespace: item.namespace,\n            code: item.code,\n            id: item.id\n        };\n    });\n    const userId = staff.data.ext_user.id;\n    const baseUrl = System.getBaseUrl();\n    const tokenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n    const token = tokenSetting.data.value;\n    const packageName = Context.data.package_name;\n    let runProcessResponse;\n    runProcessResponse = await fetch(`${baseUrl}/pub/v1/bpm/template/ext_7fb0a0d0-fc8d-452e-843f-6a7f2f28a8bf/send_docs_to_goskey/run`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n            context: {\n                snils,\n                docs_for_sign: goskeyFiles,\n                user: [\n                    userId\n                ],\n                docs_description: packageName\n            }\n        })\n    });\n    if (!runProcessResponse.ok) {\n        throw new Error(`Ошибка при запуске процесса: ${await runProcessResponse.text()}`);\n    }\n    ;\n    const processJson = await runProcessResponse.json();\n    const processId = processJson.context.__id;\n    Context.data.process_id = processId;\n}\n;\nasync function checkProcessState() {\n    const processId = Context.data.process_id;\n    const baseUrl = System.getBaseUrl();\n    const tokenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n    const token = tokenSetting.data.value;\n    const response = await fetch(`${baseUrl}/pub/v1/bpm/instance/${processId}/get`, {\n        headers: {\n            Authorization: `Bearer ${token}`\n        }\n    });\n    if (!response.ok) {\n        throw new Error(`error: ${await response.text()}`);\n    }\n    ;\n    const responseJson = await response.json();\n    if (responseJson.data.__state === ProcessInstanceState.done) {\n        Context.data.sign_rejected = !responseJson.data.docs_signed;\n        Context.data.inner_sign_choose = responseJson.data.inner_sign_choose;\n        Context.data.sign_object = responseJson.data.sign_object;\n        Context.data.process_end = true;\n    }\n    ;\n}\n;\nfunction checkModuleCodes(code) {\n    return moduleCodes.indexOf(code) !== -1;\n}\n;\nfunction checkSignVariants(variant, providers) {\n    return providers.map(p =\u003e p.code).indexOf(variant.code) !== -1;\n}\n;\nasync function setDocSigns() {\n    const signObjArray = JSON.parse(Context.data.sign_object);\n    const docs = await Promise.all(Context.data.goskey_docs.map(doc =\u003e doc.fetch()));\n    for (let item of signObjArray) {\n        const currentDoc = docs.find(doc =\u003e doc.id === item.docId);\n        const signData = await currentDoc.getDataSigns();\n        const fileHash = signData.find(s =\u003e s.type === \"file\").body;\n        const newSign = {\n            sign: item.sign,\n            body: fileHash,\n            codeProvider: \"Goskey\"\n        };\n        await currentDoc.uploadSign(newSign);\n    }\n    ;\n}\n;\n","gatewayPairs":{},"hasTranslations":false}
