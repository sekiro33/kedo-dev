{"scripts":"async function fillContext() {\n    if (Context.data.table_staff \u0026\u0026 Context.data.table_staff.length \u003e 0) {\n        Context.data.is_table = true;\n    }\n}\nasync function updateListPrevPositions(actual_list_staffs, old_list_staffs, staff) {\n    if (actual_list_staffs \u0026\u0026 actual_list_staffs.length \u003e 0) {\n        const length = actual_list_staffs.length;\n        for (let index = 0; index \u003c length; index++) {\n            if (actual_list_staffs[index].id == staff.id) {\n                actual_list_staffs.splice(index, 1);\n            }\n        }\n    }\n    old_list_staffs.push(staff);\n    return {\n        actual_list_staffs: actual_list_staffs,\n        old_list_staffs: old_list_staffs\n    };\n}\nasync function updatePrevPositionSingle() {\n    var _a, _b, _c, _d, _e, _f;\n    if (!Context.data.processed_staff) {\n        throw new Error('Отсутствует переводимый сотрудник');\n    }\n    if (!Context.data.employment_directory_processed_staff) {\n        throw new Error('Отсутсвует приложение справочника занятости сотрудника');\n    }\n    const staff = await Context.data.processed_staff.fetch();\n    const employment_directory = await Context.data.employment_directory_processed_staff.fetch();\n    if (staff \u0026\u0026 employment_directory) {\n        if (!employment_directory.data.position) {\n            throw new Error('Отсутствует позиция в приложении справочника занятости сотрудника');\n        }\n        if (!employment_directory.data.type_employment) {\n            throw new Error('Отсутствует тип занятости в приложении справочника занятости сотрудника');\n        }\n        let position = await employment_directory.data.position.fetch();\n        switch (employment_directory.data.type_employment.code) {\n            case \"main_workplace\": {\n                if (Context.data.is_restore_position === true \u0026\u0026 Context.data.new_position) {\n                    position = await Context.data.new_position.fetch();\n                }\n                const list_staffs = await updateListPrevPositions((_a = position.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : [], (_b = position.data.old_staff) !== null \u0026\u0026 _b !== void 0 ? _b : [], staff);\n                position.data.staff = list_staffs.actual_list_staffs;\n                position.data.old_staff = list_staffs.old_list_staffs;\n                await position.save();\n                break;\n            }\n            case \"internal_combination\": {\n                if (Context.data.is_restore_position === true \u0026\u0026 Context.data.new_position) {\n                    position = await Context.data.new_position.fetch();\n                }\n                const list_staffs = await updateListPrevPositions((_c = position.data.staff_internal_combination) !== null \u0026\u0026 _c !== void 0 ? _c : [], (_d = position.data.old_staff_internal_combination) !== null \u0026\u0026 _d !== void 0 ? _d : [], staff);\n                position.data.staff_internal_combination = list_staffs.actual_list_staffs;\n                position.data.old_staff_internal_combination = list_staffs.old_list_staffs;\n                await position.save();\n                break;\n            }\n            case \"external_combination\": {\n                if (Context.data.is_restore_position === true \u0026\u0026 Context.data.new_position) {\n                    position = await Context.data.new_position.fetch();\n                }\n                const list_staffs = await updateListPrevPositions((_e = position.data.staff_external_combination) !== null \u0026\u0026 _e !== void 0 ? _e : [], (_f = position.data.old_staff_external_combination) !== null \u0026\u0026 _f !== void 0 ? _f : [], staff);\n                position.data.staff_external_combination = list_staffs.actual_list_staffs;\n                position.data.old_staff_external_combination = list_staffs.old_list_staffs;\n                await position.save();\n                break;\n            }\n        }\n    }\n}\nasync function updateListStaffs(staff, actual_list_staff, old_list_staffs) {\n    if (old_list_staffs \u0026\u0026 old_list_staffs.length \u003e 0) {\n        const length = old_list_staffs.length;\n        for (let index = 0; index \u003c length; index++) {\n            if (old_list_staffs[index].id == staff.id) {\n                old_list_staffs.splice(index, 1);\n            }\n        }\n    }\n    actual_list_staff.push(staff);\n    return {\n        old_list_staffs: old_list_staffs,\n        actual_list_staff: actual_list_staff,\n    };\n}\nasync function updateNewPositionSingle() {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    if (!Context.data.new_position) {\n        throw new Error('Отсутствует позиция на которую требуется перевод сотрудника');\n    }\n    if (!Context.data.processed_staff) {\n        throw new Error('Отсутствует переводимый сотрудник');\n    }\n    if (!Context.data.employment_directory_processed_staff) {\n        throw new Error('Отсутствует приложение места занятости сотрудника');\n    }\n    let new_position = await Context.data.new_position.fetch();\n    const staff = await Context.data.processed_staff.fetch();\n    const employment_directory = await Context.data.employment_directory_processed_staff.fetch();\n    if (employment_directory \u0026\u0026 employment_directory.data.type_employment) {\n        switch (employment_directory.data.type_employment.code) {\n            case \"main_workplace\": {\n                if (Context.data.is_restore_position === true \u0026\u0026 employment_directory.data.position) {\n                    new_position = await employment_directory.data.position.fetch();\n                }\n                const old_position = await ((_a = staff.data.position) === null || _a === void 0 ? void 0 : _a.fetch());\n                if (old_position) {\n                    old_position.data.staff = ((_b = old_position.data.staff) !== null \u0026\u0026 _b !== void 0 ? _b : []).filter(f =\u003e f.id !== staff.id);\n                    old_position.data.old_staff = [...((_c = old_position.data.old_staff) !== null \u0026\u0026 _c !== void 0 ? _c : []), staff];\n                    await old_position.save();\n                }\n                const lists_staffs = await updateListStaffs(staff, (_d = new_position.data.staff) !== null \u0026\u0026 _d !== void 0 ? _d : [], (_e = new_position.data.old_staff) !== null \u0026\u0026 _e !== void 0 ? _e : []);\n                new_position.data.staff = lists_staffs.actual_list_staff;\n                new_position.data.old_staff = lists_staffs.old_list_staffs;\n                await new_position.save();\n                break;\n            }\n            case \"internal_combination\": {\n                if (Context.data.is_restore_position === true \u0026\u0026 employment_directory.data.position) {\n                    new_position = await employment_directory.data.position.fetch();\n                }\n                const lists_staffs = await updateListStaffs(staff, (_f = new_position.data.staff_internal_combination) !== null \u0026\u0026 _f !== void 0 ? _f : [], (_g = new_position.data.old_staff_internal_combination) !== null \u0026\u0026 _g !== void 0 ? _g : []);\n                new_position.data.staff_internal_combination = lists_staffs.actual_list_staff;\n                new_position.data.old_staff_internal_combination = lists_staffs.old_list_staffs;\n                await new_position.save();\n                break;\n            }\n            case \"external_combination\": {\n                if (Context.data.is_restore_position === true \u0026\u0026 employment_directory.data.position) {\n                    new_position = await employment_directory.data.position.fetch();\n                }\n                const lists_staffs = await updateListStaffs(staff, (_h = new_position.data.staff_external_combination) !== null \u0026\u0026 _h !== void 0 ? _h : [], (_j = new_position.data.old_staff_external_combination) !== null \u0026\u0026 _j !== void 0 ? _j : []);\n                new_position.data.staff_external_combination = lists_staffs.actual_list_staff;\n                new_position.data.old_staff_external_combination = lists_staffs.old_list_staffs;\n                await new_position.save();\n                break;\n            }\n        }\n    }\n}\nconst fff = Namespace.processes.update_staffing_table;\nasync function updatePrevPositionTable() {\n    if (!Context.data.table_staff || Context.data.table_staff.length == 0) {\n        throw new Error('Таблица сотрудников пуста');\n    }\n    const staffs_ids = Context.data.table_staff.map(f =\u003e f.staffs.id);\n    let staffs_data_array = [];\n    if (staffs_ids \u0026\u0026 staffs_ids.length \u003e 0) {\n        staffs_data_array = await Context.fields.staff.app.search()\n            .where(f =\u003e f.__id.in(staffs_ids))\n            .size(staffs_ids.length)\n            .all();\n    }\n    const employment_directory_ids = Context.data.table_staff.map(f =\u003e f.employment_directory.id);\n    let employment_directory = [];\n    if (employment_directory_ids \u0026\u0026 employment_directory_ids.length \u003e 0) {\n        employment_directory = await Context.fields.employment_directory.app.search()\n            .where(f =\u003e f.__id.in(employment_directory_ids))\n            .size(employment_directory_ids.length)\n            .all();\n    }\n    let position = [];\n    if (employment_directory \u0026\u0026 employment_directory.length \u003e 0) {\n        const position_ids = employment_directory.map(f =\u003e f.data.position.id);\n        if (position_ids \u0026\u0026 position_ids.length \u003e 0) {\n            position = await Context.fields.position.app.search()\n                .where(f =\u003e f.__id.in(position_ids))\n                .size(position_ids.length)\n                .all();\n        }\n    }\n    if (position \u0026\u0026 position.length \u003e 0) {\n        let promises = [];\n        let update_position;\n        if (Context.data.new_position) {\n            update_position = await Context.data.new_position.fetch();\n        }\n        for (let row of Context.data.table_staff) {\n            const place = employment_directory.find(f =\u003e f.id == row.employment_directory.id);\n            if (place \u0026\u0026 place.data.type_employment) {\n                const prev_position_staff = position.find(f =\u003e f.id == place.data.position.id);\n                const staff = staffs_data_array.find(f =\u003e f.id == place.data.staff.id);\n                switch (place.data.type_employment.code) {\n                    case \"main_workplace\": {\n                        if (Context.data.is_restore_position === true) {\n                            Context.data.debug = 'Временный перевод основной';\n                            if (staff \u0026\u0026 update_position \u0026\u0026 update_position.data.staff \u0026\u0026 update_position.data.staff.length \u003e 0) {\n                                const length = update_position.data.staff.length;\n                                for (let index = 0; index \u003c length; index++) {\n                                    if (update_position.data.staff[index].id == staff.id) {\n                                        update_position.data.staff.splice(index, 1);\n                                    }\n                                }\n                                if (!update_position.data.old_staff) {\n                                    update_position.data.old_staff = [];\n                                }\n                                update_position.data.old_staff.push(staff);\n                                promises.push(update_position.save());\n                            }\n                        }\n                        else {\n                            if (staff \u0026\u0026 prev_position_staff \u0026\u0026 prev_position_staff.data.staff \u0026\u0026 prev_position_staff.data.staff.length \u003e 0) {\n                                const length = prev_position_staff.data.staff.length;\n                                for (let index = 0; index \u003c length; index++) {\n                                    if (prev_position_staff.data.staff[index].id == staff.id) {\n                                        prev_position_staff.data.staff.splice(index, 1);\n                                    }\n                                }\n                                if (!prev_position_staff.data.old_staff) {\n                                    prev_position_staff.data.old_staff = [];\n                                }\n                                prev_position_staff.data.old_staff.push(staff);\n                                promises.push(prev_position_staff.save());\n                            }\n                        }\n                        break;\n                    }\n                    case \"internal_combination\": {\n                        if (Context.data.is_restore_position === true) {\n                            Context.data.debug = 'Временный перевод внутренний';\n                            if (staff \u0026\u0026 update_position \u0026\u0026 update_position.data.staff_internal_combination \u0026\u0026 update_position.data.staff_internal_combination.length \u003e 0) {\n                                const length = update_position.data.staff_internal_combination.length;\n                                for (let index = 0; index \u003c length; index++) {\n                                    if (update_position.data.staff_internal_combination[index].id == staff.id) {\n                                        update_position.data.staff_internal_combination.splice(index, 1);\n                                    }\n                                }\n                                if (!update_position.data.old_staff_internal_combination) {\n                                    update_position.data.old_staff_internal_combination = [];\n                                }\n                                update_position.data.old_staff_internal_combination.push(staff);\n                                promises.push(update_position.save());\n                            }\n                        }\n                        else {\n                            if (staff \u0026\u0026 prev_position_staff \u0026\u0026 prev_position_staff.data.staff_internal_combination \u0026\u0026 prev_position_staff.data.staff_internal_combination.length \u003e 0) {\n                                const length = prev_position_staff.data.staff_internal_combination.length;\n                                for (let index = 0; index \u003c length; index++) {\n                                    if (prev_position_staff.data.staff_internal_combination[index].id == staff.id) {\n                                        prev_position_staff.data.staff_internal_combination.splice(index, 1);\n                                    }\n                                }\n                                if (!prev_position_staff.data.old_staff_internal_combination) {\n                                    prev_position_staff.data.old_staff_internal_combination = [];\n                                }\n                                prev_position_staff.data.old_staff_internal_combination.push(staff);\n                                promises.push(prev_position_staff.save());\n                            }\n                        }\n                        break;\n                    }\n                    case \"external_combination\": {\n                        if (Context.data.is_restore_position === true) {\n                            Context.data.debug = 'Временный перевод внешний';\n                            if (staff \u0026\u0026 update_position \u0026\u0026 update_position.data.staff_external_combination \u0026\u0026 update_position.data.staff_external_combination.length \u003e 0) {\n                                const length = update_position.data.staff_external_combination.length;\n                                for (let index = 0; index \u003c length; index++) {\n                                    if (update_position.data.staff_external_combination[index].id == staff.id) {\n                                        update_position.data.staff_external_combination.splice(index, 1);\n                                    }\n                                }\n                                if (!update_position.data.old_staff_external_combination) {\n                                    update_position.data.old_staff_external_combination = [];\n                                }\n                                update_position.data.old_staff_external_combination.push(staff);\n                                promises.push(update_position.save());\n                            }\n                        }\n                        else {\n                            if (staff \u0026\u0026 prev_position_staff \u0026\u0026 prev_position_staff.data.staff_external_combination \u0026\u0026 prev_position_staff.data.staff_external_combination.length \u003e 0) {\n                                const length = prev_position_staff.data.staff_external_combination.length;\n                                for (let index = 0; index \u003c length; index++) {\n                                    if (prev_position_staff.data.staff_external_combination[index].id == staff.id) {\n                                        prev_position_staff.data.staff_external_combination.splice(index, 1);\n                                    }\n                                }\n                                if (!prev_position_staff.data.old_staff_external_combination) {\n                                    prev_position_staff.data.old_staff_external_combination = [];\n                                }\n                                prev_position_staff.data.old_staff_external_combination.push(staff);\n                                promises.push(prev_position_staff.save());\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n            if (promises.length \u003e 20) {\n                await Promise.all(promises);\n                promises = [];\n            }\n        }\n        await Promise.all(promises);\n    }\n}\nasync function updateNewPositionTable() {\n    var _a;\n    if (!Context.data.table_staff || Context.data.table_staff.length == 0 || !Context.data.new_position) {\n        throw new Error('Таблица переводимых сотрудников пуста, или отсутствует позиция, на которую требуется перевести сотрудника(-ов)');\n    }\n    const staffs_ids = Context.data.table_staff.map(f =\u003e f.staffs.id);\n    let staffs_data_array = [];\n    if (staffs_ids \u0026\u0026 staffs_ids.length \u003e 0) {\n        staffs_data_array = await Context.fields.staff.app.search()\n            .where(f =\u003e f.__id.in(staffs_ids))\n            .size(staffs_ids.length)\n            .all();\n    }\n    const employment_directory_ids = Context.data.table_staff.map(f =\u003e f.employment_directory.id);\n    let employment_directory = [];\n    if (employment_directory_ids \u0026\u0026 employment_directory_ids.length \u003e 0) {\n        employment_directory = await Context.fields.employment_directory.app.search()\n            .where(f =\u003e f.__id.in(employment_directory_ids))\n            .size(employment_directory_ids.length)\n            .all();\n    }\n    let position = [];\n    if (employment_directory \u0026\u0026 employment_directory.length \u003e 0) {\n        const position_ids = [\n            ...employment_directory.filter(f =\u003e f.data.position != undefined).map(f =\u003e f.data.position.id),\n            ...staffs_data_array.filter(f =\u003e f.data.position != undefined).map(f =\u003e f.data.position.id),\n        ];\n        if (position_ids \u0026\u0026 position_ids.length \u003e 0) {\n            position = await Context.fields.position.app.search()\n                .where(f =\u003e f.__id.in(position_ids))\n                .size(position_ids.length)\n                .all();\n        }\n    }\n    let new_position = await Context.data.new_position.fetch();\n    let promises = [];\n    for (let row of Context.data.table_staff) {\n        const type_employment = employment_directory.find(f =\u003e f.id == row.employment_directory.id);\n        const staff = staffs_data_array.find(f =\u003e f.id == row.staffs.id);\n        if (type_employment \u0026\u0026 type_employment.data.type_employment \u0026\u0026 staff) {\n            switch (type_employment.data.type_employment.code) {\n                case \"main_workplace\": {\n                    if (Context.data.is_restore_position === true) {\n                        const prev_position = position.find(f =\u003e f.id == type_employment.data.position.id);\n                        if (prev_position)\n                            new_position = prev_position;\n                    }\n                    const main_position = position.find(f =\u003e { var _a; return f.id === ((_a = staff.data.position) === null || _a === void 0 ? void 0 : _a.id); });\n                    if (main_position) {\n                        main_position.data.staff = ((_a = main_position.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : []).filter(f =\u003e f.id !== staff.id);\n                    }\n                    if (new_position) {\n                        if (!new_position.data.staff || new_position.data.staff.length == 0) {\n                            new_position.data.staff = [];\n                        }\n                        if (new_position.data.old_staff \u0026\u0026 new_position.data.old_staff.length \u003e 0) {\n                            const length = new_position.data.old_staff.length;\n                            for (let index = 0; index \u003c length; index++) {\n                                if (new_position.data.old_staff[index].id == staff.id) {\n                                    new_position.data.old_staff.splice(index, 1);\n                                }\n                            }\n                        }\n                        new_position.data.staff.push(staff);\n                        promises.push((async function () {\n                            if (main_position) {\n                                await main_position.save();\n                            }\n                            await new_position.save();\n                        })());\n                    }\n                    break;\n                }\n                case \"internal_combination\": {\n                    if (Context.data.is_restore_position === true) {\n                        const prev_position = position.find(f =\u003e f.id == type_employment.data.position.id);\n                        if (prev_position)\n                            new_position = prev_position;\n                    }\n                    if (new_position) {\n                        if (!new_position.data.staff_internal_combination || new_position.data.staff_internal_combination.length == 0) {\n                            new_position.data.staff_internal_combination = [];\n                        }\n                        if (new_position.data.old_staff_internal_combination \u0026\u0026 new_position.data.old_staff_internal_combination.length \u003e 0) {\n                            const length = new_position.data.old_staff_internal_combination.length;\n                            for (let index = 0; index \u003c length; index++) {\n                                if (new_position.data.old_staff_internal_combination[index].id == staff.id) {\n                                    new_position.data.old_staff_internal_combination.splice(index, 1);\n                                }\n                            }\n                        }\n                        new_position.data.staff_internal_combination.push(staff);\n                        promises.push(new_position.save());\n                    }\n                    break;\n                }\n                case \"external_combination\": {\n                    if (Context.data.is_restore_position === true) {\n                        const prev_position = position.find(f =\u003e f.id == type_employment.data.position.id);\n                        if (prev_position)\n                            new_position = prev_position;\n                    }\n                    if (new_position) {\n                        if (!new_position.data.staff_external_combination || new_position.data.staff_external_combination.length == 0) {\n                            new_position.data.staff_external_combination = [];\n                        }\n                        if (new_position.data.old_staff_external_combination \u0026\u0026 new_position.data.old_staff_external_combination.length \u003e 0) {\n                            const length = new_position.data.old_staff_external_combination.length;\n                            for (let index = 0; index \u003c length; index++) {\n                                if (new_position.data.old_staff_external_combination[index].id == staff.id) {\n                                    new_position.data.old_staff_external_combination.splice(index, 1);\n                                }\n                            }\n                        }\n                        new_position.data.staff_external_combination.push(staff);\n                        promises.push(new_position.save());\n                    }\n                    break;\n                }\n            }\n        }\n        if (promises.length \u003e 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\n","gatewayPairs":{},"hasTranslations":false}
