{"scripts":"const iterationBatch = 50;\nasync function fillContext() {\n    Context.data.iteration_number = typeof Context.data.iteration_number === 'number' ? Context.data.iteration_number + 1 : 0;\n    const startSkip = iterationBatch * Context.data.iteration_number;\n    Context.data.url_positions = `InformationRegister_ЗанятостьПозицийШтатногоРасписания?$format=json\u0026$skip=${startSkip}\u0026$top=${iterationBatch}`;\n}\nasync function fillCurrentPositionsInfo() {\n    const positions = Context.data.response ? JSON.parse(Context.data.response) : undefined;\n    const employees = await Namespace.app.staff.search().all();\n    const positionApps = {};\n    if (!positions)\n        return;\n    if (positions.value.length \u003c iterationBatch) {\n        Context.data.end_iteration = true;\n    }\n    for (let i = 0; i \u003c positions.value.length; i++) {\n        let employeePosition = positions.value[i];\n        const employeeApp = employees.find((item) =\u003e {\n            return item.data.id_1c === employeePosition.RecordSet[employeePosition.RecordSet.length - 1][\"Сотрудник_Key\"];\n        });\n        Context.data.error += ` found user ${!!employeeApp}`;\n        if (!!employeeApp) {\n            let pos = positionApps[employeePosition.RecordSet[employeePosition.RecordSet.length - 1][\"ПозицияШтатногоРасписания_Key\"]];\n            let subdivision;\n            if (!pos) {\n                pos = await Namespace.app.position.search().where((f) =\u003e f.ref_key.eq(employeePosition.RecordSet[employeePosition.RecordSet.length - 1][\"ПозицияШтатногоРасписания_Key\"])).first();\n                if (!!pos) {\n                    positionApps[employeePosition.RecordSet[employeePosition.RecordSet.length - 1][\"ПозицияШтатногоРасписания_Key\"]] = pos;\n                }\n            }\n            subdivision = pos ? pos.data.subdivision : undefined;\n            employeeApp.data.position = pos;\n            employeeApp.data.structural_subdivision = subdivision;\n            await employeeApp.save();\n        }\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
