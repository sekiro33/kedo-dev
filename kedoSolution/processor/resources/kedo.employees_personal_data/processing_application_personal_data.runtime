{"scripts":"async function processingRows() {\n    Context.data.count_iteration++;\n    Context.data.is_main_workplace = false;\n    Context.data.is_internal_combination = false;\n    Context.data.is_external_combination = false;\n    if (!Context.data.staff) {\n        throw new Error(\"staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.employment_table) {\n        const row = staff.data.employment_table[Context.data.count_type_employment - 1];\n        Context.data.type_employment_string = row.type_employment.name;\n        Context.data.organization_employee = row.organization;\n        Context.data.place_employment = row.employment_placement_app;\n        Context.data.count_type_employment--;\n        if (row.type_employment.code == 'main_workplace') {\n            Context.data.is_main_workplace = true;\n        }\n        if (row.type_employment.code == 'internal_combination') {\n            Context.data.is_internal_combination = true;\n            Context.data.is_internal_place = true;\n        }\n        if (row.type_employment.code == 'external_combination') {\n            Context.data.is_external_combination = true;\n        }\n        if (Context.data.is_internal_place === true \u0026\u0026 Context.data.is_external_combination === false) {\n            Context.data.type_employment_string = `Основное место работы и внутреннее(-ие) совместительство(-а)`;\n        }\n        if (Context.data.count_type_employment == 0) {\n            Context.data.isEmployeeProcessed = true;\n        }\n        else {\n            Context.data.isEmployeeProcessed = false;\n        }\n    }\n}\nasync function processingTable() {\n    if (!Context.data.staff) {\n        throw new Error(\"staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    if (staff.data.employment_table) {\n        Context.data.count_type_employment = staff.data.employment_table.length;\n    }\n}\nasync function fillingContext() {\n    let user = await System.users.getCurrentUser();\n    Context.data.staff = await Context.fields.staff.app.search().where(f =\u003e f.ext_user.eq(user)).first();\n}\nasync function initializingAdditionalVariables() {\n    if (Context.data.type_personal_data) {\n        const type_data = await Context.data.type_personal_data.fetch();\n        Context.fields.category_type_personal_data.data.variants.push({ code: type_data.data.code, name: type_data.data.name });\n        Context.data.category_type_personal_data = Context.fields.category_type_personal_data.data.variants.find(f =\u003e f.code == type_data.data.code);\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
