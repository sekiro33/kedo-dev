{"scripts":"var CombinationType;\n(function (CombinationType) {\n    CombinationType[CombinationType[\"EXPANSION_SERVICE_AREAS\"] = 0] = \"EXPANSION_SERVICE_AREAS\";\n    CombinationType[CombinationType[\"PERFOMANCE_DUTIES\"] = 1] = \"PERFOMANCE_DUTIES\";\n    CombinationType[CombinationType[\"PROFESSIONAL_DUTIES\"] = 2] = \"PROFESSIONAL_DUTIES\";\n})(CombinationType || (CombinationType = {}));\nvar SurchargeType;\n(function (SurchargeType) {\n    SurchargeType[SurchargeType[\"FIXED_AMOUNT\"] = 0] = \"FIXED_AMOUNT\";\n    SurchargeType[SurchargeType[\"COMBINATION_PERCENT\"] = 1] = \"COMBINATION_PERCENT\";\n    SurchargeType[SurchargeType[\"MAIN_POSITION_PERCENT\"] = 2] = \"MAIN_POSITION_PERCENT\";\n})(SurchargeType || (SurchargeType = {}));\nasync function getKedoSettings() {\n    const codes = [\n        \"use_alternative_integration\",\n    ];\n    const settings = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.in(codes)))\n        .size(codes.length)\n        .all();\n    const alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n}\nasync function getStaffData(employment) {\n    var _a, _b, _c, _d, _e;\n    if (!employment.data.staff) {\n        throw new Error(\"employment_place.data.staff is undefined\");\n    }\n    const staff = await employment.data.staff.fetch();\n    if (!employment.data.organization) {\n        throw new Error(\"employment.data.organization is undefined\");\n    }\n    if (!employment.data.position) {\n        throw new Error(\"employment.data.position is undefined\");\n    }\n    if (!employment.data.subdivision) {\n        throw new Error(\"employment.data.structural_subdivision is undefined\");\n    }\n    const [position, organization, structural_subdivision] = await Promise.all([\n        employment.data.position.fetch(),\n        employment.data.organization.fetch(),\n        employment.data.subdivision.fetch(),\n    ]);\n    const staff_data = {\n        name: staff.data.__name,\n        id_1c: (_a = employment.data.id_1c) !== null \u0026\u0026 _a !== void 0 ? _a : \"\",\n        individual_id_1c: (_b = staff.data.individual_id_1c) !== null \u0026\u0026 _b !== void 0 ? _b : \"\",\n        position_id: (_c = position.data.ref_key) !== null \u0026\u0026 _c !== void 0 ? _c : \"\",\n        organization_id: (_d = organization.data.ref_key) !== null \u0026\u0026 _d !== void 0 ? _d : \"\",\n        structural_subdivision_id: (_e = structural_subdivision.data.ref_key) !== null \u0026\u0026 _e !== void 0 ? _e : \"\",\n    };\n    return staff_data;\n}\nfunction getSurchargeType(surcharge_code) {\n    switch (surcharge_code) {\n        case \"fixed_amount\": {\n            return SurchargeType.FIXED_AMOUNT;\n        }\n        case \"percen_combination\": {\n            return SurchargeType.COMBINATION_PERCENT;\n        }\n        case \"percent_main_position\": {\n            return SurchargeType.MAIN_POSITION_PERCENT;\n        }\n        default: {\n            throw new Error(\"Незивестный вид доплаты\");\n        }\n    }\n}\nfunction getCombinationType(combination_code) {\n    switch (combination_code) {\n        case \"combining_positions\": {\n            return CombinationType.PROFESSIONAL_DUTIES;\n        }\n        case \"expansion_service_areas\": {\n            return CombinationType.EXPANSION_SERVICE_AREAS;\n        }\n        case \"performance_employee_duties\": {\n            return CombinationType.PERFOMANCE_DUTIES;\n        }\n        default: {\n            throw new Error(\"Незивестный вид совмещения\");\n        }\n    }\n}\nasync function prepare1cData() {\n    var _a, _b;\n    if (!Context.data.execution_duties) {\n        throw new Error(\"Context.data.execution_duties is undefined\");\n    }\n    const execution_duties = await Context.data.execution_duties.fetch();\n    if (!execution_duties.data.start_day_line || !execution_duties.data.end_date_line) {\n        throw new Error(\"Не указаны даты совмещения; start_day_line or end_date_line is undefined\");\n    }\n    if (!execution_duties.data.staff_employment_placement) {\n        throw new Error(\"Не указано место занятости отсутствующего сотрудника\");\n    }\n    if (!execution_duties.data.type_combination) {\n        throw new Error(\"Не указан тип совмещения\");\n    }\n    const start_date = new Datetime(execution_duties.data.start_day_line, 'DD.MM.YYYY');\n    const end_date = new Datetime(execution_duties.data.end_date_line, 'DD.MM.YYYY');\n    const staff_employment_placement = await execution_duties.data.staff_employment_placement.fetch();\n    const staff_data = await getStaffData(staff_employment_placement);\n    const combination_type_app = await execution_duties.data.type_combination.fetch();\n    const combination_type = getCombinationType((_a = combination_type_app.data.code) !== null \u0026\u0026 _a !== void 0 ? _a : \"\");\n    const inf_about_acting = execution_duties.data.inf_about_acting;\n    if (!inf_about_acting || inf_about_acting.length == 0) {\n        throw new Error(`Таблица \"Информация о совмещении\" не заполнена`);\n    }\n    const inf_about_acting_data = [];\n    for (const row of inf_about_acting) {\n        const staff_data = await getStaffData(await row.substitute_employment_placement.fetch());\n        inf_about_acting_data.push({\n            staff: staff_data,\n            surcharge_type: getSurchargeType(row.type_surcharge.code),\n            sum: (_b = row.percent) !== null \u0026\u0026 _b !== void 0 ? _b : 0,\n        });\n    }\n    const execution_duties_data = {\n        name: execution_duties.data.__name,\n        absent_staff: staff_data,\n        replacement_staff: inf_about_acting_data[0].staff,\n        surcharge_type: inf_about_acting_data[0].surcharge_type,\n        percent: inf_about_acting_data[0].sum,\n        combination_type: combination_type,\n        start_date: start_date.format(\"YYYY-MM-DDT00:00:00\"),\n        end_date: end_date.format(\"YYYY-MM-DDT00:00:00\"),\n    };\n    Context.data.combination_data = JSON.stringify(execution_duties_data);\n}\nasync function prepare_data_1c() {\n    if (Context.data.execution_duties) {\n        const execution_duties = await Context.data.execution_duties.fetch();\n        const start_date = new Datetime(execution_duties.data.start_day_line, 'DD.MM.YYYY');\n        const end_date = new Datetime(execution_duties.data.end_date_line, 'DD.MM.YYYY');\n        Context.data.start_date_1c = start_date.format('YYYY-MM-DD');\n        Context.data.end_date_1c = end_date.format('YYYY-MM-DD');\n        let substitute_staff = execution_duties.data.substitute;\n        if (!substitute_staff) {\n            const table = execution_duties.data.inf_about_acting;\n            if (table \u0026\u0026 table.length \u003e 0) {\n                const row = table[0];\n                substitute_staff = row.substitute;\n                Context.data.type_surcharge = row.type_surcharge;\n                Context.data.percent = row.percent;\n            }\n        }\n        Context.data.substitute_staff = substitute_staff;\n    }\n}\nasync function get_integration_app() {\n    if (!Context.data.integration_app_id) {\n        Context.data.error = 'Отсутствует идентификатор приложения интеграции. Context.data.integration_app_id is undefined';\n        throw new Error(Context.data.error);\n    }\n    const integration_app = await Context.fields.integration_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(Context.data.integration_app_id))).first();\n    if (!integration_app) {\n        Context.data.error = `Не найдено приложение интеграции по заданому идентификатору: \"${Context.data.integration_app_id}\".`;\n        throw new Error(Context.data.error);\n    }\n    Context.data.integration_app = integration_app;\n}\nasync function check_print_forms_table_length() {\n    if (Context.data.print_forms_table \u0026\u0026 Context.data.print_forms_table.length \u003e 0) {\n        return true;\n    }\n    return false;\n}\nasync function check_table_length() {\n    if (!Context.data.print_forms_table[Context.data.table_counter]) {\n        return false;\n    }\n    return true;\n}\nasync function get_main_print_forms() {\n    const doc_types_1c = await Context.fields.document_type_1c.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const order_doc_type = doc_types_1c.filter(f =\u003e f.data.app_code == \"order_execution_responsibilities\");\n    const additional_agreement_doc_type = doc_types_1c.filter(f =\u003e f.data.app_code == \"execution_responsibilities_additional_agreement\");\n    if (!order_doc_type) {\n        Context.data.error = `Вид документа, соответствующий приказу на ИО не найден.`;\n        throw new Error(Context.data.error);\n    }\n    if (!additional_agreement_doc_type) {\n        Context.data.error = `Вид документа, соответствующий доп. соглашенюи на ИО не найден.`;\n        throw new Error(Context.data.error);\n    }\n    const print_forms_table = Context.data.print_forms_table;\n    for (let i = print_forms_table.length - 1; i \u003e= 0; i--) {\n        const row = print_forms_table[i];\n        if (order_doc_type.find(f =\u003e f.id == row.doc_type_1c.id)) {\n            Context.data.order_file = row.print_form;\n            print_forms_table.delete(i);\n            continue;\n        }\n        if (additional_agreement_doc_type.find(f =\u003e f.id == row.doc_type_1c.id)) {\n            Context.data.additional_file = row.print_form;\n            print_forms_table.delete(i);\n        }\n    }\n    if (!Context.data.order_file) {\n        Context.data.error = `В полученных печатных формах не найден файл приказа.`;\n        throw new Error(Context.data.error);\n    }\n    if (!Context.data.additional_file) {\n        Context.data.error = `В полученных печатных формах не найден файл доп. соглашения.`;\n        throw new Error(Context.data.error);\n    }\n}\nasync function get_print_form() {\n    if (Context.data.print_forms_table[Context.data.table_counter]) {\n        const row = Context.data.print_forms_table[Context.data.table_counter];\n        Context.data.print_form = row.print_form;\n        Context.data.document_type_1c = row.doc_type_1c;\n        Context.data.overdue_date = new Datetime().add(new Duration(24, 'hours'));\n    }\n    Context.data.table_counter += 1;\n}\nasync function checkTypeCombination() {\n    const execution_duties = await Context.data.execution_duties.fetch();\n    const execution_duties_type = await execution_duties.data.type_combination.fetch();\n    if (execution_duties_type.data.code == 'performance_employee_duties') {\n        return 1;\n    }\n    if (execution_duties_type.data.code == 'combining_positions') {\n        return 2;\n    }\n    return 3;\n}\n","gatewayPairs":{"/items/78d76ec6-7b1f-4058-b7a3-9dbc2bb84542":"/items/764b6232-0488-4b1c-a285-8b9b9cc87eae"},"hasTranslations":false}
