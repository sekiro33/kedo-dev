{"scripts":"async function fileds_get() {\n    Context.data.substitute = (await Context.data.substitute_staff.fetch()).data.ext_user;\n    if (!Context.data.execution_duties)\n        return;\n    let app = await Context.data.execution_duties.fetch();\n    if (!app.data.inf_about_acting)\n        return;\n    let row = app.data.inf_about_acting.find(f =\u003e f.substitute = Context.data.substitute_staff);\n    Context.data.percent = row === null || row === void 0 ? void 0 : row.percent;\n    if (row \u0026\u0026 row.type_surcharge.code == Context.fields.execution_duties.app.fields.inf_about_acting.fields.type_surcharge.variants.fixed_amount.code) {\n        Context.data.type_surcharge = 'руб';\n    }\n    else {\n        Context.data.type_surcharge = '%';\n    }\n}\nasync function getBossPositiion() {\n    if (Context.data.boss) {\n        const headApp = await Context.fields.substitute_staff.app.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(Context.data.boss)))\n            .first();\n        Context.data.director = headApp;\n        Context.data.boss_position = headApp.data.position;\n    }\n}\nasync function checkConsent() {\n    const app = await Context.data.execution_duties.fetch();\n    app.data.count_signatories = (app.data.count_signatories || 0) + 1;\n    if (app.data.execution_responsibilities_consent \u0026\u0026 app.data.execution_responsibilities_consent.length \u003e 0) {\n        app.data.execution_responsibilities_consent.push(Context.data.execution_responsibilities_consent);\n    }\n    else {\n        app.data.execution_responsibilities_consent = [];\n        app.data.execution_responsibilities_consent.push(Context.data.execution_responsibilities_consent);\n    }\n    await app.save();\n    if (app.data.count_signatories == app.data.total_number)\n        await app.setStatus(app.fields.__status.variants.signing_sz);\n}\nasync function check_kedo_agreement() {\n    let staff = await Context.data.substitute_staff.fetch();\n    if (staff.data.kedo_agreement == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function setStatusCancelled() {\n    if (!Context.data.execution_responsibilities_consent) {\n        throw new Error(\"Context.data.execution_responsibilities_consent is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.execution_responsibilities_consent.namespace,\n            code: Context.data.execution_responsibilities_consent.code,\n            id: Context.data.execution_responsibilities_consent.id,\n        },\n        status: \"cancelled\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusSigned() {\n    if (!Context.data.execution_responsibilities_consent) {\n        throw new Error(\"Context.data.execution_responsibilities_consent is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.execution_responsibilities_consent.namespace,\n            code: Context.data.execution_responsibilities_consent.code,\n            id: Context.data.execution_responsibilities_consent.id,\n        },\n        status: \"signed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusPaperSigned() {\n    if (!Context.data.execution_responsibilities_consent) {\n        throw new Error(\"Context.data.execution_responsibilities_consent is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.execution_responsibilities_consent.namespace,\n            code: Context.data.execution_responsibilities_consent.code,\n            id: Context.data.execution_responsibilities_consent.id,\n        },\n        status: \"paper_signed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusPaperSigning() {\n    if (!Context.data.execution_responsibilities_consent) {\n        throw new Error(\"Context.data.execution_responsibilities_consent is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.execution_responsibilities_consent.namespace,\n            code: Context.data.execution_responsibilities_consent.code,\n            id: Context.data.execution_responsibilities_consent.id,\n        },\n        status: \"signing\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function checkTypeCombination() {\n    const execution_duties = await Context.data.execution_duties.fetch();\n    const execution_duties_type = await execution_duties.data.type_combination.fetch();\n    if (execution_duties_type.data.code == 'performance_employee_duties') {\n        Context.data.doc_type = 'Согласие на замещение';\n        return 1;\n    }\n    if (execution_duties_type.data.code == 'combining_positions') {\n        Context.data.doc_type = 'Уведомление о замещении';\n        return 2;\n    }\n    Context.data.doc_type = 'Уведомление о замещении';\n    return 3;\n}\n","gatewayPairs":{},"hasTranslations":false}
