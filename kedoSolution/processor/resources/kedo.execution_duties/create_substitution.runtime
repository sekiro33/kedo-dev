{"scripts":"async function get_signatories_approvals() {\n    let app = await Context.data.execution_duties.fetch();\n    const users = await Promise.all(app.data.inf_about_acting.map(f =\u003e f.substitute.fetch()));\n    Context.data.substitute_staffs = users;\n    Context.data.substitutes = users.map(f =\u003e f.data.ext_user);\n    if (app.data.approval \u0026\u0026 app.data.approval.length \u003e 0) {\n        const approvals = await Promise.all(app.data.approval.map(f =\u003e f.fetch()));\n        Context.data.consonants = approvals.map(f =\u003e f.data.ext_user);\n    }\n    Context.data.counter = 0;\n    app.data.total_number = app.data.inf_about_acting.length;\n    app.data.count_signatories = 0;\n    await app.save();\n    const setting = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('director_signing')))\n        .first();\n    if (setting) {\n        Context.data.director_signing = setting.data.status;\n    }\n    if (app.data.type_combination) {\n        const type = await app.data.type_combination.fetch();\n        if (type.data.code == 'performance_employee_duties') {\n            Context.data.string_with_type_in_memo = 'возложить временное исполнение обязанностей';\n        }\n        if (type.data.code == 'combining_positions') {\n            Context.data.string_with_type_in_memo = 'поручить выполнение обязанностей в порядке совмещения должностей';\n        }\n        if (type.data.code == 'expansion_service_areas') {\n            Context.data.string_with_type_in_memo = 'поручить выполнение обязанностей в порядке расширения зон обслуживания';\n        }\n    }\n}\nasync function createReplacement() {\n    if (!Context.data.execution_duties) {\n        throw new Error(\"Context.data.execution_duties is undefined\");\n    }\n    const execution_duties = await Context.data.execution_duties.fetch();\n    const replacement_staff = await execution_duties.data.substitute.fetch();\n    const absent = await execution_duties.data.staff.fetch();\n    const newReplacement = System.replacements.create();\n    newReplacement.data.type = newReplacement.fields.type.variants.reassign;\n    newReplacement.data.absent = absent.data.ext_user;\n    newReplacement.data.replacement = replacement_staff.data.ext_user;\n    newReplacement.data.begin = Context.data.start_date;\n    newReplacement.data.end = Context.data.end_date;\n    await newReplacement.save();\n    execution_duties.data.replacement_id = newReplacement.id;\n    await execution_duties.save();\n    Context.data.alert_body = `Вас назначили как временно замещающего для сотрудника ${absent.data.__name} с ${execution_duties.data.start_day_line} по ${execution_duties.data.end_date_line}`;\n}\nasync function comment_get() {\n    const item = await Context.data.memo_execution.fetch();\n    const approvalLists = await item.docflow().getApprovalLists();\n    Context.data.comment = '';\n    let list = approvalLists[0];\n    let respondets = list.respondents;\n    for (let respondent of respondets) {\n        if (respondent.status == \"rejected\") {\n            Context.data.reject_comment = respondent.comment;\n            break;\n        }\n    }\n}\nasync function findHeadOrganization() {\n    const execution_duties = await Context.data.execution_duties.fetch();\n    const organization = await execution_duties.data.organization.fetch();\n    const position_head = await organization.data.position_head.fetch();\n    Context.data.director = position_head.data.staff[0];\n}\nasync function createDopDocs() {\n    if (!Context.data.inf_about_acting || Context.data.inf_about_acting.length == 0) {\n        return false;\n    }\n    const table_length = Context.data.inf_about_acting.length;\n    if (Context.data.counter \u003c table_length) {\n        const row = Context.data.inf_about_acting[Context.data.counter];\n        Context.data.sub_staff = row.substitute;\n        Context.data.alternate_employment_placement = row.substitute_employment_placement;\n        Context.data.counter++;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function check_kedo_agreement() {\n    if (Context.data.execution_duties) {\n        let app = await Context.data.execution_duties.fetch();\n        if (app.data.initiator) {\n            let staff = await app.data.initiator.fetch();\n            if (staff.data.kedo_agreement == true) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nasync function check_create_result() {\n    if (Context.data.execution_duties) {\n        let app = await Context.data.execution_duties.fetch();\n        if (app.data.create_result) {\n            if (app.data.create_result.code == app.fields.create_result.variants.cancel.code) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nasync function getSettings() {\n    const integration_1c = await Context.fields.settings_kedo.app.search()\n        .size(10000)\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('integration_1c')))\n        .first();\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const alternative_integration = await Context.fields.settings_kedo.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('use_alternative_integration')))\n        .first();\n    Context.data.use_alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n    const alternative_system = await Context.fields.settings_kedo.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('use_alternative_system')))\n        .first();\n    Context.data.use_alternative_system = alternative_system ? alternative_system.data.status : false;\n    const custom_generate_execution_duties = await Context.fields.settings_kedo.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('custom_generate_execution_duties')))\n        .first();\n    Context.data.custom_generate_execution_duties = custom_generate_execution_duties ? custom_generate_execution_duties.data.status : false;\n}\nasync function createStatusObj(app, status) {\n    const obj_status = {\n        'app': {\n            'namespace': app.namespace,\n            'code': app.code,\n            'id': app.id,\n        },\n        'status': status,\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function createStatusAppSigningApplication() {\n    createStatusObj(Context.data.execution_duties, 'signing_application');\n}\nasync function createStatusSigning() {\n    createStatusObj(Context.data.memo_execution, 'signing');\n}\nasync function createStatusAppPaperPrepare() {\n    createStatusObj(Context.data.execution_duties, 'paper_prepare');\n}\nasync function createStatusPaperPrepare() {\n    createStatusObj(Context.data.memo_execution, 'paper_prepare');\n}\nasync function createStatusAppApproval() {\n    createStatusObj(Context.data.execution_duties, 'approval');\n}\nasync function createStatusApproval() {\n    createStatusObj(Context.data.memo_execution, 'approval');\n}\nasync function createStatusAgreedSigned() {\n    createStatusObj(Context.data.memo_execution, 'agreed_signed');\n}\nasync function createStatusAppSigningConsent() {\n    createStatusObj(Context.data.execution_duties, 'signing_consent');\n}\nasync function createStatusAppCompleted() {\n    createStatusObj(Context.data.execution_duties, 'completed');\n}\nasync function createStatusAppCorrection() {\n    createStatusObj(Context.data.execution_duties, 'correction');\n}\nasync function createStatusCorrection() {\n    createStatusObj(Context.data.memo_execution, 'correction');\n}\nasync function createStatusAppCancelled() {\n    createStatusObj(Context.data.execution_duties, 'cancelled');\n}\nasync function createStatusCancelled() {\n    createStatusObj(Context.data.memo_execution, 'cancelled');\n}\nasync function createStatusAppAdditionalSigning() {\n    createStatusObj(Context.data.execution_duties, 'additional_signing');\n}\nasync function checkCombinationSuccess() {\n    const app = await Context.data.execution_duties.fetch();\n    if (app.data.combination_carried_out) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function checkNeedMemo() {\n    const app = await Context.data.execution_duties.fetch();\n    if (app.data.type_combination) {\n        const type_combination = await app.data.type_combination.fetch();\n        if (type_combination.data.need_memo == false) {\n            return false;\n        }\n    }\n    return true;\n}\nasync function getNoSignedStaff() {\n    const app = await Context.data.execution_duties.fetch();\n    if (app.data.inf_about_acting) {\n        const filtred_table = app.data.inf_about_acting.filter(f =\u003e f.doc_signed !== true);\n        Context.data.substitute_staffs = filtred_table.map(f =\u003e f.substitute);\n        Context.data.counter = Context.data.substitute_staffs.length;\n    }\n}\nasync function getDocumentsSubstitute() {\n    Context.data.documents = [];\n    const app = await Context.data.execution_duties.fetch();\n    if (Context.data.substitute_staffs \u0026\u0026 Context.data.counter) {\n        Context.data.sub_staff = Context.data.substitute_staffs[Context.data.counter - 1];\n        if (app.data.inf_about_acting) {\n            const row = app.data.inf_about_acting.find(f =\u003e f.substitute.id == Context.data.sub_staff.id);\n            if (row) {\n                Context.data.documents.push(row.order);\n                Context.data.documents.push(row.additional_agreement);\n                Context.data.documents = Context.data.documents;\n            }\n        }\n    }\n    Context.data.counter -= 1;\n}\n","gatewayPairs":{},"hasTranslations":false}
