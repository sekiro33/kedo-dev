{"scripts":"const signMeUrl = Namespace.params.data.sign_me_server_address;\nconst konturUrl = `${Namespace.params.data.kontur_server_address}/v1/issues`;\nconst apiKey = Context.data.api_key;\nconst requestId = Context.data.request_id;\nconst konturHeaders = {\n    \"X-KONTUR-APIKEY\": apiKey,\n    \"Content-Type\": \"application/json\"\n};\nasync function logData(response) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    let requestEndpoint = \"\";\n    let responseJson = {};\n    let responseText = \"\";\n    requestEndpoint = response.url.split(\"/\").slice(-1)[0];\n    switch (requestEndpoint) {\n        case \"activate\":\n            responseText = await response.text();\n            if (responseText.includes(\"1\")) {\n                Context.data.request_confirmed = true;\n            }\n            ;\n            break;\n        case requestId:\n            if (Context.data.request_data_full) {\n                responseJson = await response.json();\n                let requestStatus = responseJson.status;\n                if (requestStatus == \"released\") {\n                    Context.data.cert_released = true;\n                }\n                ;\n                return;\n            }\n            ;\n            responseJson = await response.json();\n            let requestDocs = responseJson.documents.find((doc) =\u003e doc.type == \"passport\" || doc.type == \"otherIdentity\").requisites;\n            Context.data.passport_series = (_a = requestDocs.find((doc) =\u003e doc.type == \"series\")) === null || _a === void 0 ? void 0 : _a.value;\n            Context.data.passport_number = (_b = requestDocs.find((doc) =\u003e doc.type == \"number\")) === null || _b === void 0 ? void 0 : _b.value;\n            Context.data.issue_date = (_c = requestDocs.find((doc) =\u003e doc.type == \"issueDate\")) === null || _c === void 0 ? void 0 : _c.value;\n            Context.data.birth_date = (_d = requestDocs.find((doc) =\u003e doc.type == \"birthDate\")) === null || _d === void 0 ? void 0 : _d.value;\n            Context.data.birth_place = (_e = requestDocs.find((doc) =\u003e doc.type == \"birthPlace\")) === null || _e === void 0 ? void 0 : _e.value;\n            Context.data.issue_id = (_f = requestDocs.find((doc) =\u003e doc.type == \"issueOrganizationId\")) === null || _f === void 0 ? void 0 : _f.value;\n            Context.data.issued_by = (_g = requestDocs.find((doc) =\u003e doc.type == \"issueOrganization\")) === null || _g === void 0 ? void 0 : _g.value;\n            Context.data.request_data_full = true;\n            break;\n    }\n    ;\n}\n;\nasync function logError(response, error) {\n    Context.data.error_exists = true;\n    if (!!response) {\n        switch (response.status) {\n            case 400:\n                if (response.url.includes(\"validate\")) {\n                    const errorMessage = (await response.json()).error.message;\n                    Context.data.error = errorMessage;\n                    break;\n                }\n                ;\n                const errorDetails = (await response.json()).error.details;\n                const errorFields = errorDetails.map((field) =\u003e {\n                    return JSON.stringify({\n                        'Поле': field.target,\n                        'Причина': field.message\n                    });\n                }).join(\", \");\n                Context.data.error = errorFields;\n            case 401:\n                Context.data.error = \"Неверный api-ключ\";\n            case 403:\n                Context.data.error = \"Недостаточно прав на создание заявки\";\n            case 404:\n                Context.data.error = \"Заявка с данным идентификатором не найдена.\";\n            case 408:\n                Context.data.error = \"Превышено время ожидания запроса.\";\n            case 409:\n                Context.data.error = \"Данная заявка в процессе актуализации.\";\n            case 429:\n                Context.data.error = \"Данные заявки изменялись слишком много раз, попробуйте заново.\";\n        }\n        ;\n        return;\n    }\n    ;\n    throw new Error(error);\n}\n;\nasync function activate() {\n    Context.data.error_exists = false;\n    let body = JSON.stringify({\n        api_key: apiKey,\n        uid: requestId\n    });\n    let response = await fetch(`${signMeUrl}/activate`, {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body\n    });\n    if (!response.ok) {\n    }\n    ;\n    await logData(response);\n}\n;\nasync function getRequestData() {\n    Context.data.error_exists = false;\n    let response = await fetch(`${konturUrl}/${requestId}`, {\n        headers: konturHeaders\n    });\n    if (!response.ok) {\n        await logError(response);\n    }\n    ;\n    await logData(response);\n}\n;\nasync function confirmSubjectIdentification() {\n    Context.data.error_exists = false;\n    let response = await fetch(`${konturUrl}/${requestId}/subject-identification`, {\n        method: \"PUT\",\n        headers: konturHeaders,\n        body: JSON.stringify({\n            identifiedBy: Context.data.responsible_user.id,\n            identificationSubjectType: \"employee\"\n        })\n    });\n    if (!response.ok) {\n        Context.data.debug = response.statusText + \" \" + Context.data.responsible_user.id;\n        await logError(response);\n    }\n    ;\n}\n;\nasync function validateIssue() {\n    Context.data.error_exists = false;\n    let response = await fetch(`${konturUrl}/${requestId}/validate`, {\n        method: \"POST\",\n        headers: konturHeaders\n    });\n    if (!response.ok) {\n        await logError(response);\n    }\n    ;\n}\n;\n","gatewayPairs":{},"hasTranslations":false}
