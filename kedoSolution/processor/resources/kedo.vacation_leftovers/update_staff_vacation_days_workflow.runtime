{"scripts":"async function getVacationLeftovers() {\n    var _a, _b, _c;\n    let from = Context.data.from \u0026\u0026 Context.data.from \u003e= 0 ? Context.data.from : 0;\n    let size = Context.data.size \u0026\u0026 Context.data.size \u003e 0 ? Context.data.size : 100;\n    let leftovers_data = Context.data.staff_leftovers_data ? JSON.parse(Context.data.staff_leftovers_data) : [];\n    const vacation_leftovers = await Context.fields.vacation_leftovers.app.search()\n        .where(f =\u003e f.__deletedAt.eq(null))\n        .from(from)\n        .size(size)\n        .all();\n    if (!vacation_leftovers || vacation_leftovers.length == 0) {\n        Context.data.vacation_leftovers = undefined;\n        return;\n    }\n    Context.data.vacation_leftovers = vacation_leftovers[0];\n    const staff_ids = [...new Set(vacation_leftovers\n            .filter(f =\u003e f.data.staff !== undefined)\n            .map(f =\u003e f.data.staff.id))];\n    const staffs = await Namespace.app.staff.search()\n        .where(f =\u003e f.__id.in(staff_ids))\n        .size(staff_ids.length)\n        .all();\n    for (const staff of staffs) {\n        const main_position = ((_a = staff.data.employment_table) !== null \u0026\u0026 _a !== void 0 ? _a : []).find(f =\u003e { var _a; return ((_a = f.type_employment) === null || _a === void 0 ? void 0 : _a.code) == \"main_workplace\"; });\n        if (!main_position || !main_position.position) {\n            continue;\n        }\n        let staff_leftover = leftovers_data.find(f =\u003e f.staff_id == staff.id);\n        if (!staff_leftover) {\n            staff_leftover = {\n                staff_id: staff.id,\n                leftovers: [],\n            };\n            leftovers_data.push(staff_leftover);\n        }\n        const leftovers = vacation_leftovers.filter(f =\u003e { var _a, _b; return ((_a = f.data.staff) === null || _a === void 0 ? void 0 : _a.id) == staff.id \u0026\u0026 ((_b = f.data.position) === null || _b === void 0 ? void 0 : _b.id) == main_position.position.id; });\n        for (const leftover of leftovers) {\n            if (!leftover.data.position) {\n                continue;\n            }\n            let position_leftover = staff_leftover.leftovers.find(f =\u003e { var _a; return f.position_id == ((_a = leftover.data.position) === null || _a === void 0 ? void 0 : _a.id); });\n            if (!position_leftover) {\n                position_leftover = {\n                    position_id: leftover.data.position.id,\n                    remainder: (_b = leftover.data.remainder) !== null \u0026\u0026 _b !== void 0 ? _b : 0,\n                };\n                staff_leftover.leftovers.push(position_leftover);\n            }\n            else {\n                position_leftover.remainder += (_c = leftover.data.remainder) !== null \u0026\u0026 _c !== void 0 ? _c : 0;\n            }\n        }\n    }\n    Context.data.staff_leftovers_data = JSON.stringify(leftovers_data);\n    Context.data.from = from + size;\n}\nasync function updateStaffLeftovers() {\n    const leftovers_data = Context.data.staff_leftovers_data ? JSON.parse(Context.data.staff_leftovers_data) : [];\n    const staff_ids = leftovers_data.map(f =\u003e f.staff_id);\n    const staffs = await Namespace.app.staff.search()\n        .where(f =\u003e f.__id.in(staff_ids))\n        .size(staff_ids.length)\n        .all();\n    let promises = [];\n    for (const leftover of leftovers_data) {\n        const staff = staffs.find(f =\u003e f.id == leftover.staff_id);\n        if (!staff)\n            continue;\n        const leftovers_days = leftover.leftovers\n            .map(f =\u003e f.remainder)\n            .reduce((pr_val, cur_val) =\u003e pr_val += cur_val, 0);\n        staff.data.remaining_vacation_days = leftovers_days;\n        promises.push(staff.save());\n        if (promises.length \u003e 20) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n    await Promise.all(promises);\n}\nasync function resetCounter() {\n    Context.data.iteration_count = 0;\n}\nasync function incCounter() {\n    var _a;\n    Context.data.iteration_count = ((_a = Context.data.iteration_count) !== null \u0026\u0026 _a !== void 0 ? _a : 0) + 1;\n}\n","gatewayPairs":{},"hasTranslations":false}
