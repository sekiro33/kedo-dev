{"scripts":"async function get_template() {\n    const settings = await Context.data.application_for_the_transfer_of_salary_to_the_current_account.getSettings();\n    let files = await settings.getDocTemplates();\n    for (let file of files) {\n        let template = (await System.files.search().where((f, q) =\u003e q.and(f.__id.eq(file.fileId), f.__name.like('Заяв'))).first());\n        if (template) {\n            Context.data.template_file = template;\n        }\n    }\n}\nasync function set_contract_field() {\n    let statement = await Context.data.application_for_the_transfer_of_salary_to_the_current_account.fetch();\n    statement.data.staff = await Context.fields.staff.app.search().where(f =\u003e f.ext_user.eq(Context.data.__createdBy)).first();\n    statement.data.line_file_name = (await Context.data.document_file.fetch()).data.__name;\n    await statement.save();\n}\nasync function status_string_refresh() {\n    let statement = await Context.data.application_for_the_transfer_of_salary_to_the_current_account.fetch();\n    statement.data.line_status = statement.data.__status.code + ';' + statement.data.__status.name;\n    await statement.save();\n}\nasync function getDirector() {\n    const app = await Context.data.application_for_the_transfer_of_salary_to_the_current_account.fetch();\n    const staff = await app.data.staff.fetch();\n    const organization = await staff.data.organization.fetch();\n    const chief_position = await organization.data.position_head.fetch();\n    Context.data.director = chief_position.data.staff[0];\n}\nasync function changeStatusSigning() {\n    if (!Context.data.application_for_the_transfer_of_salary_to_the_current_account) {\n        throw new Error(\"Context.data.application_for_the_transfer_of_salary_to_the_current_account is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.application_for_the_transfer_of_salary_to_the_current_account.namespace,\n            code: Context.data.application_for_the_transfer_of_salary_to_the_current_account.code,\n            id: Context.data.application_for_the_transfer_of_salary_to_the_current_account.id,\n        },\n        status: \"signing\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusCancelled() {\n    if (!Context.data.application_for_the_transfer_of_salary_to_the_current_account) {\n        throw new Error(\"Context.data.application_for_the_transfer_of_salary_to_the_current_account is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.application_for_the_transfer_of_salary_to_the_current_account.namespace,\n            code: Context.data.application_for_the_transfer_of_salary_to_the_current_account.code,\n            id: Context.data.application_for_the_transfer_of_salary_to_the_current_account.id,\n        },\n        status: \"cancelled\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusAgreedSigned() {\n    if (!Context.data.application_for_the_transfer_of_salary_to_the_current_account) {\n        throw new Error(\"Context.data.application_for_the_transfer_of_salary_to_the_current_account is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.application_for_the_transfer_of_salary_to_the_current_account.namespace,\n            code: Context.data.application_for_the_transfer_of_salary_to_the_current_account.code,\n            id: Context.data.application_for_the_transfer_of_salary_to_the_current_account.id,\n        },\n        status: \"agreed_signed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\n","gatewayPairs":{},"hasTranslations":false}
