{"scripts":"async function getAllMedExam() {\n    let med_exam_array = [];\n    let position;\n    const medical_request = await Context.data.medical_request.fetch();\n    const staff = await medical_request.data.staff.fetch();\n    medical_request.data.old_postion = staff.data.position;\n    medical_request.data.categories_table = staff.data.categories_table;\n    if (medical_request.data.new_position) {\n        position = await medical_request.data.new_position.fetch();\n    }\n    else {\n        position = await medical_request.data.old_postion.fetch();\n    }\n    if (position.data.harmful_production_factors \u0026\u0026 position.data.harmful_production_factors.length \u003e 0) {\n        Context.data.need_med_exam = true;\n        const factors = await Promise.all(position.data.harmful_production_factors.map(x =\u003e x.fetch()));\n        for (let factor of factors) {\n            med_exam_array = med_exam_array.concat(factor.data.necessary_preliminary_examinations);\n        }\n        med_exam_array = med_exam_array.filter((f, i, s) =\u003e i === s.findIndex(t =\u003e t.id === f.id));\n    }\n    const activ_med_exams = await Namespace.app.medical_examination.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.neq(Namespace.app.medical_examination.fields.__status.variants.passed), f.staff.link(staff)))\n        .size(10000)\n        .all();\n    if (activ_med_exams \u0026\u0026 activ_med_exams.length \u003e 0)\n        med_exam_array = med_exam_array.filter((f) =\u003e !activ_med_exams.find(j =\u003e j.id === f.id));\n    if (med_exam_array \u0026\u0026 med_exam_array.length \u003e 0) {\n        const med_exams = await Promise.all(med_exam_array.map(f =\u003e f.fetch()));\n        for (const med_exam of med_exams) {\n            const row_structure = medical_request.data.structure.insert();\n            row_structure.med_type = med_exam;\n        }\n    }\n    medical_request.data.harmful_factors = position.data.harmful_production_factors;\n    await medical_request.save();\n}\nasync function createMedExamCards() {\n    Context.data.med_exam = [];\n    let promises = [];\n    const medical_request = await Context.data.medical_request.fetch();\n    if (medical_request.data.structure \u0026\u0026 medical_request.data.structure.length \u003e 0) {\n        for (let row of medical_request.data.structure) {\n            const med_exam = Context.fields.med_exam.app.create();\n            med_exam.data.med_request = medical_request;\n            med_exam.data.staff = medical_request.data.staff;\n            med_exam.data.candidate = medical_request.data.candidate;\n            if (medical_request.data.old_postion) {\n                med_exam.data.position = medical_request.data.old_postion;\n            }\n            else {\n                med_exam.data.position = medical_request.data.new_position;\n            }\n            med_exam.data.harmful_factors = medical_request.data.harmful_factors;\n            med_exam.data.categories_table = medical_request.data.categories_table;\n            med_exam.data.type_of_medical_examination = row.med_type;\n            med_exam.data.due_date = row.due_date;\n            med_exam.data.medical_organization = row.med_organization;\n            med_exam.data.med_organization = Context.data.organization;\n            promises.push(med_exam.save());\n            Context.data.med_exam.push(med_exam);\n        }\n        await Promise.all(promises);\n    }\n}\nasync function setStatusCancelled() {\n    if (!Context.data.medical_request) {\n        throw new Error(\"Context.data.medical_request is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.medical_request.namespace,\n            code: Context.data.medical_request.code,\n            id: Context.data.medical_request.id,\n        },\n        status: \"cancelled\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusPending() {\n    if (!Context.data.medical_request) {\n        throw new Error(\"Context.data.medical_request is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.medical_request.namespace,\n            code: Context.data.medical_request.code,\n            id: Context.data.medical_request.id,\n        },\n        status: \"pending\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusIssued() {\n    if (!Context.data.medical_request) {\n        throw new Error(\"Context.data.medical_request is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.medical_request.namespace,\n            code: Context.data.medical_request.code,\n            id: Context.data.medical_request.id,\n        },\n        status: \"issued\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function setStatusApproval() {\n    if (!Context.data.medical_request) {\n        throw new Error(\"Context.data.medical_request is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.medical_request.namespace,\n            code: Context.data.medical_request.code,\n            id: Context.data.medical_request.id,\n        },\n        status: \"approval\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function getOrganization() {\n    const medical_request = await Context.data.medical_request.fetch();\n    if (medical_request.data.staff) {\n        const staff = await medical_request.data.staff.fetch();\n        if (staff.data.organization) {\n            Context.data.organization = staff.data.organization;\n        }\n    }\n    if (medical_request.data.candidate) {\n        const candidate = await medical_request.data.candidate.fetch();\n        if (candidate.data.planned_position) {\n            const position = await candidate.data.planned_position.fetch();\n            if (position.data.organization) {\n                Context.data.organization = position.data.organization;\n            }\n        }\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
