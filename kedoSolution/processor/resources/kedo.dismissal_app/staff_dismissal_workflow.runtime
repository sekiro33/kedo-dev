{"scripts":"async function getKedoSettings() {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(1000).all();\n    const accounting_in_processes = settings.find(f =\u003e f.data.code == 'accounting_in_processes');\n    Context.data.accounting_in_processes = accounting_in_processes ? accounting_in_processes.data.status : false;\n}\nasync function setLineStatus() {\n    const dismissal_app = await Context.data.dismissal_app.fetch();\n    dismissal_app.data.line_status = `${dismissal_app.data.__status.code};${dismissal_app.data.__status.name}`;\n    await dismissal_app.save();\n}\nasync function createAlert() {\n    if (!Context.data.dismissal_app) {\n        throw new Error(\"Context.data.dismissal_app is undefined\");\n    }\n    if (!Context.data.staff) {\n        throw new Error(\"Context.data.staff is undefined\");\n    }\n    const [dismissal_app, staff] = await Promise.all([\n        Context.data.dismissal_app.fetch(),\n        Context.data.staff.fetch()\n    ]);\n    const dismissal_date = dismissal_app.data.date_of_dismissal;\n    Context.data.alert_body = `Сотрудник ${staff.data.__name} увольняется ${dismissal_date === null || dismissal_date === void 0 ? void 0 : dismissal_date.format(\"DD.MM.YYYY\")}. Причина: ${dismissal_app.data.reason_for_leaving}`;\n}\nasync function checkStaffEmployment() {\n    if (!Context.data.staff) {\n        throw new Error(\"Context.data.staff is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    if (!staff.data.employment_table || staff.data.employment_table.length == 0) {\n        return true;\n    }\n    return false;\n}\nasync function updateStaffEmploymentTable() {\n    var _a;\n    if (!Context.data.staff) {\n        throw new Error(\"Context.data.staff is undefined\");\n    }\n    if (!Context.data.employment_placement) {\n        throw new Error(\"Context.data.employment_placement is undefined\");\n    }\n    const staff = await Context.data.staff.fetch();\n    const employment_placement = await Context.data.employment_placement.fetch();\n    const employment_table = staff.data.employment_table;\n    const emplyoment_index = employment_table.findIndex(f =\u003e { var _a; return ((_a = f.employment_placement_app) === null || _a === void 0 ? void 0 : _a.id) == employment_placement.id; });\n    if (emplyoment_index == -1) {\n        throw new Error(\"Не удалось найти место занятости в таблице занятости сотрудника\");\n    }\n    employment_table.delete(emplyoment_index);\n    employment_placement.data.date_by = (_a = Context.data.dismissal_date) !== null \u0026\u0026 _a !== void 0 ? _a : new TDate();\n    await Promise.all([\n        staff.save(),\n        employment_placement.save(),\n    ]);\n}\n","gatewayPairs":{"/items/7962eba6-b2fd-45f5-8a4e-a0e1a84c0f1c":"/items/ccd5675e-8ff1-43ef-932a-c338eb7050a5"},"hasTranslations":false}
