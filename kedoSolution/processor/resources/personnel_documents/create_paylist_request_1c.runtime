{"scripts":"async function get_kedo_settings() {\n    const settings = await Context.fields.kedo_settings.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const integration_1c = settings.find(f =\u003e f.data.code == 'integration_1c');\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const alternative_integration_1c = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.use_alternative_integration = alternative_integration_1c ? alternative_integration_1c.data.status : false;\n}\nasync function get_staffs_by_organization() {\n    Context.data.staffs_pack = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(Context.fields.staffs.app.fields.__status.variants.signed_documents), f.organization.link(Context.data.organization), f.id_1c.neq(null), f.individual_id_1c.neq(null)))\n        .from(Context.data.from)\n        .size(100)\n        .all();\n    Context.data.from += 100;\n    Context.data.counter += Context.data.staffs_pack.length;\n}\nasync function get_staffs_by_subdivisions() {\n    var _a;\n    const subdivisions = await Context.fields.subdivisions.fetchAll();\n    if (!subdivisions || subdivisions \u0026\u0026 subdivisions.length == 0) {\n        throw new Error('Подразделения не выбраны');\n    }\n    Context.data.staffs = [];\n    let positionsApp = [];\n    subdivisions.forEach(s =\u003e { var _a; return positionsApp.push(...(_a = s.data.positions) !== null \u0026\u0026 _a !== void 0 ? _a : []); });\n    const positions = await Promise.all(positionsApp.map(p =\u003e p.fetch()));\n    for (const position of positions) {\n        Context.data.staffs = Context.data.staffs.concat((_a = position.data.staff) !== null \u0026\u0026 _a !== void 0 ? _a : []);\n    }\n}\nasync function get_staffs_pack() {\n    const pack = await Promise.all(Context.data.staffs.slice(Context.data.from, 100).map(f =\u003e f.fetch()));\n    Context.data.staffs_pack = pack.filter(f =\u003e f.data.id_1c \u0026\u0026 f.data.individual_id_1c);\n    Context.data.from += 100;\n    Context.data.counter += Context.data.staffs_pack.length;\n}\nasync function check_staff_list() {\n    return Context.data.staffs_pack.length \u003e 0 ? true : false;\n}\n","gatewayPairs":{},"hasTranslations":false}
