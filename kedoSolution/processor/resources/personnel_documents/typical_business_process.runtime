{"scripts":"async function app_get() {\n    var _a;\n    Context.data.is_financial_assistance = false;\n    if (!Context.data.personnel_documents) {\n        throw new Error(\"Context.data.personnel_documents is undefined\");\n    }\n    const personnel_document = await Context.data.personnel_documents.fetch();\n    const { id, code } = personnel_document.data.__sourceRef;\n    const app = Namespace.app[code];\n    const document_app = await app.search().where((f) =\u003e f.__id.eq(id)).first();\n    Context.data.app = document_app;\n    switch (code) {\n        case \"application_for_leave_without_pay\": {\n            Context.data.leave_application_withoutpay = document_app;\n            break;\n        }\n        case \"paid_leave\": {\n            Context.data.leavle_application = document_app;\n            break;\n        }\n        case \"memo_business_trip\": {\n            Context.data.business_trip = document_app;\n            break;\n        }\n        case \"benefit_application\": {\n            Context.data.benefit_application = document_app;\n            break;\n        }\n        case \"application_for_financial_assistance\": {\n            Context.data.financial_assistance_application = document_app;\n            if (Context.data.financial_assistance_application) {\n                const financial_assistance_application = await Context.data.financial_assistance_application.fetch();\n                const type_of_financial_assistance = await ((_a = financial_assistance_application.data.type_of_financial_assistance) === null || _a === void 0 ? void 0 : _a.fetch());\n                Context.data.money = type_of_financial_assistance === null || type_of_financial_assistance === void 0 ? void 0 : type_of_financial_assistance.data.sum;\n                Context.data.is_financial_assistance = true;\n            }\n            break;\n        }\n        case \"application_for_the_transfer_of_salary_to_the_current_account\": {\n            Context.data.application_for_transfer_to_account = document_app;\n            break;\n        }\n        case \"setlement_sheet\": {\n            Context.data.settlement_sheet = document_app;\n            break;\n        }\n        default: {\n            throw new Error(\"Не удалось определить тип заявления\");\n        }\n    }\n}\nasync function get_kedo_settings() {\n    const codes = [\n        \"custom_generate_financial_assistance_doc\",\n        \"custom_generate_benefit_doc\",\n        \"integration_1c\",\n    ];\n    const settings = await Context.fields.kedo_settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.in(codes)))\n        .size(codes.length)\n        .all();\n    const integration_1c = settings.find(f =\u003e f.data.code == \"integration_1c\");\n    Context.data.integration_1c = integration_1c \u0026\u0026 integration_1c.data.status ? integration_1c.data.status : false;\n    const custom_generate_financial_assistance_doc = settings.find(f =\u003e f.data.code == \"custom_generate_financial_assistance_doc\");\n    Context.data.custom_generate_financial_assistance_doc = custom_generate_financial_assistance_doc ? custom_generate_financial_assistance_doc.data.status : false;\n    const custom_generate_benefit_doc = settings.find(f =\u003e f.data.code == \"custom_generate_benefit_doc\");\n    Context.data.custom_generate_benefit_doc = custom_generate_benefit_doc \u0026\u0026 custom_generate_benefit_doc.data.status ? custom_generate_benefit_doc.data.status : false;\n}\nasync function order_check() {\n    const statement = await Context.data.app.fetch();\n    if (statement.fields.linked_order) {\n        Context.data.decree = statement.data.linked_order;\n        return true;\n    }\n    return false;\n}\nasync function setFile() {\n    if (!Context.data.app) {\n        throw new Error(\"Context.data.app is undefined\");\n    }\n    if (!Context.data.document_file) {\n        throw new Error(\"Context.data.document_file is undefined\");\n    }\n    const app = await Context.data.app.fetch();\n    const file = await Context.data.document_file.fetch();\n    app.data.__file = file;\n    app.data.line_file_name = file.data.__name;\n    await app.save();\n}\nasync function setStatus(status_code) {\n    if (!Context.data.app) {\n        throw new Error(\"Context.data.app is undefined\");\n    }\n    const app = await Context.data.app.fetch();\n    const app_statuses = app.fields.__status.all;\n    const status = app_statuses.find((i) =\u003e i.code == status_code);\n    if (!status) {\n        throw new Error(`Не найден статус с кодом ${status_code}`);\n    }\n    await app.setStatus(status);\n    app.data.line_status = `${app.data.__status.code};${app.data.__status.name}`;\n    await app.save();\n}\nasync function status_editing() {\n    await setStatus('agrement');\n}\nasync function status_signing() {\n    await setStatus('signing');\n}\nasync function status_signed() {\n    await setStatus('signed');\n}\nasync function status_agrement() {\n    await setStatus('agrement');\n}\nasync function status_rejected() {\n    await setStatus('removed');\n}\nasync function approval_list() {\n    const item = await Context.data.personnel_documents.fetch();\n    const approvalLists = await item.docflow().getApprovalLists();\n    let list = approvalLists[approvalLists.length - 1];\n    let respondets = list.respondents;\n    for (let respondent of respondets) {\n        if (respondent.status == \"approved\") {\n            Context.data.responsible = await System.users.search().where(f =\u003e f.__id.eq(respondent.id)).first();\n            item.data.responsible_user = Context.data.responsible;\n            break;\n        }\n    }\n    await item.save();\n}\nasync function comment_get() {\n    const item = await Context.data.personnel_documents.fetch();\n    let source_item = item.data.__sourceRef;\n    const approvalLists = await source_item.docflow().getApprovalLists();\n    Context.data.comment = '';\n    let list = approvalLists[0];\n    let respondets = list.respondents;\n    for (let respondent of respondets) {\n        if (respondent.status == \"rejected\") {\n            Context.data.comment = respondent.comment;\n            Context.data.responsible = await System.users.search().where(f =\u003e f.__id.eq(respondent.id)).first();\n            break;\n        }\n    }\n}\nasync function getAppTemplates(app) {\n    const templates = [];\n    const app_settings = await app.getSettings();\n    const app_templates = await app_settings.getDocTemplates();\n    if (app_templates \u0026\u0026 app_templates.length \u003e 0) {\n        const files = await System.files.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(app_templates.map((t) =\u003e t.fileId))))\n            .size(app_templates.length)\n            .all();\n        templates.push(...(files !== null \u0026\u0026 files !== void 0 ? files : []));\n    }\n    return templates;\n}\nasync function getStatementTemplate() {\n    if (!Context.data.personnel_documents) {\n        throw new Error(\"Context.data.personnel_documents is undefined\");\n    }\n    const personnel_document = await Context.data.personnel_documents.fetch();\n    if (!personnel_document.data.__sourceRef) {\n        throw new Error(\"Context.data.personnel_documents filed '__sourceRef' is undefined\");\n    }\n    const { id, code } = personnel_document.data.__sourceRef;\n    const app = Namespace.app[code];\n    const app_templates = await getAppTemplates(app);\n    if (app_templates.length == 0) {\n        throw new Error(`Не найден файл шаблона для данного типа заявления: app_code = ${code}`);\n    }\n    Context.data.template_file = app_templates[0];\n}\nasync function createOrderApp() {\n    if (!Context.data.app) {\n        throw new Error(\"Context.data.app is undefined\");\n    }\n    const app = await Context.data.app.fetch();\n    const order = app.fields.linked_order.app.create();\n    order.data.staff = Context.data.user;\n    await order.save();\n    app.data.linked_order = order;\n    await app.save();\n    Context.data.decree = order;\n    const templates = await getAppTemplates(app.fields.linked_order.app);\n    if (templates.length == 0) {\n        throw new Error(`Не найден файл шаблона для данного типа приказа: app_code = ${order.code}`);\n    }\n    Context.data.template_file = templates[0];\n    switch (order.code) {\n        case \"leave_without_pay\": {\n            Context.data.order_leave_without_pay = order;\n            break;\n        }\n        case \"paid_leave_order\": {\n            Context.data.paid_leave_order = order;\n            break;\n        }\n        case \"order_for_business_trip\": {\n            Context.data.order_for_business_trip = order;\n            break;\n        }\n        case \"order_financial_assistance\": {\n            Context.data.order_financial_assistance = order;\n            break;\n        }\n        default: {\n            break;\n        }\n    }\n}\nasync function setOrderFile() {\n    if (!Context.data.decree) {\n        throw new Error(\"Context.data.decree is undefined\");\n    }\n    if (!Context.data.document_file) {\n        throw new Error(\"Context.data.document_file is undfined\");\n    }\n    const order = await Context.data.decree.fetch();\n    const file = await Context.data.document_file.fetch();\n    order.data.__file = file;\n    order.data.line_file_name = file.data.__name;\n    await order.save();\n}\nasync function get_responsibe() {\n    const item = await Context.data.app.fetch();\n    const approvalLists = await item.docflow().getApprovalLists();\n    let list = approvalLists[0];\n    let respondets = list.respondents;\n    for (let respondent of respondets) {\n        if (respondent.status == \"approved\") {\n            Context.data.responsible = await System.users.search().where(f =\u003e f.__id.eq(respondent.id)).first();\n            let responsible = await Context.data.responsible.fetch();\n            let full_name = responsible.data.fullname;\n            Context.data.responsible_full_name = full_name.lastname + ' ' + (full_name === null || full_name === void 0 ? void 0 : full_name.firstname.slice(0, 1)) + '.' + (full_name === null || full_name === void 0 ? void 0 : full_name.middlename.slice(0, 1));\n            break;\n        }\n    }\n}\nasync function alert_set() {\n    let statement = await Context.data.app.fetch();\n    Context.data.alert_body = `${statement.data.__name} согласовано. Подпишите его электронной подписью на портале КЭДО`;\n}\nasync function calculate_duration() {\n    if (!Context.data.leave_application_withoutpay || !Context.data.leavle_application || !Context.data.business_trip) {\n        return;\n    }\n    if (Context.data.leave_application_withoutpay) {\n        const app = await Context.data.leave_application_withoutpay.fetch();\n        const start_date = app.data.start_date;\n        const end_date = app.data.end_date;\n        if (start_date \u0026\u0026 end_date) {\n            const duration = end_date.sub(start_date);\n            app.data.duration = Math.floor(duration.hours / 24) + 1;\n            app.data.start_line = start_date.format(\"DD.MM.YYYY\");\n            app.data.end_line = end_date.format(\"DD.MM.YYYY\");\n        }\n        await app.save();\n    }\n    if (Context.data.leavle_application) {\n        const app = await Context.data.leavle_application.fetch();\n        const time = new TTime(0, 0, 0, 0);\n        const start_date = app.data.start_date ? app.data.start_date.asDatetime(time) : undefined;\n        const end_date = app.data.end_date ? app.data.end_date.asDatetime(time) : undefined;\n        if (start_date \u0026\u0026 end_date) {\n            const duration = end_date.sub(start_date);\n            app.data.duration = Math.floor(duration.hours / 24) + 1;\n            app.data.start_line = start_date.format(\"DD.MM.YYYY\");\n            app.data.end_line = end_date.format(\"DD.MM.YYYY\");\n        }\n        await app.save();\n    }\n    if (Context.data.business_trip) {\n        let app = await Context.data.business_trip.fetch();\n        const time = new TTime(0, 0, 0, 0);\n        const start_date = app.data.start_date ? app.data.start_date.asDatetime(time) : undefined;\n        const end_date = app.data.end_date ? app.data.end_date.asDatetime(time) : undefined;\n        if (start_date \u0026\u0026 end_date) {\n            const duration = end_date.sub(start_date);\n            app.data.duration = Math.floor(duration.hours / 24) + 1;\n            app.data.start_line = start_date.format(\"DD.MM.YYYY\");\n            app.data.end_line = end_date.format(\"DD.MM.YYYY\");\n        }\n        await app.save();\n    }\n}\nasync function setXmlFile() {\n    if (!Context.data.app) {\n        throw new Error(\"Context.data.app is undefined\");\n    }\n    const app = await Context.data.app.fetch();\n    app.data.xml_file = Context.data.xml_file;\n    await app.save();\n}\nasync function get_accounting() {\n    if (Context.data.organization) {\n        const staffs = await Context.fields.organization.app.fields.accounting.app.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null)))\n            .size(10000)\n            .all();\n        let organization = await Context.data.organization.fetch();\n        if (organization.data.accounting \u0026\u0026 organization.data.accounting.length \u003e 0) {\n            for (const item of organization.data.accounting) {\n                const staff = staffs.find(f =\u003e f.id == item.id);\n                if (staff \u0026\u0026 staff.data.ext_user \u0026\u0026 staff.data.__status \u0026\u0026 staff.data.__status.code == staff.fields.__status.variants.signed_documents.code) {\n                    Context.data.accounting = (Context.data.accounting || []).concat(staff.data.ext_user);\n                }\n            }\n        }\n    }\n}\n","gatewayPairs":{},"hasTranslations":false}
