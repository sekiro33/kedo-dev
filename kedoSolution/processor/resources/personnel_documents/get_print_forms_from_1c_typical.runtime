{"scripts":"async function get_kedo_settings() {\n    const settings = await Context.fields.kedo_settings.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(1000).all();\n    const use_alternative_integration = settings.find(f =\u003e f.data.code == 'use_alternative_integration');\n    Context.data.alternative_integration = use_alternative_integration ? use_alternative_integration.data.status : false;\n}\nasync function getStaffData(employment) {\n    var _a, _b, _c, _d, _e;\n    if (!employment.data.staff) {\n        throw new Error(\"employment_place.data.staff is undefined\");\n    }\n    const staff = await employment.data.staff.fetch();\n    if (!employment.data.organization) {\n        throw new Error(\"employment.data.organization is undefined\");\n    }\n    if (!employment.data.position) {\n        throw new Error(\"employment.data.position is undefined\");\n    }\n    if (!employment.data.subdivision) {\n        throw new Error(\"employment.data.structural_subdivision is undefined\");\n    }\n    const [position, organization, structural_subdivision] = await Promise.all([\n        employment.data.position.fetch(),\n        employment.data.organization.fetch(),\n        employment.data.subdivision.fetch(),\n    ]);\n    const staff_data = {\n        name: staff.data.__name,\n        id_1c: (_a = employment.data.id_1c) !== null \u0026\u0026 _a !== void 0 ? _a : \"\",\n        individual_id_1c: (_b = staff.data.individual_id_1c) !== null \u0026\u0026 _b !== void 0 ? _b : \"\",\n        position_id: (_c = position.data.ref_key) !== null \u0026\u0026 _c !== void 0 ? _c : \"\",\n        organization_id: (_d = organization.data.ref_key) !== null \u0026\u0026 _d !== void 0 ? _d : \"\",\n        structural_subdivision_id: (_e = structural_subdivision.data.ref_key) !== null \u0026\u0026 _e !== void 0 ? _e : \"\",\n    };\n    return staff_data;\n}\nasync function prepare_data_1c() {\n    var _a, _b;\n    if (!Context.data.financial_assistance_application) {\n        throw new Error(\"Отсутвует заявление на мат. помощь. Context.data.financial_assistance_application is undefined\");\n    }\n    if (!Context.data.staff_kedo) {\n        throw new Error(\"Не указан сотрудник. Context.data.staff_kedo is undefined\");\n    }\n    const financial_assistance_application = await Context.data.financial_assistance_application.fetch();\n    if (!financial_assistance_application.data.employment_placement) {\n        throw new Error(\"Не указано место занятости сотрудника. financial_assistance_application.data.employment_placement is undefined\");\n    }\n    const employment_placement = await financial_assistance_application.data.employment_placement.fetch();\n    const staff_data = await getStaffData(employment_placement);\n    if (!financial_assistance_application.data.type_of_financial_assistance) {\n        throw new Error(\"Не указан вид материальной помощи; financial_assistance_application.data.type_of_financial_assistnace is undefined\");\n    }\n    const type_of_financial_assistance = await financial_assistance_application.data.type_of_financial_assistance.fetch();\n    const data_obj = {\n        staff: staff_data,\n        creationAt: financial_assistance_application.data.__createdAt.format(\"YYYY-MM-DDT00:00:00\"),\n        money: (_b = (_a = Context.data.money) === null || _a === void 0 ? void 0 : _a.asFloat()) !== null \u0026\u0026 _b !== void 0 ? _b : 0,\n        comment: `Вид мат. помощи: ${type_of_financial_assistance.data.__name}; ${financial_assistance_application.data.reason ? `Комментарий сотрудника: ${financial_assistance_application.data.reason}` : \"\"}`,\n    };\n    Context.data.additional_info = type_of_financial_assistance.data.__name;\n    Context.data.document_data = JSON.stringify(data_obj);\n}\nasync function get_integration_app() {\n    if (!Context.data.integration_app_id) {\n        Context.data.error = `Отсутствует идентификатор приложения интеграции. Context.data.integration_app_id is undefined`;\n        throw new Error();\n    }\n    Context.data.integration_app = await Context.fields.integration_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(Context.data.integration_app_id))).first();\n    if (!Context.data.integration_app) {\n        Context.data.error = `По заданому идентификатору не найдено приложение интеграции: ${Context.data.integration_app_id}`;\n    }\n}\nasync function get_order_file() {\n    const print_forms_table = Context.data.print_forms_table;\n    const order_doc_type = await Context.fields.doc_type_1c.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.app_code.eq('order_financial_assistance'))).size(100).all();\n    if (!order_doc_type) {\n        Context.data.error = `Не удалось найти вид печатной, соответствующий печатной форме приказа.`;\n        throw new Error(Context.data.error);\n    }\n    for (let i = 0; i \u003c print_forms_table.length; i++) {\n        const row = print_forms_table[i];\n        if (order_doc_type.find(f =\u003e f.id == row.doc_type_1c.id)) {\n            Context.data.order_file = row.print_form;\n            print_forms_table.delete(i);\n            break;\n        }\n    }\n    if (!Context.data.order_file) {\n        Context.data.error = `Среди полученных печатных форм не удалось найти печатную форму приказа`;\n        throw new Error(Context.data.error);\n    }\n}\nasync function check_print_forms_table() {\n    if (Context.data.print_forms_table \u0026\u0026 Context.data.print_forms_table.length == 0) {\n        return false;\n    }\n    return true;\n}\nasync function get_print_form() {\n    if (!Context.data.print_forms_table[Context.data.table_counter]) {\n        throw new Error(`Не найдена строка в таблице. Context.data.table_counter = ${Context.data.table_counter}`);\n    }\n    const row = Context.data.print_forms_table[Context.data.table_counter];\n    Context.data.print_form = row.print_form;\n    Context.data.doc_type_1c = row.doc_type_1c;\n    Context.data.overdue_date = new Datetime().add(new Duration(24, \"hours\"));\n    Context.data.table_counter += 1;\n}\nasync function check_table_length() {\n    if (!Context.data.print_forms_table[Context.data.table_counter]) {\n        return false;\n    }\n    return true;\n}\n","gatewayPairs":{"/items/884f4fa1-a97f-4484-9c14-4b21fb8fd269":"/items/5f79ec33-984f-4480-b185-c8078e67ed39"},"hasTranslations":false}
