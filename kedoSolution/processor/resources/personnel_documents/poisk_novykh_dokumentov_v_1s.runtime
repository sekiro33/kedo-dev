{"scripts":"async function getOldNumberOfDocuments() {\n}\nasync function fillRequestData() {\n    Context.data.url_documents = 'InformationRegister_EM_ДокументыСотрудников?$format=json';\n}\nasync function changeStatus(docData) {\n}\nasync function getDocumentsData() {\n}\nasync function fillDocFormData() {\n    const docs = JSON.parse(Context.data.new_documents);\n    const iter = Context.data.current_iteration_number;\n    const documentId = docs[iter].docId;\n    Context.data.url_documents = `InformationRegister_EM_ПечатныеФормыДокументов?$format=json\u0026$filter=ВнутреннийИдентификаторПечатнойФормы eq '${documentId}'`;\n}\nasync function fillSignData() {\n}\nasync function getArrayBufferFromBase64(base64) {\n    var binary_string = atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i \u003c len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\nasync function getDocType() {\n}\nasync function get_kedo_settings() {\n    const alternative_integration = await Context.fields.kedo_settings.app.search().where((f =\u003e f.code.eq('use_alternative_integration'))).first();\n    Context.data.alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n}\nasync function get_staff(id_1c) {\n    return await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(Context.fields.staffs.app.fields.__status.variants.signed_documents), g.or(f.id_1c.eq(id_1c), f.individual_id_1c.eq(id_1c)))).first();\n}\nasync function get_staff_by_id(id) {\n    return await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(f.__id.eq(id))).first();\n}\nasync function get_await_docs() {\n    Context.data.print_forms = [];\n    const staff_ids = [];\n    const ids = [];\n    const await_docs = await Context.fields.await_docs.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.document_creation_data.eq(null), f.processed_elma.eq(false), f.document_odata_name.neq(\"Document_ПриемНаРаботу\"))).size(10000).all();\n    const doc_types = await Context.fields.document_type_1c.app.search().size(10000).all();\n    for (const doc of await_docs) {\n        if (doc.data.print_forms \u0026\u0026 doc.data.print_forms.length \u003e 0) {\n            const print_forms_id = JSON.parse(doc.data.print_forms_id);\n            const print_forms = doc.data.print_forms;\n            const individual_id_1c = JSON.parse(doc.data.personal_guid_1c);\n            const staff = await get_staff(individual_id_1c[0]);\n            if (staff == undefined) {\n                continue;\n            }\n            for (let i = 0; i \u003c print_forms_id.length; i++) {\n                Context.data.print_forms.push(print_forms[i]);\n                staff_ids.push(staff.data.__id);\n                const type = doc_types.find(f =\u003e f.data.doc_type_id_1c == print_forms_id[i]);\n                if (type \u0026\u0026 type.data.app_code) {\n                    ids.push(type.data.app_code);\n                }\n                else {\n                    ids.push(\"other_documents\");\n                }\n            }\n            doc.data.processed_elma = true;\n            await doc.save();\n        }\n    }\n    Context.data.document_types_json = JSON.stringify(ids);\n    Context.data.staff_ids_json = JSON.stringify(staff_ids);\n}\nasync function get_print_form() {\n    Context.data.print_form = Context.data.print_forms.pop();\n    const staff_ids = JSON.parse(Context.data.staff_ids_json);\n    Context.data.staff = await get_staff_by_id(staff_ids.pop());\n    Context.data.staff_ids_json = JSON.stringify(staff_ids);\n    const types = JSON.parse(Context.data.document_types_json);\n    const doc_type = types.pop();\n    Context.data.document_types_json = JSON.stringify(types);\n    Context.data.document_type_1c = await Context.fields.document_type_1c.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.app_code.eq(doc_type))).first();\n}\nasync function reset_counter() {\n    Context.data.counter = 0;\n}\nasync function check_print_forms_length() {\n    return Context.data.print_forms.length \u003e 0 ? true : false;\n}\nasync function inc_counter() {\n    Context.data.counter += 1;\n}\n","gatewayPairs":{},"hasTranslations":false}
