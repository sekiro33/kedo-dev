{"scripts":"async function set_line_status() {\n    let app = await Context.data.benefit_application.fetch();\n    app.data.line_status = app.data.__status.code + ';' + app.data.__status.name;\n    await app.save();\n}\nasync function set_line_file_name() {\n    let app = await Context.data.benefit_application.fetch();\n    app.data.line_status = app.data.__status.code + ';' + app.data.__status.name;\n    app.data.line_file_name = (await app.data.__file.fetch()).data.__name;\n    await app.save();\n}\nasync function get_position() {\n    const custom_generate_benefit_doc = await Context.fields.kedo_settings.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('custom_generate_benefit_doc')))\n        .first();\n    Context.data.custom_generate_benefit_doc = custom_generate_benefit_doc ? custom_generate_benefit_doc.data.status : false;\n    let staff = await Context.fields.staff.app.search().where(f =\u003e f.ext_user.eq(Context.data.__createdBy)).first();\n    if (staff) {\n        const app = await Context.data.benefit_application.fetch();\n        app.data.staff = staff;\n        await app.save();\n        Context.data.staff = staff;\n        Context.data.position = staff.data.position ? (await staff.data.position.fetch()).data.__name : undefined;\n        let position_head = (await staff.data.organization.fetch()).data.position_head;\n        if (!position_head)\n            return;\n        let head_staff = (await Context.fields.staff.app.search().where(f =\u003e f.position.link(position_head)).first());\n        if (!head_staff)\n            return;\n        Context.data.head_user = head_staff.data.ext_user;\n    }\n}\nasync function getApp() {\n    const fetch_app = await Context.data.benefit_application.fetch();\n    Context.data.type_benefit = fetch_app.data.type_of_allowance;\n    Context.data.edit_staff = fetch_app.data.staff;\n    Context.data.employee_comment = fetch_app.data.employee_comment;\n}\nasync function initializingVariable() {\n    Context.data.add_is_agreed = true;\n}\nasync function verificationApproval() {\n    if (Context.data.add_is_agreed == true || Context.data.is_agreed == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nasync function changeStatusSigning() {\n    if (!Context.data.benefit_application) {\n        throw new Error(\"Context.data.benefit_application is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.benefit_application.namespace,\n            code: Context.data.benefit_application.code,\n            id: Context.data.benefit_application.id,\n        },\n        status: \"signing\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusCancelled() {\n    if (!Context.data.benefit_application) {\n        throw new Error(\"Context.data.benefit_application is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.benefit_application.namespace,\n            code: Context.data.benefit_application.code,\n            id: Context.data.benefit_application.id,\n        },\n        status: \"cancelled\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusAgreedSigned() {\n    if (!Context.data.benefit_application) {\n        throw new Error(\"Context.data.benefit_application is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.benefit_application.namespace,\n            code: Context.data.benefit_application.code,\n            id: Context.data.benefit_application.id,\n        },\n        status: \"agreed_signed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusCorrection() {\n    if (!Context.data.benefit_application) {\n        throw new Error(\"Context.data.benefit_application is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.benefit_application.namespace,\n            code: Context.data.benefit_application.code,\n            id: Context.data.benefit_application.id,\n        },\n        status: \"correction\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function getSettings() {\n    const accounting_in_processes = await Context.fields.kedo_settings.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('accounting_in_processes'))).first();\n    Context.data.accounting_in_processes = accounting_in_processes ? accounting_in_processes.data.status : false;\n}\n","gatewayPairs":{},"hasTranslations":false}
