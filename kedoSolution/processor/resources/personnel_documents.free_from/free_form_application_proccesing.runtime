{"scripts":"async function set_status_line() {\n    let app = await Context.data.free_from.fetch();\n    app.data.status_line = app.data.__status.code + ';' + app.data.__status.name;\n    await app.save();\n}\nasync function head_position_get() {\n    const free = await Context.data.free_from.fetch();\n    const staff = await free.data.staff.fetch();\n    Context.data.staff = staff;\n    Context.data.provided_information_file = free.data.provided_information_file;\n    if (Context.data.director_user) {\n        const headApp = await Context.fields.staff.app.search()\n            .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(Context.data.director_user)))\n            .first();\n        Context.data.director_app = headApp;\n        Context.data.boss_position = headApp.data.position;\n    }\n}\nasync function set_fields_contract() {\n    let app = await Context.data.free_from.fetch();\n    app.data.file_name_line = (await app.data.__file.fetch()).data.__name;\n    app.data.status_line = app.data.__status.code + ';' + app.data.__status.name;\n    await app.save();\n}\nasync function set_status_field() {\n    let app = await Context.data.free_from.fetch();\n    app.data.status_line = app.data.__status.code + ';' + app.data.__status.name;\n    await app.save();\n}\nasync function comment_get() {\n    let appeal = await Context.data.free_from.fetch();\n    const approvalLists = await appeal.docflow().getApprovalLists();\n    Context.data.comment = '';\n    let list = approvalLists[0];\n    let respondets = list.respondents;\n    for (let respondent of respondets) {\n        if (respondent.status == \"rejected\") {\n            Context.data.coordinating_comment = respondent.comment;\n            break;\n        }\n    }\n}\nasync function status_other_document_check() {\n    let app = await Context.data.other_documents.fetch();\n    if (app.data.__status.code == app.fields.__status.variants.signed.code)\n        return true;\n    else\n        return false;\n}\nasync function get_file_name() {\n    Context.data.file_name = '';\n    let file = (await Context.data.free_from.fetch()).data.provided_information_file;\n    let fetched = await file.fetch();\n    Context.data.file_name += '\\n' + fetched.data.__name;\n}\nasync function getSettings() {\n    const integration_1c = await Context.fields.settings_kedo.app.search()\n        .size(10000)\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('integration_1c')))\n        .first();\n    Context.data.integration_1c = integration_1c ? integration_1c.data.status : false;\n    const alternative_integration = await Context.fields.settings_kedo.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('use_alternative_integration')))\n        .first();\n    Context.data.use_alternative_integration = alternative_integration ? alternative_integration.data.status : false;\n    const alternative_system = await Context.fields.settings_kedo.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('use_alternative_system')))\n        .first();\n    Context.data.use_alternative_system = alternative_system ? alternative_system.data.status : false;\n}\nasync function get_director_app() {\n    const org_head = await Context.fields.director_app.app.search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(Context.data.staff_chief), f.__status.eq(Context.fields.director_app.app.fields.__status.variants.signed_documents)))\n        .first();\n    Context.data.director_app = org_head;\n}\nasync function changeStatusSigning() {\n    if (!Context.data.free_from) {\n        throw new Error(\"Context.data.free_from is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.free_from.namespace,\n            code: Context.data.free_from.code,\n            id: Context.data.free_from.id,\n        },\n        status: \"signing\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusCorrection() {\n    if (!Context.data.free_from) {\n        throw new Error(\"Context.data.free_from is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.free_from.namespace,\n            code: Context.data.free_from.code,\n            id: Context.data.free_from.id,\n        },\n        status: \"correction\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusApproval() {\n    if (!Context.data.free_from) {\n        throw new Error(\"Context.data.free_from is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.free_from.namespace,\n            code: Context.data.free_from.code,\n            id: Context.data.free_from.id,\n        },\n        status: \"approval\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusAgreedSigned() {\n    if (!Context.data.free_from) {\n        throw new Error(\"Context.data.free_from is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.free_from.namespace,\n            code: Context.data.free_from.code,\n            id: Context.data.free_from.id,\n        },\n        status: \"agreed_signed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusChiefOrderSigning() {\n    if (!Context.data.free_from) {\n        throw new Error(\"Context.data.free_from is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.free_from.namespace,\n            code: Context.data.free_from.code,\n            id: Context.data.free_from.id,\n        },\n        status: \"chief_order_signing\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusCompleted() {\n    if (!Context.data.free_from) {\n        throw new Error(\"Context.data.free_from is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.free_from.namespace,\n            code: Context.data.free_from.code,\n            id: Context.data.free_from.id,\n        },\n        status: \"completed\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusCancelled() {\n    if (!Context.data.free_from) {\n        throw new Error(\"Context.data.free_from is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.free_from.namespace,\n            code: Context.data.free_from.code,\n            id: Context.data.free_from.id,\n        },\n        status: \"cancelled\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\nasync function changeStatusNeedDecision() {\n    if (!Context.data.free_from) {\n        throw new Error(\"Context.data.free_from is undefined\");\n    }\n    const obj_status = {\n        app: {\n            namespace: Context.data.free_from.namespace,\n            code: Context.data.free_from.code,\n            id: Context.data.free_from.id,\n        },\n        status: \"need_decision\",\n    };\n    Context.data.kedo_status = JSON.stringify(obj_status);\n}\n","gatewayPairs":{},"hasTranslations":false}
