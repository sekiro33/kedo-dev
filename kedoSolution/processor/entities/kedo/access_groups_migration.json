{
  "__id": "018e89f8-23b6-7938-8cda-1df81ca74bac",
  "namespace": "kedo",
  "code": "access_groups_migration",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "Миграция групп доступа",
  "type": "bpmn",
  "draft": false,
  "version": 3,
  "context": [
    {
      "code": "alldocs_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Массив с приложениями",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "timer",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Таймер",
        "data": {
          "additionalType": "datetime",
          "defaultTimeType": "startOfDay"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "token",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Api-ключ",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "inner_users_exists",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Внутренние пользователи существуют",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "all_objects_processed",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Все объекты обработаны",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "number_chunks",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Количество чанков ",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "iteration",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 0,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Итерация",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "chunk_size",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 100,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Количество объектов обрабатываемых за итерацию",
        "tooltip": "Миграция проходит по итерациям, если ваш сервер не выдерживает нагрузку, поробуйте указать количество объектов вручную (по умолчанию: 100)",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "chunks_exists",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Объекты существуют",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "doccodes_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Массив с кодами приложений",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "chunks",
      "type": "JSON",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Массив с объектами",
        "data": {}
      }
    },
    {
      "code": "organization_app",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "organization",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Приложение организации",
        "data": {}
      }
    },
    {
      "code": "staff_chunks",
      "type": "JSON",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Массив сотрудников",
        "data": {}
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "settings_app",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "settings",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Приложения настройки",
        "data": {}
      }
    },
    {
      "code": "checkout",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Чек",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "staff_app",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Приложение сотрудники",
        "data": {}
      }
    },
    {
      "code": "domen",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Домен",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "org_rights_app",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "access_settings_organization",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Приложение Права доступа организаций",
        "data": {}
      }
    }
  ],
  "manualRun": true,
  "readonly": false,
  "__createdAt": "2023-09-29T17:18:35.823366356Z",
  "__createdBy": "5d4a0602-0470-4d58-9ba2-89062f72b084",
  "__updatedAt": "2024-04-11T08:29:05.763945696Z",
  "__updatedBy": "54584d91-0741-4200-a803-b00376614edb",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 288,
        "y": 48,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "type": "start",
        "color": "#ffffff",
        "exits": ["fa9f412b-0ae9-4ad4-bbf5-93dd131d1633"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true,
              "hideEmpty": false
            },
            {
              "code": "chunk_size",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            }
          ],
          "instruction": "Будет запущен процесс распределения групп доступа по документам.",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Миграция групп доступа - {$__createdAt}",
          "titleGenerateMethod": "template"
        }
      },
      "056b5c0d-4290-44a7-86af-21142f89dfbe": {
        "x": 264,
        "y": 128,
        "id": "056b5c0d-4290-44a7-86af-21142f89dfbe",
        "icon": "script",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Поиск объектов ",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["9460a088-6244-45c4-8ed4-0ef1c78e8043"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getSolutions",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "18e4ab68-3049-4894-af82-b45123f07f6f": {
        "x": 288,
        "y": 344,
        "id": "18e4ab68-3049-4894-af82-b45123f07f6f",
        "icon": "exclusive",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "3ac9a5f1-e04c-4ed6-9a77-f7e7727c094f",
          "8667381c-c718-44a1-8996-8e4fe8dfc98c"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "3dae25f2-38f5-40b3-9298-14ccaac88a7f": {
        "x": 288,
        "y": 680,
        "id": "3dae25f2-38f5-40b3-9298-14ccaac88a7f",
        "icon": "exclusive",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "6bc5924d-ba1a-421c-8342-85ecc780de4a",
          "abdf670c-ede9-4870-9e7e-da789ad67fe8"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "3db24a60-9939-455a-a957-f5b19a4282bc": {
        "x": 88,
        "y": 632,
        "id": "3db24a60-9939-455a-a957-f5b19a4282bc",
        "icon": "notification",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Отсутствуют чанки, миграция групп доступа не выполнена",
        "type": "notification",
        "color": "#ffff66",
        "exits": ["ce49f6ca-db24-476f-ba13-3feb0a647904"],
        "width": 80,
        "height": 64,
        "settings": {
          "author": {
            "code": "",
            "kind": "system"
          },
          "target": {
            "kind": "process"
          },
          "receivers": [
            {
              "kind": "current"
            }
          ],
          "messageHeader": "Отсутствуют чанки, миграция групп доступа не выполнена"
        }
      },
      "4022690c-0e69-4338-8ad6-5aaacfdf1ddd": {
        "x": 288,
        "y": 488,
        "id": "4022690c-0e69-4338-8ad6-5aaacfdf1ddd",
        "icon": "exclusive",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "c0a81107-2d99-4ebf-b3b8-f677d34c826a",
          "6cc5b6dd-0c37-450c-b72a-72fcf8546f7a"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "405b2693-9b7d-4f64-8faf-168f8ea830a1": {
        "x": 264,
        "y": 256,
        "id": "405b2693-9b7d-4f64-8faf-168f8ea830a1",
        "icon": "script",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Получаем коды приложений",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["1348f9c0-cfd1-4919-9be2-85c9a5305e3a"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "checkAppsScheme",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "47d41ebd-7101-4d30-b80b-97f67714a092": {
        "x": 448,
        "y": 328,
        "id": "47d41ebd-7101-4d30-b80b-97f67714a092",
        "icon": "script",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Инкремент итерации и установка таймера",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["0dec4f12-9742-4b4c-b6b4-7db4a92955c8"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "timeout",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "671d1d99-4fb5-43dc-b82e-58faf2609b4e": {
        "x": 472,
        "y": 272,
        "id": "671d1d99-4fb5-43dc-b82e-58faf2609b4e",
        "icon": "timer",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Таймер ",
        "type": "event",
        "color": "#ffffff",
        "exits": ["b939d12e-7900-4854-85bf-1acda33a365b"],
        "width": 32,
        "height": 32,
        "settings": {
          "kind": "timer",
          "timer": {
            "code": "timer",
            "days": 0,
            "kind": "variable",
            "hours": 0,
            "minutes": 0,
            "absolute": false,
            "substraction": false
          }
        }
      },
      "b828fa1f-2273-458e-a7e9-c23eb5e54929": {
        "x": 288,
        "y": 856,
        "id": "b828fa1f-2273-458e-a7e9-c23eb5e54929",
        "icon": "end",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "ca88758b-ebb8-4454-b2f3-3e46d75edcc9": {
        "x": 264,
        "y": 744,
        "id": "ca88758b-ebb8-4454-b2f3-3e46d75edcc9",
        "icon": "notification",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Миграция групп доступа выполнена",
        "type": "notification",
        "color": "#ffff66",
        "exits": ["0069f758-56cc-4863-9b55-32c090090704"],
        "width": 80,
        "height": 64,
        "settings": {
          "author": {
            "code": "",
            "kind": "system"
          },
          "target": {
            "kind": "process"
          },
          "receivers": [
            {
              "kind": "current"
            }
          ],
          "messageHeader": "Миграция групп доступа выполнена"
        }
      },
      "d7ef4cb9-7703-45ac-9d53-a6be5afaa485": {
        "x": 264,
        "y": 584,
        "id": "d7ef4cb9-7703-45ac-9d53-a6be5afaa485",
        "icon": "script",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Обработать чанк",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "55982ac6-70e6-4840-a7de-147ce66c9cd6",
          "a55e2458-dc23-40b6-8f81-718cb4de27fc"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "migrateDocRights",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "a55e2458-dc23-40b6-8f81-718cb4de27fc",
              "notify": false,
              "interrupt": true,
              "receivers": []
            }
          }
        }
      },
      "eb561150-12da-4e5a-b373-7ef2e3f2eeb7": {
        "x": 264,
        "y": 400,
        "id": "eb561150-12da-4e5a-b373-7ef2e3f2eeb7",
        "icon": "script",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Разделение объектов на чанки",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["ade18598-9a99-4351-acb3-7e95843ccd90"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "splitDocs",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "ffb7fd7e-c220-4a95-8ce8-6e8a2875712b": {
        "x": 472,
        "y": 600,
        "id": "ffb7fd7e-c220-4a95-8ce8-6e8a2875712b",
        "icon": "timer",
        "lane": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Ожидание отката процесса",
        "type": "event",
        "color": "#ffffff",
        "exits": ["f8fe2038-8a72-4fea-930c-b6cb9f10388f"],
        "width": 32,
        "height": 32,
        "settings": {
          "kind": "timer",
          "timer": {
            "days": 0,
            "kind": "duration",
            "hours": 0,
            "minutes": 1,
            "absolute": true
          }
        }
      }
    },
    "lanes": {
      "3169f77b-2c71-413b-b042-9ed98b69e69f": {
        "x": 8,
        "y": 8,
        "id": "3169f77b-2c71-413b-b042-9ed98b69e69f",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 1092,
        "height": 1076,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "0069f758-56cc-4863-9b55-32c090090704": {
        "id": "0069f758-56cc-4863-9b55-32c090090704",
        "name": "",
        "path": [
          {
            "x": 304,
            "y": 808
          },
          {
            "x": 304,
            "y": 856
          }
        ],
        "type": "plain",
        "source": "ca88758b-ebb8-4454-b2f3-3e46d75edcc9",
        "target": "b828fa1f-2273-458e-a7e9-c23eb5e54929",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "0dec4f12-9742-4b4c-b6b4-7db4a92955c8": {
        "id": "0dec4f12-9742-4b4c-b6b4-7db4a92955c8",
        "name": "",
        "path": [
          {
            "x": 488,
            "y": 328
          },
          {
            "x": 488,
            "y": 304
          }
        ],
        "type": "plain",
        "source": "47d41ebd-7101-4d30-b80b-97f67714a092",
        "target": "671d1d99-4fb5-43dc-b82e-58faf2609b4e",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "1348f9c0-cfd1-4919-9be2-85c9a5305e3a": {
        "id": "1348f9c0-cfd1-4919-9be2-85c9a5305e3a",
        "name": "",
        "path": [
          {
            "x": 304,
            "y": 320
          },
          {
            "x": 304,
            "y": 344
          }
        ],
        "type": "plain",
        "source": "405b2693-9b7d-4f64-8faf-168f8ea830a1",
        "target": "18e4ab68-3049-4894-af82-b45123f07f6f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "3ac9a5f1-e04c-4ed6-9a77-f7e7727c094f": {
        "id": "3ac9a5f1-e04c-4ed6-9a77-f7e7727c094f",
        "name": "",
        "path": [
          {
            "x": 320,
            "y": 360
          },
          {
            "x": 448,
            "y": 360
          }
        ],
        "type": "plain",
        "source": "18e4ab68-3049-4894-af82-b45123f07f6f",
        "target": "47d41ebd-7101-4d30-b80b-97f67714a092",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "iteration"
              },
              "b": {
                "kind": "context",
                "value": "number_chunks"
              },
              "type": "FLOAT",
              "inversion": false,
              "operation": {
                "relation": "less",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "55982ac6-70e6-4840-a7de-147ce66c9cd6": {
        "id": "55982ac6-70e6-4840-a7de-147ce66c9cd6",
        "name": "",
        "path": [
          {
            "x": 304,
            "y": 648
          },
          {
            "x": 304,
            "y": 680
          }
        ],
        "type": "plain",
        "source": "d7ef4cb9-7703-45ac-9d53-a6be5afaa485",
        "target": "3dae25f2-38f5-40b3-9298-14ccaac88a7f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "6bc5924d-ba1a-421c-8342-85ecc780de4a": {
        "id": "6bc5924d-ba1a-421c-8342-85ecc780de4a",
        "name": "",
        "path": [
          {
            "x": 320,
            "y": 696
          },
          {
            "x": 352,
            "y": 696
          },
          {
            "x": 352,
            "y": 632
          },
          {
            "x": 344,
            "y": 632
          }
        ],
        "type": "default",
        "source": "3dae25f2-38f5-40b3-9298-14ccaac88a7f",
        "target": "d7ef4cb9-7703-45ac-9d53-a6be5afaa485",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "6cc5b6dd-0c37-450c-b72a-72fcf8546f7a": {
        "id": "6cc5b6dd-0c37-450c-b72a-72fcf8546f7a",
        "name": "Чанки отсутствуют",
        "path": [
          {
            "x": 288,
            "y": 504
          },
          {
            "x": 128,
            "y": 504
          },
          {
            "x": 128,
            "y": 632
          }
        ],
        "type": "default",
        "source": "4022690c-0e69-4338-8ad6-5aaacfdf1ddd",
        "target": "3db24a60-9939-455a-a957-f5b19a4282bc",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "8667381c-c718-44a1-8996-8e4fe8dfc98c": {
        "id": "8667381c-c718-44a1-8996-8e4fe8dfc98c",
        "name": "Получили коды всех приложений",
        "path": [
          {
            "x": 304,
            "y": 376
          },
          {
            "x": 304,
            "y": 400
          }
        ],
        "type": "default",
        "source": "18e4ab68-3049-4894-af82-b45123f07f6f",
        "target": "eb561150-12da-4e5a-b373-7ef2e3f2eeb7",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "9460a088-6244-45c4-8ed4-0ef1c78e8043": {
        "id": "9460a088-6244-45c4-8ed4-0ef1c78e8043",
        "name": "",
        "path": [
          {
            "x": 304,
            "y": 192
          },
          {
            "x": 304,
            "y": 256
          }
        ],
        "type": "plain",
        "source": "056b5c0d-4290-44a7-86af-21142f89dfbe",
        "target": "405b2693-9b7d-4f64-8faf-168f8ea830a1",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "a55e2458-dc23-40b6-8f81-718cb4de27fc": {
        "id": "a55e2458-dc23-40b6-8f81-718cb4de27fc",
        "name": "",
        "path": [
          {
            "x": 324,
            "y": 584
          },
          {
            "x": 324,
            "y": 576
          },
          {
            "x": 488,
            "y": 576
          },
          {
            "x": 488,
            "y": 600
          }
        ],
        "type": "error",
        "source": "d7ef4cb9-7703-45ac-9d53-a6be5afaa485",
        "target": "ffb7fd7e-c220-4a95-8ce8-6e8a2875712b",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "abdf670c-ede9-4870-9e7e-da789ad67fe8": {
        "id": "abdf670c-ede9-4870-9e7e-da789ad67fe8",
        "name": "Все объекты обработаны",
        "path": [
          {
            "x": 304,
            "y": 712
          },
          {
            "x": 304,
            "y": 744
          }
        ],
        "type": "plain",
        "source": "3dae25f2-38f5-40b3-9298-14ccaac88a7f",
        "target": "ca88758b-ebb8-4454-b2f3-3e46d75edcc9",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "all_objects_processed"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ade18598-9a99-4351-acb3-7e95843ccd90": {
        "id": "ade18598-9a99-4351-acb3-7e95843ccd90",
        "name": "",
        "path": [
          {
            "x": 304,
            "y": 464
          },
          {
            "x": 304,
            "y": 488
          }
        ],
        "type": "plain",
        "source": "eb561150-12da-4e5a-b373-7ef2e3f2eeb7",
        "target": "4022690c-0e69-4338-8ad6-5aaacfdf1ddd",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "b939d12e-7900-4854-85bf-1acda33a365b": {
        "id": "b939d12e-7900-4854-85bf-1acda33a365b",
        "name": "",
        "path": [
          {
            "x": 472,
            "y": 288
          },
          {
            "x": 344,
            "y": 288
          }
        ],
        "type": "plain",
        "source": "671d1d99-4fb5-43dc-b82e-58faf2609b4e",
        "target": "405b2693-9b7d-4f64-8faf-168f8ea830a1",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c0a81107-2d99-4ebf-b3b8-f677d34c826a": {
        "id": "c0a81107-2d99-4ebf-b3b8-f677d34c826a",
        "name": "Чанки заполнены",
        "path": [
          {
            "x": 304,
            "y": 520
          },
          {
            "x": 304,
            "y": 584
          }
        ],
        "type": "plain",
        "source": "4022690c-0e69-4338-8ad6-5aaacfdf1ddd",
        "target": "d7ef4cb9-7703-45ac-9d53-a6be5afaa485",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "chunks_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ce49f6ca-db24-476f-ba13-3feb0a647904": {
        "id": "ce49f6ca-db24-476f-ba13-3feb0a647904",
        "name": "",
        "path": [
          {
            "x": 128,
            "y": 696
          },
          {
            "x": 128,
            "y": 872
          },
          {
            "x": 288,
            "y": 872
          }
        ],
        "type": "plain",
        "source": "3db24a60-9939-455a-a957-f5b19a4282bc",
        "target": "b828fa1f-2273-458e-a7e9-c23eb5e54929",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "f8fe2038-8a72-4fea-930c-b6cb9f10388f": {
        "id": "f8fe2038-8a72-4fea-930c-b6cb9f10388f",
        "name": "",
        "path": [
          {
            "x": 472,
            "y": 616
          },
          {
            "x": 344,
            "y": 616
          }
        ],
        "type": "plain",
        "source": "ffb7fd7e-c220-4a95-8ce8-6e8a2875712b",
        "target": "d7ef4cb9-7703-45ac-9d53-a6be5afaa485",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "fa9f412b-0ae9-4ad4-bbf5-93dd131d1633": {
        "id": "fa9f412b-0ae9-4ad4-bbf5-93dd131d1633",
        "name": "Начать миграцию",
        "path": [
          {
            "x": 304,
            "y": 80
          },
          {
            "x": 304,
            "y": 128
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "056b5c0d-4290-44a7-86af-21142f89dfbe",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "class MyRole {\n    group: UserGroupItem | UserItem[] | OrganisationStructureItem\n    type: 'group' | 'user' | 'orgstruct'\n    code: string\n    constructor(group: UserGroupItem | UserItem[] | OrganisationStructureItem, type: 'group' | 'user' | 'orgstruct', code: string) {\n        this.code = code;\n        this.group = group;\n        this.type = type;\n    }\n    getUsers(): Promise\u003cUserItem[]\u003e {\n        if (this.type == \"group\") {\n            return (\u003cUserGroupItem\u003ethis.group).users();\n        }\n        else if (this.type == \"orgstruct\") {\n            return System.users.search().where(i =\u003e i.osIds.has((\u003cOrganisationStructureItem\u003ethis.group))).size(10000).all();\n        }\n        else return new Promise\u003cUserItem[]\u003e(() =\u003e \u003cUserItem[]\u003ethis.group)\n    }\n    json(): any {\n        return {\n            code: this.code,\n            type: this.type\n        }\n    }\n}\n\ntype docMeta = { id: string, code: string, ns: string, staffId: string, orgRightsId: string | string[], isArray: boolean };\ntype docMap = { id: string, ns: string, staffId: string, orgRightsId: string };\n\nconst chunkSize = Context.data.chunk_size!;\n\nconst namespaces = [\n    \"kedo\",\n    \"kedo_ext\",\n    \"personnel_documents\",\n    \"absences\",\n    \"time_tracking\",\n    \"absences_ext\",\n    \"business_trips\",\n    \"business_trips_ext\"\n];\n\nconst solutionsNames = [\n    \"kedo\",\n    \"otpuska\",\n    \"komandirovki\"\n];\n\nlet allDocs: { ns: string, code: string }[];\nlet allDocsSubarray: { ns: string, code: string }[];\nlet docCodes: string[];\nconst size = 20; //размер подмассива allDocsSubarray;\n\n//Ищем все решения\nasync function getSolutions(): Promise\u003cvoid\u003e {\n    const token = await Context.fields.settings_app.app.search().where(f =\u003e f.code.eq(\"api_key\")).first().then(r =\u003e r!.data.value)!;\n    const domen = await Context.fields.settings_app.app.search().where(f =\u003e f.code.eq(\"domen\")).first().then(r =\u003e r!.data.value);\n    if (!token || !domen) {\n        throw new Error(\"Проверьте заполненность настроек Домен и Api-токен для методов в модуле в приложении Меню настроек.\")\n    };\n\n    Context.data.domen = domen;\n    Context.data.token = token;\n\n    const fullUrl = `https://${domen}/pub/v1/scheme/solutions`;\n    const response = await fetch(fullUrl, {\n        headers: {\n            Authorization: `Bearer ${token}`\n        }\n    });\n    if (!response.ok) {\n        throw new Error(await response.text());\n    };\n    const responseJson = await response.json();\n    if (responseJson.result.result.length \u003c 1) {\n        throw new Error(\"Не найдено решений\");\n    };\n    const solutions = responseJson.result.result.filter((solution: any) =\u003e solutionsNames.indexOf(solution.code) != -1).map((solution: any) =\u003e solution.code);\n\n    const allNamespaces = await getAppNamespaces(solutions);\n    allDocs = await getDocs(allNamespaces);\n\n    Context.data.alldocs_json = JSON.stringify(allDocs);\n    Context.data.number_chunks = Math.ceil(allDocs.length / size)\n    Context.data.iteration = 0;\n\n};\n\n//Получем документы\nasync function getDocs(solutions: string[]): Promise\u003cany[]\u003e {\n    try {\n        let allDocs: any[] = [];\n        let promises: Promise\u003cvoid\u003e[] = [];\n        for (let code of solutions) {\n            const appsUrl = `https://${Context.data.domen}/pub/v1/scheme/namespaces/${code}/apps`;\n            promises.push(fetch(appsUrl, {\n                headers: {\n                    Authorization: `Bearer ${Context.data.token}`\n                }\n            }).then(async response =\u003e {\n                if (!response.ok) {\n                    throw new Error(await response.text());\n                };\n                const responseJson = await response.json();\n                const apps = responseJson.result.result;\n                if (apps.length \u003c 1) {\n                    Context.data.debug += `Не найдено приложений в ${code}`\n                };\n                const docs = apps.filter((app: any) =\u003e {\n                    return namespaces.indexOf(app.namespace) != -1 \u0026\u0026 app.type.toLowerCase() === \"document\";\n                });\n                allDocs.push(...docs);\n            }));\n        };\n        await Promise.all(promises);\n        const mappedDocs = allDocs.map((doc: any) =\u003e {\n            return {\n                ns: doc.namespace,\n                code: doc.code\n            };\n        });\n        mappedDocs.push({ ns: \"kedo\", code: \"staff\" });\n        mappedDocs.push({ ns: \"kedo\", code: \"transfer_application\" });\n        mappedDocs.push({ ns: \"kedo\", code: \"execution_duties\" });\n        mappedDocs.push({ ns: \"kedo\", code: \"category_assignment\" });\n        mappedDocs.push({ ns: \"kedo\", code: \"employees_personal_data\" });\n        mappedDocs.push({ ns: \"kedo\", code: \"medical_request\" });\n        mappedDocs.push({ ns: \"kedo\", code: \"docs_lna\" });\n        mappedDocs.push({ ns: \"kedo\", code: \"medical_examination\" });\n        mappedDocs.push({ ns: \"kedo\", code: \"structural_subdivision\" });\n        const checkAbsencesResponse = await fetch(`https://${Context.data.domen!}/pub/v1/scheme/namespaces/absences/apps/vacations`, {\n            headers: {\n                Authorization: `Bearer ${Context.data.token!}`\n            }\n        });\n        const checkBusinessTripsResponse = await fetch(`https://${Context.data.domen!}/pub/v1/scheme/namespaces/business_trips/apps/businesstrip_requests`, {\n            headers: {\n                Authorization: `Bearer ${Context.data.token!}`\n            }\n        });\n        if (checkAbsencesResponse.ok) {\n            mappedDocs.push({ ns: \"absences\", code: \"vacations\" });\n            mappedDocs.push({ ns: \"time_tracking\", code: \"overtime_work\" });\n        };\n        if (checkBusinessTripsResponse.ok) {\n            mappedDocs.push({ ns: \"business_trips\", code: \"businesstrip_requests\" });\n        };\n        return mappedDocs;\n    } catch (err) {\n        throw new Error(`error at getDocs: ${err.message}`);\n    }\n};\n\n//Получаем namespace приложений\nasync function getAppNamespaces(solutions: string[]): Promise\u003cany[]\u003e {\n    try {\n        let allNamespaces: any[] = [];\n        for (let code of solutions) {\n            const fullUrl = `https://${Context.data.domen}/pub/v1/scheme/solutions/${code}`;\n            const response = await fetch(fullUrl, {\n                headers: {\n                    Authorization: `Bearer ${Context.data.token}`\n                }\n            });\n            if (!response.ok) {\n                throw new Error(await response.text());\n            };\n            const responseJson = await response.json();\n            const content = responseJson.solution.content;\n            if (content.length \u003c 1) {\n                Context.data.debug += `no apps in namespace ${code}`;\n                continue;\n            };\n            const mappedNamespaces = content.filter((ns: any) =\u003e namespaces.indexOf(ns.code) != -1).map((ns: any) =\u003e ns.code);\n            allNamespaces.push(...mappedNamespaces);\n        };\n        return allNamespaces;\n    } catch (err) {\n        throw new Error(`error at getAppNamespaces: ${err.message}`);\n    }\n};\n\n//Получаем коды документов\nasync function checkAppsScheme(): Promise\u003cvoid\u003e {\n    const i = Context.data.iteration!;\n    let allDocs: { ns: string, code: string }[] = JSON.parse(Context.data.alldocs_json!);\n    //Получаем подмассив всех документов\n    const allDocsSubarray = allDocs.slice((i * size), (i * size) + size);\n    try {\n        const domen = Context.data.domen;\n        const token = Context.data.token;\n        const promises: Promise\u003cstring\u003e[] = [];\n        allDocsSubarray.forEach(doc =\u003e {\n            promises.push(fetch(`https://${domen}/pub/v1/scheme/namespaces/${doc.ns}/apps/${doc.code}`, {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }).then(async resp =\u003e {\n                const respJson = await resp.json();\n                if (!respJson.success) {\n                    throw new Error(`error at ${JSON.stringify(doc)}: ${respJson.error}`);\n                };\n                if (!respJson.application.fields.find((field: any) =\u003e field.code === \"access_group\")) {\n                    return \"\";\n                };\n                return doc.code\n            }).catch(err =\u003e {\n                throw new Error(`error at checkAppsScheme/for: ${err.message}`);\n            }));\n        });\n        const subDocCodes = await Promise.all(promises).then(resp =\u003e resp.filter(item =\u003e item));\n        //Если существует jsonка кодов документов, то прибавляем массив, если нет, то инициализируем новый массив-результат с кодами документов\n        if (!Context.data.doccodes_json || Context.data.doccodes_json.length \u003c 1) {\n            Context.data.doccodes_json = JSON.stringify(subDocCodes)\n        } else {\n            let docCodes: string[] = JSON.parse(Context.data.doccodes_json);\n            docCodes = docCodes.concat(subDocCodes);\n            Context.data.doccodes_json = JSON.stringify(docCodes);\n        }\n\n    } catch (err) {\n        throw new Error(`error at checkAppsScheme: ${err.message}`);\n    };\n};\n\n//Получаем все документы\nasync function getAllItems(docMeta: { ns: string, code: string }): Promise\u003cdocMeta[]\u003e {\n    const domen = Context.data.domen!;\n    const token = Context.data.token!;\n    let allDocs: any[] = [];\n    let searchFulfilled = false;\n    let itemsCount = 0;\n    while (!searchFulfilled) {\n        const response = await fetch(`https://${domen}/pub/v1/app/${docMeta.ns}/${docMeta.code}/list`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                active: true,\n                from: itemsCount,\n                size: chunkSize,\n            })\n        });\n        if (!response.ok) {\n            throw new Error(await response.text());\n        };\n        const respJson = await response.json();\n        const result = respJson.result.result;\n        if (result.length \u003c 1) {\n            searchFulfilled = true;\n            break;\n        };\n        if (itemsCount \u003c respJson.result.total) {\n            itemsCount += result.length;\n        } else {\n            searchFulfilled = true;\n            break;\n        };\n        allDocs.push(result.map((item: any) =\u003e {\n            return {\n                id: item.__id,\n                ns: docMeta.ns,\n                code: docMeta.code,\n                staffId: item.kedo_staff ? item.kedo_staff[0] : item.staff ? item.staff[0] : docMeta.code === \"structural_subdivision\" || docMeta.code === \"vacation_schedule\" ? item.organization[0] : item.__id\n            };\n        }));\n    };\n    let flatDocs = [].concat.apply([], allDocs)\n    return flatDocs;\n};\n\n//Разделяем на чанки\nasync function splitDocs(): Promise\u003cvoid\u003e {\n    const docs: { ns: string, code: string }[] = JSON.parse(Context.data.alldocs_json!);\n    const allStaff = await Context.fields.staff_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allOrgs = await Context.fields.organization_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allOrgRights = await Context.fields.org_rights_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const docCodes: string[] = JSON.parse(Context.data.doccodes_json!);\n    const filteredDocs = docs.filter(doc =\u003e docCodes.indexOf(doc.code) !== -1);\n    let promises: Promise\u003cany\u003e[] = [];\n\n    for (let doc of filteredDocs) {\n        promises.push(getAllItems(doc))\n    };\n\n    let allDocsFiltred: docMeta[] = [].concat.apply([], await Promise.all(promises));\n\n    Context.data.debug = JSON.stringify(allDocsFiltred)\n    allDocsFiltred = allDocsFiltred.filter(item =\u003e {\n        const staff = allStaff.find(s =\u003e s.id === item.staffId);\n        if (!staff \u0026\u0026 !item.staffId) {\n            return false;\n        };\n\n        let organization: ApplicationItem\u003cApplication$kedo$organization$Data, any\u003e;\n        let orgRights: ApplicationItem\u003cApplication$kedo$access_settings_organization$Data, any\u003e | ApplicationItem\u003cApplication$kedo$access_settings_organization$Data, any\u003e[];\n        if (item.code == \"staff\" \u0026\u0026 staff \u0026\u0026 staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 1) {\n            const allStaffOrgs = staff!.data.employment_table.filter(row =\u003e row.organization).map(row =\u003e row.organization.id);\n            const orgsWithAccessRights = allOrgs.filter(org =\u003e allStaffOrgs.indexOf(org.id) != -1 \u0026\u0026 org.data.access_settings_organization);\n            const orgRightsIds = orgsWithAccessRights.map(org =\u003e org.data.access_settings_organization!.id);\n            const accessSettingsWithFields = allOrgRights.filter(right =\u003e orgRightsIds.indexOf(right.id) != -1 \u0026\u0026 right.data[item.code as keyof typeof right.fields]);\n            item.orgRightsId = accessSettingsWithFields.map(right =\u003e right.id);\n            item.isArray = true;\n            return true;\n        };\n        if (item.code === \"structural_subdivision\" \u0026\u0026 !staff) {\n            organization = allOrgs.find(org =\u003e org.id === item.staffId)!\n        } else if (staff) {\n            if (!staff.data.organization) {\n                return false;\n            };\n            organization = allOrgs.find(org =\u003e org.id === staff!.data.organization!.id)!;\n        };\n        if (!organization! || !organization.data.access_settings_organization) {\n            Context.data.debug += `no org for ${item.code} ${item.id}`\n            return false;\n        };\n        orgRights = allOrgRights.find(right =\u003e right.id === organization.data.access_settings_organization!.id)!;\n        if (!orgRights) {\n            Context.data.debug += `no org rights for organization ${organization.data.__name}`\n            return false;\n        };\n        item.orgRightsId = orgRights.id;\n        const fieldExists = orgRights.fields[item.code as keyof typeof orgRights.fields];\n        if (!fieldExists) {\n            Context.data.debug += `no field ${item.code} for ${orgRights.data.__name}`\n            return false;\n        };\n        const roleField = orgRights.data[item.code as keyof typeof orgRights.data];\n        if (!roleField || roleField.length \u003c 1) {\n            Context.data.debug += `empty field ${item.code} for ${orgRights.data.__name}`\n            return false;\n        };\n        return true;\n    });\n\n\n    let chunks: docMeta[][] = [];\n    for (let i = 0; i \u003c allDocsFiltred.length; i += chunkSize) {\n        const chunk = allDocsFiltred.slice(i, i + chunkSize);\n        chunks.push(chunk)\n    };\n\n    if (chunks.length \u003e 0) {\n        Context.data.chunks = chunks;\n        Context.data.chunks_exists = true;\n        Context.data.iteration = 0\n    }\n};\n\n//Выполняем миграцию прав на документ\nasync function migrateDocRights(): Promise\u003cvoid\u003e {\n    const allOrgRights = await Context.fields.org_rights_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const domen = Context.data.domen!;\n    const token = Context.data.token!;\n    const promises: Promise\u003cFetchResponse\u003e[] = [];\n    let chunk: docMeta[] = Context.data.chunks[Context.data.iteration!];\n\n    for (let doc of chunk) {\n        if (doc.isArray) {\n            const orgRights = allOrgRights.filter(right =\u003e doc.orgRightsId.indexOf(right.id) != -1);\n            const roleFields = orgRights.map(right =\u003e {\n                return {\n                    type: \"group\",\n                    code: right.data[doc.code as keyof typeof right.data][0].code\n                }\n            });\n            promises.push(fetch(`https://${domen}/pub/v1/app/${doc.ns}/${doc.code}/${doc.id}/update`, {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${token}`\n                },\n                body: JSON.stringify({\n                    context: {\n                        access_group: roleFields\n                    }\n                })\n            }));\n        } else {\n            const orgRights = allOrgRights.find(right =\u003e right.id === doc.orgRightsId)!;\n            const roleField = orgRights!.data[doc.code as keyof typeof orgRights.data];\n            promises.push(fetch(`https://${domen}/pub/v1/app/${doc.ns}/${doc.code}/${doc.id}/update`, {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${token}`\n                },\n                body: JSON.stringify({\n                    context: {\n                        access_group: [\n                            {\n                                type: \"group\",\n                                code: roleField[0].code\n                            }\n                        ]\n                    }\n                })\n            }));\n        }\n    };\n\n    await Promise.all(promises);\n\n    Context.data.iteration!++;\n    if (chunk.length \u003c chunkSize) {\n        Context.data.all_objects_processed = true;\n        Context.data.debug += `items processed: ${[].concat.apply([], (Context.data.chunks as docMeta[][])).length}`;\n    };\n};\nasync function timeout(): Promise\u003cvoid\u003e {\n    Context.data.iteration! += 1;\n    Context.data.timer = new Datetime().add(new Duration(5, 'seconds'));\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "debugForm": {
      "allFields": false,
      "formFields": [
        {
          "code": "__name",
          "tooltip": "Название экземпляра процесса, будет показываться в задачах",
          "readonly": false,
          "required": true,
          "hideEmpty": false
        },
        {
          "code": "chunk_size",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        }
      ]
    },
    "targetFeed": {
      "type": "instance",
      "variable": ""
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": false,
    "applicationContext": false,
    "importsDependencies": [],
    "fieldVisibilityConditions": {
      "debug": {
        "enabled": false,
        "conditions": []
      },
      "domen": {
        "enabled": false,
        "conditions": []
      },
      "timer": {
        "enabled": false,
        "conditions": []
      },
      "token": {
        "enabled": false,
        "conditions": []
      },
      "chunks": {
        "enabled": false,
        "conditions": []
      },
      "checkout": {
        "enabled": false,
        "conditions": []
      },
      "iteration": {
        "enabled": false,
        "conditions": []
      },
      "staff_app": {
        "enabled": false,
        "conditions": []
      },
      "chunk_size": {
        "enabled": false,
        "conditions": []
      },
      "alldocs_json": {
        "enabled": false,
        "conditions": []
      },
      "settings_app": {
        "enabled": false,
        "conditions": []
      },
      "staff_chunks": {
        "enabled": false,
        "conditions": []
      },
      "chunks_exists": {
        "enabled": false,
        "conditions": []
      },
      "doccodes_json": {
        "enabled": false,
        "conditions": []
      },
      "number_chunks": {
        "enabled": false,
        "conditions": []
      },
      "org_rights_app": {
        "enabled": false,
        "conditions": []
      },
      "organization_app": {
        "enabled": false,
        "conditions": []
      },
      "inner_users_exists": {
        "enabled": false,
        "conditions": []
      },
      "all_objects_processed": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
