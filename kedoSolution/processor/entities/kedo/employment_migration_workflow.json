{
  "__id": "018e89f8-23b6-791a-adbb-2fadd5d6dc32",
  "namespace": "kedo",
  "code": "employment_migration_workflow",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "__oldМиграция занятости сотрудников",
  "type": "bpmn",
  "draft": false,
  "version": 2,
  "context": [
    {
      "code": "staffs",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Сотрудники",
        "data": {},
        "input": true,
        "output": true
      }
    },
    {
      "code": "from",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 0,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "from",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "size",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 100,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Размер обрабатываемой пачки",
        "tooltip": "По умолчанию 100",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "iteration_count",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 0,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Счетчик итераций",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        },
        "input": true,
        "output": true
      }
    }
  ],
  "manualRun": true,
  "readonly": false,
  "__createdAt": "2023-12-27T12:24:57.182690644Z",
  "__createdBy": "b9287795-55a7-42be-989a-2677b5bb0a2c",
  "__updatedAt": "2024-04-05T10:02:16.49017963Z",
  "__updatedBy": "8c6e1940-a6f3-4603-aff7-7cdf41cc9799",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 80,
        "y": 80,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "1f371e8d-5fee-4351-9790-860289c93cab",
        "type": "start",
        "color": "#ffffff",
        "exits": ["4adaf688-e043-44f0-ae30-ba1b35139b49"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "size",
              "readonly": false,
              "required": true,
              "hideEmpty": false
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Миграция занятости сотрудников - {$__createdAt}",
          "titleGenerateMethod": "template"
        }
      },
      "6e1878b1-296c-4211-9275-ad0e66ca3f20": {
        "x": 256,
        "y": 80,
        "id": "6e1878b1-296c-4211-9275-ad0e66ca3f20",
        "icon": "end",
        "lane": "1f371e8d-5fee-4351-9790-860289c93cab",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "1f371e8d-5fee-4351-9790-860289c93cab": {
        "x": 8,
        "y": 8,
        "id": "1f371e8d-5fee-4351-9790-860289c93cab",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 908,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "4adaf688-e043-44f0-ae30-ba1b35139b49": {
        "id": "4adaf688-e043-44f0-ae30-ba1b35139b49",
        "name": "",
        "path": [
          {
            "x": 112,
            "y": 96
          },
          {
            "x": 256,
            "y": 96
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "6e1878b1-296c-4211-9275-ad0e66ca3f20",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\nasync function getStaffPack(): Promise\u003cvoid\u003e {\n    let from = Context.data.from ?? 0;\n    let size = Context.data.size ?? 100;\n\n    const staffs = await Context.fields.staffs.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .from(from)\n        .size(size)\n        .all();\n\n    Context.data.staffs = staffs;\n\n    from += size;\n    Context.data.from = from;\n}\n\nasync function checkStaffPack(): Promise\u003cboolean\u003e {\n    return Context.data.staffs != undefined \u0026\u0026 Context.data.staffs.length \u003e 0;\n}\n\nasync function updateStaffEmployment(): Promise\u003cvoid\u003e {\n    if (!Context.data.staffs || Context.data.staffs.length == 0) {\n        return;\n    }\n\n    const staffs = await Context.fields.staffs.fetchAll();\n\n    const employment_directory = await Namespace.app.employment_directory.search()\n        .where((f, g) =\u003e g.and(\n            f.__id.in(staffs.map(s =\u003e s.id)),\n            f.__deletedAt.eq(null),\n            f.__status.eq(Namespace.app.employment_directory.fields.__status.variants.actual)\n        ))\n        .size(10000)\n        .all();\n\n    const employment_statuses = Namespace.app.employment_directory.fields.__status.variants;\n\n    let promises: Promise\u003cvoid\u003e[] = [];\n    let staff_promises: Promise\u003cvoid\u003e[] = [];\n\n    for (const staff of staffs) {\n        const employment_table = staff.data.employment_table;\n\n        /** Получаем все записи в справочнике занятости по сотруднику. */\n        const staff_employment = employment_directory.filter(f =\u003e f.data.staff?.id == staff.id);\n\n        if (!employment_table || employment_table.length == 0) {\n            /** Если таблица занятости пустая, то\n             * переводим все актуальные записи о занятости сотрудника\n             * в статус \"Недействительно\".\n             */\n            if (staff_employment.length \u003e 0) {\n                await Promise.all(staff_employment.map(f =\u003e f.setStatus(employment_statuses.not_valid)));\n            }\n\n            continue;\n        }\n\n        /**\n         * Для каждой строки в таблице занятости смотрим - есть ли в справочнике соответствующая запись\n         * Если есть, то обновляем информацию в ней\n         * Если нет, то создаем новую и сохраняем информацию о этой записи в строку в таблице.\n         */\n        for (const employment of employment_table) {\n            // Выполняем поиск по приложению \"Место занятости\" в таблице.\n            // Если строка в таблице не связана с каким-либо элементом в справочнике, то создаем новый элемент.\n            let app = employment_directory.find(f =\u003e f.id == employment.employment_placement_app?.id) ?? Namespace.app.employment_directory.create();\n\n            app.data.position = employment.position;\n            app.data.organization = employment.organization;\n            app.data.subdivision = employment.subdivision;\n            app.data.staff = staff;\n            app.data.type_employment = employment.type_employment;\n            app.data.admission_date_organization = employment.admission_date_organization;\n            app.data.admission_date_position = employment.admission_date_position;\n\n            // Сохранение информации о созданной/обновленной записи о месте занятости в строку в таблице.\n            employment.employment_placement_app = app;\n\n            promises.push(app.save());\n\n            if (promises.length \u003e 20) {\n                await Promise.all(promises);\n                promises = [];\n            }\n        }\n\n        staff_promises.push(staff.save());\n\n        if (staff_promises.length \u003e 20) {\n            await Promise.all(promises);\n            await Promise.all(staff_promises);\n\n            promises = [];\n            staff_promises = [];\n        }\n    }\n\n    if (promises.length \u003e 0) {\n        await Promise.all(promises);\n    }\n\n    if (staff_promises.length \u003e 0) {\n        await Promise.all(staffs);\n    }\n}\n\nasync function resetIterationCounter(): Promise\u003cvoid\u003e {\n    Context.data.iteration_count = 0;\n}\n\nasync function incIterationCounter(): Promise\u003cvoid\u003e {\n    Context.data.iteration_count = (Context.data.iteration_count ?? 0) + 1;\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "debugForm": {
      "allFields": false,
      "formFields": []
    },
    "targetFeed": {
      "type": "instance",
      "variable": ""
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": false,
    "applicationContext": false,
    "importsDependencies": [],
    "fieldVisibilityConditions": {
      "from": {
        "enabled": false,
        "conditions": []
      },
      "size": {
        "enabled": false,
        "conditions": []
      },
      "staffs": {
        "enabled": false,
        "conditions": []
      },
      "iteration_count": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
