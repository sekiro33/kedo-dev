{
  "__id": "018c8757-193c-7eb2-95fd-407d1fb43899",
  "namespace": "kedo.medical_examination",
  "code": "med_exam_initiation_workflow",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "Инициация периодических мед. осмотров",
  "type": "bpmn",
  "draft": false,
  "version": 3,
  "context": [
    {
      "code": "medical_examination",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "medical_examination",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Медосмотр"
      }
    },
    {
      "code": "medical_requests",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "medical_request",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Заявки на медосмотр",
        "data": {}
      }
    },
    {
      "code": "start_days",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дней до начала поиска",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "end_days",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дней до окончания поиска",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "testovaya_data",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Тестовая дата",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        }
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "string"
        }
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-03-27T12:10:55.204430373Z",
  "__createdBy": "8b6393ab-540b-4559-8c18-7ef92a9cc24a",
  "__updatedAt": "2023-04-19T13:10:14.070885772Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 160,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "icon": "timer",
        "lane": "65bb5c7c-edd1-48ff-8e7c-492ee3945270",
        "type": "start",
        "color": "#ffffff",
        "exits": ["ff3eccef-c0e5-4442-a826-35a8471c249c"],
        "width": 32,
        "height": 32,
        "settings": {
          "schedule": {
            "begin": "2023-03-31T07:38:59.452Z",
            "repeat": {
              "kind": "weekly",
              "every": 1,
              "weekDays": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            },
            "resume": false,
            "workRound": "ignore"
          },
          "formFields": [],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Инициация периодических мед. осмотров ({$medical_examination})",
          "titleGenerateMethod": "template"
        }
      },
      "0d33b387-c553-4f10-aaf8-5ebfd56d186d": {
        "x": 272,
        "y": 392,
        "id": "0d33b387-c553-4f10-aaf8-5ebfd56d186d",
        "lane": "65bb5c7c-edd1-48ff-8e7c-492ee3945270",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "3db5b28b-fbc0-421b-8dc4-7e3a77251b8a": {
        "x": 136,
        "y": 376,
        "id": "3db5b28b-fbc0-421b-8dc4-7e3a77251b8a",
        "lane": "65bb5c7c-edd1-48ff-8e7c-492ee3945270",
        "name": "Обработка заявок на медосмотры",
        "type": "call",
        "color": "#ffffff",
        "exits": ["69291a1b-1906-41b9-a0c8-19c5286dbf71"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "create_med_request",
          "async": false,
          "input": [],
          "output": [],
          "linkCode": "medical_requests",
          "namespace": "kedo.medical_request",
          "subProcessTargetFieldCode": "medical_request"
        }
      },
      "5bf9682d-1b25-4f8a-8e35-8053bec55567": {
        "x": 160,
        "y": 272,
        "id": "5bf9682d-1b25-4f8a-8e35-8053bec55567",
        "icon": "exclusive",
        "lane": "65bb5c7c-edd1-48ff-8e7c-492ee3945270",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "1058a98b-9e21-459a-b136-b32fb5970ca3",
          "5e1208f8-893b-4b0c-a3a3-9de3f07ef1fb"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "d8db35c3-28a6-4d5d-87c0-84225bf3a593": {
        "x": 136,
        "y": 144,
        "id": "d8db35c3-28a6-4d5d-87c0-84225bf3a593",
        "icon": "script",
        "lane": "65bb5c7c-edd1-48ff-8e7c-492ee3945270",
        "name": "Получить заканчивающиеся медосмотры",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["48598a53-e7fb-4024-a712-563554d03dce"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getEndingMedExams",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      }
    },
    "lanes": {
      "65bb5c7c-edd1-48ff-8e7c-492ee3945270": {
        "x": 32,
        "y": 8,
        "id": "65bb5c7c-edd1-48ff-8e7c-492ee3945270",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 340,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "1058a98b-9e21-459a-b136-b32fb5970ca3": {
        "id": "1058a98b-9e21-459a-b136-b32fb5970ca3",
        "name": "",
        "path": [
          {
            "x": 192,
            "y": 288
          },
          {
            "x": 288,
            "y": 288
          },
          {
            "x": 288,
            "y": 392
          }
        ],
        "type": "plain",
        "source": "5bf9682d-1b25-4f8a-8e35-8053bec55567",
        "target": "0d33b387-c553-4f10-aaf8-5ebfd56d186d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "medical_requests"
              },
              "type": "SYS_COLLECTION",
              "inversion": false,
              "operation": {
                "relation": "empty",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "48598a53-e7fb-4024-a712-563554d03dce": {
        "id": "48598a53-e7fb-4024-a712-563554d03dce",
        "name": "",
        "path": [
          {
            "x": 176,
            "y": 208
          },
          {
            "x": 176,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "d8db35c3-28a6-4d5d-87c0-84225bf3a593",
        "target": "5bf9682d-1b25-4f8a-8e35-8053bec55567",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "5e1208f8-893b-4b0c-a3a3-9de3f07ef1fb": {
        "id": "5e1208f8-893b-4b0c-a3a3-9de3f07ef1fb",
        "name": "",
        "path": [
          {
            "x": 176,
            "y": 304
          },
          {
            "x": 176,
            "y": 376
          }
        ],
        "type": "default",
        "source": "5bf9682d-1b25-4f8a-8e35-8053bec55567",
        "target": "3db5b28b-fbc0-421b-8dc4-7e3a77251b8a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "69291a1b-1906-41b9-a0c8-19c5286dbf71": {
        "id": "69291a1b-1906-41b9-a0c8-19c5286dbf71",
        "name": "",
        "path": [
          {
            "x": 216,
            "y": 408
          },
          {
            "x": 272,
            "y": 408
          }
        ],
        "type": "plain",
        "source": "3db5b28b-fbc0-421b-8dc4-7e3a77251b8a",
        "target": "0d33b387-c553-4f10-aaf8-5ebfd56d186d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ff3eccef-c0e5-4442-a826-35a8471c249c": {
        "id": "ff3eccef-c0e5-4442-a826-35a8471c249c",
        "name": "",
        "path": [
          {
            "x": 176,
            "y": 104
          },
          {
            "x": 176,
            "y": 144
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "d8db35c3-28a6-4d5d-87c0-84225bf3a593",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\nasync function getEndingMedExams(): Promise\u003cvoid\u003e {\n    const start = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.code.eq('med_start_days')\n        ))\n        .first();\n    const end = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.code.eq('med_interval_days')\n        ))\n        .first();\n    Context.data.start_days = start \u0026\u0026 start.data.quantity ? start.data.quantity : 30;\n    const end_days = end \u0026\u0026 end.data.quantity ? end.data.quantity : 14;\n    Context.data.end_days = Context.data.start_days + end_days;\n    const current_date = new TDate();\n    // Context.data.start_days = 0;\n    // Context.data.end_days = 5;\n    const med_exams = await Context.fields.medical_examination.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__status.eq(Context.fields.medical_examination.app.fields.__status.variants.passed),\n            f.extended.eq(null),\n            f.valid_up_to.gte(current_date.addDate(0, 0, Context.data.start_days!)),\n            f.valid_up_to.lte(current_date.addDate(0, 0, Context.data.end_days!))\n        ))\n        .size(10000)\n        .all();\n    Context.data.debug = med_exams.length.toString();\n    if (med_exams \u0026\u0026 med_exams.length \u003e 0) {\n        let staffs_array: TApplication\u003cApplication$kedo$staff$Data, Application$kedo$staff$Params, Application$kedo$staff$Processes\u003e[] = [];\n        let promises: Promise\u003cvoid\u003e[] = [];\n        Context.data.medical_requests = [];\n        for (const med_exam of med_exams) {\n            if (med_exam.data.staff) {\n                staffs_array.push(med_exam.data.staff)\n            }\n        }\n        staffs_array = staffs_array.filter((f, i, s) =\u003e\n            i === s.findIndex(t =\u003e t.id === f.id)\n        )\n        let staffs_result = await Promise.all(staffs_array.map(x =\u003e x.fetch()));\n        for (let i = 0; i \u003c= staffs_result.length - 1; i++) {\n            const staff = staffs_result[i];\n            const my_med_exams = med_exams.filter(f =\u003e f.data.staff \u0026\u0026 f.data.staff.id === staff.id);\n            const medical_request = Context.fields.medical_requests.app.create();\n            medical_request.data.sort_of_medical_examination = medical_request.fields.sort_of_medical_examination.variants.periodic_examination;\n            medical_request.data.staff = staffs_array[i];\n            medical_request.data.categories_table = staff.data.categories_table;\n            medical_request.data.old_postion = staff.data.position;\n            medical_request.data.harmful_factors = my_med_exams.map(f =\u003e f.data.harmful_factors!).reduce((a, b) =\u003e a.concat(b));\n            for (let med_exam of my_med_exams) {\n                const row = medical_request.data.structure!.insert();\n                row.med_type = med_exam.data.type_of_medical_examination!;\n                row.med_organization = med_exam.data.medical_organization!;\n            }\n            promises.push(medical_request.save());\n            Context.data.medical_requests.push(medical_request);\n        }\n        await Promise.all(promises);\n        promises = [];\n        for (const med_exam of med_exams) {\n            med_exam.data.extended = 'true';\n            promises.push(med_exam.save())\n        }\n        await Promise.all(promises);\n    }\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "object",
      "variable": "medical_examination"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": true,
    "applicationContext": false,
    "fieldVisibilityConditions": {
      "debug": {
        "enabled": false,
        "conditions": []
      },
      "end_days": {
        "enabled": false,
        "conditions": []
      },
      "start_days": {
        "enabled": false,
        "conditions": []
      },
      "testovaya_data": {
        "enabled": false,
        "conditions": []
      },
      "medical_requests": {
        "enabled": false,
        "conditions": []
      },
      "medical_examination": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
