{
  "__id": "018e0dc9-b1b4-760d-9940-735a0fd264ae",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "code": "assing_access_group",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "Присвоение групп доступа",
  "type": "bpmn",
  "draft": false,
  "version": 13,
  "context": [
    {
      "code": "item",
      "type": "REF_ITEM",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Объект",
        "data": {},
        "input": true,
        "output": true
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "text"
        },
        "input": true,
        "output": true
      }
    }
  ],
  "manualRun": true,
  "readonly": false,
  "__createdAt": "2024-03-05T08:45:05.84411876Z",
  "__createdBy": "6163c306-9e58-491d-b0e4-407d6cc24727",
  "__updatedAt": "2024-03-25T06:01:28.932454957Z",
  "__updatedBy": "6163c306-9e58-491d-b0e4-407d6cc24727",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 104,
        "y": 48,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "5114d3b4-8db5-40f2-b40e-556edafaa1bf",
        "type": "start",
        "color": "#ffffff",
        "exits": ["1011bad5-b02b-4e43-a787-87caada44391"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Присвоение групп доступа ({$item}) {$__createdAt}",
          "titleGenerateMethod": "template"
        }
      },
      "44c7f239-ffea-4740-a60a-631f426d79ab": {
        "x": 80,
        "y": 160,
        "id": "44c7f239-ffea-4740-a60a-631f426d79ab",
        "icon": "script",
        "lane": "5114d3b4-8db5-40f2-b40e-556edafaa1bf",
        "name": "Присвоение групп доступа",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["e689980e-a0ce-4fea-8cad-13d5bde4bdc4"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "action",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "b6d03c4b-512e-428b-ada7-134eeb6c1b1a": {
        "x": 104,
        "y": 104,
        "id": "b6d03c4b-512e-428b-ada7-134eeb6c1b1a",
        "icon": "timer",
        "lane": "5114d3b4-8db5-40f2-b40e-556edafaa1bf",
        "name": "Таймер",
        "type": "event",
        "color": "#ffffff",
        "exits": ["c230ee3c-626d-4935-9bf0-15d8e896503f"],
        "width": 32,
        "height": 32,
        "settings": {
          "kind": "timer",
          "timer": {
            "days": 0,
            "kind": "duration",
            "hours": 0,
            "minutes": 3,
            "absolute": true
          }
        }
      },
      "f52f0cb2-e610-4acc-be9c-bce693445f90": {
        "x": 104,
        "y": 264,
        "id": "f52f0cb2-e610-4acc-be9c-bce693445f90",
        "lane": "5114d3b4-8db5-40f2-b40e-556edafaa1bf",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "5114d3b4-8db5-40f2-b40e-556edafaa1bf": {
        "x": 8,
        "y": 8,
        "id": "5114d3b4-8db5-40f2-b40e-556edafaa1bf",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 408,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "1011bad5-b02b-4e43-a787-87caada44391": {
        "id": "1011bad5-b02b-4e43-a787-87caada44391",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 80
          },
          {
            "x": 120,
            "y": 104
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "b6d03c4b-512e-428b-ada7-134eeb6c1b1a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c230ee3c-626d-4935-9bf0-15d8e896503f": {
        "id": "c230ee3c-626d-4935-9bf0-15d8e896503f",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 136
          },
          {
            "x": 120,
            "y": 160
          }
        ],
        "type": "plain",
        "source": "b6d03c4b-512e-428b-ada7-134eeb6c1b1a",
        "target": "44c7f239-ffea-4740-a60a-631f426d79ab",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e689980e-a0ce-4fea-8cad-13d5bde4bdc4": {
        "id": "e689980e-a0ce-4fea-8cad-13d5bde4bdc4",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 224
          },
          {
            "x": 120,
            "y": 264
          }
        ],
        "type": "plain",
        "source": "44c7f239-ffea-4740-a60a-631f426d79ab",
        "target": "f52f0cb2-e610-4acc-be9c-bce693445f90",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "class MyRole {\n    group: UserGroupItem | UserItem[] | OrganisationStructureItem\n    type: 'group' | 'user' | 'orgstruct'\n    code: string\n    constructor(group: UserGroupItem | UserItem[] | OrganisationStructureItem, type: 'group' | 'user' | 'orgstruct', code: string) {\n        this.code = code;\n        this.group = group;\n        this.type = type;\n    }\n    getUsers(): Promise\u003cUserItem[]\u003e {\n        if (this.type == \"group\") {\n            return (\u003cUserGroupItem\u003ethis.group).users();\n        }\n        else if (this.type == \"orgstruct\") {\n            return System.users.search().where(i =\u003e i.osIds.has((\u003cOrganisationStructureItem\u003ethis.group))).size(10000).all()\n        }\n        else return new Promise\u003cUserItem[]\u003e(() =\u003e \u003cUserItem[]\u003ethis.group)\n    }\n    json(): any {\n        return {\n            code: this.code,\n            type: this.type\n        }\n    }\n};\n\nlet appCodes = [\n    \"avansovyi_otchet\",\n    \"service_assignments\",\n    \"trip_requests\",\n    \"order_for_a_business_trip\",\n    \"child_personal_data_consent\",\n    \"application_category_assignment\",\n    \"execution_responsibilities_additional_agreement\",\n    \"order_for_transfer\",\n    \"letter_of_resignation\",\n    \"additional_transfer_agreement\",\n    \"order_execution_responsibilities\",\n    \"memo_execution_responsibilities\",\n    \"transfer_approve\",\n    \"docs_1c\",\n    \"labor_contract\",\n    \"passport_data_change_order\",\n    \"electronic_interaction_agreement\",\n    \"additional_agreement_to_the_contract\",\n    \"execution_responsibilities_consent\",\n    \"docs_lna\",\n    \"transfer_application\",\n    \"job_application\",\n    \"additional_agreement\",\n    \"admission_order\",\n    \"dismissal_order\",\n    \"orders_lna\",\n    \"consent_processing_personal_data\",\n    \"recall_dismissal\",\n    \"passport_data_application\",\n    \"personal_documents\",\n    \"information_about_labor_activity\",\n    \"benefit_application\",\n    \"application_for_financial_assistance\",\n    \"setlement_sheet\",\n    \"other_documents\",\n    \"paid_leave\",\n    \"order_financial_assistance\",\n    \"memo_business_trip\",\n    \"application_for_the_transfer_of_salary_to_the_current_account\",\n    \"leave_without_pay\",\n    \"application_for_leave_without_pay\",\n    \"certificate\",\n    \"order_for_business_trip\",\n    \"paid_leave_order\",\n    \"free_from\",\n    \"prochie_dokumenty\",\n    \"vacation_schedule\",\n    \"vacation_orders\",\n    \"offer_vacation_schedule\",\n    \"vacation_docs\",\n    \"mobilization\",\n    \"overtimeWorkOrders\",\n    \"overtimeOrders\",\n    \"overtimeWorkNotifications\",\n    \"overtime_requests\",\n    \"overtimeWorkConsent\",\n    \"overtime_order\",\n    \"staff\",\n    \"transfer_application\",\n    \"execution_duties\",\n    \"category_assignment\",\n    \"employees_personal_data\",\n    \"medical_request\",\n    \"docs_lna\",\n    \"vacations\",\n    \"overtime_work\",\n    \"businesstrip_requests\",\n    \"personnel_documents\",\n    \"structural_subdivision\"\n];\n\nlet customAppCodes: string[] = [];\n\nasync function logError(message: string): Promise\u003cvoid\u003e {\n    const newLogItem = Namespace.params.fields.logs_app.app.create();\n    newLogItem.data.log = message;\n    Context.data.debug = message;\n    await newLogItem.save();\n};\n\nasync function action(): Promise\u003cvoid\u003e {\n    if (!Context.data.item) {\n        Context.data.debug = \"no item\"\n        return;\n    };\n\n    let item: any;\n    let customCodesSetting: ApplicationItem\u003cApplication$kedo$settings$Data, any\u003e | undefined;\n    let appCode = \"\";\n\n    try {\n        item = await Context.data.item.fetch();\n        customCodesSetting = await Namespace.params.fields.settings.app.search().where(f =\u003e f.code.eq(\"custom_app_codes\")).first();\n\n        if (customCodesSetting \u0026\u0026 customCodesSetting.data.value) {\n            customAppCodes = customCodesSetting.data.value.split(\",\").map(code =\u003e code.trim());\n            appCodes = appCodes.concat(customAppCodes);\n        };\n        appCode = item.code;\n        if (appCode === \"kedo_logs\") {\n            return;\n        };\n        if (appCodes.indexOf(appCode) == -1) {\n            // await logError(`app code ${appCode} not in appCodes`)\n            return;\n        };\n\n    } catch (err) {\n        Context.data.debug = err.message;\n        return;\n    };\n    let staff: ApplicationItem\u003cApplication$kedo$staff$Data, any\u003e | undefined;\n\n    try {\n        if (appCode === \"staff\") {\n            staff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.__id.eq(item.id)\n            )).first();\n        } else if  ([\n                \"vacations\",\n                \"vacation_docs\",\n                \"vacation_orders\",\n                \"offer_vacation_schedule\",\n                \"overtime_work\",\n                \"businesstrip_requests\",\n                \"trip_requests\",\n                \"order_for_a_business_trip\",\n                \"avansovyi_otchet\",\n                \"service_assignments\"\n            ].indexOf(appCode) != -1) {\n                try {\n                    staff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(\n                        f.__deletedAt.eq(null),\n                        f.__id.eq(item.data.kedo_staff.id)\n                    )).first();\n                } catch (err) {\n                    throw new Error(`Cоздание элемента: no staff at ${appCode}/${item.id}, error:${err.message}`);\n                };\n        } else if (appCode === \"structural_subdivision\") {\n            staff = undefined;\n        } else {\n            try {\n                staff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(\n                    f.__deletedAt.eq(null),\n                    f.__id.eq(item.data.staff.id)\n                )).first();\n            } catch (err) {\n                throw new Error(`Cоздание элемента: no staff at ${appCode}/${item.id}, error:${err.message}`)\n            }\n        };\n\n        if (customAppCodes.indexOf(appCode) !== -1) {\n            appCode += \"_extended\"\n        };\n\n        if (staff || appCode === \"structural_subdivision\") {\n            if (staff \u0026\u0026 staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 1) {\n                const staffOrgs = staff.data.employment_table.map(row =\u003e row.organization.id);\n                const orgsWithAccessRights = await Namespace.params.fields.org_app.app.search().where((f, g) =\u003e g.and(\n                    f.__deletedAt.eq(null),\n                    f.__id.in(staffOrgs),\n                    f.access_settings_organization.neq(null)\n                )).size(10000).all();\n                const orgsAccessSettings = await Promise.all(orgsWithAccessRights.map(org =\u003e org.data.access_settings_organization!.fetch())).then(accessSettings =\u003e accessSettings.filter(setting =\u003e setting.data.staff));\n                let accessRightsForElement = await Promise.all(orgsAccessSettings.map(async accessSetting =\u003e {\n                    try {\n                        const accessGroup = await System.userGroups.search().where((f ,g) =\u003e g.and(\n                            f.__deletedAt.eq(null),\n                            f.__id.eq(accessSetting.data.staff![0].code)\n                        )).first();\n                        if (accessGroup) {\n                            const newRole = new MyRole(accessGroup, \"group\", accessGroup.id) as Role;\n                            return newRole\n                        };\n                    } catch {\n                        throw new Error(`Cоздание элемента: no code staff at access settings ${accessSetting.id} for item ${appCode}/${item.id}`)\n                    };\n                }));\n                accessRightsForElement = accessRightsForElement.filter(item =\u003e item);\n\n                item.data.access_group = accessRightsForElement\n                await item.save();\n            } else {\n                if (!staff \u0026\u0026 appCode !== \"structural_subdivision\") {\n                    await logError(`Cоздание элемента: Приложение - не подразделение и не найдено поле staff: ${appCode}/${item.id}`)\n                    return;\n                };\n                if (staff \u0026\u0026 !staff.data.organization) {\n                    await logError(`Cоздание элемента: У сотрудника ${staff.id} не присвоена организация`)\n                    return;\n                }\n\n                let organization: ApplicationItem\u003cApplication$kedo$organization$Data, any\u003e | undefined;\n\n                try {\n                    if (appCode == \"structural_subdivision\") {\n                        organization = await Namespace.params.fields.org_app.app.search().where((f, g) =\u003e g.and(\n                        f.__deletedAt.eq(null),\n                        f.__id.eq(item.data.organization.id)\n                    )).first()\n                    } else {\n                        organization = await staff!.data.organization!.fetch();\n                    }\n                    \n                } catch {\n                    throw new Error(`Cоздание элемента: no organization for item ${appCode}/${item.id}`)\n                };\n\n                if (!organization || !organization.data.access_settings_organization) {\n                    await logError(`Cоздание элемента: У сотрудника ${staff!.id} не присвоена организация или у организации ${organization ? organization.id : \"undefined\"} не привязаны настройки доступа`);\n                    return;\n                };\n                const accessSettings = await organization.data.access_settings_organization.fetch();\n                if (!accessSettings.data[appCode as keyof typeof accessSettings.data] || accessSettings.data[appCode as keyof typeof accessSettings.data].length \u003c 1) {\n                    await logError(`Cоздание элемента: У настроек доступа ${accessSettings!.id} не заполнено поле ${appCode}`);\n                    return;\n                };\n\n                let accessGroup: UserGroupItem | undefined\n\n                try {\n                    accessGroup = await System.userGroups.search().where((f ,g) =\u003e g.and(\n                        f.__deletedAt.eq(null),\n                        f.__id.eq(accessSettings.data[appCode as keyof typeof accessSettings.data]![0].code)\n                    )).first();\n                } catch {\n                    throw new Error(`no field ${appCode} at access setting ${accessSettings.id}`);\n                };\n\n                if (accessGroup) {\n                    const newRole = new MyRole(accessGroup, \"group\", accessGroup.id) as Role;\n                    item.data.access_group = [newRole];\n                    await item.save();\n                } else {\n                    await logError(`Cоздание элемента: Не найдена группа с id ${accessSettings.data[appCode as keyof typeof accessSettings.data]![0].code}`);\n                    return;\n                };\n            }\n        } else {\n            const message = `Cоздание элемента: Не заполнено поле staff у ${appCode}/${item.id}, поле staff: ${item.data.staff.id}, поле kedo_staff: ${item.data.kedo_staff.id}`\n            await logError(message);\n            return;\n        };\n    } catch (err) {\n        await logError(`Cоздание элемента: ${appCode}/${item.id} : ${err.message}`)\n        return;\n    };\n};\n    ",
  "forms": [],
  "settings": {
    "logged": true,
    "debugForm": {
      "allFields": false,
      "formFields": [
        {
          "code": "__name",
          "display": "Название",
          "tooltip": "Название экземпляра процесса, будет показываться в задачах",
          "readonly": false,
          "required": true
        }
      ]
    },
    "targetFeed": {
      "type": "instance",
      "variable": ""
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": false,
    "applicationContext": false,
    "importsDependencies": [],
    "fieldVisibilityConditions": {
      "item": {
        "enabled": false,
        "conditions": []
      },
      "debug": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
