{
  "__id": "018c8757-193c-7eed-8ba0-ab58c5533458",
  "namespace": "kedo.staff",
  "code": "create_tights_for_groups",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "Группы: создание индивидуальных прав доступа для документов",
  "type": "bpmn",
  "draft": false,
  "version": 3,
  "context": [
    {
      "code": "org_app",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "organization",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Приложения Организация",
        "data": {}
      }
    },
    {
      "code": "domen",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Домен",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "all_docs_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Все документы",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "namespaces_codes",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Список разделов",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "parent_process_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "JSON из родительского процесса",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "rights_app",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "rights_settings_by_doc",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Приложения прав доступа",
        "data": {}
      }
    },
    {
      "code": "settings_app",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "settings",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Приложение Настройки",
        "data": {}
      }
    },
    {
      "code": "token",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Api-токен",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "iteration",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 0,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Итерация",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "staff",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Сотрудник"
      }
    },
    {
      "code": "all_apps",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Все приложеня",
        "data": {
          "additionalType": "string"
        }
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-09-11T10:33:10.20482544Z",
  "__createdBy": "5d4a0602-0470-4d58-9ba2-89062f72b084",
  "__updatedAt": "2023-12-10T16:26:19.164906925Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 104,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "6ebcc88d-99d8-4fbc-91d5-908c4ef67fb6",
        "type": "start",
        "color": "#ffffff",
        "exits": ["84b33b2b-4f91-4717-a11a-397d27e29d57"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Группы: создание индивидуальных прав доступа для документов ({$staff})",
          "titleGenerateMethod": "template"
        }
      },
      "c4346b11-b084-4f78-be45-5a1ea099659c": {
        "x": 80,
        "y": 144,
        "id": "c4346b11-b084-4f78-be45-5a1ea099659c",
        "icon": "script",
        "lane": "6ebcc88d-99d8-4fbc-91d5-908c4ef67fb6",
        "name": "Создание прав доступа",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["95777be5-ca18-49f7-990c-96bbe049df10"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "createGroupRights",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "fdba62a2-58d6-40ac-8be9-402ef637f531": {
        "x": 104,
        "y": 256,
        "id": "fdba62a2-58d6-40ac-8be9-402ef637f531",
        "icon": "end",
        "lane": "6ebcc88d-99d8-4fbc-91d5-908c4ef67fb6",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "6ebcc88d-99d8-4fbc-91d5-908c4ef67fb6": {
        "x": 8,
        "y": 8,
        "id": "6ebcc88d-99d8-4fbc-91d5-908c4ef67fb6",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 224,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "84b33b2b-4f91-4717-a11a-397d27e29d57": {
        "id": "84b33b2b-4f91-4717-a11a-397d27e29d57",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 104
          },
          {
            "x": 120,
            "y": 144
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "c4346b11-b084-4f78-be45-5a1ea099659c",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "95777be5-ca18-49f7-990c-96bbe049df10": {
        "id": "95777be5-ca18-49f7-990c-96bbe049df10",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 208
          },
          {
            "x": 120,
            "y": 256
          }
        ],
        "type": "plain",
        "source": "c4346b11-b084-4f78-be45-5a1ea099659c",
        "target": "fdba62a2-58d6-40ac-8be9-402ef637f531",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "class MyRole {\n    group:UserGroupItem|UserItem[]| OrganisationStructureItem\n    type: 'group' | 'user' | 'orgstruct'\n    code: string\n    constructor (group:UserGroupItem|UserItem[]|OrganisationStructureItem,type:'group' | 'user' | 'orgstruct',code:string){\n        this.code = code;\n        this.group = group;\n        this.type = type;\n    }\n   getUsers(): Promise\u003cUserItem[]\u003e {\n        if(this.type == \"group\"){\n            return (\u003cUserGroupItem\u003e this.group).users();\n        }\n        else if (this.type == \"orgstruct\") {\n            return System.users.search().where(i =\u003e i.osIds.has((\u003cOrganisationStructureItem\u003e this.group))).size(10000).all()\n        }\n        else return new Promise\u003cUserItem[]\u003e(()=\u003e\u003cUserItem[]\u003ethis.group)\n    }\n    json():any {\n        return{\n             code:this.code,\n            type:this.type\n        }\n    }\n};\n\nasync function createGroupRights(): Promise\u003cvoid\u003e {\n    const organizations = await Context.fields.org_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const mappedGroups = organizations.map(org =\u003e {\n        if (!org.data.org_groups) {\n            return;\n        };\n        return {\n            id: org.id,\n            groups: [...org.data.org_groups.map(g =\u003e g.code)]\n        }\n    }).filter((group: any) =\u003e group!);\n    const allGroups = await System.userGroups.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null)\n    )).size(10000).all();\n    let promises: Promise\u003cvoid\u003e[] = []\n\n    Context.data.debug = JSON.stringify(mappedGroups)\n\n    for (let orgGroups of mappedGroups) {\n        const organization = organizations.find(org =\u003e org.id === orgGroups!.id);\n        const allDocsJson: {path: string, name: string}[] = JSON.parse(Context.data.parent_process_json!);\n        for (let groupCode of orgGroups!.groups) {\n            const group = allGroups.find(g =\u003e g.id === groupCode);\n            const groupRole = new MyRole(group!, \"group\", groupCode) as Role;\n            const rightsExists = await Context.fields.rights_app.app.search().where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.__name.eq(`Права доступа ${group!.data.__name}`)\n            )).first();\n            if (!rightsExists) {\n                const newRightApp = Context.fields.rights_app.app.create();\n                newRightApp.data.org_groups = [];\n                newRightApp.data.__name = `Права доступа ${group!.data.__name}`;\n                newRightApp.data.organization = organization;\n                let table = newRightApp.data.doc_table;\n                for (let doc of allDocsJson) {\n                    const newRow = table!.insert();\n                    newRow.doc_type = doc.name;\n                    newRow.ns_and_code = doc.path;\n                    newRow.access = true;\n                };\n\n                newRightApp.data.org_groups = [groupRole]\n                newRightApp.data.doc_table = table;\n                promises.push(newRightApp.save());\n            } else {\n                let table = rightsExists.fields.doc_table.create();\n                for (let doc of allDocsJson) {\n                    const newRow = table!.insert();\n                    newRow.doc_type = doc.name;\n                    newRow.ns_and_code = doc.path;\n                    newRow.access = true;\n                };\n                rightsExists.data.doc_table = table;\n                promises.push(rightsExists.save());\n                Context.data.debug += `group Права доступа ${group!.data.__name} exists`\n            }\n        };\n    };\n\n    await Promise.all(promises);\n};",
  "forms": [],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "object",
      "variable": ""
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": false,
    "applicationContext": false,
    "fieldVisibilityConditions": {
      "debug": {
        "enabled": false,
        "conditions": []
      },
      "domen": {
        "enabled": false,
        "conditions": []
      },
      "token": {
        "enabled": false,
        "conditions": []
      },
      "org_app": {
        "enabled": false,
        "conditions": []
      },
      "all_apps": {
        "enabled": false,
        "conditions": []
      },
      "iteration": {
        "enabled": false,
        "conditions": []
      },
      "rights_app": {
        "enabled": false,
        "conditions": []
      },
      "settings_app": {
        "enabled": false,
        "conditions": []
      },
      "all_docs_json": {
        "enabled": false,
        "conditions": []
      },
      "namespaces_codes": {
        "enabled": false,
        "conditions": []
      },
      "parent_process_json": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
