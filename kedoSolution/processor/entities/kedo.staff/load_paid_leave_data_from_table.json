{
  "__id": "018c8757-193c-7ed6-9c0f-6bcd42e8f609",
  "namespace": "kedo.staff",
  "code": "load_paid_leave_data_from_table",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "(1C) Загрузка данных отгулов из таблицы обмена",
  "type": "bpmn",
  "draft": false,
  "version": 3,
  "context": [
    {
      "code": "staff",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Сотрудник"
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-08-24T05:05:57.034665045Z",
  "__createdBy": "1f5e8193-fde0-4612-9dbf-9f01237fb294",
  "__updatedAt": "2023-09-14T04:46:16.51265276Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 40,
        "y": 240,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "4c1bbadd-181f-4dd9-a73f-6b38b9d7d594",
        "type": "start",
        "color": "#ffffff",
        "exits": ["c7d3a44e-7090-4ad0-a837-b0357c48c671"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "(1C) Загрузка данных отгулов из таблицы обмена ({$staff})",
          "titleGenerateMethod": "template"
        }
      },
      "daa26383-52a7-489f-8f83-357d37ecca8a": {
        "x": 128,
        "y": 224,
        "id": "daa26383-52a7-489f-8f83-357d37ecca8a",
        "icon": "script",
        "lane": "4c1bbadd-181f-4dd9-a73f-6b38b9d7d594",
        "name": "Загрузка данных",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["5c481812-e599-491b-b15a-13deb6a8e4de"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "loadData",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "fbcdb5c5-0519-469c-80a5-58d3b76725c7": {
        "x": 280,
        "y": 240,
        "id": "fbcdb5c5-0519-469c-80a5-58d3b76725c7",
        "icon": "end",
        "lane": "4c1bbadd-181f-4dd9-a73f-6b38b9d7d594",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "4c1bbadd-181f-4dd9-a73f-6b38b9d7d594": {
        "x": 8,
        "y": 8,
        "id": "4c1bbadd-181f-4dd9-a73f-6b38b9d7d594",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 620,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "5c481812-e599-491b-b15a-13deb6a8e4de": {
        "id": "5c481812-e599-491b-b15a-13deb6a8e4de",
        "name": "",
        "path": [
          {
            "x": 208,
            "y": 256
          },
          {
            "x": 280,
            "y": 256
          }
        ],
        "type": "plain",
        "source": "daa26383-52a7-489f-8f83-357d37ecca8a",
        "target": "fbcdb5c5-0519-469c-80a5-58d3b76725c7",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c7d3a44e-7090-4ad0-a837-b0357c48c671": {
        "id": "c7d3a44e-7090-4ad0-a837-b0357c48c671",
        "name": "",
        "path": [
          {
            "x": 72,
            "y": 256
          },
          {
            "x": 128,
            "y": 256
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "daa26383-52a7-489f-8f83-357d37ecca8a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\ninterface WorkLeave {\n    employeeId: string;\n    daysAmount: number;\n    hoursAmount: number\n}\n\nasync function loadData(): Promise\u003cvoid\u003e {\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.table_name.eq(\"AccumulationRegister_ДниЧасыОтгулов\"),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .size(10000)\n        .all()\n\n    if (tables.length === 0) {\n        return;\n    }\n    const sortedApps = tables.sort((a, b) =\u003e {\n      const aDate: any = a.data.__createdAt.asDate()\n      const bDate: any = b.data.__createdAt.asDate()\n      return aDate - bDate\n    })\n\n    const externalData = parseData(sortedApps, \"AccumulationRegister_ДниЧасыОтгулов\") \n\n    await updatePaidLeaveData(externalData)\n\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let app of tables) {\n        app.data.is_processed = true\n        promises.push(app.save())\n        if (promises.length \u003e= 20) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n\n}       \n\nconst parseData = (data: any[], tableName: string): any[] =\u003e {\n    const result: any[] = []\n    data.forEach(item =\u003e {\n        if (item.data.table_name === tableName \u0026\u0026 !!item.data.table_data) {\n            result.push(...JSON.parse(item.data.table_data!))\n        }\n    })\n    return result\n}\n\nasync function updatePaidLeaveData(data: any) {\n    const employeeIds = data.map((item: any) =\u003e item.data[\"Record\"][0][\"Сотрудник\"])\n    if(employeeIds.length == 0) {\n        return;\n    }\n\n    const allEmployees = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.id_1c.in(employeeIds)\n    )).size(10000).all()\n\n    const workLeaves: WorkLeave[] = []\n    for (let i = 0; i \u003c data.length; i++) {\n        const employee = workLeaves.find((item: any) =\u003e item.employeeId === data[i].data[\"Record\"][0][\"Сотрудник\"])\n        if (!!employee) {\n            employee.daysAmount += data[i].data[\"Record\"][0][\"Дни\"]\n            employee.hoursAmount += data[i].data[\"Record\"][0][\"Часы\"]\n            continue;\n        }\n\n         workLeaves.push({\n            employeeId: data[i].data[\"Record\"][0][\"Сотрудник\"],\n            daysAmount: data[i].data[\"Record\"][0][\"Дни\"],\n            hoursAmount: data[i].data[\"Record\"][0][\"Часы\"]\n        })\n    }\n    let promises: Promise\u003cvoid\u003e[] = []  \n    for (let i = 0; i \u003c allEmployees.length; i++) {\n        const currentEmployee = allEmployees[i]\n        let shouldSave = false\n        const mainEmployeeData = workLeaves.find((item: WorkLeave) =\u003e item.employeeId === currentEmployee.data.id_1c)\n        if (!!mainEmployeeData) {\n            currentEmployee.data.remaining_work_leave_days = mainEmployeeData.daysAmount\n            currentEmployee.data.remaining_work_leave_hours = mainEmployeeData.hoursAmount\n            shouldSave = true\n        }\n        if (currentEmployee.data.employment_table \u0026\u0026 currentEmployee.data.employment_table.length \u003e 0) {\n            for (let j = 0; j \u003c currentEmployee.data.employment_table.length; j++) {\n                const row = currentEmployee.data.employment_table[j]\n                const rowLeaveData = workLeaves.find((item: WorkLeave) =\u003e item.employeeId === row.id_1c)\n                if (rowLeaveData) {\n                    row.remaining_leave_days = rowLeaveData.daysAmount\n                    row.remaining_leave_hours = rowLeaveData.hoursAmount\n                    shouldSave = true\n                }\n            }\n        }\n\n        if (shouldSave) {\n            promises.push(currentEmployee.save())\n            if (promises.length \u003e 50) {\n                await Promise.all(promises)\n                promises = []\n            }\n        }\n    }\n\n\n    await Promise.all(promises)\n\n    // for(let i = 0; i \u003c workLeaves.length; i++) {\n    //     const employee = allEmployees.find((item: any) =\u003e {\n    //         return item.data.id_1c === workLeaves[i].employeeId\n    //     })\n\n    //     if (!!employee) {\n    //         employee.data.remaining_work_leave_days = workLeaves[i].daysAmount\n    //         employee.data.remaining_work_leave_hours = workLeaves[i].hoursAmount\n    //         await employee.save()\n    //     }\n    // }\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "object",
      "variable": "staff"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": true,
    "applicationContext": false,
    "fieldVisibilityConditions": {}
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
