{
  "__id": "018d8e29-2188-767d-b839-a130a9e675aa",
  "namespace": "kedo.staff",
  "code": "filling_the_guid_table",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "Заполнение таблицы GUID физ. лиц",
  "type": "bpmn",
  "draft": false,
  "version": 3,
  "context": [
    {
      "code": "staff",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Сотрудник"
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2024-02-09T13:57:56.744302471Z",
  "__createdBy": "b3f986a6-49d7-4dbb-b047-88cc4285f013",
  "__updatedAt": "2024-02-09T14:04:50.649239706Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 104,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "373b3ad4-6b66-4c43-a7d9-afe822773ad6",
        "type": "start",
        "color": "#ffffff",
        "exits": ["d220b8f9-92a3-4836-9d24-cf5361060049"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Заполнение таблицы GUID физ. лиц ({$staff})",
          "titleGenerateMethod": "template"
        }
      },
      "51e90728-bbab-48d2-97bd-dcdf28c9cd33": {
        "x": 80,
        "y": 136,
        "id": "51e90728-bbab-48d2-97bd-dcdf28c9cd33",
        "icon": "script",
        "lane": "373b3ad4-6b66-4c43-a7d9-afe822773ad6",
        "name": "Заполнение",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["10725809-7236-4507-8e7d-908fb9e00232"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "fillTable",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "6d64b1f0-278f-43eb-a41f-9fd4227bacfd": {
        "x": 104,
        "y": 232,
        "id": "6d64b1f0-278f-43eb-a41f-9fd4227bacfd",
        "icon": "end",
        "lane": "373b3ad4-6b66-4c43-a7d9-afe822773ad6",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "373b3ad4-6b66-4c43-a7d9-afe822773ad6": {
        "x": 8,
        "y": 8,
        "id": "373b3ad4-6b66-4c43-a7d9-afe822773ad6",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 224,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "10725809-7236-4507-8e7d-908fb9e00232": {
        "id": "10725809-7236-4507-8e7d-908fb9e00232",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 200
          },
          {
            "x": 120,
            "y": 232
          }
        ],
        "type": "plain",
        "source": "51e90728-bbab-48d2-97bd-dcdf28c9cd33",
        "target": "6d64b1f0-278f-43eb-a41f-9fd4227bacfd",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "d220b8f9-92a3-4836-9d24-cf5361060049": {
        "id": "d220b8f9-92a3-4836-9d24-cf5361060049",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 104
          },
          {
            "x": 120,
            "y": 136
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "51e90728-bbab-48d2-97bd-dcdf28c9cd33",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\n//нужно для перехода от использования поля individual_id_1c к таблице с айди ref_eq_table\nasync function fillTable(): Promise\u003cvoid\u003e {\n    \n    let promises: Promise\u003cvoid\u003e[] = [];\n\n    const allEmployees = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n    )).size(10000).all();\n\n    for (let employee of allEmployees) {\n        if (employee.data.individual_id_1c \u0026\u0026 employee.data.ref_eq_table!.length === 0) {\n            let row = employee.data.ref_eq_table!.insert();\n            row.individual_ref = employee.data.individual_id_1c;\n\n            promises.push(employee.save())\n            if (promises.length \u003e= 30) {\n                await Promise.all(promises)\n                promises = [];\n            }\n        }\n    }\n    await Promise.all(promises);\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "object",
      "variable": "staff"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": false,
    "applicationContext": false,
    "importsDependencies": [],
    "fieldVisibilityConditions": {}
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
