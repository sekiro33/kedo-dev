{
  "__id": "018f7ade-2206-7759-b1d1-2175f47fd275",
  "namespace": "kedo.staff",
  "code": "periodic_medical_examination",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "Определение руководителя",
  "type": "bpmn",
  "draft": false,
  "version": 4,
  "context": [
    {
      "code": "staff",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Сотрудник"
      }
    },
    {
      "code": "employees_table",
      "type": "TABLE",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "fields": [
          {
            "code": "__count",
            "data": null,
            "type": "FLOAT",
            "view": {
              "data": {
                "additionalType": "integer"
              },
              "name": "Количество элементов",
              "system": true
            },
            "array": false,
            "single": true,
            "deleted": false,
            "formula": "",
            "indexed": false,
            "required": false,
            "searchable": false,
            "defaultValue": null,
            "calcByFormula": false
          },
          {
            "code": "__index",
            "data": {},
            "type": "FLOAT",
            "view": {
              "data": {
                "additionalType": "integer"
              },
              "name": "№",
              "disabled": true
            },
            "array": false,
            "single": true,
            "deleted": false,
            "formula": "",
            "indexed": true,
            "required": false,
            "searchable": false,
            "defaultValue": null,
            "calcByFormula": false
          },
          {
            "code": "staff",
            "data": {
              "code": "staff",
              "filter": {
                "value": {
                  "tf": {}
                },
                "enabled": false
              },
              "bindings": null,
              "namespace": "kedo",
              "isDependent": false,
              "linkedFieldCode": ""
            },
            "type": "SYS_COLLECTION",
            "view": {
              "data": {
                "showCreateItem": false
              },
              "name": "Сотрудник"
            },
            "array": true,
            "single": true,
            "deleted": false,
            "formula": "",
            "indexed": false,
            "required": false,
            "searchable": false,
            "defaultValue": null,
            "calcByFormula": false
          },
          {
            "code": "subdivision",
            "data": {
              "code": "structural_subdivision",
              "filter": {
                "value": {
                  "tf": {}
                },
                "enabled": false
              },
              "bindings": null,
              "namespace": "kedo",
              "isDependent": false,
              "linkedFieldCode": ""
            },
            "type": "SYS_COLLECTION",
            "view": {
              "data": {
                "showCreateItem": false
              },
              "name": "Подразделение"
            },
            "array": true,
            "single": true,
            "deleted": false,
            "formula": "",
            "indexed": false,
            "required": false,
            "searchable": false,
            "defaultValue": null,
            "calcByFormula": false
          },
          {
            "code": "position",
            "data": {
              "code": "position",
              "filter": {
                "value": {
                  "tf": {}
                },
                "enabled": false
              },
              "bindings": null,
              "namespace": "kedo",
              "isDependent": false,
              "linkedFieldCode": ""
            },
            "type": "SYS_COLLECTION",
            "view": {
              "data": {
                "showCreateItem": false
              },
              "name": "Должность"
            },
            "array": true,
            "single": true,
            "deleted": false,
            "formula": "",
            "indexed": false,
            "required": false,
            "searchable": false,
            "defaultValue": null,
            "calcByFormula": false
          },
          {
            "code": "medical_examination",
            "data": {
              "fields": [
                {
                  "code": "__count",
                  "type": "FLOAT",
                  "view": {
                    "data": {
                      "additionalType": "integer"
                    },
                    "name": "Количество элементов",
                    "system": true
                  },
                  "array": false,
                  "single": true,
                  "deleted": false,
                  "formula": "",
                  "indexed": false,
                  "required": false,
                  "sortable": false,
                  "searchable": false,
                  "calcByFormula": false
                },
                {
                  "code": "__index",
                  "data": {},
                  "type": "FLOAT",
                  "view": {
                    "data": {
                      "additionalType": "integer"
                    },
                    "name": "№",
                    "disabled": true
                  },
                  "array": false,
                  "single": true,
                  "deleted": false,
                  "formula": "",
                  "indexed": true,
                  "required": false,
                  "sortable": false,
                  "searchable": false,
                  "defaultValue": null,
                  "calcByFormula": false
                },
                {
                  "code": "type",
                  "data": {
                    "code": "Types_medical_examinations",
                    "filter": {
                      "value": {
                        "tf": {}
                      },
                      "enabled": false
                    },
                    "namespace": "kedo"
                  },
                  "type": "SYS_COLLECTION",
                  "view": {
                    "data": {
                      "showCreateItem": false
                    },
                    "name": "Вид мед. осмотра"
                  },
                  "array": true,
                  "single": true,
                  "deleted": false,
                  "formula": "",
                  "indexed": false,
                  "required": false,
                  "sortable": false,
                  "searchable": false,
                  "calcByFormula": false
                },
                {
                  "code": "medical_organization",
                  "data": {
                    "code": "medical_organizations",
                    "filter": {
                      "value": {
                        "tf": {}
                      },
                      "enabled": false
                    },
                    "namespace": "kedo"
                  },
                  "type": "SYS_COLLECTION",
                  "view": {
                    "data": {
                      "showCreateItem": false
                    },
                    "name": "Мед.организаци"
                  },
                  "array": true,
                  "single": true,
                  "deleted": false,
                  "formula": "",
                  "indexed": false,
                  "required": false,
                  "sortable": false,
                  "searchable": false,
                  "calcByFormula": false
                }
              ],
              "result": {
                "type": {
                  "kind": "none",
                  "label": "",
                  "formula": "sum"
                },
                "__count": {
                  "kind": "none",
                  "label": "",
                  "formula": "sum"
                },
                "__index": {
                  "kind": "none",
                  "label": "",
                  "formula": "sum"
                },
                "medical_organization": {
                  "kind": "none",
                  "label": "",
                  "formula": "sum"
                }
              }
            },
            "type": "TABLE",
            "view": {
              "data": {
                "columnsView": {
                  "type": {
                    "font": {
                      "bold": false,
                      "color": "",
                      "italic": false,
                      "underline": false
                    },
                    "align": "left",
                    "width": 175,
                    "hidden": false,
                    "tensile": false,
                    "readonly": false,
                    "required": false,
                    "compression": false,
                    "verticalAlign": "middle"
                  },
                  "medical_organization": {
                    "font": {
                      "bold": false,
                      "color": "",
                      "italic": false,
                      "underline": false
                    },
                    "align": "left",
                    "width": 175,
                    "hidden": false,
                    "tensile": false,
                    "readonly": false,
                    "required": false,
                    "compression": false,
                    "verticalAlign": "middle"
                  }
                },
                "maxRowCount": 0,
                "viewVariant": "table",
                "footerHidden": false,
                "headerHidden": false,
                "viewTemplate": "Элементов: {$__count}",
                "relativeWidth": false,
                "allowDeleteRows": false,
                "groupingSettings": {
                  "code": "",
                  "kind": "None",
                  "sort": "asc"
                },
                "showOrderNumbers": false,
                "collapseNestedHeaders": false
              },
              "name": "Обследования"
            },
            "array": false,
            "single": true,
            "deleted": false,
            "formula": "",
            "indexed": false,
            "required": false,
            "searchable": false,
            "defaultValue": null,
            "calcByFormula": false
          }
        ],
        "result": {
          "staff": {
            "kind": "none",
            "label": "",
            "formula": "sum"
          },
          "__count": {
            "kind": "none",
            "label": "",
            "formula": "sum"
          },
          "__index": {
            "kind": "none",
            "label": "",
            "formula": "sum"
          },
          "position": {
            "kind": "none",
            "label": "",
            "formula": "sum"
          },
          "subdivision": {
            "kind": "none",
            "label": "",
            "formula": "sum"
          },
          "medical_examination": {
            "kind": "none",
            "label": "",
            "formula": "sum"
          }
        }
      },
      "view": {
        "name": "Таблица с сотрудниками",
        "data": {
          "allowDeleteRows": false,
          "collapseNestedHeaders": false,
          "columnsView": {
            "medical_examination": {
              "align": "left",
              "compression": false,
              "font": {
                "bold": false,
                "color": "",
                "italic": false,
                "underline": false
              },
              "hidden": false,
              "readonly": false,
              "required": false,
              "tensile": false,
              "verticalAlign": "middle",
              "width": 350
            },
            "position": {
              "align": "left",
              "compression": false,
              "font": {
                "bold": false,
                "color": "",
                "italic": false,
                "underline": false
              },
              "hidden": false,
              "readonly": false,
              "required": false,
              "tensile": false,
              "verticalAlign": "middle",
              "width": 175
            },
            "staff": {
              "align": "left",
              "compression": false,
              "font": {
                "bold": false,
                "color": "",
                "italic": false,
                "underline": false
              },
              "hidden": false,
              "readonly": false,
              "required": false,
              "tensile": false,
              "verticalAlign": "middle",
              "width": 175
            },
            "subdivision": {
              "align": "left",
              "compression": false,
              "font": {
                "bold": false,
                "color": "",
                "italic": false,
                "underline": false
              },
              "hidden": false,
              "readonly": false,
              "required": false,
              "tensile": false,
              "verticalAlign": "middle",
              "width": 175
            }
          },
          "footerHidden": false,
          "groupingSettings": {
            "code": "",
            "kind": "None",
            "sort": "asc"
          },
          "headerHidden": false,
          "maxRowCount": 0,
          "relativeWidth": false,
          "showOrderNumbers": false,
          "viewTemplate": "Элементов: {$__count}",
          "viewVariant": "table"
        }
      }
    },
    {
      "code": "chief_not_found",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Руководитель не найден",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "staff_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Сотрудники JSON",
        "data": {
          "additionalType": "text"
        }
      }
    },
    {
      "code": "chief",
      "type": "SYS_USER",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        }
      },
      "view": {
        "name": "Руководитель",
        "data": {}
      }
    },
    {
      "code": "subdivisions",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "structural_subdivision",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Подразделения",
        "data": {}
      }
    },
    {
      "code": "staff_employment",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "employment_directory",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Место занятости",
        "data": {},
        "input": true,
        "output": true
      }
    },
    {
      "code": "chiefs_many",
      "type": "SYS_USER",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        }
      },
      "view": {
        "name": "Руководители (несколько)",
        "data": {}
      }
    },
    {
      "code": "type_medical_examination",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "Types_medical_examinations",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Виды мед. осмотров",
        "data": {}
      }
    },
    {
      "code": "pozition",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "position",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Позиция ШР",
        "data": {}
      }
    },
    {
      "code": "amount_read_item",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 1,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Количество прочитанных элементов",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "chief_app_many",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Руководители (app_несколько)",
        "data": {}
      }
    },
    {
      "code": "subdivision_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Подразделения JSON",
        "data": {
          "additionalType": "text"
        }
      }
    },
    {
      "code": "organization",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "organization",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Организация",
        "data": {}
      }
    },
    {
      "code": "amount_subdivision",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Количество подразделений",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "debag",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debag",
        "data": {
          "additionalType": "text"
        }
      }
    },
    {
      "code": "custom_definition_head",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Кастомное определение руководителя",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "amount_employees",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Количество сотрудников",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "chief_app",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Руководитель (app)",
        "data": {}
      }
    },
    {
      "code": "staffs_many",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Сотрудники (несколько)",
        "data": {}
      }
    },
    {
      "code": "new_position",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "position",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "namespace": "kedo"
      },
      "view": {
        "name": "Новая позиция ШР",
        "data": {},
        "input": true,
        "output": true
      }
    },
    {
      "code": "need_get_new_chief",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Определить нового руководителя?",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true,
        "output": true
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-01-12T10:55:43.201014633Z",
  "__createdBy": "a34d8843-d6b6-4e6a-996f-6917029e5c74",
  "__updatedAt": "2024-05-17T12:41:09.544266356Z",
  "__updatedBy": "2ee2e398-247f-4e00-aec4-2e40d6b93a70",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 48,
        "y": 256,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "type": "start",
        "color": "#ffffff",
        "exits": ["5fa9dd0a-b6c5-439b-9595-aede4fc77dea"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "staff",
              "tooltip": "",
              "readonly": false,
              "required": true,
              "hideEmpty": false
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Определение руководителя",
          "titleGenerateMethod": "template"
        }
      },
      "08935936-fc93-4fb4-8824-96d639d65bbc": {
        "x": 848,
        "y": 336,
        "id": "08935936-fc93-4fb4-8824-96d639d65bbc",
        "icon": "notification",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Руководитель не определён",
        "type": "notification",
        "color": "#ffff66",
        "exits": ["5931a245-54e4-42cd-8f10-90108f74456c"],
        "width": 80,
        "height": 64,
        "settings": {
          "author": {
            "code": "",
            "kind": "system"
          },
          "target": {
            "kind": "process"
          },
          "receivers": [
            {
              "kind": "current"
            },
            {
              "code": "administrators",
              "kind": "group",
              "multi": true,
              "namespace": "system"
            }
          ],
          "messageBody": "Супервизор системы назначен руководителем",
          "messageHeader": "Руководитель не определён"
        }
      },
      "08edd547-954e-4f42-957a-918b7cc02300": {
        "x": 744,
        "y": 336,
        "id": "08edd547-954e-4f42-957a-918b7cc02300",
        "icon": "script",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Подставляем супервизора",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["3fce157d-9fb3-403c-9c71-a1023c130a5f"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getSupervisor",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "3cb5b020-f2ed-40eb-b8a6-44005741bb30": {
        "x": 512,
        "y": 432,
        "id": "3cb5b020-f2ed-40eb-b8a6-44005741bb30",
        "icon": "script",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Получаем нового руководителя",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "cf66b6e4-065f-45f7-b7d1-b1ca85905498",
          "1b2f5b88-3dac-455f-a297-04332d0f76fc"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getFutureChief",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "1b2f5b88-3dac-455f-a297-04332d0f76fc",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "41d60278-e94e-4f21-b3db-d3432eae876b": {
        "x": 144,
        "y": 240,
        "id": "41d60278-e94e-4f21-b3db-d3432eae876b",
        "icon": "script",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Получаем настройки",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["2f1ab9a7-8656-4d68-8025-694c62ecc103"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getSettings",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "6977a839-70ba-496e-97c5-f67c12c6a987": {
        "x": 968,
        "y": 256,
        "id": "6977a839-70ba-496e-97c5-f67c12c6a987",
        "icon": "end",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "82a97da8-f87d-412a-8c0d-26e009d5ae76": {
        "x": 512,
        "y": 144,
        "id": "82a97da8-f87d-412a-8c0d-26e009d5ae76",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Альтернативное определение руководителя",
        "type": "call",
        "color": "#ffffff",
        "exits": ["09166bfa-1219-40a6-95ea-f222be89205b"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "custom_definition_head",
          "async": false,
          "input": [
            {
              "source": {
                "kind": "context",
                "value": "staff"
              },
              "target": {
                "kind": "context",
                "value": "staff"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "staffs_many"
              },
              "target": {
                "kind": "context",
                "value": "staff_many"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "staff_employment"
              },
              "target": {
                "kind": "context",
                "value": "employment_placement"
              }
            }
          ],
          "output": [
            {
              "source": {
                "kind": "context",
                "value": "chief_app"
              },
              "target": {
                "kind": "context",
                "value": "chief_app"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "chief"
              },
              "target": {
                "kind": "context",
                "value": "chief"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "chiefs_many"
              },
              "target": {
                "kind": "context",
                "value": "chief_many"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "chief_app_many"
              },
              "target": {
                "kind": "context",
                "value": "chief_app_many"
              }
            }
          ],
          "linkCode": "staff",
          "namespace": "kedo_ext",
          "subProcessTargetFieldCode": ""
        }
      },
      "974ed5a0-814f-46f7-b6fb-bbe6fe51e020": {
        "x": 392,
        "y": 256,
        "id": "974ed5a0-814f-46f7-b6fb-bbe6fe51e020",
        "icon": "exclusive",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "10819167-848e-466b-8436-29eda40edb37",
          "0b68c8f6-0590-4470-a19d-a78dc07fa8e2"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "a868a363-da40-4a80-ab91-b297809db197": {
        "x": 512,
        "y": 336,
        "id": "a868a363-da40-4a80-ab91-b297809db197",
        "icon": "script",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Получаем руководителя",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "e1a831dd-9f73-4594-9be4-5a0b9f99ce07",
          "f7ec3939-8fbe-440d-b9d8-10ca2e48f7c4"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getStaffChief",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "f7ec3939-8fbe-440d-b9d8-10ca2e48f7c4",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "ba76763b-5ada-43ee-ae9d-5b91a56937c5": {
        "x": 512,
        "y": 240,
        "id": "ba76763b-5ada-43ee-ae9d-5b91a56937c5",
        "icon": "script",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Получаем руководителя",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "283e73c4-0af7-4274-ac4b-603d1e9da982",
          "51d946bc-36e8-4c7d-9729-424790d8abb4"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "action",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "51d946bc-36e8-4c7d-9729-424790d8abb4",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f": {
        "x": 672,
        "y": 256,
        "id": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "icon": "exclusive",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "e803eeea-28f5-4375-af87-9f1365735742",
          "3a0b9bec-4eb0-4728-8001-d6f0b6dd729c"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "ee59bb5e-a1e6-48c2-bfc0-544319ce241a": {
        "x": 336,
        "y": 256,
        "id": "ee59bb5e-a1e6-48c2-bfc0-544319ce241a",
        "icon": "exclusive",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Требуется определить нового руководителя?",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "8fe84f0c-271e-4b87-b1cd-cd11d07d3ccf",
          "c57c57c0-0fb3-4200-b2ad-08806be3150e"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "f15f4838-75a6-4847-9ffb-9da77a0a1819": {
        "x": 280,
        "y": 256,
        "id": "f15f4838-75a6-4847-9ffb-9da77a0a1819",
        "icon": "exclusive",
        "lane": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "984a7566-f40d-4cfe-917f-b04326e1322e",
          "ea0f1134-7e5e-4717-9b2d-b01ea735c45c"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      }
    },
    "lanes": {
      "cdf844b1-0efc-48c7-898d-451490549a37": {
        "x": 8,
        "y": 8,
        "id": "cdf844b1-0efc-48c7-898d-451490549a37",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 1052,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "09166bfa-1219-40a6-95ea-f222be89205b": {
        "id": "09166bfa-1219-40a6-95ea-f222be89205b",
        "name": "",
        "path": [
          {
            "x": 592,
            "y": 176
          },
          {
            "x": 688,
            "y": 176
          },
          {
            "x": 688,
            "y": 256
          }
        ],
        "type": "plain",
        "source": "82a97da8-f87d-412a-8c0d-26e009d5ae76",
        "target": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "0b68c8f6-0590-4470-a19d-a78dc07fa8e2": {
        "id": "0b68c8f6-0590-4470-a19d-a78dc07fa8e2",
        "name": "По месту занятости",
        "path": [
          {
            "x": 408,
            "y": 288
          },
          {
            "x": 408,
            "y": 368
          },
          {
            "x": 512,
            "y": 368
          }
        ],
        "type": "plain",
        "source": "974ed5a0-814f-46f7-b6fb-bbe6fe51e020",
        "target": "a868a363-da40-4a80-ab91-b297809db197",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "staff_employment"
              },
              "type": "SYS_COLLECTION",
              "inversion": false,
              "operation": {
                "relation": "empty",
                "inversion": true,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "10819167-848e-466b-8436-29eda40edb37": {
        "id": "10819167-848e-466b-8436-29eda40edb37",
        "name": "",
        "path": [
          {
            "x": 424,
            "y": 272
          },
          {
            "x": 512,
            "y": 272
          }
        ],
        "type": "default",
        "source": "974ed5a0-814f-46f7-b6fb-bbe6fe51e020",
        "target": "ba76763b-5ada-43ee-ae9d-5b91a56937c5",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "1b2f5b88-3dac-455f-a297-04332d0f76fc": {
        "id": "1b2f5b88-3dac-455f-a297-04332d0f76fc",
        "name": "",
        "path": [
          {
            "x": 552,
            "y": 496
          },
          {
            "x": 552,
            "y": 504
          },
          {
            "x": 664,
            "y": 504
          },
          {
            "x": 664,
            "y": 272
          },
          {
            "x": 660,
            "y": 272
          },
          {
            "x": 672,
            "y": 272
          }
        ],
        "type": "error",
        "source": "3cb5b020-f2ed-40eb-b8a6-44005741bb30",
        "target": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "283e73c4-0af7-4274-ac4b-603d1e9da982": {
        "id": "283e73c4-0af7-4274-ac4b-603d1e9da982",
        "name": "",
        "path": [
          {
            "x": 592,
            "y": 272
          },
          {
            "x": 672,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "ba76763b-5ada-43ee-ae9d-5b91a56937c5",
        "target": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "2f1ab9a7-8656-4d68-8025-694c62ecc103": {
        "id": "2f1ab9a7-8656-4d68-8025-694c62ecc103",
        "name": "",
        "path": [
          {
            "x": 224,
            "y": 272
          },
          {
            "x": 280,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "41d60278-e94e-4f21-b3db-d3432eae876b",
        "target": "f15f4838-75a6-4847-9ffb-9da77a0a1819",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "3a0b9bec-4eb0-4728-8001-d6f0b6dd729c": {
        "id": "3a0b9bec-4eb0-4728-8001-d6f0b6dd729c",
        "name": "Руководитель найден",
        "path": [
          {
            "x": 704,
            "y": 272
          },
          {
            "x": 968,
            "y": 272
          }
        ],
        "type": "default",
        "source": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "target": "6977a839-70ba-496e-97c5-f67c12c6a987",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "3fce157d-9fb3-403c-9c71-a1023c130a5f": {
        "id": "3fce157d-9fb3-403c-9c71-a1023c130a5f",
        "name": "",
        "path": [
          {
            "x": 824,
            "y": 368
          },
          {
            "x": 848,
            "y": 368
          }
        ],
        "type": "plain",
        "source": "08edd547-954e-4f42-957a-918b7cc02300",
        "target": "08935936-fc93-4fb4-8824-96d639d65bbc",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "51d946bc-36e8-4c7d-9729-424790d8abb4": {
        "id": "51d946bc-36e8-4c7d-9729-424790d8abb4",
        "name": "",
        "path": [
          {
            "x": 552,
            "y": 304
          },
          {
            "x": 552,
            "y": 312
          },
          {
            "x": 664,
            "y": 312
          },
          {
            "x": 664,
            "y": 272
          },
          {
            "x": 672,
            "y": 272
          }
        ],
        "type": "error",
        "source": "ba76763b-5ada-43ee-ae9d-5b91a56937c5",
        "target": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "5931a245-54e4-42cd-8f10-90108f74456c": {
        "id": "5931a245-54e4-42cd-8f10-90108f74456c",
        "name": "",
        "path": [
          {
            "x": 928,
            "y": 368
          },
          {
            "x": 984,
            "y": 368
          },
          {
            "x": 984,
            "y": 288
          }
        ],
        "type": "plain",
        "source": "08935936-fc93-4fb4-8824-96d639d65bbc",
        "target": "6977a839-70ba-496e-97c5-f67c12c6a987",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "5fa9dd0a-b6c5-439b-9595-aede4fc77dea": {
        "id": "5fa9dd0a-b6c5-439b-9595-aede4fc77dea",
        "name": "",
        "path": [
          {
            "x": 80,
            "y": 272
          },
          {
            "x": 144,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "41d60278-e94e-4f21-b3db-d3432eae876b",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "8fe84f0c-271e-4b87-b1cd-cd11d07d3ccf": {
        "id": "8fe84f0c-271e-4b87-b1cd-cd11d07d3ccf",
        "name": "Да",
        "path": [
          {
            "x": 352,
            "y": 288
          },
          {
            "x": 352,
            "y": 464
          },
          {
            "x": 512,
            "y": 464
          }
        ],
        "type": "plain",
        "source": "ee59bb5e-a1e6-48c2-bfc0-544319ce241a",
        "target": "3cb5b020-f2ed-40eb-b8a6-44005741bb30",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "need_get_new_chief"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "984a7566-f40d-4cfe-917f-b04326e1322e": {
        "id": "984a7566-f40d-4cfe-917f-b04326e1322e",
        "name": "",
        "path": [
          {
            "x": 296,
            "y": 256
          },
          {
            "x": 296,
            "y": 176
          },
          {
            "x": 512,
            "y": 176
          }
        ],
        "type": "plain",
        "source": "f15f4838-75a6-4847-9ffb-9da77a0a1819",
        "target": "82a97da8-f87d-412a-8c0d-26e009d5ae76",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "custom_definition_head"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c57c57c0-0fb3-4200-b2ad-08806be3150e": {
        "id": "c57c57c0-0fb3-4200-b2ad-08806be3150e",
        "name": "",
        "path": [
          {
            "x": 368,
            "y": 272
          },
          {
            "x": 392,
            "y": 272
          }
        ],
        "type": "default",
        "source": "ee59bb5e-a1e6-48c2-bfc0-544319ce241a",
        "target": "974ed5a0-814f-46f7-b6fb-bbe6fe51e020",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "cf66b6e4-065f-45f7-b7d1-b1ca85905498": {
        "id": "cf66b6e4-065f-45f7-b7d1-b1ca85905498",
        "name": "",
        "path": [
          {
            "x": 592,
            "y": 464
          },
          {
            "x": 664,
            "y": 464
          },
          {
            "x": 664,
            "y": 272
          },
          {
            "x": 672,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "3cb5b020-f2ed-40eb-b8a6-44005741bb30",
        "target": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e1a831dd-9f73-4594-9be4-5a0b9f99ce07": {
        "id": "e1a831dd-9f73-4594-9be4-5a0b9f99ce07",
        "name": "",
        "path": [
          {
            "x": 592,
            "y": 368
          },
          {
            "x": 664,
            "y": 368
          },
          {
            "x": 664,
            "y": 272
          },
          {
            "x": 660,
            "y": 272
          },
          {
            "x": 672,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "a868a363-da40-4a80-ab91-b297809db197",
        "target": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e803eeea-28f5-4375-af87-9f1365735742": {
        "id": "e803eeea-28f5-4375-af87-9f1365735742",
        "name": "",
        "path": [
          {
            "x": 688,
            "y": 288
          },
          {
            "x": 688,
            "y": 368
          },
          {
            "x": 744,
            "y": 368
          }
        ],
        "type": "plain",
        "source": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "target": "08edd547-954e-4f42-957a-918b7cc02300",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "chief"
              },
              "type": "SYS_USER",
              "inversion": false,
              "operation": {
                "relation": "empty",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ea0f1134-7e5e-4717-9b2d-b01ea735c45c": {
        "id": "ea0f1134-7e5e-4717-9b2d-b01ea735c45c",
        "name": "",
        "path": [
          {
            "x": 312,
            "y": 272
          },
          {
            "x": 336,
            "y": 272
          }
        ],
        "type": "default",
        "source": "f15f4838-75a6-4847-9ffb-9da77a0a1819",
        "target": "ee59bb5e-a1e6-48c2-bfc0-544319ce241a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "f7ec3939-8fbe-440d-b9d8-10ca2e48f7c4": {
        "id": "f7ec3939-8fbe-440d-b9d8-10ca2e48f7c4",
        "name": "",
        "path": [
          {
            "x": 552,
            "y": 400
          },
          {
            "x": 552,
            "y": 408
          },
          {
            "x": 664,
            "y": 408
          },
          {
            "x": 664,
            "y": 272
          },
          {
            "x": 660,
            "y": 272
          },
          {
            "x": 672,
            "y": 272
          }
        ],
        "type": "error",
        "source": "a868a363-da40-4a80-ab91-b297809db197",
        "target": "bd32bb43-70fd-4d8a-b0d2-98fdd6d4819f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\ntype Staff = ApplicationItem\u003cApplication$kedo$staff$Data, Application$kedo$staff$Params\u003e\ntype Position = ApplicationItem\u003cApplication$kedo$position$Data, Application$kedo$position$Params\u003e;\ntype Organization = ApplicationItem\u003cApplication$kedo$organization$Data, Application$kedo$organization$Params\u003e;\ntype Subdivision = ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e;\ntype SubdivisionApp = TApplication\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params, Application$kedo$structural_subdivision$Processes\u003e;\n\nasync function getSettings(): Promise\u003cvoid\u003e {\n    const settings = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all();\n\n    const custom_definition_head = settings.find(f =\u003e f.data.code == 'custom_definition_head');\n    Context.data.custom_definition_head = custom_definition_head ? custom_definition_head.data.status : false\n}\n\nasync function action(): Promise\u003cvoid\u003e {\n    if (!Context.data.staff \u0026\u0026 (!Context.data.staffs_many || Context.data.staffs_many.length == 0)) {\n        throw new Error(\"Не указаны сотрудники\");\n    }\n\n    let staff: Staff;\n\n    if (Context.data.staff) {\n        staff = await Context.data.staff.fetch();\n    } else {\n        staff = await Context.data.staffs_many![0].fetch();\n    }\n\n    if (!staff.data.organization) {\n        throw new Error(\"У сотрудника не указана организация\");\n    }\n\n    if (!staff.data.position) {\n        throw new Error(\"У сотрудника не указана позиция ШР\");\n    }\n\n    if (!staff.data.structural_subdivision) {\n        throw new Error(\"У сотрудника не указано подразделение\");\n    }\n\n    const [organization, position, subdivision] = await Promise.all(\n        [\n            staff.data.organization.fetch(),\n            staff.data.position.fetch(),\n            staff.data.structural_subdivision.fetch(),\n        ]\n    )\n\n    Context.data.organization = organization;\n\n    // Подготовка данных.\n    const subdivisions = await staff.fields.structural_subdivision.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organization)\n        ))\n        .size(10000)\n        .all();\n\n    const positions = await staff.fields.position.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organization)\n        ))\n        .size(10000)\n        .all();\n\n    const staffs = await Context.fields.staff.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.ext_user.neq(null),\n            f.organization.link(organization),\n            f.__status.eq(staff.fields.__status.variants.signed_documents)\n        ))\n        .size(10000)\n        .all();\n\n\n    // Поиск руководителей.\n    if (!position.data.subdivision) {\n        Context.data.chief = (await organization_get_head(organization, positions)) || undefined;\n    } else {\n        Context.data.chief = (await subdivision_get_head(position.data.subdivision, positions, subdivisions, staffs, organization, staff)) || undefined;\n    }\n    if (Context.data.chief) {\n        const staff_chief = await Context.fields.staff.app.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.ext_user.eq(Context.data.chief!)\n            ))\n            .first();\n        Context.data.chief_app = staff_chief\n    }\n\n    async function subdivision_get_head(\n        subdivision: SubdivisionApp,\n        positions: Position[],\n        subdivisions: Subdivision[],\n        staffs: Staff[],\n        organization: Organization,\n        staff: Staff): Promise\u003cUserItemRef | undefined\u003e {\n\n        const division = subdivisions.find(f =\u003e f.id == subdivision.id);\n\n        if (!division) {\n            return await organization_get_head(organization, positions);\n        }\n\n        if (!division.data.position) {\n            if (!division.data.subdivision) {\n                return await organization_get_head(organization, positions)\n            } else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff)\n            }\n        }\n\n        const position_head = positions.find(f =\u003e f.id == division.data.position?.id)!;\n\n        const positions_staffs_app = await Promise.all(\n            [\n                ...(position_head.data.staff ?? []),\n                ...(position_head.data.staff_internal_combination ?? []),\n                ...(position_head.data.staff_external_combination ?? []),\n            ]\n                .map(f =\u003e f.fetch())\n        )\n\n        const positions_staffs = positions_staffs_app.filter(f =\u003e f.data.ext_user\n            \u0026\u0026 f.data.__status?.code == f.fields.__status.variants.signed_documents.code\n            \u0026\u0026 f.id != staff.id);\n\n        if (positions_staffs.length == 0) {\n            if (!division.data.subdivision) {\n                return await organization_get_head(organization, positions)\n            } else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff)\n            }\n        } else {\n            return positions_staffs[0].data.ext_user;\n        }\n    }\n\n    async function organization_get_head(organization: Organization, positions: Position[]): Promise\u003cUserItemRef | undefined\u003e {\n        if (!organization.data.position_head) {\n            return undefined;\n        }\n\n        const position_head = positions.find(f =\u003e f.id == organization.data.position_head?.id);\n\n        if (!position_head) {\n            return undefined;\n        }\n\n        // Получаем сотрудников на осн. позиции, по внешнему и внутреннему совместительству.\n        const staffs_app = await Promise.all(\n            [\n                ...(position_head.data.staff ?? []),\n                ...(position_head.data.staff_internal_combination ?? []),\n                ...(position_head.data.staff_external_combination ?? []),\n            ]\n                .map(f =\u003e f.fetch())\n        );\n\n        const organization_heads = staffs_app.filter(f =\u003e f.data.ext_user \u0026\u0026 f.data.__status?.code == f.fields.__status.variants.signed_documents.code);\n\n        if (organization_heads.length == 0) {\n            return undefined;\n        } else {\n            return organization_heads[0].data.ext_user;\n        }\n    }\n}\n\n// async function action(): Promise\u003cvoid\u003e {\n//     let staff: Staff;\n\n//     if (Context.data.staffs_many \u0026\u0026 Context.data.staffs_many.length \u003e 0)\n//         staff = await Context.data.staffs_many[0].fetch()\n//     else if (Context.data.staff) {\n//         staff = await Context.data.staff.fetch();\n//     } else {\n//         throw new Error('Не указаны сотрудники.');\n//     }\n\n//     // Определяем позицию от которой будем отталкиваться.\n//     let position: Position;\n\n//     if (Context.data.pozition)\n//         position = await Context.data.pozition!.fetch()\n//     else\n//         position = await staff.data.position!.fetch()\n\n//     // Получаем организацию сотрудника.\n//     const organization = await position.data.organization!.fetch();\n//     Context.data.organization = organization;\n\n//     // Подготовка данных.\n//     const subdivisions = await staff.fields.structural_subdivision.app.search()\n//         .where((f, g) =\u003e g.and(\n//             f.__deletedAt.eq(null),\n//             f.organization.link(organization)\n//         ))\n//         .size(10000)\n//         .all();\n\n//     const positions = await staff.fields.position.app.search()\n//         .where((f, g) =\u003e g.and(\n//             f.__deletedAt.eq(null),\n//             f.organization.link(organization)\n//         ))\n//         .size(10000)\n//         .all();\n\n//     const staffs = await staff.fields.dop_staff.app.search()\n//         .where((f, g) =\u003e g.and(\n//             f.__deletedAt.eq(null),\n//             f.ext_user.neq(null),\n//             f.organization.link(organization),\n//             f.__status.eq(staff.fields.__status.variants.signed_documents)\n//         ))\n//         .size(10000)\n//         .all();\n\n//     // Поиск руководителей.\n//     if (Context.data.staffs_many \u0026\u0026 Context.data.staffs_many.length \u003e 0) {\n//         Context.data.chiefs_many = [];\n//         for (const staff of staffs) {\n//             const position = positions.find(f =\u003e f.id == staff.data.position!.id)!;\n//             if (!position.data.subdivision) {\n//                 Context.data.chiefs_many = Context.data.chiefs_many.concat((await organization_get_head(organization, positions)) || [])\n//             } else {\n//                 Context.data.chiefs_many = Context.data.chiefs_many.concat((await subdivision_get_head(position.data.subdivision, positions, subdivisions, staffs, organization, staff)) || [])\n//             }\n//         }\n//         const chief_app_many = await Context.fields.chief_app_many.app.search()\n//             .where((f, g) =\u003e g.and(\n//                 f.__deletedAt.eq(null),\n//                 f.__status.eq(Context.fields.chief_app_many.app.fields.__status.variants.signed_documents),\n//                 f.ext_user.in(Context.data.chiefs_many!)\n//             ))\n//             .size(10000)\n//             .all();\n//         Context.data.chief_app_many = chief_app_many\n//     } else {\n//         if (!position.data.subdivision) {\n//             Context.data.chief = (await organization_get_head(organization, positions)) || undefined;\n//         } else {\n//             Context.data.chief = (await subdivision_get_head(position.data.subdivision, positions, subdivisions, staffs, organization, staff)) || undefined;\n//         }\n//         if (Context.data.chief) {\n//             const staff_chief = await Context.fields.staff.app.search()\n//                 .where((f, g) =\u003e g.and(\n//                     f.__deletedAt.eq(null),\n//                     f.ext_user.eq(Context.data.chief!)\n//                 ))\n//                 .first();\n//             Context.data.chief_app = staff_chief\n//         }\n//     }\n// }\n\n// async function subdivision_get_head(\n//     subdivision: SubdivisionApp,\n//     positions: Position[],\n//     subdivisions: Subdivision[],\n//     staffs: Staff[],\n//     organization: Organization,\n//     staff: Staff): Promise\u003cUserItemRef | undefined\u003e {\n\n//     const division = subdivisions.find(f =\u003e f.id == subdivision.id)!;\n\n//     if (!division.data.position) {\n//         if (!division.data.subdivision) {\n//             return await organization_get_head(organization, positions)\n//         } else {\n//             return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff)\n//         }\n//     }\n\n//     const position_head = positions.find(f =\u003e f.id == division.data.position!.id)!;\n\n//     const positions_staffs_app = await Promise.all(\n//         [...position_head.data.staff!, ...position_head.data.staff_internal_combination!, ...position_head.data.staff_external_combination!]\n//             .map(f =\u003e f.fetch())\n//     );\n\n//     const positions_staffs = positions_staffs_app.filter(f =\u003e f.data.ext_user\n//         \u0026\u0026 f.data.__status?.code == f.fields.__status.variants.signed_documents.code\n//         \u0026\u0026 f.id != staff.id);\n\n//     if (positions_staffs.length == 0) {\n//         if (!division.data.subdivision) {\n//             return await organization_get_head(organization, positions)\n//         } else {\n//             return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff)\n//         }\n//     } else {\n//         return positions_staffs[0].data.ext_user;\n//     }\n// }\n\n// async function organization_get_head(organization: Organization, positions: Position[]): Promise\u003cUserItemRef | undefined\u003e {\n//     if (!organization.data.position_head) {\n//         return undefined;\n//     }\n\n//     const position_head = positions.find(f =\u003e f.id == organization.data.position_head!.id)!;\n\n//     // Получаем сотрудников на осн. позиции, по внешнему и внутреннему совместительству.\n//     const staffs_app = await Promise.all(\n//         [...position_head.data.staff!, ...position_head.data.staff_internal_combination!, ...position_head.data.staff_external_combination!]\n//             .map(f =\u003e f.fetch())\n//     )\n//     const position_head_staffs = staffs_app.filter(f =\u003e f.data.ext_user \u0026\u0026 f.data.__status?.code == f.fields.__status.variants.signed_documents.code);\n\n//     if (position_head_staffs.length == 0) {\n//         return undefined;\n//     } else {\n//         return position_head_staffs[0].data.ext_user;\n//     }\n// }\n\nasync function getSupervisor(): Promise\u003cvoid\u003e {\n    const supervisor = await System.userGroups.search().where(f =\u003e f.__id.eq('331e62d2-072e-58ac-9581-74abcc67f050')).first();\n    const user = await System.users.search().where(f =\u003e f.groupIds.has(supervisor!)).first();\n    const staff = await Context.fields.staff.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.ext_user.eq(user!)\n        ))\n        .first();\n    Context.data.chief = user;\n    Context.data.chief_app = staff\n}\n\nasync function getStaffChief(): Promise\u003cvoid\u003e {\n    if (!Context.data.staff_employment) {\n        throw new Error(\"Место занятости сотрудника не указано; Context.data.staff_employment is undefined\");\n    }\n\n    const staff_employment = await Context.data.staff_employment.fetch();\n\n    if (!staff_employment.data.position) {\n        throw new Error(\"В выбранному месту занятости не указана позиция ШР сотрудника\");\n    }\n\n    if (!staff_employment.data.organization) {\n        throw new Error(\"В выбранному месту занятости не указана организация сотрудника\");\n    }\n\n    const staff = await staff_employment.data.staff!.fetch();\n    const position = await staff_employment.data.position.fetch();\n    const organization = await staff_employment.data.organization.fetch();\n\n    Context.data.organization = organization;\n\n    // Подготовка данных.\n    const subdivisions = await staff_employment.fields.subdivision.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organization)\n        ))\n        .size(10000)\n        .all();\n\n    const positions = await staff_employment.fields.position.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organization)\n        ))\n        .size(10000)\n        .all();\n\n    const staffs = await staff_employment.fields.staff.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.ext_user.neq(null),\n            f.organization.link(organization),\n            f.__status.eq(staff.fields.__status.variants.signed_documents)\n        ))\n        .size(10000)\n        .all();\n\n\n    // Поиск руководителей.\n    if (!position.data.subdivision) {\n        Context.data.chief = (await organization_get_head(organization, positions)) || undefined;\n    } else {\n        Context.data.chief = (await subdivision_get_head(position.data.subdivision, positions, subdivisions, staffs, organization, staff)) || undefined;\n    }\n    if (Context.data.chief) {\n        const staff_chief = await Context.fields.staff.app.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.ext_user.eq(Context.data.chief!)\n            ))\n            .first();\n        Context.data.chief_app = staff_chief\n    }\n\n    async function subdivision_get_head(\n        subdivision: SubdivisionApp,\n        positions: Position[],\n        subdivisions: Subdivision[],\n        staffs: Staff[],\n        organization: Organization,\n        staff: Staff): Promise\u003cUserItemRef | undefined\u003e {\n\n        const division = subdivisions.find(f =\u003e f.id == subdivision.id);\n\n        if (!division) {\n            return await organization_get_head(organization, positions);\n        }\n\n        if (!division.data.position) {\n            if (!division.data.subdivision) {\n                return await organization_get_head(organization, positions)\n            } else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff)\n            }\n        }\n\n        const position_head = positions.find(f =\u003e f.id == division.data.position?.id)!;\n\n        const positions_staffs_app = await Promise.all(\n            [\n                ...(position_head.data.staff ?? []),\n                ...(position_head.data.staff_internal_combination ?? []),\n                ...(position_head.data.staff_external_combination ?? []),\n            ]\n                .map(f =\u003e f.fetch())\n        )\n\n        const positions_staffs = positions_staffs_app.filter(f =\u003e f.data.ext_user\n            \u0026\u0026 f.data.__status?.code == f.fields.__status.variants.signed_documents.code\n            \u0026\u0026 f.id != staff.id);\n\n        if (positions_staffs.length == 0) {\n            if (!division.data.subdivision) {\n                return await organization_get_head(organization, positions)\n            } else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization, staff)\n            }\n        } else {\n            return positions_staffs[0].data.ext_user;\n        }\n    }\n\n    async function organization_get_head(organization: Organization, positions: Position[]): Promise\u003cUserItemRef | undefined\u003e {\n        if (!organization.data.position_head) {\n            return undefined;\n        }\n\n        const position_head = positions.find(f =\u003e f.id == organization.data.position_head?.id);\n\n        if (!position_head) {\n            return undefined;\n        }\n\n        // Получаем сотрудников на осн. позиции, по внешнему и внутреннему совместительству.\n        const staffs_app = await Promise.all(\n            [\n                ...(position_head.data.staff ?? []),\n                ...(position_head.data.staff_internal_combination ?? []),\n                ...(position_head.data.staff_external_combination ?? []),\n            ]\n                .map(f =\u003e f.fetch())\n        );\n\n        const organization_heads = staffs_app.filter(f =\u003e f.data.ext_user \u0026\u0026 f.data.__status?.code == f.fields.__status.variants.signed_documents.code);\n\n        if (organization_heads.length == 0) {\n            return undefined;\n        } else {\n            return organization_heads[0].data.ext_user;\n        }\n    }\n}\n\n\nasync function getFutureChief(): Promise\u003cvoid\u003e {\n    if (!Context.data.new_position) {\n        throw new Error('Не указана новая позиция ШР');\n    }\n    const new_position = await Context.data.new_position.fetch();\n\n    if (new_position.data.subdivision) {\n        const subdivision = await new_position.data.subdivision.fetch();\n\n        if (subdivision.data.position) {\n            const position_chief = await subdivision.data.position.fetch();\n\n            const chieffs_app = await Promise.all([\n                ...(position_chief.data.staff ?? []),\n                ...(position_chief.data.staff_internal_combination ?? []),\n                ...(position_chief.data.staff_external_combination ?? []),\n            ]\n                .map(f =\u003e f.fetch())\n            );\n\n            if (chieffs_app) {\n                const current_chieff = chieffs_app.filter(f =\u003e f.data.ext_user \u0026\u0026 f.data.__status?.code == f.fields.__status.variants.signed_documents.code);\n                if (current_chieff) {\n                    Context.data.chief = current_chieff[0].data.ext_user;\n                }\n            }\n        }\n    }\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "debugForm": {
      "allFields": false,
      "formFields": []
    },
    "targetFeed": {
      "type": "object",
      "variable": "staff"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": false,
    "allowNamespace": true,
    "applicationContext": false,
    "importsDependencies": [],
    "useStartFormInDebug": true,
    "fieldVisibilityConditions": {
      "chief": {
        "enabled": false,
        "conditions": []
      },
      "debag": {
        "enabled": false,
        "conditions": []
      },
      "staff": {
        "enabled": false,
        "conditions": []
      },
      "pozition": {
        "enabled": false,
        "conditions": []
      },
      "chief_app": {
        "enabled": false,
        "conditions": []
      },
      "staff_json": {
        "enabled": false,
        "conditions": []
      },
      "chiefs_many": {
        "enabled": false,
        "conditions": []
      },
      "staffs_many": {
        "enabled": false,
        "conditions": []
      },
      "new_position": {
        "enabled": false,
        "conditions": []
      },
      "organization": {
        "enabled": false,
        "conditions": []
      },
      "subdivisions": {
        "enabled": false,
        "conditions": []
      },
      "chief_app_many": {
        "enabled": false,
        "conditions": []
      },
      "chief_not_found": {
        "enabled": false,
        "conditions": []
      },
      "employees_table": {
        "enabled": false,
        "conditions": []
      },
      "amount_employees": {
        "enabled": false,
        "conditions": []
      },
      "amount_read_item": {
        "enabled": false,
        "conditions": []
      },
      "staff_employment": {
        "enabled": false,
        "conditions": []
      },
      "subdivision_json": {
        "enabled": false,
        "conditions": []
      },
      "amount_subdivision": {
        "enabled": false,
        "conditions": []
      },
      "need_get_new_chief": {
        "enabled": false,
        "conditions": []
      },
      "custom_definition_head": {
        "enabled": false,
        "conditions": []
      },
      "type_medical_examination": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
