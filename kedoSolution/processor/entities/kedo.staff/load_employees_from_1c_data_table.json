{
  "__id": "018fb8c1-cf14-7cac-9c28-16829b072cd0",
  "namespace": "kedo.staff",
  "code": "load_employees_from_1c_data_table",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "(1С) Загрузка сотрудников из таблицы обмена информацией",
  "type": "bpmn",
  "draft": false,
  "version": 4,
  "context": [
    {
      "code": "value_1",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "value_1",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "text"
        }
      }
    },
    {
      "code": "current_employees_personal_data",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Текущие кадровые данные сотрудников ",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "all_staff_processed",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Все сотрудники обработаны",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "prev_position_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ID предыдущей позиции",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "employment_directory",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "employment_directory",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Справочник трудоустройства",
        "data": {},
        "input": true,
        "output": true
      }
    },
    {
      "code": "transfers",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Переводы",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "staff",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Сотрудник"
      }
    },
    {
      "code": "deleting_index",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 0,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Удаляемый индекс",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "personal_info_table",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Таблица физических лиц",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "created_staffs",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Созданные сотрудники",
        "data": {}
      }
    },
    {
      "code": "new_position",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "position",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Новая позиция",
        "data": {},
        "input": true,
        "output": true
      }
    },
    {
      "code": "parttime",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Совместительство?",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "firing_position_ref",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "firing_position_ref",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "data_for_update_positions",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Данные для обновления позиций ШР",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "positions_table",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "positions_table",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "value_3",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "value_3",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "is_pause",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Пауза?",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "new_staff_exists",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": true,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Есть сотрудники?",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "chunks",
      "type": "JSON",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Массив с чанками",
        "data": {}
      }
    },
    {
      "code": "error_stack",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "error stack",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "firing_data",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Данные увольнений",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "end_transfer_date",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата окончания перевода",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "isPause",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "old_Пауза?",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "employee_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ID сотрудника",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "max_iteration",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 0,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Максимальное количество итераций",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "iterator",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": -1,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "iterator",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "is_temporary",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Это временный перевод?",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "parttime_dismissal_str",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Удаление совмещения",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "type_table",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Виды занятости",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "prev_position",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "position",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Предыдущая позиция",
        "data": {},
        "input": true,
        "output": true
      }
    },
    {
      "code": "iteration",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 0,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Итерация",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "firing_date",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата увольнения",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        }
      }
    },
    {
      "code": "documents_table",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Таблица документов",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "value_2",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "value_2",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "loop_end",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Окончание цикла",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "prev_position_date",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата перевода на предыдущую позицию",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "current_employee",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Текущий сотрудник",
        "data": {}
      }
    },
    {
      "code": "employee_table",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Таблица сотруднков",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "is_main_worktype",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": true,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Является основным типом работы",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "fixedterm_data",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Срочные ТД",
        "data": {
          "additionalType": "string"
        }
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-03-30T06:09:21.851908267Z",
  "__createdBy": "8b6393ab-540b-4559-8c18-7ef92a9cc24a",
  "__updatedAt": "2024-05-07T07:48:30.506971153Z",
  "__updatedBy": "59e0911f-230a-4b6d-becf-6b302a91977a",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 24,
        "y": 256,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "type": "start",
        "color": "#ffffff",
        "exits": ["dc018b97-1376-4abc-be34-7ff04d508d80"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "(1С) Загрузка сотрудников из таблицы обмена информацией ({$staff})",
          "titleGenerateMethod": "template"
        }
      },
      "026941c3-04c5-4e78-9a53-562c18715ac9": {
        "x": 184,
        "y": 240,
        "id": "026941c3-04c5-4e78-9a53-562c18715ac9",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Документы",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "cc05b1aa-aeff-4d62-bde0-0ee1d523b3d9",
          "22cbe363-2850-4fd3-b2d2-fbdb7f4e2956"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "addPassportData",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "22cbe363-2850-4fd3-b2d2-fbdb7f4e2956",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "0518a43d-c361-4836-99f2-81774dee46a2": {
        "x": 528,
        "y": 120,
        "id": "0518a43d-c361-4836-99f2-81774dee46a2",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "8718cefd-edc0-4259-8232-eb2158c96390",
          "99f04cd5-432d-4b54-a867-0e35b281b247"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "075a8b8a-0b3b-4d40-a377-83d0846f26c2": {
        "x": 1960,
        "y": 48,
        "id": "075a8b8a-0b3b-4d40-a377-83d0846f26c2",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Постановка задач по окончанию срочный трудового договора / временного кадрового перевода",
        "type": "call",
        "color": "#ffffff",
        "exits": ["4ef3a79e-f581-4d52-8b5e-56f144598722"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "fixed_term_contract",
          "async": true,
          "input": [
            {
              "source": {
                "kind": "context",
                "value": "current_employee"
              },
              "target": {
                "kind": "context",
                "value": "staff"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "end_transfer_date"
              },
              "target": {
                "kind": "context",
                "value": "contract_expire_date"
              }
            }
          ],
          "output": [],
          "namespace": "kedo.staff",
          "subProcessTargetFieldCode": ""
        }
      },
      "08d2b58e-7d0d-4125-9459-df636d978263": {
        "x": 1688,
        "y": 160,
        "id": "08d2b58e-7d0d-4125-9459-df636d978263",
        "icon": "timer",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Таймер на уход от ошибки too many loops",
        "type": "event",
        "color": "#ffffff",
        "exits": ["bfaee8fa-61a8-4725-8ec9-8b3411725a8b"],
        "width": 32,
        "height": 32,
        "settings": {
          "kind": "timer",
          "timer": {
            "days": 0,
            "kind": "duration",
            "hours": 0,
            "minutes": 1,
            "absolute": true
          }
        }
      },
      "1880ac08-86ad-45ca-af82-c451c3f098b9": {
        "x": 616,
        "y": 256,
        "id": "1880ac08-86ad-45ca-af82-c451c3f098b9",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "ded3b5a9-bef8-4704-8b27-887ae909465a",
          "78c89d44-1cc5-47ea-8a95-b7b88b40f78d"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "1aedeb4a-7f30-423e-9db6-a738f0132d58": {
        "x": 1792,
        "y": 48,
        "id": "1aedeb4a-7f30-423e-9db6-a738f0132d58",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Обработка временного кадрового перевода",
        "type": "call",
        "color": "#ffffff",
        "exits": ["43ce016c-6e46-4b1a-8cef-d8651a4950c9"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "handle_temporary_transfer",
          "async": true,
          "input": [
            {
              "source": {
                "kind": "context",
                "value": "current_employee"
              },
              "target": {
                "kind": "context",
                "value": "staff"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "end_transfer_date"
              },
              "target": {
                "kind": "context",
                "value": "end_transfer_date"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "employee_id"
              },
              "target": {
                "kind": "context",
                "value": "employee_id"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "prev_position"
              },
              "target": {
                "kind": "context",
                "value": "prev_position"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "prev_position_date"
              },
              "target": {
                "kind": "context",
                "value": "prev_position_date"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "is_main_worktype"
              },
              "target": {
                "kind": "context",
                "value": "is_main_worktype"
              }
            }
          ],
          "output": [],
          "namespace": "kedo.staff",
          "subProcessTargetFieldCode": ""
        }
      },
      "1c0dc177-ffa0-4876-ac62-69b1913912aa": {
        "x": 504,
        "y": 240,
        "id": "1c0dc177-ffa0-4876-ac62-69b1913912aa",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Типы трудоустройства",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "97a60f53-ce4b-4f65-b784-2c51ce41088b",
          "998fa4dc-ab8f-40bd-820b-dba680ce8e26"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "addWorkTypes",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "998fa4dc-ab8f-40bd-820b-dba680ce8e26",
              "notify": false,
              "interrupt": true,
              "receivers": []
            }
          }
        }
      },
      "1dd890bb-ccb9-4cb1-a4f6-fde450a161b0": {
        "x": 2848,
        "y": 240,
        "id": "1dd890bb-ccb9-4cb1-a4f6-fde450a161b0",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Обновить места занятости сотрудника (в справочнике занятости)",
        "type": "call",
        "color": "#ffffff",
        "exits": ["e650f999-0e1c-451b-84e3-4d6c727b50e6"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "update_staff_employment_placement_workflow",
          "async": true,
          "input": [
            {
              "source": {
                "kind": "context",
                "value": "created_staffs"
              },
              "target": {
                "kind": "context",
                "value": "staffs"
              }
            }
          ],
          "output": [],
          "namespace": "kedo.employment_directory",
          "subProcessTargetFieldCode": ""
        }
      },
      "2051cded-a63a-4283-80c7-c64ede7d0fca": {
        "x": 2960,
        "y": 240,
        "id": "2051cded-a63a-4283-80c7-c64ede7d0fca",
        "icon": "notification",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Оповещение об окончании процесса",
        "type": "notification",
        "color": "#ffff66",
        "exits": ["af7fd86e-5c05-41c5-954c-77ec521e3f3b"],
        "width": 80,
        "height": 64,
        "settings": {
          "author": {
            "code": "",
            "kind": "system"
          },
          "target": {
            "kind": "process"
          },
          "receivers": [
            {
              "kind": "current"
            },
            {
              "code": "administrators",
              "kind": "group",
              "multi": true,
              "namespace": "system"
            }
          ],
          "messageHeader": "Загрузка сотрудников из 1С завершена"
        }
      },
      "26d25132-24ef-4be4-b069-1c3eb6545c2a": {
        "x": 912,
        "y": 424,
        "id": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "icon": "notification",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Оповещение об ошибке",
        "type": "notification",
        "color": "#ffff66",
        "exits": ["697f307f-f41b-4850-a0d2-dc454a383700"],
        "width": 80,
        "height": 64,
        "settings": {
          "author": {
            "code": "",
            "kind": "system"
          },
          "target": {
            "kind": "process"
          },
          "receivers": [
            {
              "kind": "current"
            },
            {
              "code": "administrators",
              "kind": "group",
              "multi": true,
              "namespace": "system"
            }
          ],
          "messageHeader": "При загрузке сотрудников из 1С возникла ошибка"
        }
      },
      "26d3c404-1ff6-4377-af6f-4480d56e318d": {
        "x": 2352,
        "y": 184,
        "id": "26d3c404-1ff6-4377-af6f-4480d56e318d",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "80a655c4-021e-4fe4-88a5-f197ddbcd3c9",
          "3b50f213-dfab-499f-9a51-48d716eabace"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "28d1d466-c84a-44c8-8e4d-0fd5a8dc3877": {
        "x": 1368,
        "y": 72,
        "id": "28d1d466-c84a-44c8-8e4d-0fd5a8dc3877",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "8939bda7-e35b-45d9-9a59-5cf650957ac0",
          "37fbdcd5-eecb-4bff-b163-374364c471a0"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "2f7b2fc7-0eb6-4252-8a71-202eca780257": {
        "x": 1504,
        "y": 256,
        "id": "2f7b2fc7-0eb6-4252-8a71-202eca780257",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "1b4ca9ad-505c-4a35-b9ac-5b9e26bf2257",
          "0a18933a-eecf-4ec0-bd55-d4d24150bd9d"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "30fa9bb8-56da-4477-8df0-43bc2ffb3466": {
        "x": 768,
        "y": 176,
        "id": "30fa9bb8-56da-4477-8df0-43bc2ffb3466",
        "icon": "timer",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Таймер на уход от ошибки too many loops",
        "type": "event",
        "color": "#ffffff",
        "exits": ["e341000e-d349-4312-8ae4-8c96fc6f6e6e"],
        "width": 32,
        "height": 32,
        "settings": {
          "kind": "timer",
          "timer": {
            "days": 0,
            "kind": "duration",
            "hours": 0,
            "minutes": 1,
            "absolute": true
          }
        }
      },
      "3d5b28f3-21a3-4709-91ce-74290330acfc": {
        "x": 2224,
        "y": 240,
        "id": "3d5b28f3-21a3-4709-91ce-74290330acfc",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Поделить объекты на чанки",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "51f1b536-8d37-4382-90c1-9fb1465ffe9f",
          "e22f49f5-be2a-4213-b186-8e7d4a52f1d4"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "splitStaff",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "51f1b536-8d37-4382-90c1-9fb1465ffe9f",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "3e26de31-213b-40bf-997c-22de4ed404d9": {
        "x": 2632,
        "y": 72,
        "id": "3e26de31-213b-40bf-997c-22de4ed404d9",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "4118f1a5-f054-4d49-b608-48293fbbfa5e",
          "6845afd2-4a3f-47cc-b3de-81aebeaf6ae9"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "4117558e-6590-4eea-910d-d4cbebc1dfd4": {
        "x": 1136,
        "y": 256,
        "id": "4117558e-6590-4eea-910d-d4cbebc1dfd4",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "0db80525-5209-4a3d-83d5-19dd8c563bed",
          "ff620bb3-dcd1-4ac5-bf13-1ba96642bb67"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "49882283-9ffa-4939-9fa5-9d39ae80c380": {
        "x": 2752,
        "y": 256,
        "id": "49882283-9ffa-4939-9fa5-9d39ae80c380",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "1483cac7-22de-4c86-88fe-f115b056aaef",
          "950cd04e-14b5-47c6-95fa-f431e13c1c77"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "54b37a8a-bfe5-49ae-a438-f8a36940d84c": {
        "x": 1504,
        "y": 184,
        "id": "54b37a8a-bfe5-49ae-a438-f8a36940d84c",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "e1c758aa-61d5-4d8f-9797-92702cad3ed2",
          "5d7eaf77-fefb-4115-b8cf-507ce186f7a6"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "5ae76c3d-bc19-4d7a-ba2f-523757825817": {
        "x": 1592,
        "y": 240,
        "id": "5ae76c3d-bc19-4d7a-ba2f-523757825817",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Обнуление переменных",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["245ca309-f2e6-4aeb-8f69-add2330b8def"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "clearVars",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "5c894f43-1cca-47a2-b967-e379ce188af9": {
        "x": 2432,
        "y": 256,
        "id": "5c894f43-1cca-47a2-b967-e379ce188af9",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "aaf8d605-d654-4c0e-ac91-0d3c16a8f7a9",
          "d0ba29d0-7073-419f-ac1b-9465f5f3b2c3"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "602340b3-a617-476c-a4ee-0d0964358a0b": {
        "x": 1032,
        "y": 240,
        "id": "602340b3-a617-476c-a4ee-0d0964358a0b",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Загрузка даты приема",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "bf8912ba-1c73-48f1-a371-700ff8a37c48",
          "08190832-0056-4f87-8f89-bfde4c203d41"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "loadAcceptDate",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "bf8912ba-1c73-48f1-a371-700ff8a37c48",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "6370fa00-afe3-4ee4-91e3-848314858234": {
        "x": 2728,
        "y": 56,
        "id": "6370fa00-afe3-4ee4-91e3-848314858234",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Обновление позиций ШР",
        "type": "call",
        "color": "#ffffff",
        "exits": ["34cd6954-a750-4874-8f82-a525bc711d22"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "update_staffing_table",
          "async": true,
          "input": [
            {
              "source": {
                "kind": "context",
                "value": "employment_directory"
              },
              "target": {
                "kind": "context",
                "value": "employment_directory_processed_staff"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "new_position"
              },
              "target": {
                "kind": "context",
                "value": "new_position"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "current_employee"
              },
              "target": {
                "kind": "context",
                "value": "processed_staff"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "is_temporary"
              },
              "target": {
                "kind": "context",
                "value": "temporary_transfer"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "end_transfer_date"
              },
              "target": {
                "kind": "context",
                "value": "end_date"
              }
            }
          ],
          "output": [],
          "namespace": "kedo",
          "subProcessTargetFieldCode": ""
        }
      },
      "6a6b9526-2ccb-4b28-90d5-b073d2c3aa76": {
        "x": 688,
        "y": 240,
        "id": "6a6b9526-2ccb-4b28-90d5-b073d2c3aa76",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Обнуление переменных",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["c72c87b8-4d19-499b-9a9d-da049b63dc1e"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "clearVars",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "6da117d0-65f3-4f33-b748-a5e59d80b8cd": {
        "x": 72,
        "y": 240,
        "id": "6da117d0-65f3-4f33-b748-a5e59d80b8cd",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Сотрудники",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "aa075446-f4e3-4763-b0f2-a283b722c888",
          "83d06eef-5040-48c1-9aa4-13a3362964c3"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "createPersons",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "83d06eef-5040-48c1-9aa4-13a3362964c3",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "84c58fe8-5df5-42a2-be23-8f8ce2af6edf": {
        "x": 1984,
        "y": 176,
        "id": "84c58fe8-5df5-42a2-be23-8f8ce2af6edf",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "295ac9f5-bbc7-4e0e-812f-f88a838903a2",
          "6e1bac79-6ea4-4ff5-acb0-8bd5e89a3c14"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "85f001c1-c2d0-4fc8-8d52-d127c2301af3": {
        "x": 3072,
        "y": 256,
        "id": "85f001c1-c2d0-4fc8-8d52-d127c2301af3",
        "icon": "end",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "8f34bcee-df4d-48a3-b1c7-3684fb5942de": {
        "x": 824,
        "y": 120,
        "id": "8f34bcee-df4d-48a3-b1c7-3684fb5942de",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "a860a935-8649-4987-8cf9-50cf848991e2",
          "b692b2d4-02e4-419e-9297-53b1f7038a07"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "9109eba7-01ac-4574-aa2f-6178c7b9892d": {
        "x": 1712,
        "y": 240,
        "id": "9109eba7-01ac-4574-aa2f-6178c7b9892d",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Заполнение переменных по срочному ТД и по временному кадровому переводу",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "87b4efc2-2d0b-47e8-abc3-f3738afd475d",
          "e81505ea-11b8-42ec-8e9d-ee16d63a4011"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "fillVarsForFixedterm",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "e81505ea-11b8-42ec-8e9d-ee16d63a4011",
              "notify": false,
              "interrupt": true,
              "receivers": []
            }
          }
        }
      },
      "930ff5ee-e9c8-4170-b933-05e4d4b5be1c": {
        "x": 2104,
        "y": 240,
        "id": "930ff5ee-e9c8-4170-b933-05e4d4b5be1c",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Загрузка графиков работы",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "b0ca900d-43dc-49e0-8437-9178df9a5ea3",
          "6abc0fe0-891e-4b19-8f90-b9604c3db435"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getWorkSchedules",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "b0ca900d-43dc-49e0-8437-9178df9a5ea3",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "9b00d5be-f1b1-462c-9b58-bb7bc70d2053": {
        "x": 800,
        "y": 240,
        "id": "9b00d5be-f1b1-462c-9b58-bb7bc70d2053",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Позиции",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "e5084417-0b1c-44b8-8690-4b0bdd7ab481",
          "4b239127-cdc1-4e30-a469-9a42c0981380"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "addPositionData",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "4b239127-cdc1-4e30-a469-9a42c0981380",
              "notify": true,
              "interrupt": true,
              "receivers": [
                {
                  "code": "administrators",
                  "kind": "group",
                  "multi": true,
                  "namespace": "system"
                }
              ]
            }
          }
        }
      },
      "a25f06c9-a633-4f16-9575-63de68e3882e": {
        "x": 1232,
        "y": 240,
        "id": "a25f06c9-a633-4f16-9575-63de68e3882e",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Обработка кадровых переводов",
        "type": "call",
        "color": "#ffffff",
        "exits": ["7ba2bd6e-9efb-47c4-b9a0-0eb4ff15c102"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "handling_transfers",
          "async": true,
          "input": [
            {
              "source": {
                "kind": "context",
                "value": "transfers"
              },
              "target": {
                "kind": "context",
                "value": "transfers"
              }
            }
          ],
          "output": [],
          "namespace": "kedo.staff",
          "subProcessTargetFieldCode": ""
        }
      },
      "a325891f-5166-4f25-a2a3-8ee73f99d2d6": {
        "x": 2752,
        "y": 160,
        "id": "a325891f-5166-4f25-a2a3-8ee73f99d2d6",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "315180d8-fc04-420d-a249-552938edc5af",
          "ac13446e-ad63-4189-817d-8efe6d445ba4"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "a4c92a0b-b933-40ce-aaee-f8fc1b35d735": {
        "x": 1736,
        "y": 64,
        "id": "a4c92a0b-b933-40ce-aaee-f8fc1b35d735",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "e387b2e2-32bb-4a08-bc67-d7b1d11a2eac",
          "4e4cb175-2f12-4573-81a0-415d9650804d"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "aa2670b3-4cdc-4356-8dc4-98c7ac5bb7d2": {
        "x": 1984,
        "y": 256,
        "id": "aa2670b3-4cdc-4356-8dc4-98c7ac5bb7d2",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "1cd1eafa-9f75-4239-9aa1-68fd8ca61d58",
          "4bca470f-5cae-43f7-96ae-562c0755cb57"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "aaeca9eb-82ab-47a9-85e9-1b8943b70770": {
        "x": 392,
        "y": 240,
        "id": "aaeca9eb-82ab-47a9-85e9-1b8943b70770",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Обнуление переменных",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["6e1ae7e8-1065-4308-8f39-ad11b9292690"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "clearVars",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "ae6d437c-b253-45ee-bfed-2d2099a65517": {
        "x": 2328,
        "y": 240,
        "id": "ae6d437c-b253-45ee-bfed-2d2099a65517",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Установить группы доступа для сотрудников",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["bdd8c60c-fecb-46a6-8674-305a81c77a2d"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "set_access_groups",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "b9b4a01e-d7e1-4cce-af93-6ef5db60170e": {
        "x": 296,
        "y": 240,
        "id": "b9b4a01e-d7e1-4cce-af93-6ef5db60170e",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Сведения об ответственных лицах",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "92a23b01-0bf9-45ee-82f9-bce97af1c787",
          "234e78de-589a-4ca9-bbc4-336d610c3ad2"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "addResponsibleEmployees",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "234e78de-589a-4ca9-bbc4-336d610c3ad2",
              "notify": false,
              "interrupt": true,
              "receivers": []
            }
          }
        }
      },
      "bf80d183-c742-4eba-a93d-eb3110e64bf0": {
        "x": 1328,
        "y": 160,
        "id": "bf80d183-c742-4eba-a93d-eb3110e64bf0",
        "icon": "timer",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Таймер на уход от ошибки too many loops",
        "type": "event",
        "color": "#ffffff",
        "exits": ["910fc72c-996a-4dc8-a6fb-ed2089f6aeb9"],
        "width": 32,
        "height": 32,
        "settings": {
          "kind": "timer",
          "timer": {
            "days": 0,
            "kind": "duration",
            "hours": 0,
            "minutes": 1,
            "absolute": true
          }
        }
      },
      "c37ccbe7-c428-43c7-b8b7-bb7aece4da25": {
        "x": 2496,
        "y": 240,
        "id": "c37ccbe7-c428-43c7-b8b7-bb7aece4da25",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Обнуление переменных",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["3fb3b30e-dca8-4149-b27a-7b159ea4ddfc"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "clearVars",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "ce94c8f5-b178-4d63-91b9-e1f4cc0446f8": {
        "x": 472,
        "y": 176,
        "id": "ce94c8f5-b178-4d63-91b9-e1f4cc0446f8",
        "icon": "timer",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Таймер на уход от ошибки too many loops",
        "type": "event",
        "color": "#ffffff",
        "exits": ["3aa8ad36-1e9d-440a-8fa0-bbc0baa98eb3"],
        "width": 32,
        "height": 32,
        "settings": {
          "kind": "timer",
          "timer": {
            "days": 0,
            "kind": "duration",
            "hours": 0,
            "minutes": 1,
            "absolute": true
          }
        }
      },
      "e6f59d09-f162-4601-a95e-d3696b838b4d": {
        "x": 1480,
        "y": 56,
        "id": "e6f59d09-f162-4601-a95e-d3696b838b4d",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Увольнение",
        "type": "call",
        "color": "#ffffff",
        "exits": ["12877574-a86b-4991-b7b4-35007a866b1a"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "the_dismissal_process",
          "async": true,
          "input": [
            {
              "source": {
                "kind": "manual",
                "value": true
              },
              "target": {
                "kind": "context",
                "value": "dismissal_from_1c"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "firing_date"
              },
              "target": {
                "kind": "context",
                "value": "date_of_dismissal"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "current_employee"
              },
              "target": {
                "kind": "context",
                "value": "staff"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "parttime"
              },
              "target": {
                "kind": "context",
                "value": "parttime"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "firing_position_ref"
              },
              "target": {
                "kind": "context",
                "value": "firing_position_ref"
              }
            }
          ],
          "output": [],
          "namespace": "kedo.staff",
          "subProcessTargetFieldCode": ""
        }
      },
      "eb9e1985-9981-4b9b-be70-653b70449fed": {
        "x": 1344,
        "y": 240,
        "id": "eb9e1985-9981-4b9b-be70-653b70449fed",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Заполнение переменных по увольнению",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "e07c9f52-2f07-49ec-887c-5abac121316c",
          "1744f713-9cfe-4cef-bc5d-a065a038a828"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "updateFiring",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "e07c9f52-2f07-49ec-887c-5abac121316c",
              "notify": false,
              "interrupt": true,
              "receivers": []
            }
          }
        }
      },
      "fa239454-aa36-4fbb-afae-953f8a6c7640": {
        "x": 2608,
        "y": 240,
        "id": "fa239454-aa36-4fbb-afae-953f8a6c7640",
        "icon": "script",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Заполнение данных по переводам для обновления карточки позиции ШР",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["ac1d6446-c641-4a9d-b0af-2c0c44e2cfae"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "fillPositionTransitions",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "fc854cac-9a80-4b92-9f45-b06262cb9c9c": {
        "x": 2576,
        "y": 152,
        "id": "fc854cac-9a80-4b92-9f45-b06262cb9c9c",
        "icon": "timer",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Таймер на уход от ошибки too many loops",
        "type": "event",
        "color": "#ffffff",
        "exits": ["01d16eaf-6398-419e-afba-8edb6a0cadce"],
        "width": 32,
        "height": 32,
        "settings": {
          "kind": "timer",
          "timer": {
            "days": 0,
            "kind": "duration",
            "hours": 0,
            "minutes": 1,
            "absolute": false
          }
        }
      },
      "fcdb168f-c39f-46e7-baa8-6ea750c2d98d": {
        "x": 920,
        "y": 256,
        "id": "fcdb168f-c39f-46e7-baa8-6ea750c2d98d",
        "icon": "exclusive",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "653de8d6-6751-4df8-9428-d53408540e5f",
          "9439d27c-a86d-4aaf-8013-84c076daf186"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "feb119a8-ee00-4660-bb07-2ec0b8d9d43e": {
        "x": 936,
        "y": 528,
        "id": "feb119a8-ee00-4660-bb07-2ec0b8d9d43e",
        "icon": "end",
        "lane": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "d6f98344-e66f-4768-8476-3cf19eeba0e7": {
        "x": 8,
        "y": 8,
        "id": "d6f98344-e66f-4768-8476-3cf19eeba0e7",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 3356,
        "height": 640,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "01d16eaf-6398-419e-afba-8edb6a0cadce": {
        "id": "01d16eaf-6398-419e-afba-8edb6a0cadce",
        "name": "",
        "path": [
          {
            "x": 2592,
            "y": 184
          },
          {
            "x": 2592,
            "y": 232
          },
          {
            "x": 2628,
            "y": 232
          },
          {
            "x": 2628,
            "y": 240
          }
        ],
        "type": "plain",
        "source": "fc854cac-9a80-4b92-9f45-b06262cb9c9c",
        "target": "fa239454-aa36-4fbb-afae-953f8a6c7640",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "08190832-0056-4f87-8f89-bfde4c203d41": {
        "id": "08190832-0056-4f87-8f89-bfde4c203d41",
        "name": "",
        "path": [
          {
            "x": 1112,
            "y": 272
          },
          {
            "x": 1136,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "602340b3-a617-476c-a4ee-0d0964358a0b",
        "target": "4117558e-6590-4eea-910d-d4cbebc1dfd4",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "0a18933a-eecf-4ec0-bd55-d4d24150bd9d": {
        "id": "0a18933a-eecf-4ec0-bd55-d4d24150bd9d",
        "name": "",
        "path": [
          {
            "x": 1520,
            "y": 256
          },
          {
            "x": 1520,
            "y": 216
          }
        ],
        "type": "default",
        "source": "2f7b2fc7-0eb6-4252-8a71-202eca780257",
        "target": "54b37a8a-bfe5-49ae-a438-f8a36940d84c",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "0db80525-5209-4a3d-83d5-19dd8c563bed": {
        "id": "0db80525-5209-4a3d-83d5-19dd8c563bed",
        "name": "Переводы заполнены",
        "path": [
          {
            "x": 1168,
            "y": 272
          },
          {
            "x": 1232,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "4117558e-6590-4eea-910d-d4cbebc1dfd4",
        "target": "a25f06c9-a633-4f16-9575-63de68e3882e",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "transfers"
              },
              "type": "STRING",
              "inversion": false,
              "operation": {
                "relation": "empty",
                "inversion": true,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "12877574-a86b-4991-b7b4-35007a866b1a": {
        "id": "12877574-a86b-4991-b7b4-35007a866b1a",
        "name": "Продолжить цикл",
        "path": [
          {
            "x": 1480,
            "y": 88
          },
          {
            "x": 1400,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "e6f59d09-f162-4601-a95e-d3696b838b4d",
        "target": "28d1d466-c84a-44c8-8e4d-0fd5a8dc3877",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "1483cac7-22de-4c86-88fe-f115b056aaef": {
        "id": "1483cac7-22de-4c86-88fe-f115b056aaef",
        "name": "Продолжаем цикл",
        "path": [
          {
            "x": 2768,
            "y": 256
          },
          {
            "x": 2768,
            "y": 192
          }
        ],
        "type": "default",
        "source": "49882283-9ffa-4939-9fa5-9d39ae80c380",
        "target": "a325891f-5166-4f25-a2a3-8ee73f99d2d6",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "1744f713-9cfe-4cef-bc5d-a065a038a828": {
        "id": "1744f713-9cfe-4cef-bc5d-a065a038a828",
        "name": "",
        "path": [
          {
            "x": 1424,
            "y": 272
          },
          {
            "x": 1504,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "eb9e1985-9981-4b9b-be70-653b70449fed",
        "target": "2f7b2fc7-0eb6-4252-8a71-202eca780257",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "1b4ca9ad-505c-4a35-b9ac-5b9e26bf2257": {
        "id": "1b4ca9ad-505c-4a35-b9ac-5b9e26bf2257",
        "name": "Цикл закончен",
        "path": [
          {
            "x": 1536,
            "y": 272
          },
          {
            "x": 1592,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "2f7b2fc7-0eb6-4252-8a71-202eca780257",
        "target": "5ae76c3d-bc19-4d7a-ba2f-523757825817",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "loop_end"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "1cd1eafa-9f75-4239-9aa1-68fd8ca61d58": {
        "id": "1cd1eafa-9f75-4239-9aa1-68fd8ca61d58",
        "name": "Цикл закончен",
        "path": [
          {
            "x": 2016,
            "y": 272
          },
          {
            "x": 2104,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "aa2670b3-4cdc-4356-8dc4-98c7ac5bb7d2",
        "target": "930ff5ee-e9c8-4170-b933-05e4d4b5be1c",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "loop_end"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "22cbe363-2850-4fd3-b2d2-fbdb7f4e2956": {
        "id": "22cbe363-2850-4fd3-b2d2-fbdb7f4e2956",
        "name": "",
        "path": [
          {
            "x": 224,
            "y": 304
          },
          {
            "x": 224,
            "y": 440
          },
          {
            "x": 912,
            "y": 440
          }
        ],
        "type": "error",
        "source": "026941c3-04c5-4e78-9a53-562c18715ac9",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "234e78de-589a-4ca9-bbc4-336d610c3ad2": {
        "id": "234e78de-589a-4ca9-bbc4-336d610c3ad2",
        "name": "",
        "path": [
          {
            "x": 336,
            "y": 304
          },
          {
            "x": 336,
            "y": 440
          },
          {
            "x": 912,
            "y": 440
          }
        ],
        "type": "error",
        "source": "b9b4a01e-d7e1-4cce-af93-6ef5db60170e",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "245ca309-f2e6-4aeb-8f69-add2330b8def": {
        "id": "245ca309-f2e6-4aeb-8f69-add2330b8def",
        "name": "",
        "path": [
          {
            "x": 1672,
            "y": 272
          },
          {
            "x": 1712,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "5ae76c3d-bc19-4d7a-ba2f-523757825817",
        "target": "9109eba7-01ac-4574-aa2f-6178c7b9892d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "295ac9f5-bbc7-4e0e-812f-f88a838903a2": {
        "id": "295ac9f5-bbc7-4e0e-812f-f88a838903a2",
        "name": "Сотрудник заполнен",
        "path": [
          {
            "x": 2000,
            "y": 176
          },
          {
            "x": 2000,
            "y": 112
          }
        ],
        "type": "plain",
        "source": "84c58fe8-5df5-42a2-be23-8f8ce2af6edf",
        "target": "075a8b8a-0b3b-4d40-a377-83d0846f26c2",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "current_employee"
              },
              "type": "SYS_COLLECTION",
              "inversion": false,
              "operation": {
                "relation": "empty",
                "inversion": true,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "315180d8-fc04-420d-a249-552938edc5af": {
        "id": "315180d8-fc04-420d-a249-552938edc5af",
        "name": "Справочник трудоустройства не заполнен",
        "path": [
          {
            "x": 2752,
            "y": 176
          },
          {
            "x": 2672,
            "y": 176
          },
          {
            "x": 2672,
            "y": 88
          },
          {
            "x": 2664,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "a325891f-5166-4f25-a2a3-8ee73f99d2d6",
        "target": "3e26de31-213b-40bf-997c-22de4ed404d9",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "employment_directory"
              },
              "type": "SYS_COLLECTION",
              "inversion": false,
              "operation": {
                "relation": "empty",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "34cd6954-a750-4874-8f82-a525bc711d22": {
        "id": "34cd6954-a750-4874-8f82-a525bc711d22",
        "name": "",
        "path": [
          {
            "x": 2728,
            "y": 88
          },
          {
            "x": 2664,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "6370fa00-afe3-4ee4-91e3-848314858234",
        "target": "3e26de31-213b-40bf-997c-22de4ed404d9",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "37fbdcd5-eecb-4bff-b163-374364c471a0": {
        "id": "37fbdcd5-eecb-4bff-b163-374364c471a0",
        "name": "",
        "path": [
          {
            "x": 1384,
            "y": 104
          },
          {
            "x": 1384,
            "y": 240
          }
        ],
        "type": "default",
        "source": "28d1d466-c84a-44c8-8e4d-0fd5a8dc3877",
        "target": "eb9e1985-9981-4b9b-be70-653b70449fed",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "3aa8ad36-1e9d-440a-8fa0-bbc0baa98eb3": {
        "id": "3aa8ad36-1e9d-440a-8fa0-bbc0baa98eb3",
        "name": "",
        "path": [
          {
            "x": 488,
            "y": 208
          },
          {
            "x": 488,
            "y": 256
          },
          {
            "x": 504,
            "y": 256
          }
        ],
        "type": "plain",
        "source": "ce94c8f5-b178-4d63-91b9-e1f4cc0446f8",
        "target": "1c0dc177-ffa0-4876-ac62-69b1913912aa",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "3b50f213-dfab-499f-9a51-48d716eabace": {
        "id": "3b50f213-dfab-499f-9a51-48d716eabace",
        "name": "",
        "path": [
          {
            "x": 2384,
            "y": 200
          },
          {
            "x": 2536,
            "y": 200
          },
          {
            "x": 2536,
            "y": 240
          }
        ],
        "type": "plain",
        "source": "26d3c404-1ff6-4377-af6f-4480d56e318d",
        "target": "c37ccbe7-c428-43c7-b8b7-bb7aece4da25",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "new_staff_exists"
              },
              "b": {
                "kind": "manual",
                "value": false
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "3fb3b30e-dca8-4149-b27a-7b159ea4ddfc": {
        "id": "3fb3b30e-dca8-4149-b27a-7b159ea4ddfc",
        "name": "",
        "path": [
          {
            "x": 2576,
            "y": 272
          },
          {
            "x": 2608,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "c37ccbe7-c428-43c7-b8b7-bb7aece4da25",
        "target": "fa239454-aa36-4fbb-afae-953f8a6c7640",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "4118f1a5-f054-4d49-b608-48293fbbfa5e": {
        "id": "4118f1a5-f054-4d49-b608-48293fbbfa5e",
        "name": "",
        "path": [
          {
            "x": 2648,
            "y": 104
          },
          {
            "x": 2648,
            "y": 240
          }
        ],
        "type": "default",
        "source": "3e26de31-213b-40bf-997c-22de4ed404d9",
        "target": "fa239454-aa36-4fbb-afae-953f8a6c7640",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "43ce016c-6e46-4b1a-8cef-d8651a4950c9": {
        "id": "43ce016c-6e46-4b1a-8cef-d8651a4950c9",
        "name": "",
        "path": [
          {
            "x": 1792,
            "y": 80
          },
          {
            "x": 1768,
            "y": 80
          }
        ],
        "type": "plain",
        "source": "1aedeb4a-7f30-423e-9db6-a738f0132d58",
        "target": "a4c92a0b-b933-40ce-aaee-f8fc1b35d735",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "4b239127-cdc1-4e30-a469-9a42c0981380": {
        "id": "4b239127-cdc1-4e30-a469-9a42c0981380",
        "name": "",
        "path": [
          {
            "x": 840,
            "y": 304
          },
          {
            "x": 840,
            "y": 332
          },
          {
            "x": 952,
            "y": 332
          },
          {
            "x": 952,
            "y": 424
          }
        ],
        "type": "error",
        "source": "9b00d5be-f1b1-462c-9b58-bb7bc70d2053",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "4bca470f-5cae-43f7-96ae-562c0755cb57": {
        "id": "4bca470f-5cae-43f7-96ae-562c0755cb57",
        "name": "",
        "path": [
          {
            "x": 2000,
            "y": 256
          },
          {
            "x": 2000,
            "y": 208
          }
        ],
        "type": "default",
        "source": "aa2670b3-4cdc-4356-8dc4-98c7ac5bb7d2",
        "target": "84c58fe8-5df5-42a2-be23-8f8ce2af6edf",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "4e4cb175-2f12-4573-81a0-415d9650804d": {
        "id": "4e4cb175-2f12-4573-81a0-415d9650804d",
        "name": "Пачка закончилась",
        "path": [
          {
            "x": 1736,
            "y": 80
          },
          {
            "x": 1704,
            "y": 80
          },
          {
            "x": 1704,
            "y": 160
          }
        ],
        "type": "plain",
        "source": "a4c92a0b-b933-40ce-aaee-f8fc1b35d735",
        "target": "08d2b58e-7d0d-4125-9459-df636d978263",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "is_pause"
              },
              "b": {
                "kind": "context",
                "value": "is_pause"
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "4ef3a79e-f581-4d52-8b5e-56f144598722": {
        "id": "4ef3a79e-f581-4d52-8b5e-56f144598722",
        "name": "Продолжить цикл",
        "path": [
          {
            "x": 1960,
            "y": 80
          },
          {
            "x": 1872,
            "y": 80
          }
        ],
        "type": "plain",
        "source": "075a8b8a-0b3b-4d40-a377-83d0846f26c2",
        "target": "1aedeb4a-7f30-423e-9db6-a738f0132d58",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "51f1b536-8d37-4382-90c1-9fb1465ffe9f": {
        "id": "51f1b536-8d37-4382-90c1-9fb1465ffe9f",
        "name": "",
        "path": [
          {
            "x": 2264,
            "y": 304
          },
          {
            "x": 2264,
            "y": 472
          },
          {
            "x": 992,
            "y": 472
          }
        ],
        "type": "error",
        "source": "3d5b28f3-21a3-4709-91ce-74290330acfc",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "5d7eaf77-fefb-4115-b8cf-507ce186f7a6": {
        "id": "5d7eaf77-fefb-4115-b8cf-507ce186f7a6",
        "name": "",
        "path": [
          {
            "x": 1504,
            "y": 200
          },
          {
            "x": 1404,
            "y": 200
          },
          {
            "x": 1404,
            "y": 240
          }
        ],
        "type": "default",
        "source": "54b37a8a-bfe5-49ae-a438-f8a36940d84c",
        "target": "eb9e1985-9981-4b9b-be70-653b70449fed",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "653de8d6-6751-4df8-9428-d53408540e5f": {
        "id": "653de8d6-6751-4df8-9428-d53408540e5f",
        "name": "Продолжаем цикл",
        "path": [
          {
            "x": 936,
            "y": 256
          },
          {
            "x": 936,
            "y": 136
          },
          {
            "x": 856,
            "y": 136
          }
        ],
        "type": "plain",
        "source": "fcdb168f-c39f-46e7-baa8-6ea750c2d98d",
        "target": "8f34bcee-df4d-48a3-b1c7-3684fb5942de",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "loop_end"
              },
              "b": {
                "kind": "manual",
                "value": false
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "6845afd2-4a3f-47cc-b3de-81aebeaf6ae9": {
        "id": "6845afd2-4a3f-47cc-b3de-81aebeaf6ae9",
        "name": "Уход на таймер",
        "path": [
          {
            "x": 2632,
            "y": 88
          },
          {
            "x": 2592,
            "y": 88
          },
          {
            "x": 2592,
            "y": 152
          }
        ],
        "type": "plain",
        "source": "3e26de31-213b-40bf-997c-22de4ed404d9",
        "target": "fc854cac-9a80-4b92-9f45-b06262cb9c9c",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "is_pause"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "697f307f-f41b-4850-a0d2-dc454a383700": {
        "id": "697f307f-f41b-4850-a0d2-dc454a383700",
        "name": "",
        "path": [
          {
            "x": 952,
            "y": 488
          },
          {
            "x": 952,
            "y": 528
          }
        ],
        "type": "plain",
        "source": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "target": "feb119a8-ee00-4660-bb07-2ec0b8d9d43e",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "6abc0fe0-891e-4b19-8f90-b9604c3db435": {
        "id": "6abc0fe0-891e-4b19-8f90-b9604c3db435",
        "name": "",
        "path": [
          {
            "x": 2184,
            "y": 272
          },
          {
            "x": 2224,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "930ff5ee-e9c8-4170-b933-05e4d4b5be1c",
        "target": "3d5b28f3-21a3-4709-91ce-74290330acfc",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "6e1ae7e8-1065-4308-8f39-ad11b9292690": {
        "id": "6e1ae7e8-1065-4308-8f39-ad11b9292690",
        "name": "",
        "path": [
          {
            "x": 472,
            "y": 272
          },
          {
            "x": 504,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "aaeca9eb-82ab-47a9-85e9-1b8943b70770",
        "target": "1c0dc177-ffa0-4876-ac62-69b1913912aa",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "6e1bac79-6ea4-4ff5-acb0-8bd5e89a3c14": {
        "id": "6e1bac79-6ea4-4ff5-acb0-8bd5e89a3c14",
        "name": "",
        "path": [
          {
            "x": 1984,
            "y": 192
          },
          {
            "x": 1772,
            "y": 192
          },
          {
            "x": 1772,
            "y": 240
          }
        ],
        "type": "default",
        "source": "84c58fe8-5df5-42a2-be23-8f8ce2af6edf",
        "target": "9109eba7-01ac-4574-aa2f-6178c7b9892d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "78c89d44-1cc5-47ea-8a95-b7b88b40f78d": {
        "id": "78c89d44-1cc5-47ea-8a95-b7b88b40f78d",
        "name": "",
        "path": [
          {
            "x": 648,
            "y": 272
          },
          {
            "x": 688,
            "y": 272
          }
        ],
        "type": "default",
        "source": "1880ac08-86ad-45ca-af82-c451c3f098b9",
        "target": "6a6b9526-2ccb-4b28-90d5-b073d2c3aa76",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "7ba2bd6e-9efb-47c4-b9a0-0eb4ff15c102": {
        "id": "7ba2bd6e-9efb-47c4-b9a0-0eb4ff15c102",
        "name": "",
        "path": [
          {
            "x": 1312,
            "y": 272
          },
          {
            "x": 1344,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "a25f06c9-a633-4f16-9575-63de68e3882e",
        "target": "eb9e1985-9981-4b9b-be70-653b70449fed",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "80a655c4-021e-4fe4-88a5-f197ddbcd3c9": {
        "id": "80a655c4-021e-4fe4-88a5-f197ddbcd3c9",
        "name": "",
        "path": [
          {
            "x": 2368,
            "y": 216
          },
          {
            "x": 2368,
            "y": 240
          }
        ],
        "type": "default",
        "source": "26d3c404-1ff6-4377-af6f-4480d56e318d",
        "target": "ae6d437c-b253-45ee-bfed-2d2099a65517",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "83d06eef-5040-48c1-9aa4-13a3362964c3": {
        "id": "83d06eef-5040-48c1-9aa4-13a3362964c3",
        "name": "",
        "path": [
          {
            "x": 112,
            "y": 304
          },
          {
            "x": 112,
            "y": 456
          },
          {
            "x": 912,
            "y": 456
          }
        ],
        "type": "error",
        "source": "6da117d0-65f3-4f33-b748-a5e59d80b8cd",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "8718cefd-edc0-4259-8232-eb2158c96390": {
        "id": "8718cefd-edc0-4259-8232-eb2158c96390",
        "name": "",
        "path": [
          {
            "x": 544,
            "y": 152
          },
          {
            "x": 544,
            "y": 240
          }
        ],
        "type": "default",
        "source": "0518a43d-c361-4836-99f2-81774dee46a2",
        "target": "1c0dc177-ffa0-4876-ac62-69b1913912aa",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "87b4efc2-2d0b-47e8-abc3-f3738afd475d": {
        "id": "87b4efc2-2d0b-47e8-abc3-f3738afd475d",
        "name": "",
        "path": [
          {
            "x": 1792,
            "y": 272
          },
          {
            "x": 1984,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "9109eba7-01ac-4574-aa2f-6178c7b9892d",
        "target": "aa2670b3-4cdc-4356-8dc4-98c7ac5bb7d2",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "8939bda7-e35b-45d9-9a59-5cf650957ac0": {
        "id": "8939bda7-e35b-45d9-9a59-5cf650957ac0",
        "name": "Пачка закончилась",
        "path": [
          {
            "x": 1368,
            "y": 88
          },
          {
            "x": 1344,
            "y": 88
          },
          {
            "x": 1344,
            "y": 160
          }
        ],
        "type": "plain",
        "source": "28d1d466-c84a-44c8-8e4d-0fd5a8dc3877",
        "target": "bf80d183-c742-4eba-a93d-eb3110e64bf0",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "is_pause"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "910fc72c-996a-4dc8-a6fb-ed2089f6aeb9": {
        "id": "910fc72c-996a-4dc8-a6fb-ed2089f6aeb9",
        "name": "",
        "path": [
          {
            "x": 1344,
            "y": 192
          },
          {
            "x": 1344,
            "y": 228
          },
          {
            "x": 1364,
            "y": 228
          },
          {
            "x": 1364,
            "y": 240
          }
        ],
        "type": "plain",
        "source": "bf80d183-c742-4eba-a93d-eb3110e64bf0",
        "target": "eb9e1985-9981-4b9b-be70-653b70449fed",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "92a23b01-0bf9-45ee-82f9-bce97af1c787": {
        "id": "92a23b01-0bf9-45ee-82f9-bce97af1c787",
        "name": "",
        "path": [
          {
            "x": 376,
            "y": 272
          },
          {
            "x": 392,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "b9b4a01e-d7e1-4cce-af93-6ef5db60170e",
        "target": "aaeca9eb-82ab-47a9-85e9-1b8943b70770",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "9439d27c-a86d-4aaf-8013-84c076daf186": {
        "id": "9439d27c-a86d-4aaf-8013-84c076daf186",
        "name": "",
        "path": [
          {
            "x": 952,
            "y": 272
          },
          {
            "x": 1032,
            "y": 272
          }
        ],
        "type": "default",
        "source": "fcdb168f-c39f-46e7-baa8-6ea750c2d98d",
        "target": "602340b3-a617-476c-a4ee-0d0964358a0b",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "950cd04e-14b5-47c6-95fa-f431e13c1c77": {
        "id": "950cd04e-14b5-47c6-95fa-f431e13c1c77",
        "name": "",
        "path": [
          {
            "x": 2784,
            "y": 272
          },
          {
            "x": 2848,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "49882283-9ffa-4939-9fa5-9d39ae80c380",
        "target": "1dd890bb-ccb9-4cb1-a4f6-fde450a161b0",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "loop_end"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "97a60f53-ce4b-4f65-b784-2c51ce41088b": {
        "id": "97a60f53-ce4b-4f65-b784-2c51ce41088b",
        "name": "",
        "path": [
          {
            "x": 584,
            "y": 272
          },
          {
            "x": 616,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "1c0dc177-ffa0-4876-ac62-69b1913912aa",
        "target": "1880ac08-86ad-45ca-af82-c451c3f098b9",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "998fa4dc-ab8f-40bd-820b-dba680ce8e26": {
        "id": "998fa4dc-ab8f-40bd-820b-dba680ce8e26",
        "name": "",
        "path": [
          {
            "x": 544,
            "y": 304
          },
          {
            "x": 544,
            "y": 416
          },
          {
            "x": 932,
            "y": 416
          },
          {
            "x": 932,
            "y": 424
          }
        ],
        "type": "error",
        "source": "1c0dc177-ffa0-4876-ac62-69b1913912aa",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "99f04cd5-432d-4b54-a867-0e35b281b247": {
        "id": "99f04cd5-432d-4b54-a867-0e35b281b247",
        "name": "Уходим на ожидание",
        "path": [
          {
            "x": 528,
            "y": 136
          },
          {
            "x": 488,
            "y": 136
          },
          {
            "x": 488,
            "y": 176
          }
        ],
        "type": "plain",
        "source": "0518a43d-c361-4836-99f2-81774dee46a2",
        "target": "ce94c8f5-b178-4d63-91b9-e1f4cc0446f8",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "is_pause"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "a860a935-8649-4987-8cf9-50cf848991e2": {
        "id": "a860a935-8649-4987-8cf9-50cf848991e2",
        "name": "",
        "path": [
          {
            "x": 840,
            "y": 152
          },
          {
            "x": 840,
            "y": 240
          }
        ],
        "type": "default",
        "source": "8f34bcee-df4d-48a3-b1c7-3684fb5942de",
        "target": "9b00d5be-f1b1-462c-9b58-bb7bc70d2053",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "aa075446-f4e3-4763-b0f2-a283b722c888": {
        "id": "aa075446-f4e3-4763-b0f2-a283b722c888",
        "name": "",
        "path": [
          {
            "x": 152,
            "y": 272
          },
          {
            "x": 184,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "6da117d0-65f3-4f33-b748-a5e59d80b8cd",
        "target": "026941c3-04c5-4e78-9a53-562c18715ac9",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "aaf8d605-d654-4c0e-ac91-0d3c16a8f7a9": {
        "id": "aaf8d605-d654-4c0e-ac91-0d3c16a8f7a9",
        "name": "",
        "path": [
          {
            "x": 2464,
            "y": 272
          },
          {
            "x": 2496,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "5c894f43-1cca-47a2-b967-e379ce188af9",
        "target": "c37ccbe7-c428-43c7-b8b7-bb7aece4da25",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "all_staff_processed"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ac13446e-ad63-4189-817d-8efe6d445ba4": {
        "id": "ac13446e-ad63-4189-817d-8efe6d445ba4",
        "name": "",
        "path": [
          {
            "x": 2768,
            "y": 160
          },
          {
            "x": 2768,
            "y": 120
          }
        ],
        "type": "default",
        "source": "a325891f-5166-4f25-a2a3-8ee73f99d2d6",
        "target": "6370fa00-afe3-4ee4-91e3-848314858234",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ac1d6446-c641-4a9d-b0af-2c0c44e2cfae": {
        "id": "ac1d6446-c641-4a9d-b0af-2c0c44e2cfae",
        "name": "",
        "path": [
          {
            "x": 2688,
            "y": 272
          },
          {
            "x": 2752,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "fa239454-aa36-4fbb-afae-953f8a6c7640",
        "target": "49882283-9ffa-4939-9fa5-9d39ae80c380",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "af7fd86e-5c05-41c5-954c-77ec521e3f3b": {
        "id": "af7fd86e-5c05-41c5-954c-77ec521e3f3b",
        "name": "",
        "path": [
          {
            "x": 3040,
            "y": 272
          },
          {
            "x": 3072,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "2051cded-a63a-4283-80c7-c64ede7d0fca",
        "target": "85f001c1-c2d0-4fc8-8d52-d127c2301af3",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "b0ca900d-43dc-49e0-8437-9178df9a5ea3": {
        "id": "b0ca900d-43dc-49e0-8437-9178df9a5ea3",
        "name": "",
        "path": [
          {
            "x": 2144,
            "y": 304
          },
          {
            "x": 2144,
            "y": 456
          },
          {
            "x": 992,
            "y": 456
          }
        ],
        "type": "error",
        "source": "930ff5ee-e9c8-4170-b933-05e4d4b5be1c",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "b692b2d4-02e4-419e-9297-53b1f7038a07": {
        "id": "b692b2d4-02e4-419e-9297-53b1f7038a07",
        "name": "Уходим на ожидание",
        "path": [
          {
            "x": 824,
            "y": 136
          },
          {
            "x": 784,
            "y": 136
          },
          {
            "x": 784,
            "y": 176
          }
        ],
        "type": "plain",
        "source": "8f34bcee-df4d-48a3-b1c7-3684fb5942de",
        "target": "30fa9bb8-56da-4477-8df0-43bc2ffb3466",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "is_pause"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "bdd8c60c-fecb-46a6-8674-305a81c77a2d": {
        "id": "bdd8c60c-fecb-46a6-8674-305a81c77a2d",
        "name": "",
        "path": [
          {
            "x": 2408,
            "y": 272
          },
          {
            "x": 2432,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "ae6d437c-b253-45ee-bfed-2d2099a65517",
        "target": "5c894f43-1cca-47a2-b967-e379ce188af9",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "bf8912ba-1c73-48f1-a371-700ff8a37c48": {
        "id": "bf8912ba-1c73-48f1-a371-700ff8a37c48",
        "name": "",
        "path": [
          {
            "x": 1072,
            "y": 304
          },
          {
            "x": 1072,
            "y": 416
          },
          {
            "x": 972,
            "y": 416
          },
          {
            "x": 972,
            "y": 424
          }
        ],
        "type": "error",
        "source": "602340b3-a617-476c-a4ee-0d0964358a0b",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "bfaee8fa-61a8-4725-8ec9-8b3411725a8b": {
        "id": "bfaee8fa-61a8-4725-8ec9-8b3411725a8b",
        "name": "",
        "path": [
          {
            "x": 1704,
            "y": 192
          },
          {
            "x": 1704,
            "y": 232
          },
          {
            "x": 1732,
            "y": 232
          },
          {
            "x": 1732,
            "y": 240
          }
        ],
        "type": "plain",
        "source": "08d2b58e-7d0d-4125-9459-df636d978263",
        "target": "9109eba7-01ac-4574-aa2f-6178c7b9892d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c72c87b8-4d19-499b-9a9d-da049b63dc1e": {
        "id": "c72c87b8-4d19-499b-9a9d-da049b63dc1e",
        "name": "",
        "path": [
          {
            "x": 768,
            "y": 272
          },
          {
            "x": 800,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "6a6b9526-2ccb-4b28-90d5-b073d2c3aa76",
        "target": "9b00d5be-f1b1-462c-9b58-bb7bc70d2053",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "cc05b1aa-aeff-4d62-bde0-0ee1d523b3d9": {
        "id": "cc05b1aa-aeff-4d62-bde0-0ee1d523b3d9",
        "name": "",
        "path": [
          {
            "x": 264,
            "y": 272
          },
          {
            "x": 296,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "026941c3-04c5-4e78-9a53-562c18715ac9",
        "target": "b9b4a01e-d7e1-4cce-af93-6ef5db60170e",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "d0ba29d0-7073-419f-ac1b-9465f5f3b2c3": {
        "id": "d0ba29d0-7073-419f-ac1b-9465f5f3b2c3",
        "name": "",
        "path": [
          {
            "x": 2448,
            "y": 288
          },
          {
            "x": 2448,
            "y": 312
          },
          {
            "x": 2368,
            "y": 312
          },
          {
            "x": 2368,
            "y": 304
          }
        ],
        "type": "default",
        "source": "5c894f43-1cca-47a2-b967-e379ce188af9",
        "target": "ae6d437c-b253-45ee-bfed-2d2099a65517",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "dc018b97-1376-4abc-be34-7ff04d508d80": {
        "id": "dc018b97-1376-4abc-be34-7ff04d508d80",
        "name": "",
        "path": [
          {
            "x": 56,
            "y": 272
          },
          {
            "x": 72,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "6da117d0-65f3-4f33-b748-a5e59d80b8cd",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ded3b5a9-bef8-4704-8b27-887ae909465a": {
        "id": "ded3b5a9-bef8-4704-8b27-887ae909465a",
        "name": "Продолжаем цикл",
        "path": [
          {
            "x": 632,
            "y": 256
          },
          {
            "x": 632,
            "y": 136
          },
          {
            "x": 560,
            "y": 136
          }
        ],
        "type": "plain",
        "source": "1880ac08-86ad-45ca-af82-c451c3f098b9",
        "target": "0518a43d-c361-4836-99f2-81774dee46a2",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "loop_end"
              },
              "b": {
                "kind": "manual",
                "value": false
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e07c9f52-2f07-49ec-887c-5abac121316c": {
        "id": "e07c9f52-2f07-49ec-887c-5abac121316c",
        "name": "",
        "path": [
          {
            "x": 1384,
            "y": 304
          },
          {
            "x": 1384,
            "y": 440
          },
          {
            "x": 992,
            "y": 440
          }
        ],
        "type": "error",
        "source": "eb9e1985-9981-4b9b-be70-653b70449fed",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e1c758aa-61d5-4d8f-9797-92702cad3ed2": {
        "id": "e1c758aa-61d5-4d8f-9797-92702cad3ed2",
        "name": "Сотрудник заполнен",
        "path": [
          {
            "x": 1520,
            "y": 184
          },
          {
            "x": 1520,
            "y": 120
          }
        ],
        "type": "plain",
        "source": "54b37a8a-bfe5-49ae-a438-f8a36940d84c",
        "target": "e6f59d09-f162-4601-a95e-d3696b838b4d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "current_employee"
              },
              "type": "SYS_COLLECTION",
              "inversion": false,
              "operation": {
                "relation": "empty",
                "inversion": true,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e22f49f5-be2a-4213-b186-8e7d4a52f1d4": {
        "id": "e22f49f5-be2a-4213-b186-8e7d4a52f1d4",
        "name": "",
        "path": [
          {
            "x": 2264,
            "y": 240
          },
          {
            "x": 2264,
            "y": 200
          },
          {
            "x": 2352,
            "y": 200
          }
        ],
        "type": "plain",
        "source": "3d5b28f3-21a3-4709-91ce-74290330acfc",
        "target": "26d3c404-1ff6-4377-af6f-4480d56e318d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e341000e-d349-4312-8ae4-8c96fc6f6e6e": {
        "id": "e341000e-d349-4312-8ae4-8c96fc6f6e6e",
        "name": "",
        "path": [
          {
            "x": 784,
            "y": 208
          },
          {
            "x": 784,
            "y": 256
          },
          {
            "x": 800,
            "y": 256
          }
        ],
        "type": "plain",
        "source": "30fa9bb8-56da-4477-8df0-43bc2ffb3466",
        "target": "9b00d5be-f1b1-462c-9b58-bb7bc70d2053",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e387b2e2-32bb-4a08-bc67-d7b1d11a2eac": {
        "id": "e387b2e2-32bb-4a08-bc67-d7b1d11a2eac",
        "name": "",
        "path": [
          {
            "x": 1752,
            "y": 96
          },
          {
            "x": 1752,
            "y": 240
          }
        ],
        "type": "default",
        "source": "a4c92a0b-b933-40ce-aaee-f8fc1b35d735",
        "target": "9109eba7-01ac-4574-aa2f-6178c7b9892d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e5084417-0b1c-44b8-8690-4b0bdd7ab481": {
        "id": "e5084417-0b1c-44b8-8690-4b0bdd7ab481",
        "name": "",
        "path": [
          {
            "x": 880,
            "y": 272
          },
          {
            "x": 920,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "9b00d5be-f1b1-462c-9b58-bb7bc70d2053",
        "target": "fcdb168f-c39f-46e7-baa8-6ea750c2d98d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e650f999-0e1c-451b-84e3-4d6c727b50e6": {
        "id": "e650f999-0e1c-451b-84e3-4d6c727b50e6",
        "name": "",
        "path": [
          {
            "x": 2928,
            "y": 272
          },
          {
            "x": 2960,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "1dd890bb-ccb9-4cb1-a4f6-fde450a161b0",
        "target": "2051cded-a63a-4283-80c7-c64ede7d0fca",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e81505ea-11b8-42ec-8e9d-ee16d63a4011": {
        "id": "e81505ea-11b8-42ec-8e9d-ee16d63a4011",
        "name": "",
        "path": [
          {
            "x": 1752,
            "y": 304
          },
          {
            "x": 1752,
            "y": 440
          },
          {
            "x": 992,
            "y": 440
          }
        ],
        "type": "error",
        "source": "9109eba7-01ac-4574-aa2f-6178c7b9892d",
        "target": "26d25132-24ef-4be4-b069-1c3eb6545c2a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ff620bb3-dcd1-4ac5-bf13-1ba96642bb67": {
        "id": "ff620bb3-dcd1-4ac5-bf13-1ba96642bb67",
        "name": "",
        "path": [
          {
            "x": 1152,
            "y": 256
          },
          {
            "x": 1152,
            "y": 232
          },
          {
            "x": 1336,
            "y": 232
          },
          {
            "x": 1336,
            "y": 256
          },
          {
            "x": 1344,
            "y": 256
          }
        ],
        "type": "default",
        "source": "4117558e-6590-4eea-910d-d4cbebc1dfd4",
        "target": "eb9e1985-9981-4b9b-be70-653b70449fed",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\n//ТРЕБУЕТСЯ ЖЁСТКИЙ РЕФАКТОРИНГ!!!\n\ntype TStaff = ApplicationItem\u003cApplication$kedo$staff$Data, Application$kedo$staff$Params\u003e;\ntype TEmploymentTableRow = Table$kedo$staff$employment_table$Row;\ntype TSubdivision = ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e;\ntype TOrganization = ApplicationItem\u003cApplication$kedo$organization$Data, Application$kedo$organization$Params\u003e;\ntype TPosition = ApplicationItem\u003cApplication$kedo$position$Data, Application$kedo$position$Params\u003e;\ntype TEmploymentDirectory = TApplication\u003cApplication$kedo$employment_directory$Data, Application$kedo$employment_directory$Params, Application$kedo$employment_directory$Processes\u003e;\n\ninterface BasePerson {\n    id?: string;\n    code?: string;\n    individual_id: string;\n    name: TFullName;\n    firstname: string;\n    lastname: string;\n    middlename: string;\n    email?: TEmail\u003cEmailType.Work\u003e;\n    phoneNumber?: TPhone\u003cPhoneType.Work\u003e;\n    sex: boolean;\n    marriage: boolean;\n    birthDate?: TDate;\n    city: string;\n    street?: string;\n    home?: string;\n    apartment?: string;\n    housing?: string;\n    snils: string;\n    inn: string;\n    category?: any;\n}\n\ninterface DocumentData {\n    isRf: boolean;\n    passportSeries: string;\n    passportNumber: string;\n    passportDepCode: string;\n    passportIssueDate: TDate;\n    passportIssuer: string;\n}\n\ninterface EmployeeInfo {\n    id: string;\n    code: string;\n    individual_id: string;\n    name: TFullName;\n    firstname: string;\n    lastname: string;\n    middlename: string;\n    email?: TEmail\u003cEmailType.Work\u003e;\n    phoneNumber?: TPhone\u003cPhoneType.Work\u003e;\n    sex: boolean;\n    marriage: boolean;\n    birthDate: TDate;\n    city: string;\n    street?: string;\n    home?: string;\n    apartment?: string;\n    housing?: string;\n    passportSeries: string;\n    passportNumber: string;\n    passportDepCode: string;\n    passportIssueDate: TDate;\n    passportIssuer: string;\n    snils: string;\n    inn: string;\n    category?: any;\n    entity?: any;\n    position?: any;\n    organization?: any;\n    subdivision?: any;\n}\n\ninterface FiringData {\n    ref: string;\n    ind_ref: string;\n    date: string;\n}\n\ntype staffData = {\n    staffId: string,\n    orgRightsIds: string | string[],\n    isArray: boolean\n};\n\ninterface TransferData {\n    employeeIndividualId: string; //айди физлица\n    typeWorkRelation: string; //тип трудоустройства\n    subdivisionId: string; //айди подразделения\n    orgId: string; //айди организации\n    id_1c: string; //айди сотрудника\n    typeFromData: boolean; //данные о типе трудоустройства\n    transferDate: string; //дата перевода\n    rate: number; //ставка\n    posId: string; //айди позиции ШР\n    existingPositions: boolean; //существуют устанавливаемые позиции \n}\n\ninterface ITransferSendData {\n    employee: TStaff,\n    transferDate: TDate,\n    subdivisionApp: TSubdivision,\n    orgApp: TOrganization,\n    posId: string,\n    typeWorkRelation: any,\n    employeeId: string,\n    typeFromData: boolean,\n    rate: number,\n    existingPositions: boolean,\n}\n\n//интерфейс для срочных ТД и временных КП\ninterface IFixedTermData {\n    employeeIndividualId: string, //айди физлица\n    employeeId: string, //айди сотрудника\n    endDate: string, //дата окончания перевода\n    prevPositionId: string, //айди предыдущей позиции\n    prevPositionDate: string, //дата приёма на предыдушую позицию\n    isMainWorktype: boolean, //является ли место работы основным\n}\n\n//интерфейс для складирования данных по переводам, чтобы потом их отправить в процесс \"Обновление позиции ШР\"\ninterface IUpdatedTransferData {\n    employeeIndividualId: string,\n    employeeId: string,\n    newPositionId: string,\n    employmentDirectoryId: string | undefined,\n    isTemporaryTransfer: boolean,\n    endTransferDate?: string,\n}\n\nconst chunkSize = 100;\nconst loopSize = 50;\nconst littleChunkSize = 20;\nconst posChunkSize = 1;\nconst posloopSize = 10;\n\n//задача 1217\nasync function updateFiring(): Promise\u003cvoid\u003e {\n\n    if (!Context.data.firing_data) {\n        Context.data.loop_end = true;\n        Context.data.debug += ` loop end `;\n        return;\n    };\n\n    const data = JSON.parse(Context.data.firing_data);\n    const iter_count = data.length - 1;\n\n    if (Context.data.iterator! \u003e= iter_count) {\n        Context.data.loop_end = true;\n        Context.data.firing_date = undefined;\n        Context.data.iterator = -1;\n        Context.data.debug += ` loop end `;\n        return;\n    }\n\n    Context.data.iterator!++;\n\n    if (Context.data.iterator! % loopSize === 0 \u0026\u0026 Context.data.iterator! !== 0) {\n        Context.data.is_pause = true;\n    } else {\n        Context.data.is_pause = false;\n    }\n\n    Context.data.parttime = false;\n\n    const employeeIds = data.map((item: FiringData) =\u003e item.ind_ref)\n    const employees = await Namespace.app.staff.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        //f.individual_id_1c.in(employeeIds)\n    )).size(10000).all()\n\n    Context.data.firing_position_ref = data[Context.data.iterator!].ref;\n\n    const currentEmployee = employees.find(employee =\u003e employee.data.id_1c === data[Context.data.iterator!].ref)\n    if (!currentEmployee) {\n\n        //задача 1217\n        //const currentEmployee_fl = employees.find(employee =\u003e employee.data.individual_id_1c === data[Context.data.iterator!].ind_ref);\n        let currentEmployee_fl = employees.find(employee =\u003e {\n            const ids = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n            if (ids.indexOf(data[Context.data.iterator!].ind_ref) !== -1 || employee.data.individual_id_1c === data[Context.data.iterator!].ind_ref) {\n                return true;\n            }\n        });\n\n        if (currentEmployee_fl) {\n            Context.data.firing_position_ref = data[Context.data.iterator!].ref;\n            Context.data.parttime = true;\n            Context.data.current_employee = currentEmployee_fl;\n        } else {\n            return;\n        }\n\n    } else {\n        Context.data.current_employee = currentEmployee;\n    };\n\n    try {\n        const date = new Datetime(data[Context.data.iterator!].date);\n        Context.data.debug += ` ${data[Context.data.iterator!].date} `;\n        Context.data.debug += ` ${new TDate(date.year, date.month, date.day)} `\n        Context.data.firing_date = new TDate(date.year, date.month, date.day);\n    } catch (e) {\n        Context.data.debug += \"Couldn't parse a date\";\n        Context.data.firing_date = undefined;\n        return;\n    }\n}\n\nasync function loadAcceptDate(): Promise\u003cvoid\u003e {\n\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.table_name.like(\"InformationRegister_КадроваяИсторияСотрудников\"),\n            f.__deletedAt.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .size(10000)\n        .all();\n\n    if (tables.length === 0) return;\n    const sortedApps = tables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    });\n\n    const statusEmployeeInfo = parseData(sortedApps, \"InformationRegister_КадроваяИсторияСотрудников\")\n    // @ts-ignore\n    const mappedData = statusEmployeeInfo.filter((item: any) =\u003e !!item.data[\"Record\"]).map((item: any) =\u003e item.data[\"Record\"]).flat().filter((item: any) =\u003e item[\"Active\"]);\n    //const acceptData = mappedData.filter((item: any) =\u003e item[\"ВидСобытия\"] === \"НачальныеДанные\" || item[\"ВидСобытия\"] === \"Прием\" || item[\"ВидСобытия\"] === \"Перемещение\");\n    const acceptData = mappedData.filter((item: any) =\u003e item[\"ВидСобытия\"] === \"НачальныеДанные\" || item[\"ВидСобытия\"] === \"Прием\");\n\n    //выборка данных по увольнениям\n    const firingData = mappedData.filter((item: any) =\u003e item[\"ВидСобытия\"] === \"Увольнение\")\n\n    const parsedFiringData: FiringData[] = []\n\n    for (let item of firingData) {\n        const ref = item[\"Сотрудник\"]\n        const ind_ref = item['ФизическоеЛицо']\n        const date = item[\"Period\"]\n        parsedFiringData.push({\n            ref: ref,\n            ind_ref: ind_ref,\n            date: date\n        })\n    }\n\n    const stringFiringData = JSON.stringify(parsedFiringData)\n    Context.data.firing_data = stringFiringData\n\n    const employees = await Context.fields.staff.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()\n    let promises: Promise\u003cvoid\u003e[] = []\n\n    for (let item of acceptData) {\n\n        //const foundEmployee = employees.find(f =\u003e f.data.individual_id_1c === item[\"ФизическоеЛицо\"])\n        let foundEmployee = employees.find(employee =\u003e {\n            const ids = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n            if (ids.indexOf(item[\"ФизическоеЛицо\"]) !== -1 || employee.data.individual_id_1c === item[\"ФизическоеЛицо\"]) {\n                return true;\n            }\n        });\n\n        if (!foundEmployee || !item[\"Period\"]) continue;\n\n        const startDatetime = new Datetime(item[\"Period\"])\n        const startDate = new TDate(startDatetime.year, startDatetime.month, startDatetime.day)\n        if (!foundEmployee.data.employment_table) continue;\n\n        for (let i = 0; i \u003c foundEmployee.data.employment_table.length; i++) {\n            const currentRow = foundEmployee.data.employment_table[i]\n            if (currentRow.id_1c === item[\"Сотрудник\"]) {\n                //проверка на актуальность данных\n                if (currentRow.admission_date_position \u0026\u0026 currentRow.admission_date_position.after(startDate)) {\n                    Context.data.error_stack += ` ${foundEmployee.data.__name} outdated information`;\n                    continue;\n                }\n\n                currentRow.admission_date_position = startDate;\n            }\n        }\n\n        if (item[\"Сотрудник\"] === foundEmployee.data.id_1c \u0026\u0026 (!foundEmployee.data.work_start || (foundEmployee.data.work_start \u0026\u0026 foundEmployee.data.work_start.after(startDate)))) {\n            foundEmployee.data.work_start = startDate;\n        }\n\n        promises.push(foundEmployee.save())\n    }\n\n    try {\n        await Promise.all(promises)\n    } catch (e) {\n        Context.data.error_stack += \" Couldn't save work start dates \";\n    }\n\n    promises = []\n\n    //поддержка старого алгоритма расчёта даты приёма в организацию\n    for (let i = 0; i \u003c employees.length; i++) {\n        const currentEmployee = employees[i]\n        if (!currentEmployee.data.employment_table || currentEmployee.data.employment_table.length === 0) {\n            continue;\n        }\n        // find the oldest date\n        if (!currentEmployee.data.work_start) continue\n        let oldestDate = currentEmployee.data.work_start\n\n        for (let i = 0; i \u003c currentEmployee.data.employment_table.length; i++) {\n            const row = currentEmployee.data.employment_table[i]\n\n            if (row.admission_date_position \u0026\u0026 row.admission_date_position.before(oldestDate)) {\n                oldestDate = row.admission_date_position\n            }\n        }\n\n        for (let i = 0; i \u003c currentEmployee.data.employment_table.length; i++) {\n            const row = currentEmployee.data.employment_table[i]\n            row.admission_date_organization = oldestDate\n        }\n\n        promises.push(currentEmployee.save())\n        if (promises.length \u003e littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n    //конец, позже удалить\n\n    //загрузка персональной информации о дате приёма на работу, номеру тд. и тд\n    const staffTables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.table_name.eq(\"Catalog_Сотрудники\"),\n            f.table_name.eq(\"Catalog_ФизическиеЛица\"),\n        ))\n        .size(10000)\n        .all()\n    if (staffTables.length === 0) {\n        Context.data.debug += ` не нашли данных о персональной информации `\n        return;\n    }\n    const staffSortedApps = staffTables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    })\n    const externalEmployees = parseData(staffSortedApps, \"Catalog_Сотрудники\");\n\n    Context.data.debug += ` external_employees.length ${externalEmployees.length} `\n\n    for (let employeeData of externalEmployees) {\n        let currentEmployee = employees.find((item: any) =\u003e item.data.individual_id_1c === employeeData.data[\"ФизическоеЛицо\"]);\n        if (currentEmployee) {\n            Context.data.debug += ` нашли сотрудника `\n            Context.data.debug += ` ${JSON.stringify(employeeData.data[\"ТекущиеКадровыеДанныеСотрудника\"])} `\n            if (employeeData.data[\"ТекущиеКадровыеДанныеСотрудника\"] \u0026\u0026 employeeData.data[\"ТекущиеКадровыеДанныеСотрудника\"].length \u003e 0) {\n                Context.data.debug += ` нашли данные по дате приёма `\n                let workStartDatetime = new Datetime(employeeData.data[\"ТекущиеКадровыеДанныеСотрудника\"][0][\"ДатаПриема\"]);\n                let workStartDate = new TDate(workStartDatetime.year, workStartDatetime.month, workStartDatetime.day);\n\n                if (employeeData.data[\"Ref\"] === currentEmployee.data.id_1c) {\n                    currentEmployee.data.work_start = workStartDate;\n\n                    if (currentEmployee.data.employment_table) {\n                        for (let row of currentEmployee.data.employment_table) {\n                            row.admission_date_organization = workStartDate;\n                        }\n                    }\n                } else {\n                    if (currentEmployee.data.employment_table) {\n                        for (let row of currentEmployee.data.employment_table) {\n                            if (row.id_1c === employeeData.data[\"Ref\"]) {\n                                row.admission_date_organization = workStartDate;\n                            }\n                        }\n                    }\n                }\n\n                if (currentEmployee.data.employment_table) {\n                    for (let row of currentEmployee.data.employment_table) {\n                        if (row.id_1c === employeeData.data[\"Ref\"]) {\n                            row.number_employment_contract = employeeData.data[\"ТекущиеКадровыеДанныеСотрудника\"][0][\"ТрудовойДоговорНомер\"];\n\n                            try {\n                                const emp_datetime = new Datetime(employeeData.data[\"ТекущиеКадровыеДанныеСотрудника\"][0][\"ТрудовойДоговорДата\"].split(\"T\")[0]);\n                                row.date_employment_contract_as_date = new TDate(emp_datetime.year, emp_datetime.month, emp_datetime.day);\n                            } catch (e) {\n                                Context.data.error_stack += ` Ошибка преобразования даты ТД `;\n                            }\n                        }\n                    }\n                }\n            }\n\n            promises.push(currentEmployee.save())\n            if (promises.length \u003e littleChunkSize) {\n                await Promise.all(promises)\n                promises = []\n            }\n        }\n    }\n\n    for (let app of staffTables) {\n        app.data.is_processed = true\n        promises.push(app.save())\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n    promises = []\n\n    for (let app of tables) {\n        app.data.is_processed = true\n        promises.push(app.save())\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function getWorkSchedules(): Promise\u003cvoid\u003e {\n\n    //Context.data.debug += ' in getWorkSchedules '\n\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.table_name.eq(\"InformationRegister_ГрафикРаботыСотрудников\"),\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all()\n    const workSchedules = await Namespace.app.work_schedules.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all()\n    const employees = await Context.fields.staff.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all()\n\n    if (tables.length === 0 || workSchedules.length === 0) return;\n    const sortedApps = tables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return bDate - aDate\n    })\n\n    const currentTable = sortedApps[0]\n    const currentTableParsedData = JSON.parse(currentTable.data.table_data!)\n    const data = currentTableParsedData.filter((item: any) =\u003e !!item.data[\"Record\"]).map((item: any) =\u003e item.data[\"Record\"][0])\n\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let i = 0; i \u003c employees.length; i++) {\n        const currentEmployee = employees[i]\n\n        for (let row of currentEmployee.data.employment_table!) {\n            const employeeRef = row.id_1c\n\n            //Context.data.debug += employeeRef!;\n\n            if (!employeeRef) continue\n\n            const foundSchedule = data.find((item: any) =\u003e item[\"Сотрудник\"] === employeeRef)\n\n            if (!foundSchedule) continue\n\n            const foundScheduleId = foundSchedule[\"ГрафикРаботы\"]\n            const employeesSchedule = workSchedules.find((item: any) =\u003e item.data.id_1c === foundScheduleId)\n\n            if (!!foundSchedule) {\n                //Context.data.debug += ' employeeRef ' + employeeRef;\n                //Context.data.debug += ' employeesSchedule ' + employeesSchedule;\n            }\n\n            if (!employeesSchedule) continue\n\n            if (row.id_1c === currentEmployee.data.id_1c) {\n                currentEmployee.data.work_schedules = employeesSchedule\n            }\n            row.work_schedules = employeesSchedule;\n\n            promises.push(currentEmployee.save())\n            if (promises.length \u003e littleChunkSize) {\n                await Promise.all(promises)\n                promises = []\n            }\n        }\n    }\n\n    await Promise.all(promises)\n}\n\nasync function createPersons(): Promise\u003cvoid\u003e {\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.table_name.eq(\"Catalog_Сотрудники\"),\n            f.table_name.eq(\"Catalog_ФизическиеЛица\"),\n        ))\n        .size(10000)\n        .all()\n    if (tables.length === 0) {\n        return;\n    }\n    const sorted_apps = tables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    })\n\n    const tablesPersDocs = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.table_name.eq(\"InformationRegister_КадроваяИсторияСотрудников\"),\n        ))\n        .size(10000)\n        .all()\n\n    let persDocs: any = undefined;\n\n    if (tablesPersDocs \u0026\u0026 tablesPersDocs.length \u003e 0) {\n\n        const sortedAppPersDoc = tablesPersDocs.sort((a, b) =\u003e {\n            const aDate: any = a.data.__createdAt.asDate()\n            const bDate: any = b.data.__createdAt.asDate()\n            return aDate - bDate\n        })\n        persDocs = parseData(sortedAppPersDoc, \"InformationRegister_КадроваяИсторияСотрудников\");\n    }\n\n    const externalEmployees = parseData(sorted_apps, \"Catalog_Сотрудники\")\n    const externalPersonalData = parseData(sorted_apps, \"Catalog_ФизическиеЛица\")\n    if (externalPersonalData.length === 0) return\n\n    // Доработка для настройки прав доступа.\n    Context.data.created_staffs = [];\n    await createBaseEmployees(externalEmployees, externalPersonalData, persDocs)\n\n    // let promises: Promise\u003cvoid\u003e[] = []\n    // for (let app of tables) {\n    //     app.data.is_processed = true\n    //     promises.push(app.save())\n    //     if (promises.length \u003e= 20) {\n    //         await Promise.all(promises)\n    //         promises = []\n    //     }\n    // }\n\n    // await Promise.all(promises)\n}\n\nconst parseData = (data: any[], tableName: string): any[] =\u003e {\n    const result: any[] = []\n    data.forEach(item =\u003e {\n        if (item.data.table_name === tableName \u0026\u0026 !!item.data.table_data) {\n            result.push(...JSON.parse(item.data.table_data!))\n        }\n    })\n    return result\n}\n\nasync function addPassportData(): Promise\u003cvoid\u003e {\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.table_name.eq(\"InformationRegister_ДокументыФизическихЛиц\")\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .size(10000)\n        .all()\n\n    if (tables.length === 0) {\n        return;\n    }\n    const sortedApps = tables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    })\n\n    const baseArray: any[] = []\n    const externalDocData = baseArray.concat(...(sortedApps.filter(item =\u003e item.data.table_name === \"InformationRegister_ДокументыФизическихЛиц\" \u0026\u0026 !!item.data.table_data).map(item =\u003e JSON.parse(item.data.table_data!))))\n\n    await addDocumentData(externalDocData)\n\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let app of tables) {\n        app.data.is_processed = true\n        promises.push(app.save())\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n}\n\nasync function addResponsibleEmployees(): Promise\u003cvoid\u003e {\n\n    //получаем данные, которые нам пришли из 1С. Нас интересуют данные по занятости, типу трудоустройства и по сведениям об ответственных лицах\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.table_name.eq(\"InformationRegister_СведенияОбОтветственныхЛицах\"),\n        ))\n        .size(10000)\n        .all()\n\n    //если данных нет, то выходим\n    if (tables.length === 0) {\n        return;\n    }\n\n    //сортируем данные по дате (чтобы обрабатывать их в правильном порядке)\n    const sortedApps = tables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    })\n\n    //данные о руководителях организации, бухгалтерах и т.д.\n    const headData = parseData(sortedApps, \"InformationRegister_СведенияОбОтветственныхЛицах\")\n\n    //запускаем основной метод\n    await fillResponsibleEmployees(headData)\n\n    //обновляем поле Обработано у пакетов данных, которые обработали\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let app of tables) {\n        app.data.is_processed = true\n        promises.push(app.save())\n\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n\n}\n\nasync function fillResponsibleEmployees(headData: any): Promise\u003cvoid\u003e {\n\n    const parsedHeadData = headData.map((data: any) =\u003e {\n        return data.data[\"Record\"][0]\n    });\n\n    const allEmployees = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n    )).size(10000).all();\n\n    //загрузка ответственных лиц организации\n    if (parsedHeadData.length !== 0) {\n        loadHeadData(parsedHeadData, allEmployees);\n    };\n\n}\n\nasync function addWorkTypes(): Promise\u003cvoid\u003e {\n\n    Context.data.loop_end = false;\n\n    Context.data.iterator!++;\n\n    if (Context.data.iterator! % posloopSize === 0 \u0026\u0026 Context.data.iterator! !== 0) {\n        Context.data.is_pause = true;\n    } else {\n        Context.data.is_pause = false;\n    }\n\n    //получаем данные, которые нам пришли из 1С. Нас интересуют данные по занятости, типу трудоустройства и по сведениям об ответственных лицах\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.table_name.eq(\"InformationRegister_ВидыЗанятостиСотрудников\"),\n        ))\n        .size(posChunkSize)\n        .all();\n\n    //если данных нет, то выходим\n    if (tables.length === 0) {\n        Context.data.loop_end = true;\n        return;\n    }\n\n    //сортируем данные по дате (чтобы обрабатывать их в правильном порядке)\n    const sortedApps = tables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    });\n\n    //данные о типах трудоустройства\n    const typeData = parseData(sortedApps, \"InformationRegister_ВидыЗанятостиСотрудников\");\n\n    //запускаем основной метод\n    await addTypeData(typeData);\n\n    //обновляем поле Обработано у пакетов данных, которые обработали\n    let promises: Promise\u003cvoid\u003e[] = [];\n    for (let app of tables) {\n        app.data.is_processed = true;\n        promises.push(app.save());\n\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises);\n            promises = [];\n        }\n    }\n\n    await Promise.all(promises);\n\n}\n\nasync function addTypeData(types: any): Promise\u003cvoid\u003e {\n\n    let promises: Promise\u003cvoid\u003e[] = [];\n\n    //данные о типе трудоустройства. Исключаем данные по совмещениям (т.к. мы их не обрабатываем) и исключаем непроведённые документы из 1С (поле Active)\n    const filteredTypeData = types.filter((item: any) =\u003e {\n        return !!item.data[\"Record\"]\n    }).map((data: any) =\u003e {\n        return data.data[\"Record\"]\n    }).flat().filter((item: any) =\u003e {\n        return item[\"ВидЗанятости\"] !== \"Совмещена\" \u0026\u0026 item[\"Active\"]\n    });\n\n    //массив с айди физ лиц. Нужен для упрощённого поиска наличия сотрудников в кадровых данных\n    const personsIds = filteredTypeData.map((item: any) =\u003e {\n        return item[\"ФизическоеЛицо\"]\n    })\n\n    const allEmployees = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n    )).size(10000).all();\n\n    //выбираем только новых сотрудников\n    const allNeededEmployees = allEmployees.filter(employee =\u003e {\n        let found = false;\n        //@ts-ignore\n        const ids: string[] = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n        //@ts-ignore\n        if (personsIds \u0026\u0026 personsIds.indexOf(employee.data.individual_id_1c) !== -1) {\n            found = true;\n        }\n\n        if (!found \u0026\u0026 ids) {\n            for (let id of ids) {\n                //@ts-ignore\n                if (personsIds \u0026\u0026 personsIds.indexOf(id) !== -1) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n\n        return found;\n    });\n\n    //получаем категории занятости\n    const mainWorkCategory = Context.fields.staff.app.fields.employment_table.fields.type_employment.variants.main_workplace;\n    const innerWorkCategory = Context.fields.staff.app.fields.employment_table.fields.type_employment.variants.internal_combination;\n    const outerWorkCategory = Context.fields.staff.app.fields.employment_table.fields.type_employment.variants.external_combination;\n\n    for (let employee of allNeededEmployees) {\n\n        const ids: string[] = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n        let allEmployments = filteredTypeData.filter((item: any) =\u003e !!item[\"ФизическоеЛицо\"]).filter((item: any) =\u003e {\n            return item[\"ФизическоеЛицо\"] === employee.data.individual_id_1c || (!!ids \u0026\u0026 ids.indexOf(item[\"ФизическоеЛицо\"]) !== -1)\n        });\n\n        //итерируемся по всем приёмам\n        for (let i = 0; i \u003c allEmployments.length; i++) {\n\n            const currentEmployment = allEmployments[i];\n\n            if (employee.data.employment_table) {\n                //ищем строку трудоустройства\n                let row = employee.data.employment_table.find(item =\u003e item.id_1c === currentEmployment[\"Сотрудник\"]);\n\n                //если строки нет - создаём\n                if (!row) {\n                    let newRow = employee.data.employment_table.insert();\n                    newRow.id_1c = currentEmployment[\"Сотрудник\"];\n\n                    switch (currentEmployment[\"ВидЗанятости\"]) {\n                        case \"ОсновноеМестоРаботы\":\n                            newRow.type_employment = mainWorkCategory;\n                            break;\n                        case \"ВнутреннееСовместительство\":\n                            newRow.type_employment = innerWorkCategory;\n                            break;\n                        case \"Совместительство\":\n                            newRow.type_employment = outerWorkCategory;\n                            break;\n                    }\n\n                    //сохранение чанками\n                    promises.push(employee.save())\n                    if (promises.length \u003e= littleChunkSize) {\n                        await Promise.all(promises);\n                        promises = [];\n                    }\n\n                }\n            }\n        }\n    }\n\n    await Promise.all(promises);\n}\n\nasync function addPositionData(): Promise\u003cvoid\u003e {\n\n    Context.data.loop_end = false;\n\n    Context.data.iterator!++;\n\n    if (Context.data.iterator! % posloopSize === 0 \u0026\u0026 Context.data.iterator! !== 0) {\n        Context.data.is_pause = true;\n    } else {\n        Context.data.is_pause = false;\n    }\n\n    //получаем данные, которые нам пришли из 1С. Нас интересуют данные по занятости, типу трудоустройства и по сведениям об ответственных лицах\n    const tables = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .where((f, g) =\u003e g.or(\n            f.table_name.eq(\"InformationRegister_ЗанятостьПозицийШтатногоРасписания\"),\n        ))\n        .size(10000)\n        .all()\n\n    //если данных нет, то выходим\n    if (tables.length === 0) {\n        Context.data.loop_end = true;\n        return;\n    }\n\n    //сортируем данные по дате (чтобы обрабатывать их в правильном порядке)\n    const sortedApps = tables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    })\n\n    //данные о позициях\n    const positionsData = parseData(sortedApps, \"InformationRegister_ЗанятостьПозицийШтатногоРасписания\")\n\n    //запускаем основной метод\n    await addWorkData(positionsData);\n\n    //обновляем поле Обработано у пакетов данных, которые обработали\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let app of tables) {\n        app.data.is_processed = true\n        promises.push(app.save())\n\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n}\n\n//проверка на актуальные данные\nfunction isActualData(employee: TStaff,\n    employee_id: string,\n    position: TPosition,\n    transfer_date: TDate): boolean {\n\n    if (employee) {\n\n        if (employee.data.employment_table) {\n\n            const row = employee.data.employment_table.find((item: any) =\u003e item.id_1c \u0026\u0026 item.id_1c === employee_id);\n\n            if (row \u0026\u0026 row.admission_date_position) {\n\n                //let history_datetime = new Datetime(currentEmployment[\"Period\"]);\n                //let history_date = new TDate(history_datetime.year, history_datetime.month, history_datetime.day);\n\n                if (row.admission_date_position.after(transfer_date)) {\n\n                    Context.data.error_stack += ` ${employee.data.__name} ${position.data.__name} ${transfer_date.format()} в строчке ${row.admission_date_position.format()} - устаревшая информация `;\n                    Context.data.debug += ` ${employee.data.__name} ${position.data.__name} ${transfer_date.format()} в строчке ${row.admission_date_position.format()} устаревшая информация `;\n                    return false;\n                }\n            }\n        }\n\n    }\n    return true;\n}\n\n//заполняем данные о руководителях, бухгалтерах и т.д. в приложении Организации\nasync function loadHeadData(parsedHeadData: any[], allEmployees: TStaff[]): Promise\u003cvoid\u003e {\n\n    //массив промисов для обработки чанками\n    let promises: Promise\u003cvoid\u003e[] = [];\n\n    //все неудалённые организации\n    const orgs = await Namespace.app.organization.search()\n        .where(f =\u003e f.__deletedAt.eq(null))\n        .size(10000).all()\n\n    //цикл по полученным данным\n    for (let i = 0; i \u003c parsedHeadData.length; i++) {\n\n        //ищем среди существующих организаций ту, с которой сходится id из пришедших данных\n        const currentOrg = orgs.find(item =\u003e item.data.ref_key === parsedHeadData[i][\"Организация\"])\n        if (!currentOrg) continue;\n\n        //заполняем позицию руководителя\n        if (!currentOrg.data.position_head) {\n            const head = allEmployees.find(emp =\u003e emp.data.individual_id_1c === parsedHeadData[i][\"Руководитель\"])\n            if (head) {\n                currentOrg.data.position_head = head.data.position;\n            }\n        }\n\n        //заполняем подписантов\n        if (!currentOrg.data.signatories || currentOrg.data.signatories.length === 0) {\n            const head = allEmployees.find(emp =\u003e emp.data.individual_id_1c === parsedHeadData[i][\"Руководитель\"])\n            if (head) {\n                currentOrg.data.signatories = [head];\n            }\n        }\n\n        //заполнение директора\n        const head = allEmployees.find(emp =\u003e emp.data.individual_id_1c === parsedHeadData[i][\"Руководитель\"])\n        if (head) {\n            //заполнение директора в сист. справочнике Организации\n            if (currentOrg.data.entity \u0026\u0026 head.data.ext_user) {\n                const orgApp = await currentOrg.data.entity.fetch();\n                orgApp.data._director = head.data.ext_user;\n                await orgApp.save();\n            }\n\n        }\n\n        //заполняем эйчара\n        const hr = allEmployees.find(emp =\u003e emp.data.individual_id_1c === parsedHeadData[i][\"РуководительКадровойСлужбы\"])\n        if (hr) {\n            if (!currentOrg.data.position_hr) {\n                currentOrg.data.position_hr = hr.data.position\n            }\n            if (!currentOrg.data.hr_department || currentOrg.data.hr_department.length === 0) {\n                currentOrg.data.hr_department = [hr]\n            }\n        }\n\n        //заполняем бухгалтера\n        if (!currentOrg.data.accounting || currentOrg.data.accounting.length === 0) {\n            const accounting = allEmployees.find(emp =\u003e emp.data.individual_id_1c === parsedHeadData[i][\"ГлавныйБухгалтер\"]);\n\n            if (accounting) {\n                currentOrg.data.accounting = [accounting]\n            }\n        }\n\n        //заполняем ответственных за финансы\n        if (!currentOrg.data.matching_finance || currentOrg.data.matching_finance.length === 0) {\n            const finance = allEmployees.find(emp =\u003e emp.data.individual_id_1c === parsedHeadData[i][\"Кассир\"])\n            if (finance) {\n                currentOrg.data.matching_finance = [finance]\n            }\n        }\n\n        //сохранение чанками\n        promises.push(currentOrg.save())\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n    await Promise.all(promises);\n}\n\n//отложенная установка перевода\n//все данные помещаем в массив объектов и посылаем подпроцесс с таймером\nfunction addTransferData(transferSendData: ITransferSendData,\n    transfers: TransferData[]): boolean {\n    let dateNow = new TDate();\n\n    //отправляем данные только в том случае, если дата перевода позже текущей даты\n    if (transferSendData.transferDate.after(dateNow)) {\n\n        let transfer: TransferData = {\n            employeeIndividualId: transferSendData.employee.data.individual_id_1c!,\n            typeWorkRelation: !!transferSendData.typeWorkRelation ? transferSendData.typeWorkRelation.name : \"\",\n            subdivisionId: transferSendData.subdivisionApp.data.ref_key as string,\n            orgId: transferSendData.orgApp.data.ref_key as string,\n            id_1c: transferSendData.employeeId as string,\n            typeFromData: transferSendData.typeFromData,\n            transferDate: transferSendData.transferDate.format(),\n            rate: transferSendData.rate,\n            posId: transferSendData.posId,\n            existingPositions: transferSendData.existingPositions,\n        }\n        transfers.push(transfer);\n\n        //добавили все данные в массив, а пока дальнейшую обработку пропускаем \n        return true;\n    }\n    return false;\n}\n\n//метод для ситуации, если мы уволили сотрудника, а потом приняли снова. При таком подходе у нас будет несколько строк с типом устройства \"Основное место работы\". Неактуальную информацию (строку занятости) нужно удалить\nasync function deletePreviousPosition(employee: TStaff,\n    employmentRow: TEmploymentTableRow,\n    typeFromData: any,\n    employeeId: string): Promise\u003cvoid\u003e {\n\n    //проверка на основное место работы. Совместительства мы не трогаем, так как строчки по ним удаляются при увольнении\n    if (typeFromData \u0026\u0026 employee.data.employment_table \u0026\u0026 employmentRow.type_employment.name === 'Основное место работы') {\n        //проверяем, есть ли ещё строки с основным местом работы\n        let mainWorkTypes = employee.data.employment_table.filter((item: any) =\u003e item.type_employment.name === 'Основное место работы');\n        if (mainWorkTypes \u0026\u0026 mainWorkTypes.length \u003e 1) {\n            //если нашли несколько основных мест, удаляем первое (т.к. мы только что добавили новую строчку, и она, очевидно, не первая)\n            let rowToDelete = mainWorkTypes.find((item: any) =\u003e item.id_1c !== employeeId);\n            if (rowToDelete) {\n                try {\n                    employee.data.employment_table.delete(employee.data.employment_table.indexOf(rowToDelete));\n                    employee.data.id_1c = employmentRow.id_1c;\n                    await employee.setStatus(employee.fields.__status.variants.new);\n                    await employee.save();\n                } catch (e) {\n                    Context.data.error_stack += ` Не удалось удалить предыдущее основное место работы `;\n                }\n            }\n        }\n    }\n}\n\n//функция для получения данных о временных кадровых переводах или срочных трудовых договорах\nasync function findFixedTermOrTemporaryTransferData(positions: any): Promise\u003cIFixedTermData[]\u003e {\n    //данные о срочных ТД и переводах с датой окончания. Нужно для отправки данных кадровикам об окончании срока ТД или КП\n    const fixedtermData = positions.filter((item: any) =\u003e {\n        return !!item.data[\"Record\"]\n    }).map((data: any) =\u003e {\n        return data.data[\"Record\"]\n    }).flat().filter((item: any) =\u003e {\n        return item[\"ВидЗанятостиПозиции\"] !== \"Совмещена\" \u0026\u0026 item[\"Active\"] \u0026\u0026 (!(item[\"ПланируемаяДатаЗавершения\"].includes(\"0001\")) || (!item[\"ДействуетДо\"].includes(\"0001\")))\n    })\n\n    //мапим значения по временным КП, чтобы потом всё это отправить в подпроцесс\n    let mappedFixedTermData: IFixedTermData[] = [];\n    let i = -1;\n    for (let item of fixedtermData) {\n        i++;\n        //у нас есть 2 поля, где хранится дата окончания. Выбираем то, где заполнено значение\n        let endDate = item[\"ПланируемаяДатаЗавершения\"];\n        if (!endDate || (endDate \u0026\u0026 endDate.includes(\"0001\"))) {\n            endDate = item[\"ДействуетДо\"];\n        }\n\n        //ищем сотрудника\n        const employee = await Namespace.app.staff.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.individual_id_1c.eq(item[\"ФизическоеЛицо\"])\n        )).first();\n\n        //нужно найти предыдущую позицию. Для этого ищем по item[\"Сотрудник\"] в таблице занятости у сотрудника\n        if (employee \u0026\u0026 employee.data.employment_table) {\n            let row = employee.data.employment_table.find((elem: any) =\u003e elem.id_1c === item[\"Сотрудник\"]);\n\n            if (row \u0026\u0026 row.position) {\n\n                let posApp = await row.position.fetch();\n\n                let elem: IFixedTermData = {\n                    employeeIndividualId: employee.data.individual_id_1c as string,\n                    employeeId: row.id_1c as string,\n                    endDate: endDate,\n                    prevPositionId: posApp.data.ref_key as string,\n                    prevPositionDate: row.admission_date_position.format(),\n                    isMainWorktype: row.type_employment.name === \"Основное место работы\" ? true : false,\n                }\n                mappedFixedTermData.push(elem);\n            }\n        }\n    };\n\n    return mappedFixedTermData;\n}\n\n//функция для определения типа перевода (временный или постоянный). Возвращает элемент IUpdatedTransferData, который потом отправляется дальше по процессам\nfunction returnTransferDataElement(mappedFixedTermData: IFixedTermData[], updatedTransferData: IUpdatedTransferData): IUpdatedTransferData {\n    let updatedTransferDataElement: IUpdatedTransferData;\n    let temporary = mappedFixedTermData.find(item =\u003e item.employeeId === updatedTransferData.employeeId);\n\n    if (temporary) {\n        updatedTransferDataElement = {\n            employeeId: updatedTransferData.employeeId,\n            employeeIndividualId: updatedTransferData.employeeIndividualId,\n            isTemporaryTransfer: true,\n            endTransferDate: updatedTransferData.endTransferDate,\n            newPositionId: updatedTransferData.newPositionId,\n            employmentDirectoryId: updatedTransferData.employmentDirectoryId\n        }\n    } else {\n        updatedTransferDataElement = {\n            employeeId: updatedTransferData.employeeId,\n            employeeIndividualId: updatedTransferData.employeeIndividualId,\n            isTemporaryTransfer: false,\n            newPositionId: updatedTransferData.newPositionId,\n            employmentDirectoryId: updatedTransferData.employmentDirectoryId\n        }\n    };\n\n    return updatedTransferDataElement;\n}\n\n//основной метод добавления/изменения позиций у сотрудника и в его таблице занятости\nasync function addWorkData(positions: any) {\n    //TODO отдельно обрабатывать руководителей\n\n    //данные для бп, который обновляет данные в карточке позиции (актуальные и не актуальные сотрудники)\n    let updatedTransferData: IUpdatedTransferData[] = [];\n\n    //сюда записываем данные о кадровых переводах, чтобы потом их отложенно выполнить\n    let transfers: TransferData[] = [];\n\n    //данные о позициях. Исключаем данные по совмещениям (т.к. мы их не обрабатываем) и исключаем непроведённые документы из 1С (поле Active)\n    const filteredPosData = positions.filter((item: any) =\u003e {\n        return !!item.data[\"Record\"]\n    }).map((data: any) =\u003e {\n        return data.data[\"Record\"]\n    }).flat().filter((item: any) =\u003e {\n        return item[\"ВидЗанятостиПозиции\"] !== \"Совмещена\" \u0026\u0026 item[\"Active\"]\n    });\n\n    //массив с айди физ лиц. Нужен для упрощённого поиска наличия сотрудников в кадровых данных\n    const personsIds = filteredPosData.map((item: any) =\u003e {\n        return item[\"ФизическоеЛицо\"];\n    });\n\n    //получаем данные по временным кадровым переводам\n    let mappedFixedTermData: IFixedTermData[] = await findFixedTermOrTemporaryTransferData(positions);\n\n    //преобразовываем данные по срочным ТД и  в строку, чтобы далее в цикле их обрабатывать\n    Context.data.fixedterm_data = JSON.stringify(mappedFixedTermData);\n\n    //TODO Возможно стоит сделать поиск чанками\n    //выборка по всем не удалённым позициям ШР\n    const allPositions = await Namespace.app.position.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    //выборка по всем не удалённым сотрудникам\n    const allEmployees = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n    )).size(10000).all();\n\n    //\n    let promises: Promise\u003cvoid\u003e[] = [];\n\n    //если в пришедших данных нет информации о сотрудниках (по сути, пустой пакет) - выходим из метода\n    if (personsIds.length === 0) {\n        Context.data.debug += ` personsIds.length === 0 `;\n        return;\n    }\n\n    //получаем категории занятости\n    const mainWorkCategory = Context.fields.staff.app.fields.employment_table.fields.type_employment.variants.main_workplace\n    //const innerWorkCategory = Context.fields.staff.app.fields.employment_table.fields.type_employment.variants.internal_combination\n    //const outerWorkCategory = Context.fields.staff.app.fields.employment_table.fields.type_employment.variants.external_combination\n\n    //выбираем только новых сотрудников\n    const allNeededEmployees = allEmployees.filter(employee =\u003e {\n        let found = false;\n        //@ts-ignore\n        const ids: string[] = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n        //@ts-ignore\n        if (personsIds \u0026\u0026 personsIds.indexOf(employee.data.individual_id_1c) !== -1) {\n            found = true;\n        }\n\n        if (!found \u0026\u0026 ids) {\n            for (let id of ids) {\n                //@ts-ignore\n                if (personsIds \u0026\u0026 personsIds.indexOf(id) !== -1) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n\n        return found;\n    });\n\n    //загрузка позиций\n    for (let employee of allNeededEmployees) {\n\n        Context.data.debug += employee.data.__name\n\n        const ids: string[] = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n\n        //allEmploymentsAndTransfers - все выбранные данные по приёмам и переводам \n        let allEmploymentsAndTransfers = filteredPosData.filter((item: any) =\u003e !!item[\"ФизическоеЛицо\"]).filter((item: any) =\u003e {\n            return item[\"ФизическоеЛицо\"] === employee.data.individual_id_1c || (!!ids \u0026\u0026 ids.indexOf(item[\"ФизическоеЛицо\"]) !== -1);\n        });\n\n        //массив с айди позиций, которые уже установлены у сотрудника\n        const existingPositions = employee.data.employment_table?.map(item =\u003e {\n            if (item.position \u0026\u0026 item.position.id)\n                return item.position.id;\n        });\n\n        //rate - ставка\n        let rate = 0;\n\n        //итерируемся по всем приёмам и переводам\n        for (let i = 0; i \u003c allEmploymentsAndTransfers.length; i++) {\n\n            const currentEmployment = allEmploymentsAndTransfers[i];\n\n            //убираем записи по увольнениям. По ним у нас ВидЗанятостиПозиции = Открыта.\n            if (currentEmployment[\"ВидЗанятостиПозиции\"] !== 'Занята') {\n                continue;\n            }\n\n            //айди сотрудника\n            const employeeId = currentEmployment[\"Сотрудник\"];\n\n            //ставка\n            try {\n                rate += currentEmployment[\"КоличествоСтавок\"];\n            } catch (e) {\n                rate += 1;\n            }\n\n            let pos: any = undefined;\n\n            //ищем позицию ШР среди существующих\n            if (currentEmployment) {\n                pos = allPositions.find(item =\u003e item.data.ref_key === currentEmployment[\"ПозицияШтатногоРасписания\"])\n            }\n\n            //если не нашли, идём к следующим данным\n            if (!pos) {\n                Context.data.debug += ' Не загружена позиция для ' + employee.data.__name;\n                continue;\n            }\n\n            //берём организацию из позиции ШР\n            const org = pos.data.organization;\n            let orgApp = await org.fetch();\n            Context.data.debug += ` ${pos.data.__name} ${currentEmployment[\"Period\"]} ${orgApp.data.__name} `;\n            //подразделение тоже берём из позиции ШР\n            const subdivision = pos.data.subdivision;\n            let typeWorkRelation: any;\n\n            //отложенная установка перевода\n            //все данные помещаем в массив объектов и посылаем подпроцесс с таймером\n            let subdivisionApp = await subdivision.fetch();\n            let posApp = await pos.fetch();\n            //дата перевода\n            let historyDatetime = new Datetime(currentEmployment[\"Period\"]);\n            let historyDate = new TDate(historyDatetime.year, historyDatetime.month, historyDatetime.day);\n\n            //строка таблицы занятости\n            let employmentRow: Table$kedo$staff$employment_table$Row | undefined\n\n            //находим нужную строку в таблице занятости или создаём новую\n            if (existingPositions) {\n                Context.data.debug += ` существует позиция `;\n\n                employmentRow = employee.data.employment_table!.find((item: any) =\u003e employeeId \u0026\u0026 item.id_1c \u0026\u0026 item.id_1c === employeeId);\n\n                //проверяем на актуальность данных\n                if (employmentRow \u0026\u0026 employmentRow.admission_date_position \u0026\u0026 employmentRow.admission_date_position.after(historyDate)) {\n                    Context.data.error_stack += ` ${employee.data.__name} ${currentEmployment[\"ПозицияШтатногоРасписания\"]} ${historyDate.format()} в строке ${employmentRow.admission_date_position.format()} - устаревшая информация `;\n                    Context.data.debug += ` ${employee.data.__name} ${currentEmployment[\"ПозицияШтатногоРасписания\"]} ${historyDate.format()} в строке ${employmentRow.admission_date_position.format()} - устаревшая информация `;\n                    continue;\n                }\n\n                if (!employmentRow) {\n                    Context.data.debug += ` не нашли строку в таблице  `;\n                    employmentRow = employee.data.employment_table!.insert();\n                }\n            } else {\n                employmentRow = employee.data.employment_table!.insert()\n            }\n            if (!employmentRow \u0026\u0026 pos \u0026\u0026 pos.id) {\n                Context.data.error_stack += \" Не нашли строку с позицией \" + pos.id\n                continue;\n            }\n\n            //ищем элемент справочника \"Справочник занятости\"\n            let empRow = employee.data.employment_table!.find(item =\u003e item.id_1c === employeeId);\n            let employmentDirectory: TEmploymentDirectory | undefined = undefined;\n            if (empRow) {\n                employmentDirectory = empRow.employment_placement_app;\n            };\n\n            let updatedTransferDataInfo: IUpdatedTransferData = {\n                employeeId: employeeId,\n                employeeIndividualId: employee.data.individual_id_1c as string,\n                endTransferDate: historyDate.format(),\n                newPositionId: currentEmployment[\"ПозицияШтатногоРасписания\"],\n                employmentDirectoryId: employmentDirectory ? employmentDirectory.id : undefined,\n                isTemporaryTransfer: false\n            }\n\n            typeWorkRelation = employmentRow.type_employment;\n            if (!typeWorkRelation) {\n                typeWorkRelation = mainWorkCategory;\n            }\n\n            let typeFromData = false;\n\n            if (!employmentRow.position) {\n                typeFromData = true;\n            }\n\n            if (!typeFromData) {\n\n                let updatedTransferDataElement: IUpdatedTransferData = returnTransferDataElement(mappedFixedTermData, updatedTransferDataInfo);\n                updatedTransferData.push(updatedTransferDataElement);\n            }\n\n            //заполняем объект данными\n            let transferSendData: ITransferSendData = {\n                employee: employee,\n                transferDate: historyDate,\n                subdivisionApp: subdivisionApp,\n                orgApp: orgApp,\n                posId: currentEmployment[\"ПозицияШтатногоРасписания\"],\n                typeWorkRelation: typeWorkRelation,\n                employeeId: employeeId,\n                typeFromData: typeFromData,\n                rate: currentEmployment[\"КоличествоСтавок\"],\n                existingPositions: !!existingPositions\n            }\n            //проверяем на условия (дата перевода позже текущей)\n            let isTransferData = addTransferData(transferSendData, transfers);\n\n            //если условия выполнены\n            if (isTransferData) {\n                let updatedTransferDataElement: IUpdatedTransferData = returnTransferDataElement(mappedFixedTermData, updatedTransferDataInfo);\n                updatedTransferData.push(updatedTransferDataElement);\n\n                //добавили все данные в массив, а пока дальнейшую обработку пропускаем, она будет проходить в другом подпроцессе\n                continue;\n            }\n\n            //проверка на актуальные данные (чтобы не загрузить старые данные и не затереть новые изменения)\n            if (!isActualData(employee, employeeId, posApp, historyDate)) {\n                //не актуальная информация, не загружаем её\n                return;\n            }\n\n            //если заполнен тип трудоустройства и он Основное место работы, тогда заполняем специфичные для него поля\n            try {\n                if (typeWorkRelation \u0026\u0026 typeWorkRelation.name === mainWorkCategory.name) {\n                    employee.data.employment_type = mainWorkCategory;\n                    employee.data.id_1c = employeeId;\n                }\n            } catch (e) {\n                Context.data.value_3 = `${employee.data.__name}`;\n            }\n\n            //заполняем айди сотрудника в строке, этот айди является уникальным полем строки и по нему мы ищем соответствие при загрузке\n            employmentRow.id_1c = employeeId\n\n            if (org) {\n                employmentRow.organization = org\n            }\n            if (pos) {\n                employmentRow.position = pos;\n            }\n            if (subdivision) {\n                employmentRow.subdivision = subdivision\n            }\n\n            //заполняем тип трудоустройства только при условии, что у нас есть данные и он ещё не заполнен\n            // if (typeFromData \u0026\u0026 typeWorkRelation !== undefined) {\n            //     employmentRow.type_employment = typeWorkRelation;\n            // }\n\n            Context.data.debug += ` employmentRow.type_employment ${!!employmentRow.type_employment} `;\n\n            //добавили заполнение даты приёма на позицию для проверки на старую информацию\n            employmentRow.admission_date_position = historyDate;\n\n            //заполняем ставку\n            try {\n                employmentRow.rate = currentEmployment[\"КоличествоСтавок\"]\n            } catch (e) {\n                employmentRow.rate = 1;\n            }\n\n            try {\n\n                //заполняем данные о позиции в самом сотруднике, если приём/перевод был по основному месту работы\n                if (employmentRow \u0026\u0026 employmentRow.type_employment \u0026\u0026 employmentRow.type_employment.name === mainWorkCategory.name) {\n                    if (pos) {\n                        employee.data.position = pos;\n                    }\n                    if (subdivision) {\n                        employee.data.structural_subdivision = subdivision;\n                    }\n                    if (org) {\n                        employee.data.organization = org;\n                        const orgApp = await org.fetch();\n                        employee.data.entity = orgApp.data.entity;\n                    }\n\n                    employee.data.employment_type = mainWorkCategory;\n                    employee.data.id_1c = employeeId;\n                }\n            } catch (e) {\n                Context.data.value_3 = `${employee.data.__name}`;\n            }\n\n            try {\n                //если мы уволили сотрудника, а потом приняли снова. При таком подходе у нас будет несколько строк с типом устройства \"Основное место работы\"\n                await deletePreviousPosition(employee, employmentRow, typeFromData, employeeId);\n            } catch (e) {\n                Context.data.value_3 = `${employee.data.__name}`;\n            }\n        }\n\n        employee.data.rate = rate;\n        promises.push(employee.save());\n\n        //добавление в массив по добавлению прав (в конце процесса)\n        if (Context.data.created_staffs!.indexOf(employee) !== -1) {\n            Context.data.created_staffs!.push(employee);\n        }\n\n        //сохранение чанками\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    //если данные о кадровых переводах имеются, то мы их отправяем на обработку\n    if (transfers.length \u003e 0) {\n        Context.data.transfers = JSON.stringify(transfers);\n    }\n\n    if (updatedTransferData.length \u003e 0) {\n        Context.data.data_for_update_positions = JSON.stringify(updatedTransferData);\n    }\n\n    await Promise.all(promises)\n    promises = []\n}\n\nasync function addDocumentData(documents: any) {\n    const filteredData = documents.filter((item: any) =\u003e {\n        return !!item.data[\"Record\"] \u0026\u0026 item.data[\"Record\"][0][\"Представление\"].includes(\"Паспорт\")\n    }).map((item: any) =\u003e item.data[\"Record\"][0])\n\n    let personsIds = filteredData.map((item: any) =\u003e {\n        //Context.data.debug += item.data.Record[0][\"Физлицо\"]\n        return item[\"Физлицо\"]\n    })\n    if (personsIds.length == 0) {\n        return;\n    }\n\n    let allEmployees: any[];\n    try {\n        allEmployees = await Namespace.app.staff.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.individual_id_1c.in(personsIds)\n        )).size(10000).all()\n    } catch (e) {\n        personsIds = personsIds.map((item: any) =\u003e {\n            return item[\"data\"]\n        })\n        if (personsIds.length == 0) {\n            return;\n        }\n\n        Context.data.debug += ` ${JSON.stringify(personsIds)} `;\n\n        allEmployees = await Namespace.app.staff.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.individual_id_1c.in(personsIds)\n        )).size(10000).all();\n    }\n    let promises: Promise\u003cvoid\u003e[] = []\n\n    for (let employee of allEmployees) {\n        let found = false;\n\n        const ids = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n        for (let id of ids) {\n            if (personsIds.indexOf(id) !== -1 || personsIds.indexOf(employee.data.individual_id_1c)) {\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            continue;\n        }\n\n        //const docDataTable = filteredData.filter((data: any) =\u003e data[\"Физлицо\"] === employee.data.individual_id_1c)\n        let docDataTable = filteredData.filter((item: any) =\u003e !!item[\"Физлицо\"]).filter((item: any) =\u003e {\n            //@ts-ignore\n            const ids = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n            return item[\"Физлицо\"] === employee.data.individual_id_1c || ids.indexOf(item[\"Физлицо\"]) !== -1\n        });\n\n        if (!docDataTable || docDataTable.length == 0) {\n\n            docDataTable = docDataTable = filteredData.filter((item: any) =\u003e !!item[\"Физлицо\"][\"data\"]).filter((item: any) =\u003e {\n                //@ts-ignore\n                const ids = employee.data.ref_eq_table!.map((elem: any) =\u003e elem.individual_ref);\n                return item[\"Физлицо\"][\"data\"] === employee.data.individual_id_1c || ids.indexOf(item[\"Физлицо\"][\"data\"]) !== -1\n            });\n\n            Context.data.debug += ` ${JSON.stringify(docDataTable)} `;\n\n            if (!docDataTable || docDataTable.length == 0) {\n                continue;\n            }\n        };\n\n        const sortedPassports = docDataTable.sort((a: any, b: any) =\u003e {\n            const aDate: any = new Date(a[\"Period\"])\n            const bDate: any = new Date(b[\"Period\"])\n            return bDate - aDate\n        })\n\n        const docData = sortedPassports[0]\n        const [issueYear, issueMonth, issueDay] = docData[\"ДатаВыдачи\"].split(\"T\")[0].split(\"-\").map((item: string) =\u003e parseInt(item));\n\n        const passport: DocumentData = {\n            isRf: docData[\"Представление\"].includes(\"Паспорт гражданина РФ\") || docData[\"Представление\"].includes(\"Паспорт гражданина Российской Федерации\"),\n            passportSeries: docData[\"Серия\"].replace(/\\s/g, ''),\n            passportNumber: docData[\"Номер\"],\n            passportDepCode: docData[\"КодПодразделения\"],\n            passportIssueDate: new TDate(issueYear, issueMonth, issueDay),\n            passportIssuer: docData[\"КемВыдан\"],\n        }\n\n        //проверка на актуальность данных\n        if (employee.data.date_of_issue \u0026\u0026 passport.passportIssueDate) {\n            if (employee.data.date_of_issue.after(passport.passportIssueDate)) {\n                Context.data.error_stack += ` ${employee.data.__name} outdated information `;\n                Context.data.debug += ` ${employee.data.__name} outdated information `;\n                continue;\n            }\n        }\n\n        employee.data.passport_series = passport.passportSeries;\n        employee.data.russian_passport = passport.isRf;\n        employee.data.passport_number = passport.passportNumber;\n        employee.data.passport_department_code = passport.passportDepCode.length === 6 ? passport.passportDepCode.slice(0, 3) + \"-\" + passport.passportDepCode.slice(3) : passport.passportDepCode.replace(\" \", \"\");\n        employee.data.date_of_issue = passport.passportIssueDate;\n        employee.data.issued_by = passport.passportIssuer;\n        promises.push(employee.save())\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n}\n\nasync function createBaseEmployees(employees: any, persons: any, types: any = undefined) {\n\n    let mappedData: any;\n    let acceptData: any;\n    let fireData: any;\n\n    if (types) {\n        //выбираем данные по приёму на работу и по увольнению\n        // @ts-ignore\n        mappedData = types.filter((item: any) =\u003e !!item.data[\"Record\"]).map((item: any) =\u003e item.data[\"Record\"]).flat().filter((item: any) =\u003e item[\"Active\"] \u0026\u0026 item[\"КоличествоСтавок\"] === 1);\n        acceptData = mappedData.filter((item: any) =\u003e item[\"ВидСобытия\"] === \"НачальныеДанные\" || item[\"ВидСобытия\"] === \"Прием\" || item[\"ВидСобытия\"] === \"Перемещение\");\n        fireData = mappedData.filter((item: any) =\u003e item[\"ВидСобытия\"] === \"Увольнение\");\n    }\n\n    const personsIds = persons.filter((item: any) =\u003e !!item.data[\"ИНН\"]).map((item: any) =\u003e item.data[\"ИНН\"])\n\n    if (personsIds.length == 0) {\n        return;\n    }\n    const allEmployees = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.inn.in(personsIds)\n    )).size(10000).all()\n\n    const defaultCategory = await Namespace.app.employees_categories.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.code.eq(\"default\")\n    )).first()\n\n    let promises: Promise\u003cvoid\u003e[] = []\n    const processedIds: string[] = []\n\n    for (let i = persons.length - 1; i \u003e= 0; i--) {\n        const person = persons[i].data\n\n        if (types) {\n\n            let found_accept_data = acceptData.filter((elem: any) =\u003e elem[\"ФизическоеЛицо\"] === person[\"Ref\"]);\n            let found_fire_data = fireData.filter((elem: any) =\u003e elem[\"ФизическоеЛицо\"] === person[\"Ref\"]);\n\n            //на основании данных, если нам пришёл приём и увольнение, тогда мы не загружаем такого сотрудника (скорее всего это первичная выгрузка и нам не нужно загружать уволенных)\n            if (found_accept_data \u0026\u0026 found_accept_data.length \u003e 0 \u0026\u0026 found_fire_data \u0026\u0026 found_fire_data.length \u003e 0) {\n\n                Context.data.debug += ` in 1 `\n\n                let last_accept_date = new TDate(1, 1, 1);\n                let last_fire_date = new TDate(1, 1, 1);\n\n                for (let found_data of found_accept_data) {\n                    Context.data.debug += ` a ${found_data[\"Period\"]} `\n                    let datetime = new Datetime(found_data[\"Period\"]);\n                    let date = new TDate(datetime.year, datetime.month, datetime.day);\n                    if (date \u0026\u0026 date.after(last_accept_date)) {\n                        last_accept_date = date;\n                    }\n                }\n\n                for (let found_data of found_fire_data) {\n                    Context.data.debug += ` f ${found_data[\"Period\"]} `\n                    let datetime = new Datetime(found_data[\"Period\"]);\n                    let date = new TDate(datetime.year, datetime.month, datetime.day);\n                    if (date \u0026\u0026 date.after(last_fire_date)) {\n                        last_fire_date = date;\n                    }\n                }\n\n                Context.data.debug += ` fdate ${last_fire_date.day}.${last_fire_date.month}.${last_fire_date.year} `\n                Context.data.debug += ` fdate ${last_accept_date.day}.${last_accept_date.month}.${last_accept_date.year} `\n\n                if (last_fire_date.after(last_accept_date)) {\n                    Context.data.error_stack += ` ${person['Description']} не был загружен, так как он принят и уволен по основному месту работы `\n                    continue;\n                }\n            }\n        }\n\n        const isProcessed = !!(processedIds.find((inn: string) =\u003e inn === person[\"ИНН\"]))\n        if (isProcessed) continue;\n\n        let createNew = false;\n        let employeeId: string | undefined = \"\";\n        let employeeCode: string | undefined = \"\";\n\n        //если у сотрудника не заполнен ИНН, пропускаем такого сотрудника\n        if (person[\"ИНН\"] === \"\") {\n            continue;\n        }\n\n        let currentEmployee = allEmployees.find(e =\u003e e.data.inn === person[\"ИНН\"]);\n        if (!currentEmployee) {\n            const currentEmployee = employees.find((item: any) =\u003e person.Ref === item.data[\"ФизическоеЛицо\"])?.data\n            if (!currentEmployee) {\n                Context.data.error_stack += `для физического лица ${person[\"Description\"]} ${person[\"ИНН\"]} не найден сотрудник`\n            } else {\n                //Context.data.debug += ` ${person.Ref} found in external table`\n                employeeId = currentEmployee[\"Ref\"]\n                employeeCode = currentEmployee[\"Code\"]\n            }\n\n            createNew = true\n        } else {\n            Context.data.debug += ` ${person[\"ИНН\"]} found ${currentEmployee.data.id_1c}`\n            employeeId = currentEmployee.data.id_1c\n            employeeCode = currentEmployee.data.personal_number\n        }\n        const addressField = person[\"КонтактнаяИнформация\"]?.find((info: any) =\u003e info[\"Тип\"] === \"Адрес\")\n        let addressObj: any = {}\n        if (!!addressField) {\n\n            if (addressField[\"Значение\"] !== \"\") {\n                addressObj = addressField[\"Значение\"] ? JSON.parse(addressField[\"Значение\"]) : {};\n            } else {\n\n                const extractAddressInfo = (input: string) =\u003e {\n                    // Регулярное выражение для извлечения данных\n                    const regex = /(?:г(?:ор(?:од)?)?)?\\s*(?:п\\.?|пос\\.?|посёлок|поселок|с\\.?|село|пгт|дер\\.?|д\\.?)?\\s*([^\\d,]+),\\s*ул\\.?\\s*([^\\d,]+),\\s*д(?:ом)?\\.?\\s*(\\d+),\\s*кв\\.?\\s*(\\d+)/;\n\n                    // Извлекаем данные с помощью регулярного выражения\n                    const match = input.match(regex);\n\n                    if (match) {\n                        // Индексы групп в регулярном выражении\n                        const cityIndex = 1;\n                        const streetIndex = 2;\n                        const houseIndex = 3;\n                        const apartmentIndex = 4;\n\n                        // Извлекаем данные из совпадения\n                        const city = match[cityIndex].trim();\n                        const street = match[streetIndex].trim();\n                        const house = match[houseIndex].trim();\n                        const apartment = match[apartmentIndex].trim();\n\n                        // Формируем итоговую строку\n                        const result = {\n                            \"city\": city,\n                            \"street\": street,\n                            \"houseNumber\": house,\n                            \"apartments\": [{ \"number\": apartment }],\n                        }\n                        return result;\n                    } else {\n                        return new Object;\n                    }\n                }\n\n                addressObj = extractAddressInfo(addressField[\"Представление\"]);\n            }\n        }\n\n        const email = person[\"КонтактнаяИнформация\"]?.find((info: any) =\u003e info[\"Тип\"] === \"АдресЭлектроннойПочты\");\n        const phoneNumber = person[\"КонтактнаяИнформация\"]?.find((info: any) =\u003e info[\"Тип\"] === \"Телефон\" \u0026\u0026 info[\"Представление\"]?.length \u003e= 11);\n\n        let birthYear: number | undefined = undefined\n        let birthMonth: number | undefined = undefined\n        let birthDay: number | undefined = undefined\n        try {\n            [birthYear, birthMonth, birthDay] = person[\"ДатаРождения\"].split(\"T\")[0].split(\"-\").map((item: string) =\u003e parseInt(item)); // new Date(\"00-00-0000T00:00:00\")\n        } catch (e) {\n            Context.data.error_stack += \"Couldn't parse date \" + person[\"ДатаРождения\"]\n        }\n\n        // @TODO УБРАТЬ\n        const singleEmployeeData: BasePerson = {\n            id: employeeId,\n            code: employeeCode,\n            individual_id: person[\"Ref\"],\n            name: {\n                firstname: person[\"Имя\"],\n                lastname: person[\"Фамилия\"],\n                middlename: person[\"Отчество\"],\n            },\n            firstname: person[\"Имя\"],\n            lastname: person[\"Фамилия\"],\n            middlename: person[\"Отчество\"],\n            email: email ? {\n                email: email[\"Представление\"],\n                type: EmailType.Work,\n            } : undefined,\n            phoneNumber: phoneNumber ? {\n                tel: formatPhoneNumber(phoneNumber[\"Представление\"]),\n                type: PhoneType.Work,\n            } : undefined,\n            sex: person[\"Пол\"] === \"Мужской\" ? true : false,\n            marriage: false,\n            city: addressObj?.city || addressObj?.locality || addressObj?.area,\n            street: addressObj?.street || undefined,\n            home: addressObj?.houseNumber,\n            apartment: addressObj?.apartments \u0026\u0026 addressObj.apartments.length \u003e 0 ? addressObj.apartments[0].number : undefined,\n            housing: addressObj?.buildings \u0026\u0026 addressObj.buildings.length \u003e 0 ? addressObj.buildings[0].number : undefined,\n            snils: person[\"СтраховойНомерПФР\"],\n            inn: person[\"ИНН\"],\n        }\n\n        if (birthDay \u0026\u0026 birthMonth \u0026\u0026 birthYear) {\n            singleEmployeeData.birthDate = new TDate(birthYear, birthMonth, birthDay)\n        }\n\n        if (createNew || !currentEmployee) {\n            currentEmployee = Context.fields.staff.app.create()\n            currentEmployee.data.id_1c = singleEmployeeData.id\n            currentEmployee.data.user_already_exists = false\n            currentEmployee.data.personal_number = singleEmployeeData.code\n            currentEmployee.data.individual_id_1c = singleEmployeeData.individual_id\n\n            let row = currentEmployee.data.ref_eq_table!.insert();\n            row.individual_ref = singleEmployeeData.individual_id;\n\n            if (!!defaultCategory) {\n                const newRow = currentEmployee.data.categories_table!.insert()\n                newRow.staff_categories = defaultCategory\n                currentEmployee.data.staff_categories = [defaultCategory]\n            }\n        }\n\n        const individualIds = currentEmployee.data.ref_eq_table!.map((item: any) =\u003e item.individual_ref)\n        if (individualIds.indexOf(singleEmployeeData.individual_id) === -1) {\n            let row = currentEmployee.data.ref_eq_table!.insert();\n            row.individual_ref = singleEmployeeData.individual_id;\n        }\n\n        if (!!singleEmployeeData.name) {\n            currentEmployee.data.full_name = singleEmployeeData.name;\n        }\n        if (!!singleEmployeeData.firstname) {\n            currentEmployee.data.name = singleEmployeeData.firstname;\n        }\n        if (!!singleEmployeeData.lastname) {\n            currentEmployee.data.surname = singleEmployeeData.lastname;\n        }\n        if (!!singleEmployeeData.middlename) {\n            currentEmployee.data.middlename = singleEmployeeData.middlename;\n        }\n        if (!!singleEmployeeData.email) {\n            currentEmployee.data.email = singleEmployeeData.email\n        }\n        if (!!singleEmployeeData.phoneNumber) {\n            currentEmployee.data.phone = singleEmployeeData.phoneNumber\n        }\n        if (singleEmployeeData.sex === true) {\n            currentEmployee.data.sex = singleEmployeeData.sex;\n        } else {\n            currentEmployee.data.sex = false;\n        }\n        if (!!singleEmployeeData.birthDate) {\n            currentEmployee.data.date_of_birth = singleEmployeeData.birthDate\n        }\n        if (!!singleEmployeeData.city) {\n            currentEmployee.data.city = singleEmployeeData.city\n        }\n        if (!!singleEmployeeData.street) {\n            currentEmployee.data.street = singleEmployeeData.street\n        }\n        if (!!singleEmployeeData.home) {\n            currentEmployee.data.home = singleEmployeeData.home\n        }\n        if (!!singleEmployeeData.apartment) {\n            currentEmployee.data.apartment = singleEmployeeData.apartment\n        }\n        if (!!singleEmployeeData.housing) {\n            currentEmployee.data.housing = singleEmployeeData.housing\n        }\n        if (!!singleEmployeeData.snils) {\n            currentEmployee.data.snils = singleEmployeeData.snils\n        }\n        if (!!singleEmployeeData.inn) {\n            //задача 2329\n            //скорее всего это временное решение, но думаю, что оно решит основную проблему\n            //у нас перезаполняется инн инном другого сотрудника\n            //поэтому сделаем заполнение инн только если поле изначально пустое\n\n            if (!currentEmployee.data.inn) {\n                currentEmployee.data.inn = singleEmployeeData.inn;\n            }\n        }\n\n        const address = `\n                ${singleEmployeeData.city ? singleEmployeeData.city : \"\"}\n                ${singleEmployeeData.street ? \", ул. \" + singleEmployeeData.street : \"\"}\n                ${singleEmployeeData.home ? \", д. \" + singleEmployeeData.home : \"\"}\n                ${singleEmployeeData.housing ? \", корп. \" + singleEmployeeData.housing : \"\"}\n                ${singleEmployeeData.apartment ? \", кв. \" + singleEmployeeData.apartment : \"\"}\n            `\n        currentEmployee.data.address = address;\n        currentEmployee.data.registration_address = address;\n\n        // Доработка для настройки прав доступа.\n        Context.data.created_staffs!.push(currentEmployee);\n        promises.push(currentEmployee.save());\n        if (currentEmployee.data.inn) {\n            processedIds.push(currentEmployee.data.inn!);\n        }\n\n        if (promises.length \u003e= littleChunkSize) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function loadAdditionalOrgData(): Promise\u003cvoid\u003e {\n    const searchData = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.table_name.eq(\"InformationRegister_СведенияОбОтветственныхЛицах\")\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .size(10000).all()\n\n    if (!searchData || searchData.length === 0) {\n        return;\n    }\n    const sortedApps = searchData.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    })\n\n    const data = parseData(sortedApps, \"InformationRegister_СведенияОбОтветственныхЛицах\")\n    const personIds: string[] = []\n    const orgIds: string[] = []\n    for (let i = 0; i \u003c data.length; i++) {\n        const id = data[i].data.Record[0]\n    }\n\n}\n\nclass MyRole {\n    group: UserGroupItem | UserItem[] | OrganisationStructureItem\n    type: 'group' | 'user' | 'orgstruct'\n    code: string\n    constructor(group: UserGroupItem | UserItem[] | OrganisationStructureItem, type: 'group' | 'user' | 'orgstruct', code: string) {\n        this.code = code;\n        this.group = group;\n        this.type = type;\n    }\n    getUsers(): Promise\u003cUserItem[]\u003e {\n        if (this.type == \"group\") {\n            return (\u003cUserGroupItem\u003ethis.group).users();\n        }\n        else if (this.type == \"orgstruct\") {\n            return System.users.search().where(i =\u003e i.osIds.has((\u003cOrganisationStructureItem\u003ethis.group))).size(10000).all()\n        }\n        else return new Promise\u003cUserItem[]\u003e(() =\u003e \u003cUserItem[]\u003ethis.group)\n    }\n    json(): any {\n        return {\n            code: this.code,\n            type: this.type\n        }\n    }\n}\n\nasync function splitStaff(): Promise\u003cvoid\u003e {\n\n    //try {\n    Context.data.new_staff_exists = true;\n    const staffs = await Context.fields.created_staffs.fetchAll();\n    Context.data.debug += ` ${staffs!.length} `;\n    const allOrgs = await Namespace.app.organization.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allOrgRights = await Namespace.app.access_settings_organization.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    let staffMeta: staffData[] = [];\n    let accessSettingsIds: string[] = [];\n    for (let staff of staffs) {\n        let isArray = false;\n        if (staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 1) {\n            isArray = true;\n            const staffOrgsIds = staff.data.employment_table.map(row =\u003e row.organization.id);\n            const staffOrgs = allOrgs.filter(org =\u003e staffOrgsIds.indexOf(org.id) != -1 \u0026\u0026 org.data.access_settings_organization);\n            accessSettingsIds = staffOrgs.map(org =\u003e org.data.access_settings_organization!.id);\n        }\n        let org = allOrgs.find(o =\u003e o.id === staff.data.organization?.id);\n        //условие на работающих только по совместительству\n        if (!org) {\n            if (staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 0) {\n                const staffOrgsIds = staff.data.employment_table.map(row =\u003e row.organization.id);\n                if (staffOrgsIds \u0026\u0026 staffOrgsIds.length \u003e 0) {\n                    org = allOrgs.find(o =\u003e o.id === staffOrgsIds[0]);\n                }\n            }\n        };\n        if (!org) {\n            Context.data.debug += ` no org `;\n            continue;\n        }\n        const orgRights = allOrgRights.find(right =\u003e right.id === org!.data.access_settings_organization?.id);\n        if (!orgRights) {\n            Context.data.debug += ` no orgRights `;\n            continue;\n        };\n        const rightsField = orgRights.data.staff;\n        if (!rightsField || rightsField.length \u003c 1) {\n            Context.data.debug += ` no rightsField `;\n            continue;\n        };\n        staffMeta.push({\n            staffId: staff.id,\n            orgRightsIds: isArray ? accessSettingsIds : orgRights.id,\n            isArray\n        });\n    };\n    //Context.data.debug = JSON.stringify(staffMeta)\n    let chunks: staffData[][] = [];\n    for (let i = 0; i \u003c staffMeta.length; i += chunkSize) {\n        const chunk = staffMeta.slice(i, i = chunkSize);\n        chunks.push(chunk)\n    };\n    Context.data.max_iteration = chunks.length;\n    Context.data.chunks = chunks;\n    if (chunks.length == 0) {\n        Context.data.debug += ` no new staff `;\n        Context.data.new_staff_exists = false;\n    };\n\n    //} catch (e) {\n    //    Context.data.debug += ` ${e.message} `;\n    //}\n}\n\nasync function set_access_groups(): Promise\u003cvoid\u003e {\n    // Получаем созданных сотрудников.\n    const staffs = await Context.fields.created_staffs.fetchAll();\n    // Получаем права доступа по организациям.\n    const access_groups = await Namespace.app.access_settings_organization.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n    )).size(1000).all();\n    const userGroups = await System.userGroups.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n\n    const chunk: staffData[] = Context.data.chunks[Context.data.iteration!];\n\n    const promises: Promise\u003cvoid\u003e[] = [];\n\n    for (const item of chunk) {\n        try {\n            const staff = staffs.find(s =\u003e s.id === item.staffId)!;\n            let accessRoles: Role[] = []\n            if (item.isArray) {\n                accessRoles = access_groups.filter(gr =\u003e item.orgRightsIds.indexOf(gr.id) !== -1).map(access =\u003e {\n                    const userGroup = userGroups.find(group =\u003e group.id === access.data.staff![0].code);\n                    return new MyRole(userGroup!, \"group\", userGroup!.id) as Role;\n                });\n            } else {\n                const access_group = access_groups.find(gr =\u003e gr.id === item.orgRightsIds)!;\n                const roleGroup = userGroups.find(f =\u003e f.data.__id == access_group.data.staff![0].code);\n                const newRole = new MyRole(roleGroup!, \"group\", roleGroup!.id) as Role;\n                accessRoles.push(newRole);\n\n            }\n\n            Context.data.debug += ` добавили группы ${accessRoles.length} `;\n            staff.data.access_group = accessRoles;\n\n            promises.push(staff.save());\n        } catch (e) {\n            Context.data.error_stack += ` Не смогли добавить группы поступа ${e.message} `\n        }\n    };\n\n    await Promise.all(promises);\n    if (Context.data.iteration === Context.data.max_iteration! - 1) {\n        Context.data.all_staff_processed = true;\n    } else {\n        Context.data.iteration!++;\n    }\n};\n\n//заполняем переменные для \nasync function fillVarsForFixedterm(): Promise\u003cvoid\u003e {\n    //если данных нет, то двигаемся дальше\n    if (!Context.data.fixedterm_data) {\n        Context.data.loop_end = true;\n        return;\n    }\n\n    //парсим данные\n    const data: IFixedTermData[] = JSON.parse(Context.data.fixedterm_data);\n\n    Context.data.iterator!++;\n\n    //делаем паузу каждые loopSize итераций\n    if (Context.data.iterator! % loopSize === 0 \u0026\u0026 Context.data.iterator! !== 0) {\n        Context.data.is_pause = true;\n    } else {\n        Context.data.is_pause = false;\n    }\n\n    if (Context.data.iterator! \u003e= data.length) {\n        Context.data.loop_end = true;\n        return;\n    }\n\n    //заполняем переменные\n    let endDate = new Datetime(data[Context.data.iterator!].endDate);\n    let prevPosDate = new Datetime(data[Context.data.iterator!].prevPositionDate);\n\n    const employee = await Namespace.app.staff.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.individual_id_1c.eq(data[Context.data.iterator!].employeeIndividualId)\n    )).first();\n\n    const position = await Namespace.app.position.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.ref_key.eq(data[Context.data.iterator!].prevPositionId)\n    )).first();\n\n    Context.data.current_employee = employee;\n    Context.data.end_transfer_date = new TDate(endDate.year, endDate.month, endDate.day);\n    Context.data.employee_id = data[Context.data.iterator!].employeeId;\n    Context.data.prev_position = position;\n    Context.data.prev_position_date = new TDate(prevPosDate.year, prevPosDate.month, prevPosDate.day);\n    Context.data.is_main_worktype = data[Context.data.iterator!].isMainWorktype;\n}\n\nasync function fillPositionTransitions(): Promise\u003cvoid\u003e {\n\n    if (!Context.data.data_for_update_positions) {\n        Context.data.debug += ` ${!Context.data.data_for_update_positions} `;\n        Context.data.loop_end = true;\n        return;\n    }\n    Context.data.iterator!++;\n    let updatedTransferData: IUpdatedTransferData[] = JSON.parse(Context.data.data_for_update_positions);\n    Context.data.max_iteration = updatedTransferData.length;\n    Context.data.debug += ` updatedTransferData.length ${updatedTransferData.length} `\n\n    if (Context.data.iterator! \u003e= Context.data.max_iteration!) {\n        Context.data.loop_end = true;\n        return;\n    }\n\n    //делаем паузу каждые loopSize итераций\n    if (Context.data.iterator! % loopSize === 0 \u0026\u0026 Context.data.iterator! !== 0) {\n        Context.data.is_pause = true;\n    } else {\n        Context.data.is_pause = false;\n    }\n\n    let employee = await Namespace.app.staff.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.individual_id_1c.eq(updatedTransferData[Context.data.iterator!].employeeIndividualId)\n    )).first();\n    let pos = await Namespace.app.position.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.ref_key.eq(updatedTransferData[Context.data.iterator!].newPositionId)\n    )).first();\n    let empDir = await Namespace.app.employment_directory.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.__id.eq(updatedTransferData[Context.data.iterator!].employmentDirectoryId as string)\n    )).first();\n\n    Context.data.current_employee = employee;\n    Context.data.new_position = pos;\n    Context.data.employment_directory = empDir;\n\n    Context.data.is_temporary = updatedTransferData[Context.data.iterator!].isTemporaryTransfer;\n    Context.data.end_transfer_date = undefined;\n    if (updatedTransferData[Context.data.iterator!].hasOwnProperty(\"endTransferDate\")) {\n        let datetime = new Datetime(updatedTransferData[Context.data.iterator!].endTransferDate as string);\n        Context.data.end_transfer_date = new TDate(datetime.year, datetime.month, datetime.day);\n    }\n}\n\n//очистка переменных для следующего цикла\nasync function clearVars(): Promise\u003cvoid\u003e {\n    Context.data.loop_end = false;\n    Context.data.current_employee = undefined;\n    Context.data.firing_date = undefined;\n    Context.data.is_pause = false;\n    Context.data.iterator = -1;\n    Context.data.end_transfer_date = undefined;\n\n    // const setting = await Namespace.app.settings.search().where((f, g) =\u003e g.and(\n    //     f.__deletedAt.eq(null),\n    //     f.code.eq('send_notification_about_the_ending_of_personnel_transfer')\n    // )).first();\n\n    // let notify = false;\n\n    // if (setting \u0026\u0026 setting.data.status) {\n    //     notify = setting.data.status;\n    // }\n\n    // if (notify === false) {\n    //     Context.data.fixedterm_data = JSON.stringify([]);\n    // }\n}\n\n///////////////////////////////////////////////////////////////////////////////helpers\n\n//задача 1261\nfunction formatPhoneNumber(phoneNumber: string, plus: boolean = true): string {\n\n    const startsWith = plus ? '+7' : '8';\n    let phone = phoneNumber.replace(/[^0-9]/g, '');\n    if (phone.startsWith('7') \u0026\u0026 plus) {\n        phone = phone.substring(1);\n    }\n    if (phone.startsWith('8')) {\n        phone = phone.substring(1);\n    }\n\n    return phone.replace(/(\\d{3})(\\d{3})(\\d{2})(\\d{2})/g, `${startsWith}$1$2$3$4`);\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "debugForm": {
      "allFields": false,
      "formFields": [
        {
          "code": "__name",
          "display": "Название",
          "tooltip": "Название экземпляра процесса, будет показываться в задачах",
          "readonly": false,
          "required": true
        }
      ]
    },
    "targetFeed": {
      "type": "object",
      "variable": "staff"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": true,
    "applicationContext": false,
    "importsDependencies": [],
    "useStartFormInDebug": true,
    "fieldVisibilityConditions": {
      "debug": {
        "enabled": false,
        "conditions": []
      },
      "staff": {
        "enabled": false,
        "conditions": []
      },
      "chunks": {
        "enabled": false,
        "conditions": []
      },
      "isPause": {
        "enabled": false,
        "conditions": []
      },
      "value_1": {
        "enabled": false,
        "conditions": []
      },
      "value_2": {
        "enabled": false,
        "conditions": []
      },
      "value_3": {
        "enabled": false,
        "conditions": []
      },
      "is_pause": {
        "enabled": false,
        "conditions": []
      },
      "iterator": {
        "enabled": false,
        "conditions": []
      },
      "loop_end": {
        "enabled": false,
        "conditions": []
      },
      "parttime": {
        "enabled": false,
        "conditions": []
      },
      "iteration": {
        "enabled": false,
        "conditions": []
      },
      "transfers": {
        "enabled": false,
        "conditions": []
      },
      "type_table": {
        "enabled": false,
        "conditions": []
      },
      "employee_id": {
        "enabled": false,
        "conditions": []
      },
      "error_stack": {
        "enabled": false,
        "conditions": []
      },
      "firing_data": {
        "enabled": false,
        "conditions": []
      },
      "firing_date": {
        "enabled": false,
        "conditions": []
      },
      "is_temporary": {
        "enabled": false,
        "conditions": []
      },
      "new_position": {
        "enabled": false,
        "conditions": []
      },
      "max_iteration": {
        "enabled": false,
        "conditions": []
      },
      "prev_position": {
        "enabled": false,
        "conditions": []
      },
      "created_staffs": {
        "enabled": false,
        "conditions": []
      },
      "employee_table": {
        "enabled": false,
        "conditions": []
      },
      "fixedterm_data": {
        "enabled": false,
        "conditions": []
      },
      "documents_table": {
        "enabled": false,
        "conditions": []
      },
      "positions_table": {
        "enabled": false,
        "conditions": []
      },
      "current_employee": {
        "enabled": false,
        "conditions": []
      },
      "is_main_worktype": {
        "enabled": false,
        "conditions": []
      },
      "new_staff_exists": {
        "enabled": false,
        "conditions": []
      },
      "prev_position_id": {
        "enabled": false,
        "conditions": []
      },
      "end_transfer_date": {
        "enabled": false,
        "conditions": []
      },
      "prev_position_date": {
        "enabled": false,
        "conditions": []
      },
      "all_staff_processed": {
        "enabled": false,
        "conditions": []
      },
      "firing_position_ref": {
        "enabled": false,
        "conditions": []
      },
      "personal_info_table": {
        "enabled": false,
        "conditions": []
      },
      "employment_directory": {
        "enabled": false,
        "conditions": []
      },
      "data_for_update_positions": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
