{
  "__id": "018f9fc7-fd1e-70f6-a12b-fe1a7a7a29f6",
  "namespace": "kedo.settings",
  "code": "initial_setting",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "(s) Первичная настройка решения \"КЭДО\"",
  "type": "bpmn",
  "draft": false,
  "version": 15,
  "context": [
    {
      "code": "types_of_material",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "directory_of_types_of_material_assistance",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "personnel_documents",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Вид справки",
        "data": {}
      }
    },
    {
      "code": "handbook_of_certificates",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "handbook_of_certificates",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "personnel_documents",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Настройка",
        "data": {}
      }
    },
    {
      "code": "settings",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "settings",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Вид трудовых отношений"
      }
    },
    {
      "code": "type_employment_relationship",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "type_employment_relationship",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Домен",
        "data": {}
      }
    },
    {
      "code": "domen",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Вид пособия",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "handbook_of_benefits",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "handbook_of_benefits",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "personnel_documents",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Вид материальной помощи",
        "data": {}
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-03-12T06:53:26.188075118Z",
  "__createdBy": "8b6393ab-540b-4559-8c18-7ef92a9cc24a",
  "__updatedAt": "2024-06-03T13:25:32.461401183Z",
  "__updatedBy": "40489035-c2e3-4dba-8113-51ef4cb9dad3",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 56,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "type": "start",
        "color": "#ffffff",
        "exits": ["40209ed5-b98c-46a5-b7bf-c419a0b050ae"],
        "width": 32,
        "height": 32,
        "settings": {
          "formCode": "form_4e70f540-54ad-4187-a3da-5a3620388ccb",
          "formFields": [],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Первичная настройка решения \"КЭДО\"",
          "titleGenerateMethod": "template"
        }
      },
      "08024105-997a-426c-87da-a6df46f73ebf": {
        "x": 32,
        "y": 144,
        "id": "08024105-997a-426c-87da-a6df46f73ebf",
        "icon": "script",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Формирование настроек",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["e9588273-8ca4-4bc8-bb84-2c987369fe13"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "createData_1",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "5b93de8c-b3e9-45e1-99cc-6732f28891f5": {
        "x": 944,
        "y": 424,
        "id": "5b93de8c-b3e9-45e1-99cc-6732f28891f5",
        "icon": "end",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "6d2e2f5c-3f06-4109-be4b-3ab5dd924376": {
        "x": 920,
        "y": 240,
        "id": "6d2e2f5c-3f06-4109-be4b-3ab5dd924376",
        "icon": "script",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Формирование настроек",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["fc256c16-3dd8-43d9-a150-6ee4f927e45b"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "createData_2",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "720a6c2f-5bea-4e5f-bcac-957428b524bf": {
        "x": 480,
        "y": 240,
        "id": "720a6c2f-5bea-4e5f-bcac-957428b524bf",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Создание статусов",
        "type": "call",
        "color": "#ffffff",
        "exits": ["b8e3b831-e97d-479d-b169-4b0cc883c0ce"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "fill_default_statuses_workflow",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.statuses",
          "subProcessTargetFieldCode": ""
        }
      },
      "95b777cf-ae65-4132-8b3c-b14b7c702ee8": {
        "x": 920,
        "y": 328,
        "id": "95b777cf-ae65-4132-8b3c-b14b7c702ee8",
        "icon": "notification",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Первичная настройка завершена",
        "type": "notification",
        "color": "#ffff66",
        "exits": ["66117f5a-1b8c-42c9-8d23-aaf5495ba29a"],
        "width": 80,
        "height": 64,
        "settings": {
          "author": {
            "code": "",
            "kind": "system"
          },
          "target": {
            "kind": "process"
          },
          "receivers": [
            {
              "kind": "current"
            }
          ],
          "messageHeader": "Первичная настройка решения \"КЭДО\" завершена"
        }
      },
      "b81fe533-b3f4-4eb0-bd05-9391a6d20aaa": {
        "x": 144,
        "y": 240,
        "id": "b81fe533-b3f4-4eb0-bd05-9391a6d20aaa",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Создание категорий сотрудников",
        "type": "call",
        "color": "#ffffff",
        "exits": ["76b8c121-2e1c-4fa5-ac12-7a6ecbb01c30"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "adding_default_categories",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.employees_categories",
          "subProcessTargetFieldCode": ""
        }
      },
      "c9df9502-d436-4877-b112-a55633e7f49a": {
        "x": 368,
        "y": 240,
        "id": "c9df9502-d436-4877-b112-a55633e7f49a",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Создание видов прочих документов трудоустройства",
        "type": "call",
        "color": "#ffffff",
        "exits": ["4404cc1e-a5ce-4c0b-b33b-8f880c691f85"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "fill_other_docs_default_types",
          "async": false,
          "input": [],
          "output": [],
          "linkCode": "",
          "namespace": "kedo.types_other_employment_docs",
          "subProcessTargetFieldCode": ""
        }
      },
      "d33a046c-02ac-44cb-b2f3-27779e927d7c": {
        "x": 808,
        "y": 240,
        "id": "d33a046c-02ac-44cb-b2f3-27779e927d7c",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Заполнение видов совмещений",
        "type": "call",
        "color": "#ffffff",
        "exits": ["5ba30e19-e7b0-4b50-b0c1-07272047e2ab"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "filling_types_combinations",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.types_combination",
          "subProcessTargetFieldCode": ""
        }
      },
      "ddb189ee-21b9-4bb5-96b6-7181ff8c2878": {
        "x": 32,
        "y": 240,
        "id": "ddb189ee-21b9-4bb5-96b6-7181ff8c2878",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Создание типов документов",
        "type": "call",
        "color": "#ffffff",
        "exits": ["f70f4d6b-972e-4483-8f18-88dddc4a2e5a"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "fill_default_types",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.documents_types",
          "subProcessTargetFieldCode": ""
        }
      },
      "efcfd5d8-bb3b-40b5-8e4a-c762c2126f9a": {
        "x": 696,
        "y": 240,
        "id": "efcfd5d8-bb3b-40b5-8e4a-c762c2126f9a",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Заполнение кадровых событий для справочника отмены документов",
        "type": "call",
        "color": "#ffffff",
        "exits": ["f2b1132b-568e-49ea-ad70-e96060e3bdc6"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "cancel_documents",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.settings_cancel_documents",
          "subProcessTargetFieldCode": ""
        }
      },
      "f909f92e-656e-4b94-af82-064eb0d5ed45": {
        "x": 592,
        "y": 240,
        "id": "f909f92e-656e-4b94-af82-064eb0d5ed45",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Заполнение видов персональных данных",
        "type": "call",
        "color": "#ffffff",
        "exits": ["135b158f-62df-473b-a0c0-236a681c4abb"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "create_type_personal_data",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.type_employees_personal_data",
          "subProcessTargetFieldCode": ""
        }
      },
      "ffd58c0b-d257-44bd-9df9-4c6fd6cfe8cd": {
        "x": 256,
        "y": 240,
        "id": "ffd58c0b-d257-44bd-9df9-4c6fd6cfe8cd",
        "lane": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Создание типов документов из 1С",
        "type": "call",
        "color": "#ffffff",
        "exits": ["617eed31-6be3-471d-a3ea-08913e19146c"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "create_docs_1c",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.document_types",
          "subProcessTargetFieldCode": ""
        }
      }
    },
    "lanes": {
      "d4a314c3-aa9e-4917-b50c-201858253c9d": {
        "x": 8,
        "y": 8,
        "id": "d4a314c3-aa9e-4917-b50c-201858253c9d",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 1260,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "135b158f-62df-473b-a0c0-236a681c4abb": {
        "id": "135b158f-62df-473b-a0c0-236a681c4abb",
        "name": "",
        "path": [
          {
            "x": 672,
            "y": 272
          },
          {
            "x": 696,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "f909f92e-656e-4b94-af82-064eb0d5ed45",
        "target": "efcfd5d8-bb3b-40b5-8e4a-c762c2126f9a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "40209ed5-b98c-46a5-b7bf-c419a0b050ae": {
        "id": "40209ed5-b98c-46a5-b7bf-c419a0b050ae",
        "name": "Запустить настройку",
        "path": [
          {
            "x": 72,
            "y": 104
          },
          {
            "x": 72,
            "y": 144
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "08024105-997a-426c-87da-a6df46f73ebf",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "4404cc1e-a5ce-4c0b-b33b-8f880c691f85": {
        "id": "4404cc1e-a5ce-4c0b-b33b-8f880c691f85",
        "name": "",
        "path": [
          {
            "x": 448,
            "y": 272
          },
          {
            "x": 480,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "c9df9502-d436-4877-b112-a55633e7f49a",
        "target": "720a6c2f-5bea-4e5f-bcac-957428b524bf",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "5ba30e19-e7b0-4b50-b0c1-07272047e2ab": {
        "id": "5ba30e19-e7b0-4b50-b0c1-07272047e2ab",
        "name": "",
        "path": [
          {
            "x": 888,
            "y": 272
          },
          {
            "x": 920,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "d33a046c-02ac-44cb-b2f3-27779e927d7c",
        "target": "6d2e2f5c-3f06-4109-be4b-3ab5dd924376",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "617eed31-6be3-471d-a3ea-08913e19146c": {
        "id": "617eed31-6be3-471d-a3ea-08913e19146c",
        "name": "",
        "path": [
          {
            "x": 336,
            "y": 272
          },
          {
            "x": 368,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "ffd58c0b-d257-44bd-9df9-4c6fd6cfe8cd",
        "target": "c9df9502-d436-4877-b112-a55633e7f49a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "66117f5a-1b8c-42c9-8d23-aaf5495ba29a": {
        "id": "66117f5a-1b8c-42c9-8d23-aaf5495ba29a",
        "name": "",
        "path": [
          {
            "x": 960,
            "y": 392
          },
          {
            "x": 960,
            "y": 424
          }
        ],
        "type": "plain",
        "source": "95b777cf-ae65-4132-8b3c-b14b7c702ee8",
        "target": "5b93de8c-b3e9-45e1-99cc-6732f28891f5",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "76b8c121-2e1c-4fa5-ac12-7a6ecbb01c30": {
        "id": "76b8c121-2e1c-4fa5-ac12-7a6ecbb01c30",
        "name": "",
        "path": [
          {
            "x": 224,
            "y": 272
          },
          {
            "x": 256,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "b81fe533-b3f4-4eb0-bd05-9391a6d20aaa",
        "target": "ffd58c0b-d257-44bd-9df9-4c6fd6cfe8cd",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "b8e3b831-e97d-479d-b169-4b0cc883c0ce": {
        "id": "b8e3b831-e97d-479d-b169-4b0cc883c0ce",
        "name": "",
        "path": [
          {
            "x": 560,
            "y": 272
          },
          {
            "x": 592,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "720a6c2f-5bea-4e5f-bcac-957428b524bf",
        "target": "f909f92e-656e-4b94-af82-064eb0d5ed45",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e9588273-8ca4-4bc8-bb84-2c987369fe13": {
        "id": "e9588273-8ca4-4bc8-bb84-2c987369fe13",
        "name": "",
        "path": [
          {
            "x": 72,
            "y": 208
          },
          {
            "x": 72,
            "y": 240
          }
        ],
        "type": "plain",
        "source": "08024105-997a-426c-87da-a6df46f73ebf",
        "target": "ddb189ee-21b9-4bb5-96b6-7181ff8c2878",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "f2b1132b-568e-49ea-ad70-e96060e3bdc6": {
        "id": "f2b1132b-568e-49ea-ad70-e96060e3bdc6",
        "name": "",
        "path": [
          {
            "x": 776,
            "y": 272
          },
          {
            "x": 808,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "efcfd5d8-bb3b-40b5-8e4a-c762c2126f9a",
        "target": "d33a046c-02ac-44cb-b2f3-27779e927d7c",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "f70f4d6b-972e-4483-8f18-88dddc4a2e5a": {
        "id": "f70f4d6b-972e-4483-8f18-88dddc4a2e5a",
        "name": "",
        "path": [
          {
            "x": 112,
            "y": 272
          },
          {
            "x": 144,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "ddb189ee-21b9-4bb5-96b6-7181ff8c2878",
        "target": "b81fe533-b3f4-4eb0-bd05-9391a6d20aaa",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "fc256c16-3dd8-43d9-a150-6ee4f927e45b": {
        "id": "fc256c16-3dd8-43d9-a150-6ee4f927e45b",
        "name": "",
        "path": [
          {
            "x": 960,
            "y": 304
          },
          {
            "x": 960,
            "y": 328
          }
        ],
        "type": "plain",
        "source": "6d2e2f5c-3f06-4109-be4b-3ab5dd924376",
        "target": "95b777cf-ae65-4132-8b3c-b14b7c702ee8",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\n\nasync function createData_1(): Promise\u003cvoid\u003e {\n    await createSettings();\n    await createRegions();\n    await createTypesDocs();\n    await createCustomGenerateDocs();\n    await createAdditionalWeekendsAndHolidays();\n}\n\nasync function createData_2(): Promise\u003cvoid\u003e {\n    await setEmployeeWithoutRestrictions();\n    await createBenefits();\n    await createTypeOfMaterial();\n    await createTypeEmploymentRelationship();\n    await createReasonsTemporaryTransfer();\n    await createWorkShedules();\n    await createdCertificates();\n    await createSupervisorElement()\n}\n\nasync function createSettings(): Promise\u003cvoid\u003e {\n    interface setting {\n        name: string,\n        code: string,\n        value?: string,\n        status?: boolean,\n        description?: string,\n        quantity?: number,\n    }\n    const settings: setting[] = [\n        {\n            name: 'Использовать Личный кабинет (КЭДО 2.0)',\n            code: 'use_my_profile',\n            status: false\n        },\n        {\n            name: 'Проектные статусы командировок',\n            code: 'business_trips_custom_status',\n            status: false\n        },\n        {\n            name: 'Адрес площадки',\n            code: 'domen',\n            value: Context.data.domen\n        },\n        {\n            name: \"Api-ключ для методов в модуле\",\n            code: \"api_key\"\n        },\n        {\n            name: \"Проектные коды приложений для разграничения доступа\",\n            code: \"custom_app_codes\",\n            description: \"Настройка для разграничения доступа к проектным приложениям, для корректной работы заполните поле Значение кодами приложений через запятую. У ваших приложений должно быть свойство типа Приложение с кодом staff и ссылкой на приложение Сотрудники и свойство типа Роль с кодом access_group, также в настройках доступа тех приложений, которые указаны в свойстве Значение данного элемента, необходимо добавить строку с разграничением доступа, выбрав объектом для назначения прав доступа свойство приложения с кодом access_group\"\n        },\n        {\n            name: \"Проектная карточка с информацией на портале\",\n            code: \"alternate_contacts_info\",\n            status: false\n        },\n        {\n            name: \"Периодичность отправки уведомления о подписании заявки инициатору\",\n            code: \"remind_interval\",\n            quantity: 20,\n            status: true,\n            description: 'Данным параметром настраивается напоминание и периодичность его повторения о том что сотрудник после создания заявки не подписал печатный образ заявления/служебной записки. Значение в минутах. Напоминание происходит только в рабочие часы.'\n        },\n        {\n            name: 'Проектный процесс определение руководителя',\n            code: 'custom_definition_head',\n            status: false,\n        },\n        {\n            name: 'Использовать модуль Интеграция с УЦ для выдачи НЭП',\n            code: 'new_method_create_sign',\n            status: false,\n            description: \"При включении данного параметра выдача НЭП происходит через модуль “Интеграция с УЦ”, который поддерживает одновременную работу с разными удостоверяющими центрами (УЦ)\"\n        },\n        {\n            name: 'Проектный процесс создания пользователей',\n            code: 'alternative_user_creation',\n            status: false,\n        },\n        {\n            name: \"Проектный процесс оповещения\",\n            code: \"alternate_notifications\",\n            status: false\n        },\n        {\n            name: 'Подключен раздел отпусков',\n            code: 'podklyuchen_razdel_otpuskov',\n            status: false\n        },\n        {\n            name: 'Подключен раздел командировок',\n            code: 'travel_section_added',\n            status: false\n        },\n        {\n            name: 'Срок оповещения отдела кадров о неподписании приказа сотрудником',\n            code: 'notify_deadline_hr_dep',\n            status: true,\n            quantity: 8,\n            description: 'Срок оповещения отдела кадров о неподписании приказа сотрудником. Указывается в рабочих часах.',\n        },\n        {\n            name: 'Срок оповещения руководителя о неподписании приказа сотрудником',\n            code: 'notify_deadline_chief',\n            status: true,\n            quantity: 12,\n            description: 'Срок оповещения руководителя о неподписании приказа сотрудником. Указывается в рабочих часах.'\n        },\n        {\n            name: 'Периодичность отправки уведомления сотруднику',\n            code: 'remind_frequency',\n            status: true,\n            quantity: 8,\n            description: 'Частота отправки уведомлений сотруднику о каких-либо задачах, документах и т.д. в рамках бизнес-процесса. Указывается время в часах.',\n        },\n        {\n            name: \"Участие бухгалтерии в процессах\",\n            code: \"accounting_in_processes\",\n            status: false\n        },\n        {\n            name: 'Срок уведомления отдела кадров об окончании действия трудового договора/доп.соглашения',\n            code: 'days_to_warn_hrs_about_fixedterm_contract',\n            status: true,\n            quantity: 5,\n        },\n        {\n            name: \"Массовое приглашение сотрудников. Трудоустроен\",\n            code: \"mass_invitation_employed\",\n            status: true\n        },\n        {\n            name: \"Массовое приглашение сотрудников. Требуется выпуск НЭП\",\n            code: \"mass_invitation_need_signature\",\n            status: true\n        },\n        {\n            name: \"Массовое приглашение сотрудников. Требуется согласие на обработку ПДн\",\n            code: \"mass_invitation_need_consent_data_processing\",\n            status: false\n        },\n        {\n            name: \"Массовое приглашение сотрудников. Личные данные вносит сотрудник\",\n            code: \"mass_invitation_personal_data_entered_employee\",\n            status: false\n        },\n        {\n            name: \"Массовое приглашение сотрудников. Требуется прикрепить сканы документов\",\n            code: \"mass_invitation_need_attach_scans_documents\",\n            status: false\n        },\n        {\n            name: \"Массовое приглашение сотрудников. СоЭВ подписывается в офисе\",\n            code: \"mass_invitation_agreement_signed_in_office\",\n            status: true\n        },\n        {\n            name: \"Эскалация завершения увольнения на отдел кадров\",\n            code: \"dismissal_escalation_hr\",\n            description: \"За какое время в рабочих часах будет автоматически завершаться задача сотрудника о необходимости передать приказ в отдел кадров\",\n            quantity: 4,\n        },\n        {\n            name: \"Срок в задаче кандидата подписать документы трудоустройства\",\n            code: \"deadline_candidate_task_sign_employment_documents\",\n            description: \"Количество рабочих часов на задачу подписания документов для трудоустройства сотрудником\",\n            quantity: 16,\n        },\n        {\n            name: \"Дополнительные документы предоставляемые в оригинале при трудоустройстве\",\n            code: \"documents_submitted_original\",\n            description: \"В данном параметре текстом перечисляются документы регистрации на портале КЭДО / трудоустройства, оригиналы которых необходимо передавать в бумаге. Указывать документы СоЭВ, Уведомление о переходе на КЭДО и Согласие на КЭДО в данном параметре не нужно.\",\n            value: '',\n        },\n        {\n            name: \"Контролировать получение бумажных оригиналов\",\n            code: \"control_receipt_paper_originals_during_employment\",\n            description: \"Данный параметр во всех процессах активирует дополнительные задачи сотруднику и специалисту отдела кадров подтвердить получение оригиналов документов\",\n            status: false,\n        },\n        {\n            name: \"Срок подтверждения передачи оригиналов документов работодателю\",\n            code: \"deadline_confirming_transfer_original_documents_employer\",\n            description: \"Количество рабочих дней для подтверждения передачи оригинала документов работодателю сотрудником\",\n            quantity: 3,\n        },\n        {\n            name: \"Срок подтверждения получения оригиналов документов от сотрудника\",\n            code: \"deadline_confirming_receipt_original_documents_from_employee\",\n            description: \"Количество рабочих дней для подтверждения получения оригинала документов работодателем от сотрудника\",\n            quantity: 10,\n        },\n        {\n            name: \"Отправлять уведомления об окончании перевода/срочного трудового договора\",\n            code: \"send_notification_about_the_ending_of_personnel_transfer\",\n            description: \"Данный параметр отвечает за отправку уведомлений об окончании переводов/срочных трудовых договоров\",\n            status: false,\n        },\n        {\n            name: \"Требуется уведомление о подписании документов работодателю\",\n            code: \"head_signing_notification\",\n            description: \"Данный параметр отвечает за отправку уведомлений  о подписании приказов, дополнительных соглашений, прочих документов работодателю\",\n            status: false,\n        },\n        {\n            name: \"Автоматический перевыпуск сертификатов (ЭП)\",\n            code: \"automatic_reissue_certificates\",\n            description: \"За сколько дней до окончания срока действия сертификата автоматически будет запущен процесс перевыпуска\",\n            quantity: 7,\n            status: false,\n        },\n\n    ];\n\n    const integration_settings: setting[] = [\n        {\n            name: 'Интеграция с учетной системой',\n            code: 'integration_1c',\n            status: false\n        },\n        {\n            name: 'Использовать 1C как мастер-систему',\n            code: 'use_alternative_integration',\n            status: false\n        },\n        {\n            name: 'Использовать альтернативную учетную систему',\n            code: 'use_alternative_system',\n            status: false\n        },\n    ]\n\n    const allSettings = await Application.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    const folders = await Application.getFolders();\n    const myFolders = folders.find(f =\u003e f.name == 'Общие');\n    for (const setting of settings) {\n        const currentSetting = allSettings.find(f =\u003e f.data.code == setting.code);\n\n        if (!currentSetting) {\n            const newSetting = Application.create();\n            newSetting.data.__name = setting.name;\n            newSetting.data.code = setting.code;\n            newSetting.data.value = setting.value;\n            newSetting.data.status = setting.status;\n            newSetting.data.quantity = setting.quantity;\n            newSetting.data.description = setting.description;\n            newSetting.data.__directory = []; // инициализировать переменную\n            newSetting.data.__directory.id = myFolders ? myFolders.id : undefined;\n            promises.push(newSetting.save())\n        } else {\n            if (setting.value \u0026\u0026 !currentSetting.data.value) currentSetting.data.value = setting.value;\n            if (setting.quantity \u0026\u0026 !currentSetting.data.quantity) currentSetting.data.quantity = setting.quantity;\n            if (setting.description \u0026\u0026 !currentSetting.data.description) currentSetting.data.description = setting.description;\n            promises.push(currentSetting.save());\n        }\n    }\n\n    let integrationFolder = folders.find(f =\u003e f.name == 'Настройки интеграции');\n\n    if (!integrationFolder) {\n        integrationFolder = await Application.createFolder('Настройки интеграции');\n    }\n\n    for (const setting of integration_settings) {\n        if (!allSettings.find(f =\u003e f.data.code == setting.code)) {\n            const newSetting = Application.create();\n            newSetting.data.__name = setting.name;\n            newSetting.data.code = setting.code;\n            newSetting.data.value = setting.value;\n            newSetting.data.status = setting.status;\n            newSetting.data.description = setting.description;\n            newSetting.data.quantity = setting.quantity;\n            newSetting.data.__directory = []; // инициализировать переменную\n            newSetting.data.__directory.id = integrationFolder ? integrationFolder.id : undefined;\n            promises.push(newSetting.save())\n        }\n    }\n\n    await Promise.all(promises)\n}\n\nasync function createRegions(): Promise\u003cvoid\u003e {\n    interface region {\n        name: string,\n        code: number\n    }\n    const regions: region[] = [\n        {\n            name: 'Краснодарский Край',\n            code: 23,\n        },\n        {\n            name: 'Рязанская Область',\n            code: 62,\n        },\n        {\n            name: 'Томская Область',\n            code: 70,\n        },\n        {\n            name: 'Ульяновская Область',\n            code: 73,\n        },\n        {\n            name: 'Москва Город',\n            code: 77,\n        },\n        {\n            name: 'Калмыкия Республика',\n            code: 8,\n        },\n        {\n            name: 'Оренбургская Область',\n            code: 56,\n        },\n        {\n            name: 'Смоленская Область',\n            code: 67,\n        },\n        {\n            name: 'Чувашская Республика - Чувашия',\n            code: 21,\n        },\n        {\n            name: 'Белгородская Область',\n            code: 31,\n        },\n        {\n            name: 'Пензенская Область',\n            code: 58,\n        },\n        {\n            name: 'Курская Область',\n            code: 46,\n        },\n        {\n            name: 'Волгоградская Область',\n            code: 34,\n        },\n        {\n            name: 'Дагестан Республика',\n            code: 5,\n        },\n        {\n            name: 'Чукотский Автономный округ',\n            code: 87,\n        },\n        {\n            name: 'Челябинская Область',\n            code: 74,\n        },\n        {\n            name: 'Северная Осетия - Алания Республика',\n            code: 15,\n        },\n        {\n            name: 'Ингушетия Республика',\n            code: 6,\n        },\n        {\n            name: 'Камчатский Край',\n            code: 41,\n        },\n        {\n            name: 'Крым Республика',\n            code: 91,\n        },\n        {\n            name: 'Севастополь Город',\n            code: 92,\n        },\n        {\n            name: 'Сахалинская Область',\n            code: 65,\n        },\n        {\n            name: 'Адыгея Республика',\n            code: 1,\n        },\n        {\n            name: 'Алтай Республика',\n            code: 4,\n        },\n        {\n            name: 'Кемеровская Область',\n            code: 42,\n        },\n        {\n            name: 'Брянская Область',\n            code: 32,\n        },\n        {\n            name: 'Владимирская Область',\n            code: 33,\n        },\n        {\n            name: 'Коми Республика',\n            code: 11,\n        },\n        {\n            name: 'Липецкая Область',\n            code: 48,\n        },\n        {\n            name: 'Калужская Область',\n            code: 40,\n        },\n        {\n            name: 'Санкт-Петербург Город',\n            code: 78,\n        },\n        {\n            name: 'Пермский Край',\n            code: 59,\n        },\n        {\n            name: 'Ивановская Область',\n            code: 37,\n        },\n        {\n            name: 'Мордовия Республика',\n            code: 13,\n        },\n        {\n            name: 'Нижегородская Область',\n            code: 52,\n        },\n        {\n            name: 'Приморский Край',\n            code: 25,\n        },\n        {\n            name: 'Амурская Область',\n            code: 28,\n        },\n        {\n            name: 'Байконур Город',\n            code: 99,\n        },\n        {\n            name: 'Саха /Якутия/ Республика',\n            code: 14,\n        },\n        {\n            name: 'Корякский Автономный округ',\n            code: 82,\n        },\n        {\n            name: 'Московская Область',\n            code: 50,\n        },\n        {\n            name: 'Воронежская Область',\n            code: 36,\n        },\n        {\n            name: 'Хабаровский Край',\n            code: 27,\n        },\n        {\n            name: 'Новосибирская Область',\n            code: 54,\n        },\n        {\n            name: 'Эвенкийский Автономный округ',\n            code: 88,\n        },\n        {\n            name: 'Архангельская Область',\n            code: 29,\n        },\n        {\n            name: 'Карачаево-Черкесская Республика',\n            code: 9,\n        },\n        {\n            name: 'Ленинградская Область',\n            code: 47,\n        },\n        {\n            name: 'Тюменская Область',\n            code: 72,\n        },\n        {\n            name: 'Башкортостан Республика',\n            code: 2,\n        },\n        {\n            name: 'Ярославская Область',\n            code: 76,\n        },\n        {\n            name: 'Карелия Республика',\n            code: 10,\n        },\n        {\n            name: 'Тамбовская Область',\n            code: 68,\n        },\n        {\n            name: 'Псковская Область',\n            code: 60,\n        },\n        {\n            name: 'Тверская Область',\n            code: 69,\n        },\n        {\n            name: 'Ростовская Областьь',\n            code: 61,\n        },\n        {\n            name: 'Омская Область',\n            code: 55,\n        },\n        {\n            name: 'Вологодская Область',\n            code: 35,\n        },\n        {\n            name: 'Костромская Область',\n            code: 44,\n        },\n        {\n            name: 'Иркутская обл Усть-Ордынский Бурятский Округ',\n            code: 85,\n        },\n        {\n            name: 'Самарская Область',\n            code: 63,\n        },\n        {\n            name: 'Чеченская Республика',\n            code: 20,\n        },\n        {\n            name: 'Магаданская Область',\n            code: 49,\n        },\n        {\n            name: 'Свердловская Область',\n            code: 66,\n        },\n        {\n            name: 'Кабардино-Балкарская Республика',\n            code: 7,\n        },\n        {\n            name: 'Бурятия Республика',\n            code: 3,\n        },\n        {\n            name: 'Тульская Область',\n            code: 71,\n        },\n        {\n            name: 'Коми-Пермяцкий Автономный округ',\n            code: 81,\n        },\n        {\n            name: 'Курганская Область',\n            code: 45,\n        },\n        {\n            name: 'Тыва Республика',\n            code: 17,\n        },\n        {\n            name: 'Ханты-Мансийский Автономный округ - Югра Автономный округ',\n            code: 86,\n        },\n        {\n            name: 'Марий Эл Республика',\n            code: 12,\n        },\n        {\n            name: 'Удмуртская Республика',\n            code: 18,\n        },\n        {\n            name: 'Татарстан Республика',\n            code: 16,\n        },\n        {\n            name: 'Иркутская Область',\n            code: 38,\n        },\n        {\n            name: 'Таймырский (Долгано-Ненецкий) Автономный округ',\n            code: 84,\n        },\n        {\n            name: 'Алтайский Край',\n            code: 22,\n        },\n        {\n            name: 'Астраханская Область',\n            code: 30,\n        },\n        {\n            name: 'Ненецкий Автономный округ',\n            code: 83,\n        },\n        {\n            name: 'Красноярский Край',\n            code: 24,\n        },\n        {\n            name: 'Забайкальский край Агинский Бурятский Округ',\n            code: 80,\n        },\n        {\n            name: 'Орловская Область',\n            code: 57,\n        },\n        {\n            name: 'Мурманская Область',\n            code: 51,\n        },\n        {\n            name: 'Новгородская Область',\n            code: 53,\n        },\n        {\n            name: 'Кировская Область',\n            code: 43,\n        },\n        {\n            name: 'Забайкальский Край',\n            code: 75,\n        },\n        {\n            name: 'Хакасия Республика',\n            code: 19,\n        },\n        {\n            name: 'Еврейская Автономная область',\n            code: 79,\n        },\n        {\n            name: 'Ямало-Ненецкий Автономный округ',\n            code: 89,\n        },\n        {\n            name: 'Ставропольский Край',\n            code: 26,\n        },\n        {\n            name: 'Калининградская Область',\n            code: 39,\n        },\n        {\n            name: 'Саратовская Область',\n            code: 64,\n        },\n    ]\n    const allSettings = await Namespace.app.directory_of_regions.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    let promises: Promise\u003cvoid\u003e[] = [];\n    for (const region of regions) {\n        if (!allSettings.find(f =\u003e f.data.the_code == region.code)) {\n            const newRegion = Namespace.app.directory_of_regions.create();\n            newRegion.data.__name = region.name;\n            newRegion.data.the_code = region.code;\n            promises.push(newRegion.save())\n        }\n        if (promises.length \u003e= 20) {\n            await Promise.all(promises);\n            promises = []\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function createTypesDocs(): Promise\u003cvoid\u003e {\n    interface doc {\n        name: string,\n        deleted: boolean,\n        description?: string,\n        default: boolean,\n        required: boolean,\n        required_for_candidate?: boolean\n    }\n    const docs: doc[] = [\n        {\n            name: 'Паспорт. Страница с фото и данными',\n            deleted: true,\n            default: true,\n            required: true,\n            required_for_candidate: true\n        },\n        {\n            name: 'Паспорт. Страница с регистрацией',\n            deleted: true,\n            default: true,\n            required: true,\n            required_for_candidate: true,\n        },\n        {\n            name: 'ТК или СТД-Р',\n            deleted: false,\n            default: true,\n            required: false,\n            required_for_candidate: true,\n        },\n        {\n            name: 'СНИЛС',\n            deleted: true,\n            default: true,\n            required: false,\n            required_for_candidate: true,\n        },\n        {\n            name: 'ИНН',\n            deleted: true,\n            default: true,\n            required: false,\n            required_for_candidate: false,\n        },\n        {\n            name: 'Военный билет или приписное свидетельство',\n            deleted: true,\n            default: true,\n            required: false,\n            required_for_candidate: false,\n        },\n        // {\n        //     name: 'Свидетельство о рождении детей (при наличии до 18 лет)',\n        //     deleted: true,\n        //     default: false,\n        //     required: false,\n        //     required_for_candidate: false,\n        // },\n        {\n            name: 'Диплом об образовании',\n            deleted: true,\n            default: false,\n            required: true,\n            required_for_candidate: false,\n        },\n        {\n            name: 'Водительское удостоверение',\n            deleted: true,\n            default: false,\n            required: true\n        },\n        {\n            name: 'Водительская медкомиссия',\n            deleted: true,\n            default: false,\n            required: true\n        },\n        {\n            name: 'Свидетельство о рождении детей',\n            deleted: true,\n            description: 'Свидетельство о рождении (усыновлении) ребенка либо документ, подтверждающий установление опеки, попечительства над ребенком-инвалидом',\n            default: false,\n            required: false\n        },\n        {\n            name: 'Документ о месте жительства ребёнка-инвалида',\n            deleted: false,\n            description: 'Документы, подтверждающие место жительства (пребывания или фактического проживания) ребенка-инвалида',\n            default: false,\n            required: false\n        },\n        {\n            name: 'Справка об установлении инвалидности',\n            deleted: true,\n            description: 'Справка, подтверждающая факт установления инвалидности, выданная бюро (главным бюро, Федеральным бюро) медико-социальной экспертизы',\n            default: false,\n            required: false\n        },\n        {\n            name: 'Удостоверение/дипломы о повышении квалификации',\n            deleted: true,\n            default: false,\n            required: true,\n            required_for_candidate: false,\n        },\n        {\n            name: 'Справка о наличии или отсутствии судимости у соискателя',\n            deleted: true,\n            description: '',\n            default: false,\n            required: true\n        },\n        {\n            name: 'Справка о наличии или отсутствии административных наказаний за употребление наркотических средств (психотропных веществ) без назначения врача',\n            deleted: true,\n            description: '',\n            default: false,\n            required: true\n        },\n        {\n            name: 'Результаты медосмотра',\n            deleted: true,\n            description: '',\n            default: false,\n            required: true\n        },\n        {\n            name: 'Паспорт иностранного гражданина',\n            deleted: true,\n            description: '',\n            default: false,\n            required: true\n        },\n        {\n            name: 'Миграционная карта',\n            deleted: true,\n            description: '',\n            default: false,\n            required: true\n        },\n        {\n            name: 'Разрешение на временное проживание или вид на жительство',\n            deleted: true,\n            description: '',\n            default: false,\n            required: true\n        },\n        {\n            name: 'Разрешение на работу или патент',\n            deleted: true,\n            description: '',\n            default: false,\n            required: true\n        },\n        {\n            name: 'ДМС',\n            deleted: true,\n            description: '',\n            default: false,\n            required: true\n        },\n        {\n            name: 'Согласие на обработку персональных данных (подписанное собственноручно)',\n            deleted: true,\n            description: '',\n            default: true,\n            required: true\n        },\n    ]\n    const allSettings = await Namespace.app.types_documents_for_employment.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    for (const doc of docs) {\n        if (!allSettings.find(f =\u003e f.data.__name == doc.name)) {\n            const newDoc = Namespace.app.types_documents_for_employment.create();\n            newDoc.data.__name = doc.name;\n            newDoc.data.deleted = doc.deleted;\n            newDoc.data.default = doc.default;\n            newDoc.data.required = doc.required;\n            newDoc.data.description = doc.description;\n            promises.push(newDoc.save())\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function createCustomGenerateDocs(): Promise\u003cvoid\u003e {\n    interface doc {\n        name: string,\n        code: string,\n        status: boolean,\n    }\n    const docs: doc[] = [\n        {\n            name: 'Проектная генерация заявления на выплату пособия',\n            code: 'custom_generate_benefit_doc',\n            status: false\n        },\n        {\n            name: 'Проектная генерация заявления на мат.помощь',\n            code: 'custom_generate_financial_assistance_doc',\n            status: false\n        },\n        {\n            name: 'Проектная генерация заявления на увольнение',\n            code: 'custom_generate_resignation_letter',\n            status: false\n        },\n        {\n            name: 'Проектная генерация заявления/служебной записки на перевод',\n            code: 'custom_generate_transfer_application',\n            status: false\n        },\n        {\n            name: 'Проектная генерация служебной записки на ИО',\n            code: 'custom_generate_execution_duties',\n            status: false\n        },\n        {\n            name: 'Проектная генерация заявления на изменение ПДн',\n            code: 'custom_generate_personal_data_doc',\n            status: false\n        },\n\n    ]\n    const folders = await Application.getFolders();\n    const myFolders = folders.find(f =\u003e f.name === 'КЭДО - Базовый пакет');\n    const allSettings = await Application.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    for (const doc of docs) {\n        if (!allSettings.find(f =\u003e f.data.code === doc.code)) {\n            const newDoc = Application.create();\n            newDoc.data.__name = doc.name;\n            newDoc.data.code = doc.code;\n            newDoc.data.status = doc.status;\n            newDoc.data.__directory = []; // инициализировать переменную\n            newDoc.data.__directory.id = myFolders ? myFolders.id : undefined;\n            promises.push(newDoc.save());\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function setEmployeeWithoutRestrictions(): Promise\u003cvoid\u003e {\n    const emoloyee = await Namespace.app.employees_categories.search()\n        .size(10000)\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.code.eq('default')\n        ))\n        .first()\n\n    if (emoloyee) {\n        interface setting {\n            name: string,\n            code: string,\n            feature?: TRefItem,\n            quantity?: number,\n            status?: boolean,\n            description?: string\n        }\n        const settings: setting[] = [\n            {\n                name: 'Категория сотрудников по умолчанию',\n                code: 'employee_category',\n                feature: emoloyee\n            },\n            {\n                name: 'Медосмотры - количество дней до начала выборки',\n                code: 'med_start_days',\n                quantity: 30\n            },\n            {\n                name: 'Медосмотры - интервал выборки (дни)',\n                code: 'med_interval_days',\n                quantity: 14\n            },\n            {\n                name: 'Создание и подписаниe заявления о трудоустройстве',\n                code: 'app_employment',\n                status: false\n            },\n            {\n                name: 'Медосмотр при приеме и переводе сотрудника',\n                code: 'med_exam_process',\n                status: false\n            },\n            {\n                name: 'Подписание СЗ/Заявления руководителем организации',\n                code: 'director_signing',\n                status: false\n            },\n            {\n                name: 'Создание и подписание приказа о приёме',\n                code: 'admission_order',\n                status: true\n            },\n            {\n                name: 'Создание и подписание заявления о предоставлении сведений о трудовой деятельности',\n                code: 'information_about_labor_activity',\n                status: false\n            },\n            {\n                name: 'Проектная генерация документов трудоустройства',\n                code: 'generation_labor_documents',\n                status: false\n            },\n            {\n                name: 'Генерация дополнительных документов для трудоустройства',\n                code: 'additional_documents_for_employment',\n                status: false\n            },\n            {\n                name: 'Проверка сгенерированных документов трудоустройства',\n                code: 'checking_generated_documents',\n                status: true\n            },\n            {\n                name: 'Проектный процесс ознакомления с ЛНА',\n                code: 'custom_lna',\n                status: false\n            },\n            {\n                name: 'Максимальный суммарный процент доплат за ИО',\n                code: 'max_total_percent_substitution',\n                status: false,\n                quantity: 0\n            },\n            {\n                name: 'Распознавание документов',\n                code: 'document_recognition',\n                status: false,\n                description: \"Параметр адаптирует процесс работы с кандидатом, трудоустройство и изменения ПДн под шаги с распознаванием приложенных сканов документов.\",\n            },\n            {\n                name: 'Срок заполнения анкеты кандидатом',\n                code: 'deadline_filling_questionnaire_candidate',\n                description: \"Параметр регулирует время на заполнение анкеты кандидатом в календарных днях от момента его приглашения на портал.\",\n                quantity: 4\n            },\n            {\n                name: 'Срок проверки и ознакомления этапов рассмотрения кандидата',\n                code: 'period_verification_consideration_candidate',\n                description: \"Параметр регулирует время на принятие решение по кандидату в календарных днях в случае если не заполнена анкета в срок, если кандидат отказался на одном из шагов прохождение\",\n                quantity: 2\n            },\n            {\n                name: 'Срок принятия финального решения о кандидате',\n                code: 'deadline_making_final_decision_candidate',\n                description: \"Параметр регулирует время на принятие финального решения о кандидате\",\n                quantity: 5\n            },\n            {\n                name: 'Срок подписания предложения о работе',\n                code: 'deadline_signing_job_offer',\n                description: \"Параметр регулирует время на подписание предложения о работе кандидатом.\",\n                quantity: 4\n            },\n            {\n                name: 'Проверка службой безопасности',\n                code: 'security_check',\n                status: true,\n                quantity: 4,\n                description: \"Параметр влияет на наличие дополнительного шага о проверке кандидата службой безопасности, а также регулирует время на проверку кандидата в процессе Работа с кандидатом.\",\n            },\n            {\n                name: 'Срок формирования документов для кандидата',\n                code: 'deadline_formation_documents_candidate',\n                description: \"Параметр регулирует время на формирования направления на медосмотр и формирование предложения о работе в процессе Работа с кандидатом\",\n                quantity: 3\n            },\n            {\n                name: 'Открытие счета через работодателя',\n                code: 'opening_account_employer',\n                status: false,\n                description: \"Параметр влияет возможность открытия лицевого счёта через работодателя в процессе Работа с кандидатом.\",\n            },\n            {\n                name: 'Дата напоминания о трудоустройстве кандидату',\n                code: 'date_reminder_employment_candidate',\n                description: \"Параметр регулирует количество дней до трудоустройства, когда должно быть направлено напоминание письмом кандидату\",\n                quantity: 5\n            },\n            {\n                name: 'Срок отображения портала у кандидата после завершения рассмотрения',\n                code: 'period_displaying_portal_candidate_after_completion_review',\n                description: \"Параметр определяет время, в течение которого отклоненный кандидат имеет доступ к порталу до блокировки.\",\n                quantity: 5\n            },\n            {\n                name: 'Выбирать ответственного за трудоустройство',\n                code: 'select_person_responsible_employment',\n                status: true,\n                description: \"Параметр определяет наличие дополнительной функции выбора ответственного за трудоустройство сотрудника в процесса `Работа с кандидатом` в шаге после подтверждения кандидатом предложения о работе.\",\n            },\n            {\n                name: 'Срок предоставления дополнительных данных для трудоустройства и их проверки',\n                code: 'deadline_providing_additional_information_employment_and_verifying',\n                description: \"Параметр время выполнения задачи предоставления дополнительных данных кандидатом в процессе `Работа с кандидатом`\",\n                quantity: 1\n            },\n            {\n                name: 'Срок запроса дополнительных данных для трудоустройства',\n                code: 'deadline_requesting_additional_information_employment',\n                description: \"Параметр регулирует срок, за сколько дней до трудоустройства ответственному за прием приходит задача `Запросить доп. данные для трудоустройства` и определяет время выполнения этой задачи в процессе `Работа с кандидатом`\",\n                quantity: 2\n            },\n            {\n                name: 'Медицинский осмотр. Требуется приложить направление и сообщить даты прохождения',\n                code: 'medical_checkup_required_attach_direction_indicate_dates_passage',\n                status: false,\n                quantity: 7,\n                description: \"Параметр регулирует наличие шагов Медицинского осмотра: Формирование направления и указание кандидатом дат прохождения медосмотра. При включенном параметре процесс идет по ветке `Медосмотр нужен`. Имеет приоритет при одновременно включенном параметре `Медицинский осмотр. Требуется сообщить даты прохождения`. Дополнительно регулируется срок прохождения медосмотра кандидатом.\",\n            },\n            {\n                name: 'Медицинский осмотр. Требуется сообщить даты прохождения',\n                code: 'medical_checkup_dates_required',\n                status: false,\n                quantity: 7,\n                description: \"Параметр регулирует наличие шагов Медицинского осмотра: указание кандидатом дат прохождения медосмотра. При включенном параметре процесс идет по ветке `Медосмотр нужен`. Не имеет приоритета при одновременно включенном параметре `Медицинский осмотр. Требуется приложить направление и сообщить даты прохождения`. Дополнительно регулируется срок прохождения медосмотра кандидатом.\",\n            },\n        ]\n        const allSettings = await Application.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n        const folders = await Application.getFolders();\n        const myFolders = folders.find(f =\u003e f.name === 'КЭДО - Базовый пакет');\n        const promises: Promise\u003cvoid\u003e[] = [];\n        for (const setting of settings) {\n            if (!allSettings.find(f =\u003e f.data.code == setting.code)) {\n                const newSetting = Application.create();\n                newSetting.data.__name = setting.name;\n                newSetting.data.code = setting.code;\n                newSetting.data.feature = setting.feature;\n                newSetting.data.quantity = setting.quantity;\n                newSetting.data.__directory = []; // инициализировать переменную\n                newSetting.data.__directory.id = myFolders ? myFolders.id : undefined;\n                newSetting.data.status = setting.status;\n                newSetting.data.description = setting.description;\n                promises.push(newSetting.save())\n            }\n        }\n        await Promise.all(promises)\n    }\n}\n\nasync function createBenefits(): Promise\u003cvoid\u003e {\n    interface benefit {\n        name: string,\n        initiators?: TEnum\u003cEnum$personnel_documents$handbook_of_benefits$initiators\u003e[],\n        list?: string\n    }\n    const benefits: benefit[] = [\n        {\n            name: 'Уход за ребенком - Ежемесячное пособие по уходу за ребенком',\n            initiators: [\n                {\n                    \"code\": \"staff\",\n                    \"name\": \"Сотрудники\"\n                }\n            ],\n            list: 'Свидетельство о рождении или усыновлении (копия), Свидетельство о рождении предыдущего ребёнка(копия), Приказ о замене послеродового отпуска на отпуск по уходу за ребёнком(копия), Справка с места работы второго родителя или обоих родителей о том, что он/ она / они не получает пособия(оригинал), Справка из органов социальной защиты населения по месту жительства родителей о неполучении ежемесячного пособия по уходу за ребёнком(оригинал)'\n        },\n        {\n            name: 'Уход за ребенком - Ежемесячное пособие по уходу за ребенком',\n            initiators: [\n                {\n                    \"code\": \"staff\",\n                    \"name\": \"Сотрудники\"\n                }\n            ],\n            list: 'Свидетельство о рождении или усыновлении (копия), Свидетельство о рождении предыдущего ребёнка(копия), Приказ о замене послеродового отпуска на отпуск по уходу за ребёнком(копия), Справка с места работы второго родителя или обоих родителей о том, что он/ она / они не получает пособия(оригинал), Справка из органов социальной защиты населения по месту жительства родителей о неполучении ежемесячного пособия по уходу за ребёнком(оригинал)'\n        },\n        {\n            name: 'Беременность и роды - Пособие по беременности и родам',\n            initiators: [\n                {\n                    \"code\": \"staff\",\n                    \"name\": \"Сотрудники\"\n                }\n            ]\n        },\n        {\n            name: 'Погребение - Социальное пособие на погребение',\n            initiators: [\n                {\n                    \"code\": \"staff\",\n                    \"name\": \"Сотрудники\"\n                }\n            ],\n            list: 'Справка о смерти (оригинал)'\n        },\n        {\n            name: 'Проф. травма - Пособие по временной нетрудоспособности',\n            initiators: [\n                {\n                    \"code\": \"personnel_staff\",\n                    \"name\": \"Кадровые работники\"\n                },\n            ],\n            list: 'Акт о несчастном случае на производстве (по форме Н-1) или Акт о случае профессионального заболевания, Копии материалов расследования, если оно не завершено'\n        },\n        {\n            name: 'Рождение ребенка - Единовременное пособие при рождении ребенка',\n            initiators: [\n                {\n                    \"code\": \"staff\",\n                    \"name\": \"Сотрудники\"\n                }\n            ],\n            list: 'Справка о рождении ребенка (оригинал), Справка с места работы другого родителя о том, что такое пособие не назначалось (оригинал)'\n        },\n        {\n            name: 'Возмещение - Возмещение расходов Страхователям на Страхователю выплату социального пособия на погребение',\n            initiators: [\n                {\n                    \"code\": \"personnel_staff\",\n                    \"name\": \"Кадровые работники\"\n                },\n            ],\n            list: 'Справка о смерти (оригинал)'\n        },\n        {\n            name: 'Нетрудоспособность - Пособие по временной нетрудоспособности'\n        },\n        {\n            name: 'Возмещение расходов на оплату четырех дополнительных выходных дней одному из родителей для ухода за детьми-инвалидами',\n            initiators: [\n                {\n                    \"code\": \"staff\",\n                    \"name\": \"Сотрудники\"\n                }\n            ],\n            list: 'Паспорт или доверенность'\n        },\n    ]\n    const allBenefits = await Context.fields.handbook_of_benefits.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    for (const benefit of benefits) {\n        if (!allBenefits.find(f =\u003e f.data.__name === benefit.name)) {\n            const newBenefit = Context.fields.handbook_of_benefits.app.create();\n            newBenefit.data.__name = benefit.name;\n            newBenefit.data.initiators = benefit.initiators;\n            newBenefit.data.list_of_required_documents = benefit.list;\n            promises.push(newBenefit.save())\n        }\n    }\n    await Promise.all(promises)\n}\n\n// async function createdMaterials(): Promise\u003cvoid\u003e {\n//     interface material {\n//         name: string,\n//         list?: string\n//     }\n//     const materials: material[] = [\n//         {\n//             name: 'рождение ребенка',\n//             list: 'Свидетельство о рождении'\n//         },\n//         {\n//             name: 'Выплата работнику или бывшему работнику в связи со смертью члена его семьи',\n//             list: 'Свидетельство о смерти'\n//         }\n//     ]\n//     const allMaterials = await Context.fields.types_of_material.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n//     const promises: Promise\u003cvoid\u003e[] = [];\n//     for (const material of materials) {\n//         if (!allMaterials.find(f =\u003e f.data.__name === material.name)) {\n//             const newMaterial = Context.fields.types_of_material.app.create();\n//             newMaterial.data.__name = material.name;\n//             newMaterial.data.list_of_required_documents = material.list;\n//             promises.push(newMaterial.save())\n//         }\n//     }\n//     await Promise.all(promises)\n// }\n\nasync function createTypeEmploymentRelationship(): Promise\u003cvoid\u003e {\n    interface type {\n        name: string,\n        possible_time_limit?: boolean,\n        note?: string\n    }\n    const types: type[] = [\n        {\n            name: 'Договор подряда (ГПХ)',\n            possible_time_limit: true\n        },\n        {\n            name: 'Договор оказания услуг (ГПХ)',\n            possible_time_limit: true\n        },\n        {\n            name: 'Срочный',\n            possible_time_limit: true\n        },\n        {\n            name: 'Бессрочный',\n            possible_time_limit: false\n        }\n    ]\n    const allTypes = await Context.fields.type_employment_relationship.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    for (const typeRelationship of types) {\n        if (!allTypes.find(f =\u003e f.data.__name === typeRelationship.name)) {\n            const newType = Context.fields.type_employment_relationship.app.create();\n            newType.data.__name = typeRelationship.name;\n            newType.data.possible_time_limit = typeRelationship.possible_time_limit;\n            promises.push(newType.save());\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function createReasonsTemporaryTransfer(): Promise\u003cvoid\u003e {\n    interface reason {\n        name: string,\n        agreement_required?: boolean,\n        maximum_transfer_term?: number,\n        note?: string\n    }\n    const reasons: reason[] = [\n        {\n            name: 'В связи с простоем',\n            agreement_required: false,\n            maximum_transfer_term: 1\n        },\n        {\n            name: 'По соглашению сторон',\n            agreement_required: true,\n            maximum_transfer_term: 12\n        },\n        {\n            name: 'Для замещения временно отсутствующего (до выхода сотрудника)',\n            agreement_required: true,\n        },\n        {\n            name: 'В связи с Катастрофой, ЧС и т.д.',\n            agreement_required: false,\n            maximum_transfer_term: 1\n        },\n        {\n            name: 'В связи с медицинским заключением',\n            agreement_required: true,\n            maximum_transfer_term: 4\n        }\n    ]\n    const allReasons = await Namespace.app.reasons_temporary_transfer.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    for (const reasonTransfer of reasons) {\n        if (!allReasons.find(f =\u003e f.data.__name === reasonTransfer.name)) {\n            const newReason = Namespace.app.reasons_temporary_transfer.create();\n            newReason.data.__name = reasonTransfer.name;\n            newReason.data.agreement_required = reasonTransfer.agreement_required;\n            newReason.data.maximum_transfer_term = reasonTransfer.maximum_transfer_term;\n            promises.push(newReason.save());\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function createWorkShedules(): Promise\u003cvoid\u003e {\n    interface workShedule {\n        name: string,\n        working_hours?: number,\n        working_hours_week?: number,\n        total_accounting?: boolean,\n    }\n    const workShedules: workShedule[] = [\n        {\n            name: 'Пятидневка с 9 до 18',\n        },\n        {\n            name: 'Сокращенная пятидневка с 9 до 17',\n        },\n        {\n            name: 'Сменный график 2 через 2',\n        },\n    ]\n    const allWorkShedules = await Namespace.app.work_schedules.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    for (const workShedule of workShedules) {\n        if (!allWorkShedules.find(f =\u003e f.data.__name === workShedule.name)) {\n            const newWorkShedule = Namespace.app.work_schedules.create();\n            newWorkShedule.data.__name = workShedule.name;\n            promises.push(newWorkShedule.save());\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function createdCertificates(): Promise\u003cvoid\u003e {\n    class MyRole {\n        user: UserItem[]\n        type: 'user'\n        code: string\n        constructor(user: UserItem[], type: 'user', code: string) {\n            this.code = code;\n            this.user = user;\n            this.type = type;\n        }\n        getUsers(): Promise\u003cUserItem[]\u003e {\n            return new Promise\u003cUserItem[]\u003e(() =\u003e \u003cUserItem[]\u003ethis.user)\n        }\n        json(): any {\n            return {\n                code: this.code,\n                type: this.type\n            }\n        }\n    }\n    function userGroup2Role(user: UserItem[]): Role {\n        return new MyRole(user, 'user', user![0].id) as Role\n    }\n\n    interface certificate {\n        name: string\n        form_is_required?: boolean,\n        period_is_required?: boolean,\n        list_of_required_documents?: string\n    }\n    const certificates: certificate[] = [\n        {\n            name: '2-НДФЛ',\n            period_is_required: true,\n        },\n        {\n            name: 'Справка о среднем заработке (за период)',\n            period_is_required: true,\n        },\n        {\n            name: 'Справка о среднем заработке для визы',\n        },\n        {\n            name: 'Справка в службу занятости',\n        },\n        {\n            name: 'Справка для банков (по форме банка)',\n            form_is_required: true,\n            list_of_required_documents: 'Образец документа по форме которого требуется справка'\n        },\n        {\n            name: 'Справка об удержанных алиментах за период',\n        },\n        {\n            name: 'Справка №182Н',\n        },\n        {\n            name: 'Справка о периоде работы у работодателя',\n        },\n        {\n            name: 'Справка с места работы о не получении ежемесячного пособия на период отпуска по уходу за ребенком',\n        },\n        {\n            name: 'Справка с места работы о не получении единовременного пособия при рождении ребенка за счет средств ФСС',\n        },\n    ]\n\n    const user = await System.users.search().first()\n    const supervisor = [userGroup2Role([user!])]\n    const allCertificates = await Context.fields.handbook_of_certificates.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    for (const certificate of certificates) {\n        if (!allCertificates.find(f =\u003e f.data.__name === certificate.name)) {\n            const newCertificate = Context.fields.handbook_of_certificates.app.create();\n            newCertificate.data.__name = certificate.name;\n            newCertificate.data.responsible = supervisor;\n            newCertificate.data.form_is_required = certificate.form_is_required;\n            newCertificate.data.period_is_required = certificate.period_is_required;\n            newCertificate.data.list_of_required_documents = certificate.list_of_required_documents;\n            promises.push(newCertificate.save())\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function createTypeOfMaterial(): Promise\u003cvoid\u003e {\n    interface type {\n        name: string,\n        list_of_required_documents: string,\n        sum?: TMoney\u003c'RUB'\u003e\n    }\n    const types: type[] = [\n        {\n            name: 'Рождение ребенка',\n            list_of_required_documents: 'Свидетельство о рождении',\n            sum: new Money(15000, 'RUB')\n        },\n        {\n            name: 'Заключение брака',\n            list_of_required_documents: 'Свидетельство о регистрации брака ',\n            sum: new Money(15000, 'RUB')\n        },\n        {\n            name: 'Смерть близкого родственника',\n            list_of_required_documents: 'Свидетельство о смерти. Документ, подтверждающий факт родства (например, св-во о рождении)',\n            sum: new Money(15000, 'RUB')\n        },\n        {\n            name: 'Тяжелая болезнь',\n            list_of_required_documents: 'Подтверждающие документы',\n        },\n        {\n            name: 'Тяжелая болезнь близкого родственника',\n            list_of_required_documents: 'Подтверждающие документы',\n        },\n        {\n            name: 'Причинение ущерба имуществу',\n            list_of_required_documents: 'Подтверждающие документы',\n        },\n        {\n            name: 'Иная материальная помощь',\n            list_of_required_documents: 'Подтверждающие документы',\n        }\n    ]\n    const allTypes = await Context.fields.types_of_material.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const promises: Promise\u003cvoid\u003e[] = [];\n    for (const typeMaterial of types) {\n        if (!allTypes.find(f =\u003e f.data.__name === typeMaterial.name)) {\n            const newType = Context.fields.types_of_material.app.create();\n            newType.data.__name = typeMaterial.name;\n            newType.data.list_of_required_documents = typeMaterial.list_of_required_documents;\n            newType.data.sum = typeMaterial.sum;\n            promises.push(newType.save());\n        }\n    }\n    await Promise.all(promises)\n}\n\nasync function createSupervisorElement(): Promise\u003cvoid\u003e {\n    try {\n        const supervisor = await System.userGroups.search().where(f =\u003e f.__id.eq('331e62d2-072e-58ac-9581-74abcc67f050')).first();\n        const userSupervisor = await System.users.search().where(f =\u003e f.groupIds.has(supervisor!)).first();\n        const staff = await Namespace.app.staff.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.ext_user.eq(userSupervisor!)\n            ))\n            .first();\n\n        if (!staff) {\n            if (!userSupervisor) return\n            const staffSupervisor = Namespace.app.staff.create();\n            staffSupervisor.data.full_name = userSupervisor.data.fullname;\n            staffSupervisor.data.name = userSupervisor.data.fullname?.firstname;\n            staffSupervisor.data.surname = userSupervisor.data.fullname?.lastname;\n            staffSupervisor.data.middlename = userSupervisor.data.fullname?.middlename;\n            staffSupervisor.data.email = userSupervisor.data.email ? staffSupervisor.fields.email.create(userSupervisor.data.email) : undefined;\n            staffSupervisor.data.phone = userSupervisor.data.workPhone;\n            staffSupervisor.data.ext_user = userSupervisor;\n            staffSupervisor.data.work_start = new TDate();\n\n            const employee_category = await Namespace.app.settings.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('employee_category'))).first();\n            const defCategory = employee_category!.data.feature;\n            const refDefCategory = new RefItem\u003cApplicationItem\u003cApplication$kedo$employees_categories$Data, Application$kedo$employees_categories$Params\u003e\u003e('kedo', 'employees_categories', defCategory!.id);\n            const item = await refDefCategory.fetch();\n            const row = staffSupervisor.data.categories_table!.insert();\n            row.staff_categories = item;\n\n            await staffSupervisor.save();\n            await staffSupervisor.setStatus(staffSupervisor.fields.__status.variants.signed_documents)\n        };\n    } catch (err) {\n        throw new Error(`error at supervisor staff create: ${err.message}`)\n    }\n}\n\nasync function createAdditionalWeekendsAndHolidays(): Promise\u003cvoid\u003e {\n\n    let year_string = '2024';\n\n    interface dates_table {\n        date: TDate,\n        region?: number,\n        holiday: boolean,\n        day_off: boolean,\n        row_index?: number,\n        holiday_name: string\n    }\n\n    const additional_holidays: dates_table[] = [\n        {\n            date: new TDate(2024, 1, 1),\n            holiday: true,\n            day_off: true,\n            row_index: 0,\n            holiday_name: 'Новогодние каникулы'\n        },\n        {\n            date: new TDate(2024, 1, 2),\n            holiday: true,\n            day_off: true,\n            row_index: 1,\n            holiday_name: 'Новогодние каникулы'\n        },\n        {\n            date: new TDate(2024, 1, 3),\n            holiday: true,\n            day_off: true,\n            row_index: 2,\n            holiday_name: 'Новогодние каникулы'\n        },\n        {\n            date: new TDate(2024, 1, 4),\n            holiday: true,\n            day_off: true,\n            row_index: 3,\n            holiday_name: 'Новогодние каникулы'\n        },\n        {\n            date: new TDate(2024, 1, 5),\n            holiday: true,\n            day_off: true,\n            row_index: 4,\n            holiday_name: 'Новогодние каникулы'\n        },\n        {\n            date: new TDate(2024, 1, 6),\n            holiday: true,\n            day_off: true,\n            row_index: 5,\n            holiday_name: 'Новогодние каникулы'\n        },\n        {\n            date: new TDate(2024, 1, 7),\n            holiday: true,\n            day_off: true,\n            row_index: 6,\n            holiday_name: 'Рождество Христово'\n        },\n        {\n            date: new TDate(2024, 1, 8),\n            holiday: true,\n            day_off: true,\n            row_index: 7,\n            holiday_name: 'Новогодние каникулы'\n        },\n        {\n            date: new TDate(2024, 2, 23),\n            holiday: true,\n            day_off: true,\n            row_index: 8,\n            holiday_name: 'День защитника Отечества'\n        },\n        {\n            date: new TDate(2024, 3, 8),\n            holiday: true,\n            day_off: true,\n            row_index: 9,\n            holiday_name: 'Международный женский день'\n        },\n        {\n            date: new TDate(2024, 4, 29),\n            holiday: false,\n            day_off: true,\n            row_index: 10,\n            holiday_name: 'Перенос выходного дня'\n        },\n        {\n            date: new TDate(2024, 4, 30),\n            holiday: false,\n            day_off: true,\n            row_index: 11,\n            holiday_name: 'Перенос выходного дня'\n        },\n        {\n            date: new TDate(2024, 5, 1),\n            holiday: true,\n            day_off: true,\n            row_index: 12,\n            holiday_name: 'Праздник Весны и Труда'\n        },\n        {\n            date: new TDate(2024, 5, 9),\n            holiday: true,\n            day_off: true,\n            row_index: 13,\n            holiday_name: 'День Победы'\n        },\n        {\n            date: new TDate(2024, 5, 10),\n            holiday: false,\n            day_off: true,\n            row_index: 14,\n            holiday_name: 'Перенос выходного дня'\n        },\n        {\n            date: new TDate(2024, 6, 12),\n            holiday: true,\n            day_off: true,\n            row_index: 15,\n            holiday_name: 'День России'\n        },\n        {\n            date: new TDate(2024, 11, 4),\n            holiday: true,\n            day_off: true,\n            row_index: 16,\n            holiday_name: 'День народного единства'\n        },\n        {\n            date: new TDate(2024, 12, 30),\n            holiday: false,\n            day_off: true,\n            row_index: 17,\n            holiday_name: 'Перенос выходного дня'\n        },\n        {\n            date: new TDate(2024, 12, 31),\n            holiday: false,\n            day_off: true,\n            row_index: 18,\n            holiday_name: 'Перенос выходного дня'\n        },\n        {\n            date: new TDate(2024, 7, 12),\n            region: 31,\n            holiday: true,\n            day_off: true,\n            row_index: 19,\n            holiday_name: 'День Прохоровского поля - Третьего ратного поля России'\n        },\n        {\n            date: new TDate(2024, 6, 16),\n            region: 16,\n            holiday: true,\n            day_off: true,\n            row_index: 20,\n            holiday_name: 'Курбан-байрам'\n        },\n        {\n            date: new TDate(2024, 4, 10),\n            region: 16,\n            holiday: true,\n            day_off: true,\n            row_index: 21,\n            holiday_name: 'Ураза-Байрам'\n        },\n        {\n            date: new TDate(2024, 8, 30),\n            region: 16,\n            holiday: true,\n            day_off: true,\n            row_index: 22,\n            holiday_name: 'День Республики Татарстан'\n        },\n        {\n            date: new TDate(2024, 11, 6),\n            region: 16,\n            holiday: true,\n            day_off: true,\n            row_index: 23,\n            holiday_name: 'День Конституции Республики Татарстан'\n        },\n        {\n            date: new TDate(2024, 5, 14),\n            region: 1,\n            holiday: true,\n            day_off: true,\n            row_index: 24,\n            holiday_name: 'Радоница'\n        },\n        {\n            date: new TDate(2024, 5, 14),\n            region: 64,\n            holiday: true,\n            day_off: true,\n            row_index: 25,\n            holiday_name: 'Радоница'\n        },\n        {\n            date: new TDate(2024, 5, 14),\n            region: 58,\n            holiday: true,\n            day_off: true,\n            row_index: 26,\n            holiday_name: 'Радоница'\n        },\n        {\n            date: new TDate(2024, 5, 14),\n            region: 26,\n            holiday: true,\n            day_off: true,\n            row_index: 27,\n            holiday_name: 'Радоница'\n        },\n        {\n            date: new TDate(2024, 5, 14),\n            region: 23,\n            holiday: true,\n            day_off: true,\n            row_index: 28,\n            holiday_name: 'Радоница'\n        },\n        {\n            date: new TDate(2024, 5, 14),\n            region: 7,\n            holiday: true,\n            day_off: true,\n            row_index: 29,\n            holiday_name: 'Радоница'\n        },\n        {\n            date: new TDate(2024, 2, 10),\n            region: 3,\n            holiday: true,\n            day_off: true,\n            row_index: 30,\n            holiday_name: 'Сагаалган'\n        },\n        {\n            date: new TDate(2024, 2, 12),\n            region: 3,\n            holiday: false,\n            day_off: true,\n            row_index: 31,\n            holiday_name: 'Перенос выходного дня'\n        },\n        {\n            date: new TDate(2024, 2, 10),\n            region: 80,\n            holiday: true,\n            day_off: true,\n            row_index: 32,\n            holiday_name: 'Сагаалган'\n        },\n        {\n            date: new TDate(2024, 2, 12),\n            region: 80,\n            holiday: false,\n            day_off: true,\n            row_index: 33,\n            holiday_name: 'Перенос выходного дня'\n        },\n\n    ]\n\n    //Ищем приложение с текущим годом\n    const weekend_reference = await Namespace.app.additional_holidays.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.year_string.eq(year_string))).first();\n    let row_index = 0;\n    if (weekend_reference) {\n        //Если оно есть и таблица дат заполнена актуализируем старые данные и добавляем новые\n        if (weekend_reference.data.dates_table \u0026\u0026 weekend_reference.data.dates_table.length \u003e 0) {\n            for (let item of additional_holidays) {\n                let i = weekend_reference.data.dates_table.findIndex(f =\u003e f.row_index == item.row_index)\n                if (i !== -1) {\n                    weekend_reference.data.dates_table[i].date = item.date;\n                    weekend_reference.data.dates_table[i].holiday = item.holiday;\n                    weekend_reference.data.dates_table[i].day_off = item.day_off;\n                    weekend_reference.data.dates_table[i].holiday_name = item.holiday_name;\n                    if (item.region) {\n                        const region = await Namespace.app.directory_of_regions.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.the_code.eq(item.region!))).first();\n                        weekend_reference.data.dates_table[i].region = region ? region : undefined!;\n                    }\n                } else {\n                    const row = weekend_reference.data.dates_table!.insert();\n                    row.date = item.date;\n                    row.holiday = item.holiday;\n                    row.day_off = item.day_off;\n                    row.holiday_name = item.holiday_name;\n                    row.row_index = row_index;\n                    if (item.region) {\n                        const region = await Namespace.app.directory_of_regions.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.the_code.eq(item.region!))).first();\n                        row.region = region ? region : undefined!;\n                    }\n                }\n                row_index += 1;\n            }\n            //Если приложение есть, а таблица не заполнена, то добавляем данные в таблицу\n        } else {\n            for (let item of additional_holidays) {\n                const row = weekend_reference.data.dates_table!.insert();\n                row.date = item.date;\n                row.holiday = item.holiday;\n                row.day_off = item.day_off;\n                row.holiday_name = item.holiday_name;\n                row.row_index = row_index;\n                if (item.region) {\n                    const region = await Namespace.app.directory_of_regions.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.the_code.eq(item.region!))).first();\n                    row.region = region ? region : undefined!;\n                }\n                row_index += 1;\n            }\n        }\n        await weekend_reference.save();\n    }\n\n    //Если приложения не существует создаем его и наполняем таблицу дат\n    else {\n        const application_holiday = Namespace.app.additional_holidays.create();\n        application_holiday.data.year_string = year_string;\n\n        for (let item of additional_holidays) {\n            const row = application_holiday.data.dates_table!.insert();\n            row.date = item.date;\n            row.holiday = item.holiday;\n            row.day_off = item.day_off;\n            row.holiday_name = item.holiday_name;\n            row.row_index = row_index;\n            if (item.region) {\n                const region = await Namespace.app.directory_of_regions.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.the_code.eq(item.region!))).first();\n                row.region = region ? region : undefined!;\n            }\n            row_index += 1;\n        }\n\n        await application_holiday.save();\n    }\n\n}\n\n\n",
  "forms": [
    {
      "id": "",
      "code": "form_4e70f540-54ad-4187-a3da-5a3620388ccb",
      "name": "Форма запуска",
      "values": {
        "formType": "start-process-form",
        "formGroup": {
          "path": ["context"]
        }
      },
      "widget": {
        "draft": false,
        "deleted": false,
        "version": 14
      },
      "content": {
        "[footer]": [
          {
            "id": "cc734fcd-17d6-4b8c-8529-91a25cc2a94e",
            "values": {
              "buttons": {
                "path": ["actionButtons"]
              }
            },
            "content": null,
            "descriptor": "buttons-panel",
            "descriptorVersion": null
          }
        ],
        "[content]": [
          {
            "id": "c18e9118-cda2-49f4-ae50-5414c9b970b2",
            "values": {
              "shadow": true
            },
            "content": {
              "": [
                {
                  "id": "11c9f46a-b3c4-4e77-8ee8-dd2b38dd892e",
                  "values": {
                    "form": {
                      "path": ["context"]
                    },
                    "fields": {
                      "path": ["fields"]
                    }
                  },
                  "content": null,
                  "descriptor": "dynamic-form",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "modal-body",
            "descriptorVersion": null
          }
        ],
        "[sidebar]": [
          {
            "id": "0ceaa8ec-5cdc-4385-9a6b-b0ae1e04039b",
            "values": null,
            "content": {
              "": [
                {
                  "id": "2c1bfe32-44b9-46d5-bee7-2ed66205f4d6",
                  "values": {
                    "userGuide": {
                      "path": ["instruction"]
                    }
                  },
                  "content": null,
                  "descriptor": "user-guide",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "2112f287-a8ad-433c-862d-f9808c2d4f7b",
            "values": null,
            "content": {
              "": [
                {
                  "id": "8900384e-a047-46b0-8ba7-462c23711e72",
                  "values": {
                    "context": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "target-widget",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          }
        ],
        "[headerControls]": [],
        "[headerCustomization]": []
      },
      "descriptor": "item-form-complex-popup",
      "descriptorVersion": 2
    }
  ],
  "settings": {
    "logged": true,
    "debugForm": {
      "allFields": false,
      "formFields": []
    },
    "targetFeed": {
      "type": "object",
      "variable": "settings"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": false,
    "allowNamespace": true,
    "applicationContext": false,
    "importsDependencies": [],
    "useStartFormInDebug": true,
    "fieldVisibilityConditions": {
      "domen": {
        "enabled": false,
        "conditions": []
      },
      "types_of_material": {
        "enabled": false,
        "conditions": []
      },
      "handbook_of_benefits": {
        "enabled": false,
        "conditions": []
      },
      "handbook_of_certificates": {
        "enabled": false,
        "conditions": []
      },
      "type_employment_relationship": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
