{
  "__id": "018c8757-193c-7ed4-8b4d-e83e9cb05952",
  "namespace": "kedo.types_other_employment_docs",
  "code": "fill_other_docs_default_types",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "(s) Заполнить виды прочих документов трудоустройства по умолчанию",
  "type": "bpmn",
  "draft": false,
  "version": 5,
  "context": [
    {
      "code": "types_other_employment_docs",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "types_other_employment_docs",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Виды прочих документов трудоустройства"
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-07-09T16:05:53.405783408Z",
  "__createdBy": "6c362877-9ef9-45f4-aa6f-e5e126ee96c0",
  "__updatedAt": "2024-01-24T11:16:30.265972843Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 104,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "466dfcb2-b3cd-477c-a374-33cd0bcdfc42",
        "type": "start",
        "color": "#ffffff",
        "exits": ["f306f333-079b-4584-8962-2a2a4cb77c34"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "(s) Заполнить виды прочих документов трудоустройства по умолчанию ({$types_other_employment_docs})",
          "titleGenerateMethod": "template"
        }
      },
      "3cf631e4-cf75-46f9-83f8-9c65cf91ecfb": {
        "x": 80,
        "y": 144,
        "id": "3cf631e4-cf75-46f9-83f8-9c65cf91ecfb",
        "icon": "script",
        "lane": "466dfcb2-b3cd-477c-a374-33cd0bcdfc42",
        "name": "Создание видов прочих документов трудоустройства по умолчанию",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["3fc3e781-a28c-4dcb-8571-4023a6eb9f56"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "createOtherDocsTypes",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "4f3f0da9-cc26-4899-9d59-aac41dd5c1b5": {
        "x": 104,
        "y": 240,
        "id": "4f3f0da9-cc26-4899-9d59-aac41dd5c1b5",
        "icon": "end",
        "lane": "466dfcb2-b3cd-477c-a374-33cd0bcdfc42",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "466dfcb2-b3cd-477c-a374-33cd0bcdfc42": {
        "x": 8,
        "y": 8,
        "id": "466dfcb2-b3cd-477c-a374-33cd0bcdfc42",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 224,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "3fc3e781-a28c-4dcb-8571-4023a6eb9f56": {
        "id": "3fc3e781-a28c-4dcb-8571-4023a6eb9f56",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 208
          },
          {
            "x": 120,
            "y": 240
          }
        ],
        "type": "plain",
        "source": "3cf631e4-cf75-46f9-83f8-9c65cf91ecfb",
        "target": "4f3f0da9-cc26-4899-9d59-aac41dd5c1b5",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "f306f333-079b-4584-8962-2a2a4cb77c34": {
        "id": "f306f333-079b-4584-8962-2a2a4cb77c34",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 104
          },
          {
            "x": 120,
            "y": 144
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "3cf631e4-cf75-46f9-83f8-9c65cf91ecfb",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "interface OtherDocument {\n    name: string,\n    only_employee_signs: boolean,\n}\n\nconst documents: OtherDocument[] = [\n    {\n        name: \"Договор о мат. ответственности (индивидуальный)\",\n        only_employee_signs: false,\n    },\n    {\n        name: \"Договор о мат. ответственности (коллективный)\",\n        only_employee_signs: false,\n    },\n    {\n        name: \"Согласие на видеонаблюдение\",\n        only_employee_signs: true,\n    },\n    {\n        name: \"Согласие на вакцинацию\",\n        only_employee_signs: true,\n    },\n    {\n        name: \"Обязательство о неразглашении коммерческой тайны\",\n        only_employee_signs: true,\n    },\n    {\n        name: \"Обязательство о неразглашении персональных данных\",\n        only_employee_signs: true,\n    },\n    {\n        name: \"Обязательство о нераспространении информации в СМИ\",\n        only_employee_signs: true,\n    },\n    {\n        name: \"Обязательство сообщать о потенциальном конфликте интересов\",\n        only_employee_signs: true,\n    },\n    {\n        name: \"График работы\",\n        only_employee_signs: true,\n    }\n];\n\nasync function createOtherDocsTypes(): Promise\u003cvoid\u003e {\n    const ohter_documents = await Application.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    let promises: Promise\u003cvoid\u003e[] = [];\n    for (const document of documents) {\n        if (!ohter_documents.find(f =\u003e f.data.__name == document.name)) {\n            const newDocument = Application.create();\n            newDocument.data.__name = document.name;\n            newDocument.data.only_employee_signs = document.only_employee_signs;\n            promises.push(newDocument.save())\n        }\n    }\n    await Promise.all(promises);\n    //Изменяем названия элементов приложений, так как они больше не используются\n    promises = [];\n    const additional_agreement = ohter_documents.find(f =\u003e f.data.__name == 'Дополнительное соглашение');\n    const personal_data_consent = ohter_documents.find(f =\u003e f.data.__name == 'Согласие на обработку персональных данных');\n    if (additional_agreement) {\n        additional_agreement.data.__name += ' (НЕ ИСПОЛЬЗОВАТЬ!)';\n        promises.push(additional_agreement.save());\n    }\n    if (personal_data_consent) {\n        personal_data_consent.data.__name += ' (НЕ ИСПОЛЬЗОВАТЬ!)';\n        promises.push(personal_data_consent.save());\n    }\n    if (promises \u0026\u0026 promises.length \u003e 0) {\n        await Promise.all(promises);\n    }\n}",
  "forms": [],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "object",
      "variable": "types_other_employment_docs"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": false,
    "applicationContext": false,
    "importsDependencies": [],
    "fieldVisibilityConditions": {}
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
