{
  "__id": "018fb8c1-cf14-7d18-bf64-599311224f27",
  "namespace": "ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd",
  "code": "unep_issue_request",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "Запрос на выпуск НЭП",
  "type": "bpmn",
  "draft": false,
  "version": 4,
  "context": [
    {
      "code": "connection_timed_out",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Превышено время ожидания запроса",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "passport_series",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Серия паспорта",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "request_confirmed",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявка подтверждена",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "staff_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Идентификатор пользователя",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "responsible_user",
      "type": "SYS_USER",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        }
      },
      "view": {
        "name": "Ответственный",
        "data": {}
      }
    },
    {
      "code": "email",
      "type": "EMAIL",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Электронная почта",
        "data": {}
      }
    },
    {
      "code": "birth_date",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата рождения",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        }
      }
    },
    {
      "code": "user",
      "type": "SYS_USER",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        }
      },
      "view": {
        "name": "Пользователь",
        "data": {}
      }
    },
    {
      "code": "issue_confirmation_error",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка при подтверждении заявки",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "issued_by",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Кем выдан",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "passport_living_page",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Скан страницы с пропиской",
        "data": {}
      }
    },
    {
      "code": "request_exists",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявка на сертификат существует",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "passport_code",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Код подразделения",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "snils",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "СНИЛС",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "confirmation_error_reason",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Причина ошибки подтверждения",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "issue_confirmation_type_changed",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": true,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Способ подтверждения изменён",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "passport_number",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Номер паспорта",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "identity_expiration",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата окончания действия",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        }
      }
    },
    {
      "code": "data_changed",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Данные изменены",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "ogrn",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ОГРН компании",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "error_type",
      "type": "ENUM",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "enumItems": [
          {
            "code": "sdk_error",
            "name": "Ошибка в коде",
            "checked": false
          },
          {
            "code": "data_error",
            "name": "Ошибка в данных",
            "checked": false
          }
        ]
      },
      "view": {
        "name": "Вид ошибки",
        "data": {}
      }
    },
    {
      "code": "passport_date",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата выдачи документа",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        }
      }
    },
    {
      "code": "issue_status",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Статус заявки",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "api_key",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Апи ключ",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "lastname",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Отчество",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "request_rejected",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявка отклонена",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "country",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Страна",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "city",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Город",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "stage",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Стадия",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "provider",
      "type": "ENUM",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "enumItems": [
          {
            "code": "kontur",
            "name": "Контур",
            "checked": false
          },
          {
            "code": "sign_me",
            "name": "Sign.me",
            "checked": false
          }
        ]
      },
      "view": {
        "name": "Провайдер",
        "data": {}
      }
    },
    {
      "code": "request_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Идентификатор заявки",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "name",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Имя",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "phone",
      "type": "PHONE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Телефон",
        "data": {
          "type": ""
        }
      }
    },
    {
      "code": "response",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ответ сервера",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "request_after_personal_data_changed",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Перевыпуск подписи в случае изменения личных данных",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "inn",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ИНН",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "release_statement",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявление на выпуск сертификата",
        "data": {}
      }
    },
    {
      "code": "snils_file",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Скан СНИЛСа",
        "data": {}
      }
    },
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "gender",
      "type": "ENUM",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "enumItems": [
          {
            "code": "m",
            "name": "Мужской",
            "checked": false
          },
          {
            "code": "f",
            "name": "Женский",
            "checked": false
          }
        ]
      },
      "view": {
        "name": "Пол",
        "data": {}
      }
    },
    {
      "code": "request_actualized",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявка актуализирована",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "error_exists",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Есть ошибка?",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "region",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Регион",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "json_obj",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Данные json",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "signed_request_scan",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Скан подписанного заявления",
        "data": {}
      }
    },
    {
      "code": "surname",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Фамилия",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "current_doc",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Текущий документ",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "unep_issue_confirm_type",
      "type": "ENUM",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "enumItems": [
          {
            "code": "sms",
            "name": "СМС",
            "checked": false
          },
          {
            "code": "esia",
            "name": "ЕСИА",
            "checked": false
          }
        ]
      },
      "view": {
        "name": "Вид подтверждения выпуска УНЭП",
        "data": {}
      }
    },
    {
      "code": "repeat_confirmation",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявка на повторном подтверждении",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "passport_main_page",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Скан главной страницы паспорта",
        "data": {}
      }
    },
    {
      "code": "document_type",
      "type": "ENUM",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "enumItems": [
          {
            "code": "passport",
            "name": "Паспорт",
            "checked": false
          },
          {
            "code": "other_identity",
            "name": "Иной документ",
            "checked": false
          }
        ]
      },
      "view": {
        "name": "Вид документа",
        "data": {}
      }
    }
  ],
  "manualRun": true,
  "readonly": false,
  "__createdAt": "2023-04-18T07:46:24.949649608Z",
  "__createdBy": "6c362877-9ef9-45f4-aa6f-e5e126ee96c0",
  "__updatedAt": "2023-11-09T17:52:34.690206319Z",
  "__updatedBy": "59e0911f-230a-4b6d-becf-6b302a91977a",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 304,
        "y": 56,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "4588e968-caae-4989-98c0-f18fc2c7ccfe",
        "type": "start",
        "color": "#ffffff",
        "exits": ["732ce9c9-394f-4c86-9927-38212b1b3cd1"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true,
              "hideEmpty": false
            },
            {
              "code": "provider",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "phone",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "birth_date",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_date",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_main_page",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "email",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "responsible_user",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "user",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_living_page",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "snils_file",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "document_type",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "identity_expiration",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "unep_issue_confirm_type",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "api_key",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "issued_by",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "surname",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "name",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "city",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "country",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "snils",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_code",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_series",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "lastname",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "gender",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "region",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_number",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "inn",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Запрос на выпуск УНЭП - {$__createdAt}",
          "titleGenerateMethod": "template"
        }
      },
      "10d93c3e-7fec-44c5-ac8f-3d55b48ba34a": {
        "x": 88,
        "y": 432,
        "id": "10d93c3e-7fec-44c5-ac8f-3d55b48ba34a",
        "icon": "system",
        "lane": "1d9d7809-2a30-4c0a-8128-afebef7c7961",
        "name": "Заявка на НЭП (Sign.me)",
        "type": "ca",
        "color": "#20c997",
        "exits": [
          "ca585312-51b2-41f4-af7d-5fcd9babf316",
          "744ff593-1d6a-45ef-9a59-3f7b9a131072"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "unep_issue_activity_signme",
          "name": "",
          "input": [
            {
              "source": {
                "kind": "context",
                "value": "passport_living_page"
              },
              "target": {
                "kind": "context",
                "value": "passport_living_page"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "snils"
              },
              "target": {
                "kind": "context",
                "value": "snils"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "phone"
              },
              "target": {
                "kind": "context",
                "value": "phone"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "ogrn"
              },
              "target": {
                "kind": "context",
                "value": "ogrn"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "birth_date"
              },
              "target": {
                "kind": "context",
                "value": "birth_date"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_main_page"
              },
              "target": {
                "kind": "context",
                "value": "passport_main_page"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "country"
              },
              "target": {
                "kind": "context",
                "value": "country"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "snils_file"
              },
              "target": {
                "kind": "context",
                "value": "snils_file"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "responsible_user"
              },
              "target": {
                "kind": "context",
                "value": "responsible_user"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_code"
              },
              "target": {
                "kind": "context",
                "value": "passport_code"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "user"
              },
              "target": {
                "kind": "context",
                "value": "user"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "inn"
              },
              "target": {
                "kind": "context",
                "value": "inn"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "lastname"
              },
              "target": {
                "kind": "context",
                "value": "lastname"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "email"
              },
              "target": {
                "kind": "context",
                "value": "email"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_number"
              },
              "target": {
                "kind": "context",
                "value": "passport_number"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "city"
              },
              "target": {
                "kind": "context",
                "value": "city"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "surname"
              },
              "target": {
                "kind": "context",
                "value": "surname"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_series"
              },
              "target": {
                "kind": "context",
                "value": "passport_series"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_date"
              },
              "target": {
                "kind": "context",
                "value": "passport_date"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "region"
              },
              "target": {
                "kind": "context",
                "value": "region"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "gender"
              },
              "target": {
                "kind": "context",
                "value": "gender"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "api_key"
              },
              "target": {
                "kind": "context",
                "value": "api_key"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "name"
              },
              "target": {
                "kind": "context",
                "value": "name"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "issued_by"
              },
              "target": {
                "kind": "context",
                "value": "issued_by"
              }
            }
          ],
          "output": [],
          "namespace": "ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd",
          "escalation": {
            "byTime": {
              "limit": {
                "days": 0,
                "kind": "duration",
                "hours": 0,
                "minutes": 0,
                "absolute": false
              },
              "action": {
                "notify": false,
                "interrupt": false,
                "receivers": []
              },
              "enabled": false
            },
            "byError": {
              "exit": "744ff593-1d6a-45ef-9a59-3f7b9a131072",
              "notify": false,
              "interrupt": true,
              "receivers": []
            }
          },
          "bindingForm": {
            "fieldValues": {}
          },
          "targetAppCode": "",
          "dynamicBinding": {}
        }
      },
      "63435a04-7ccd-41e7-bb0d-d2d2b78b619d": {
        "x": 368,
        "y": 464,
        "id": "63435a04-7ccd-41e7-bb0d-d2d2b78b619d",
        "icon": "end",
        "lane": "1d9d7809-2a30-4c0a-8128-afebef7c7961",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "8371e190-a2f0-4dba-90f3-bcc4e8ea096c": {
        "x": 304,
        "y": 128,
        "id": "8371e190-a2f0-4dba-90f3-bcc4e8ea096c",
        "icon": "exclusive",
        "lane": "4588e968-caae-4989-98c0-f18fc2c7ccfe",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "f02cd89a-c7d2-4bba-8461-2bf1fba850cf",
          "2771404a-e9cb-46f7-be3c-b01015d4ac03"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "a78173a5-d03d-4160-97b9-2c9ae45bf18a": {
        "x": 424,
        "y": 432,
        "id": "a78173a5-d03d-4160-97b9-2c9ae45bf18a",
        "icon": "notification",
        "lane": "1d9d7809-2a30-4c0a-8128-afebef7c7961",
        "name": "Оповещение 1",
        "type": "notification",
        "color": "#ffff66",
        "exits": ["11f87f20-40af-4a27-8c01-8de070bcbc3c"],
        "width": 80,
        "height": 64,
        "settings": {
          "author": {
            "code": "",
            "kind": "current"
          },
          "target": {
            "kind": "process"
          },
          "receivers": [
            {
              "kind": "current"
            }
          ],
          "messageBody": "{$error}",
          "messageHeader": "ошибка"
        }
      },
      "dd4a50e1-ccc1-47f2-9724-e81958792c47": {
        "x": 528,
        "y": 432,
        "id": "dd4a50e1-ccc1-47f2-9724-e81958792c47",
        "icon": "system",
        "lane": "1d9d7809-2a30-4c0a-8128-afebef7c7961",
        "name": "Заявка на НЭП (Контур)",
        "type": "ca",
        "color": "#fde9a0",
        "exits": [
          "5a356289-8f70-4cfc-b514-f838c9823582",
          "bf377ceb-fb40-411b-8bae-582fbe23980b"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "unep_issue_activity_kontur",
          "name": "",
          "input": [
            {
              "source": {
                "kind": "context",
                "value": "city"
              },
              "target": {
                "kind": "context",
                "value": "city"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "region"
              },
              "target": {
                "kind": "context",
                "value": "region"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "issued_by"
              },
              "target": {
                "kind": "context",
                "value": "issued_by"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "phone"
              },
              "target": {
                "kind": "context",
                "value": "phone"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "responsible_user"
              },
              "target": {
                "kind": "context",
                "value": "responsible_user"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "birth_date"
              },
              "target": {
                "kind": "context",
                "value": "birth_date"
              }
            },
            {
              "target": {
                "kind": "context",
                "value": "generate_release_statement"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_series"
              },
              "target": {
                "kind": "context",
                "value": "passport_series"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_number"
              },
              "target": {
                "kind": "context",
                "value": "passport_number"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "name"
              },
              "target": {
                "kind": "context",
                "value": "name"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "user"
              },
              "target": {
                "kind": "context",
                "value": "user"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "country"
              },
              "target": {
                "kind": "context",
                "value": "country"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_date"
              },
              "target": {
                "kind": "context",
                "value": "passport_date"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_code"
              },
              "target": {
                "kind": "context",
                "value": "passport_code"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "document_type"
              },
              "target": {
                "kind": "context",
                "value": "document_type"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "passport_main_page"
              },
              "target": {
                "kind": "context",
                "value": "passport_main_page"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "inn"
              },
              "target": {
                "kind": "context",
                "value": "inn"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "api_key"
              },
              "target": {
                "kind": "context",
                "value": "api_key"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "lastname"
              },
              "target": {
                "kind": "context",
                "value": "lastname"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "snils"
              },
              "target": {
                "kind": "context",
                "value": "snils"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "email"
              },
              "target": {
                "kind": "context",
                "value": "email"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "identity_expiration"
              },
              "target": {
                "kind": "context",
                "value": "identity_expiration"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "unep_issue_confirm_type"
              },
              "target": {
                "kind": "context",
                "value": "usen_issue_confirm_type"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "surname"
              },
              "target": {
                "kind": "context",
                "value": "surname"
              }
            }
          ],
          "output": [
            {
              "source": {
                "kind": "context",
                "value": "request_confirmed"
              },
              "target": {
                "kind": "context",
                "value": "cert_released"
              }
            },
            {
              "source": {
                "kind": "context",
                "value": "request_id"
              },
              "target": {
                "kind": "context",
                "value": "request_id"
              }
            }
          ],
          "namespace": "ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd",
          "escalation": {
            "byTime": {
              "limit": {
                "days": 0,
                "kind": "duration",
                "hours": 0,
                "minutes": 0,
                "absolute": false
              },
              "action": {
                "notify": false,
                "interrupt": false,
                "receivers": []
              },
              "enabled": false
            },
            "byError": {
              "exit": "5a356289-8f70-4cfc-b514-f838c9823582",
              "notify": false,
              "interrupt": true,
              "receivers": []
            }
          },
          "bindingForm": {
            "fieldValues": {}
          },
          "targetAppCode": "",
          "dynamicBinding": {}
        }
      }
    },
    "lanes": {
      "1d9d7809-2a30-4c0a-8128-afebef7c7961": {
        "x": 8,
        "y": 360,
        "id": "1d9d7809-2a30-4c0a-8128-afebef7c7961",
        "name": "Пользователь",
        "color": "#d6f0cc",
        "width": 908,
        "height": 232,
        "settings": {
          "type": "dynamic",
          "groups": [null],
          "variable": "user",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      },
      "4588e968-caae-4989-98c0-f18fc2c7ccfe": {
        "x": 8,
        "y": 8,
        "id": "4588e968-caae-4989-98c0-f18fc2c7ccfe",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 908,
        "height": 352,
        "settings": {
          "type": "dynamic",
          "groups": [null],
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "11f87f20-40af-4a27-8c01-8de070bcbc3c": {
        "id": "11f87f20-40af-4a27-8c01-8de070bcbc3c",
        "name": "",
        "path": [
          {
            "x": 424,
            "y": 480
          },
          {
            "x": 400,
            "y": 480
          }
        ],
        "type": "plain",
        "source": "a78173a5-d03d-4160-97b9-2c9ae45bf18a",
        "target": "63435a04-7ccd-41e7-bb0d-d2d2b78b619d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "2771404a-e9cb-46f7-be3c-b01015d4ac03": {
        "id": "2771404a-e9cb-46f7-be3c-b01015d4ac03",
        "name": "",
        "path": [
          {
            "x": 304,
            "y": 144
          },
          {
            "x": 128,
            "y": 144
          },
          {
            "x": 128,
            "y": 432
          }
        ],
        "type": "plain",
        "source": "8371e190-a2f0-4dba-90f3-bcc4e8ea096c",
        "target": "10d93c3e-7fec-44c5-ac8f-3d55b48ba34a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "provider"
              },
              "b": {
                "kind": "manual",
                "value": [
                  {
                    "code": "sign_me",
                    "name": "Sign.me"
                  }
                ]
              },
              "type": "ENUM",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "5a356289-8f70-4cfc-b514-f838c9823582": {
        "id": "5a356289-8f70-4cfc-b514-f838c9823582",
        "name": "",
        "path": [
          {
            "x": 528,
            "y": 464
          },
          {
            "x": 504,
            "y": 464
          }
        ],
        "type": "error",
        "source": "dd4a50e1-ccc1-47f2-9724-e81958792c47",
        "target": "a78173a5-d03d-4160-97b9-2c9ae45bf18a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "732ce9c9-394f-4c86-9927-38212b1b3cd1": {
        "id": "732ce9c9-394f-4c86-9927-38212b1b3cd1",
        "name": "",
        "path": [
          {
            "x": 320,
            "y": 88
          },
          {
            "x": 320,
            "y": 128
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "8371e190-a2f0-4dba-90f3-bcc4e8ea096c",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "744ff593-1d6a-45ef-9a59-3f7b9a131072": {
        "id": "744ff593-1d6a-45ef-9a59-3f7b9a131072",
        "name": "",
        "path": [
          {
            "x": 168,
            "y": 448
          },
          {
            "x": 384,
            "y": 448
          },
          {
            "x": 384,
            "y": 464
          }
        ],
        "type": "error",
        "source": "10d93c3e-7fec-44c5-ac8f-3d55b48ba34a",
        "target": "63435a04-7ccd-41e7-bb0d-d2d2b78b619d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "bf377ceb-fb40-411b-8bae-582fbe23980b": {
        "id": "bf377ceb-fb40-411b-8bae-582fbe23980b",
        "name": "",
        "path": [
          {
            "x": 548,
            "y": 496
          },
          {
            "x": 548,
            "y": 504
          },
          {
            "x": 384,
            "y": 504
          },
          {
            "x": 384,
            "y": 496
          }
        ],
        "type": "plain",
        "source": "dd4a50e1-ccc1-47f2-9724-e81958792c47",
        "target": "63435a04-7ccd-41e7-bb0d-d2d2b78b619d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ca585312-51b2-41f4-af7d-5fcd9babf316": {
        "id": "ca585312-51b2-41f4-af7d-5fcd9babf316",
        "name": "",
        "path": [
          {
            "x": 168,
            "y": 480
          },
          {
            "x": 368,
            "y": 480
          }
        ],
        "type": "plain",
        "source": "10d93c3e-7fec-44c5-ac8f-3d55b48ba34a",
        "target": "63435a04-7ccd-41e7-bb0d-d2d2b78b619d",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "f02cd89a-c7d2-4bba-8461-2bf1fba850cf": {
        "id": "f02cd89a-c7d2-4bba-8461-2bf1fba850cf",
        "name": "",
        "path": [
          {
            "x": 336,
            "y": 144
          },
          {
            "x": 568,
            "y": 144
          },
          {
            "x": 568,
            "y": 432
          }
        ],
        "type": "default",
        "source": "8371e190-a2f0-4dba-90f3-bcc4e8ea096c",
        "target": "dd4a50e1-ccc1-47f2-9724-e81958792c47",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "// class SignMeLogger {\n//     async logData(response: FetchResponse, body?: string) {\n//         let requestEndpoint: string = \"\";\n\n//         if (response.url.includes(\"sign/cer/\")) {\n//             requestEndpoint = \"cer\"\n//         } else {\n//             requestEndpoint = response.url.split(\"/\").slice(-1)[0];\n//         };\n\n//         let responseJson: any = {};\n//         let responseText: string = \"\";\n//         Context.data.stage = requestEndpoint;\n\n//         switch (requestEndpoint) {\n//             case \"precheck\":\n//                 responseJson = await response.json();\n\n//                 if (Object.keys(responseJson).length \u003e 0) {\n//                     let rootObj = responseJson.email || responseJson.phone || responseJson.inn || responseJson.snils;\n//                     Context.data.request_exists = true;\n//                     Context.data.debug = JSON.stringify(rootObj);\n\n//                     if (rootObj.created \u0026\u0026 rootObj.approved \u0026\u0026 !rootObj.rejected) {\n//                         let existsField = Object.keys(responseJson)[0];\n//                         let existsValue = JSON.parse(Context.data.json_obj!).precheckDataObj[existsField];\n//                         Context.data.response = `Найдена подтвержденнная заявка в системе, совпадение по полю ${existsField}: ${existsValue}`;\n//                     } else if (!rootObj.created \u0026\u0026 !rootObj.approved \u0026\u0026 !rootObj.rejected) {\n//                         let existsField = Object.keys(responseJson)[0];\n//                         let existsValue = JSON.parse(Context.data.json_obj!).precheckDataObj[existsField];\n//                         Context.data.response = `Найдена неподтвержденнная заявка в системе, совпадение по полю ${existsField}: ${existsValue}, идентификатор заявки: ${rootObj.id}. На данном этапе заявки вы можете изменить её данные.`;\n//                     } else if (rootObj.rejected) {\n//                         let rejectComment = rootObj.reject_comment;\n//                         Context.data.response = `Заявка отклонена, причина: ${rejectComment}`;\n//                         Context.data.request_exists = true;\n//                     };\n//                 };\n//                 break;\n//             case \"api\":\n//                 responseText = await response.text();\n//                 Context.data.debug = responseText;\n\n//                 if (responseText.includes(\"error\")) {\n//                     Context.data.error = responseText;\n//                     Context.data.error_exists = true;\n//                     return;\n//                 };\n\n//                 responseJson = JSON.parse(responseText);\n//                 let requestId = responseJson.id.toString();\n//                 let requestBase64 = responseJson.pdf;\n//                 let requestBuffer = base64ToArrayBuffer(requestBase64);\n//                 let requestFile = await Context.fields.release_statement.create(\"Заявка на выпуск сертификата.pdf\", requestBuffer);\n//                 Context.data.release_statement = requestFile;\n//                 Context.data.request_id = requestId;\n//                 break;\n//             case \"photo\": \n//                 if (!response.ok) {\n//                     responseJson = (await response.json()).error;\n//                     let errorCode = responseJson.code;\n//                     let errorMessage: string = \"\";\n//                     let docType: any;\n\n//                     switch (errorCode) {\n//                         case 1:\n//                         case \"1\":\n//                             errorMessage = `HHTP 500: Ошибка сервера, у нас сохранились логи, запишите точное время для поиска ошибки. (Точное время выполнения запроса: ${new Datetime().format(\"DD.MM.YY HH:MM:SS\")})`;\n//                             break\n//                         case 2:\n//                         case \"2\":\n//                             errorMessage = `HTTP 400: Неправильный json: ${body}`;\n//                             break;\n//                         case 3:\n//                         case \"3\":\n//                             errorMessage = `HTTP 403: Неверный API-ключ.`;\n//                             break;\n//                         case 4:\n//                         case \"4\":\n//                             let userSnils = Context.data.snils;\n//                             errorMessage = `HTTP 404: Пользователь со СНИЛС ${userSnils} не найден.`;\n//                             break;\n//                         case 6:\n//                         case \"6\":\n//                             docType = JSON.parse(body!).doctype;\n//                             errorMessage = `Неправильный тип документа: ${docType}, разрешенные виды документов - между 1 и 17.`;\n//                             break;\n//                         case 7:\n//                         case \"7\":\n//                             docType = JSON.parse(body!).doctype;\n//                             errorMessage = `Проверьте base64 содержимое файла ${docType}`;\n//                             break;\n//                         case 8:\n//                         case \"8\":\n//                             let fileName = JSON.parse(body!).name;\n//                             errorMessage = `Неправильное имя файла: ${fileName}`;\n//                             break;\n//                     };\n\n//                     Context.data.error = errorMessage;\n//                     Context.data.error_exists = true;\n//                 };\n//             case \"activate\":\n//                 responseText = await response.text();\n\n//                 if (responseText.includes(\"1\")) {\n//                     Context.data.request_confirmed = true;\n//                 };\n\n//                 break;\n//             case \"comstaff\":\n//                 responseText = await response.text();\n\n//                 if (responseText.includes(\"error\")) {\n//                     Context.data.error = responseText;\n//                     Context.data.request_exists = true;\n//                     return;\n//                 };\n\n//                 let userId = responseText;\n//                 Context.data.staff_id = userId;\n//                 break;\n//             case \"keys\":\n//                 responseJson = await response.json();\n\n//                 if (responseJson.error) {\n//                     Context.data.error_exists = true;\n//                     Context.data.error = responseJson.error;\n//                     return;\n//                 };\n\n//                 let certificateId = responseJson[0].id;\n//                 Context.data.certificate_id = certificateId;\n//                 break;\n//         };\n//     };\n// };\n\n// class SignMeProvider {\n//     private method = \"POST\";\n//     private contentType = \"application/json\"\n//     private headers: Record\u003cstring, string\u003e = {\n//         \"Content-Type\": this.contentType\n//     };\n//     private baseUrl: string = Namespace.params.data.sign_me_server_address;\n//     private logger: SignMeLogger;\n\n//     private paths = {\n//         precheckPath: `${this.baseUrl}/register/precheck`,\n//         registerPath: `${this.baseUrl}/register/api`,\n//         activatePath: `${this.baseUrl}/register/activate`,\n//         comstaffPath: `${this.baseUrl}/register/comstaff`,\n//         certsInfoPath: `${this.baseUrl}/certapi/keys`,\n//         sendDocsPath: `${this.baseUrl}/photo`,\n//         getCertsPath: `${this.baseUrl}/sign/cer`\n//     };\n\n//     constructor(logger: SignMeLogger) {\n//         this.logger = logger;\n//     };\n\n//     async makeRequest(path: string, body: string) {\n//         let response: FetchResponse | undefined;\n//         let headers = this.headers;\n//         let method = this.method\n\n//         try {\n//             response = await fetch(path, {\n//                 headers,\n//                 method,\n//                 body\n//             });\n\n//             if (path.includes(\"photo\")) {\n//                 await this.logger.logData(response, body);\n//             } else {\n//                 await this.logger.logData(response);\n//             };\n//         } catch (err) {\n//             Context.data.error = err.message;\n//             Context.data.error_exists = true;\n//         };\n//     };\n\n//     async precheck() {\n//         let path = this.paths.precheckPath;\n//         let body = JSON.stringify(JSON.parse(Context.data.json_obj!).precheckDataObj);\n//         await this.makeRequest(path, body);\n//     };\n\n//     async register() {\n//         let path = this.paths.registerPath;\n\n//         if (Context.data.data_changed) {\n//             await serializeData();\n//             Context.data.data_changed = false;\n//         };\n\n//         let body = JSON.stringify(JSON.parse(Context.data.json_obj!).registerDataObj);\n\n//         await this.makeRequest(path, body);\n//     };\n\n//     async activate() {\n//         let path = this.paths.activatePath;\n//         let activateBody: activateData = {\n//             api_key,\n//             uid: Context.data.request_id!,\n//             noemail: true\n//         };\n//         let body = JSON.stringify(activateBody);\n//         await this.makeRequest(path, body);\n//     };\n\n//     async sendDocs() {\n//         let path = this.paths.sendDocsPath;\n//         let documentsObj: documentsData = JSON.parse(Context.data.json_obj!).documentsDataObj;\n//         let body: string;\n\n//         for (let document of documentsObj) {\n//             body = JSON.stringify(document);\n//             await this.makeRequest(path, body);\n//         };\n//     };\n\n//     async createUser() {\n//         let path = this.paths.comstaffPath;\n//         let body = JSON.stringify(JSON.parse(Context.data.json_obj!).staffDataObj);\n//         await this.makeRequest(path, body);\n//     };\n\n//     async getCertsInfo() {\n//         let path = this.paths.certsInfoPath;\n//         let body = JSON.stringify(JSON.parse(Context.data.json_obj!).certRequestDataObj);\n//         await this.makeRequest(path, body);\n//     };\n// };\n\n\n// const numberToDocTypeReference: Record\u003cstring, string\u003e = {\n//     \"1\": \"passport_main_page\",\n//     \"2\": \"passport_living_page\",\n//     \"3\": \"snils_file\",\n//     \"4\": \"release_statement\"\n// };\n// const signMeLogger = new SignMeLogger();\n// const signMeProvider = new SignMeProvider(signMeLogger);\n// const api_key = \"0AXPZD21MY812DYA\";\n// const ogrn = \"171341863204\";\n// const method: string = \"POST\";\n// const headers = {\n//     \"Content-Type\": \"application/json\"\n// };\n\n\n// type revokeCertificate = {\n//     id: string,\n//     api_key: string\n// };\n\n// type documentData = {\n//     api_key: string,\n//     utype: string,\n//     uid: string,\n//     name: string,\n//     file: string,\n//     doctype: string\n// };\n\n// type documentsData = documentData[];\n\n// type activateData = {\n//     api_key: string,\n//     uid: string,\n//     noemail?: Boolean\n// };\n\n// type staffData = {\n//     key: string,\n//     phone: string,\n//     cogrn: string\n// };\n\n// interface certRequestData {\n//     api_key: string,\n//     snils: string,\n//     inn?: string,\n//     kpp?: string\n// };\n\n// interface precheckData extends certRequestData {\n//     phone: string,\n//     email: string,\n// };\n\n// interface registerData extends precheckData {\n//     name: string,\n//     surname: string,\n//     lastname: string,\n//     bdate: string,\n//     gender: string,\n//     ps: string,\n//     pn: string,\n//     issued: string,\n//     pcode: string,\n//     pdate: string,\n//     country: string,\n//     region: string,\n//     city: string,\n//     street?: string,\n//     house?: string,\n//     building?: string,\n//     room?: string,\n//     regtype: string,\n//     external?: string,\n//     delivery: string,\n//     ca: string\n// };\n\n// type requestBody = certRequestData | precheckData | registerData | activateData | staffData | revokeCertificate | FormData | undefined;\n// type contextKey = keyof typeof Context.data;\n\n\n// let documentsDataObj: documentsData = [];\n// let certsRequestData = new FormData()\n// let cecrtificateBase64: string;\n// let certRequestDataObj: certRequestData; \n// let precheckDataObj: precheckData;\n// let registerDataObj: registerData;\n// let staffDataObj: staffData; \n// let user: UserItem;\n// let responseData: string;\n\n// async function serializeData(): Promise\u003cvoid\u003e {\n//     try {\n//         let inn = Context.data.inn!;\n//         let name = Context.data.name!;\n//         let surname = Context.data.surname!;\n//         let lastname = Context.data.lastname!;\n//         let email = Context.data.email![0].email;\n//         let phone = Context.data.phone![0].tel;\n//         let gender = Context.data.gender!.code.toUpperCase();;\n//         let bdate = Context.data.birth_date!.format(\"YYYY-MM-DD\");\n//         let pn = Context.data.passport_number!;\n//         let ps = Context.data.passport_series!;\n//         let pdate = Context.data.passport_date!.format(\"YYYY-MM-DD\");\n//         let pcode = Context.data.passport_code!;\n//         let issued = Context.data.issued_by!;\n//         let snils = Context.data.snils!;\n//         let country = \"ru\";\n//         let region = Context.data.region!;\n//         let city = Context.data.city!;\n//         let jsonObj = {};\n\n//         for (let key of Object.keys(numberToDocTypeReference)) {\n//             let contextKey: contextKey = numberToDocTypeReference[key];\n//             let downloadUrl = await Context.data[contextKey].getDownloadUrl();\n//             let fileName = await Context.data[contextKey].fetch().then((f: any) =\u003e f.data.__name);\n//             let currentDocBuffer = await fetch(downloadUrl).then(async r =\u003e await r.arrayBuffer());\n//             let fileBase64 = arrayBufferToBase64(currentDocBuffer);\n//             let currentDocObj: documentData = {\n//                 api_key,\n//                 utype: \"1\",\n//                 uid: snils,\n//                 doctype: key,\n//                 file: fileBase64,\n//                 name: fileName\n//             };\n//             documentsDataObj.push(currentDocObj);\n//         };\n\n//         registerDataObj = {\n//             api_key,\n//             inn,\n//             name,\n//             surname,\n//             lastname,\n//             email,\n//             phone,\n//             gender,\n//             bdate,\n//             pn,\n//             ps,\n//             pdate,\n//             pcode,\n//             issued,\n//             snils,\n//             country,\n//             region,\n//             city,\n//             regtype: Context.data.data_changed ? \"3\" : \"2\",\n//             delivery: \"0\",\n//             ca: \"NKEP12\"\n//         };\n\n//         precheckDataObj = {\n//             api_key,\n//             phone,\n//             snils,\n//             email,\n//             inn\n//         };\n\n//         certRequestDataObj = {\n//             api_key,\n//             snils\n//         };\n\n//         staffDataObj = {\n//             key: api_key,\n//             cogrn: ogrn,\n//             phone\n//         };\n        \n//         certsRequestData.append(\"key\", api_key);\n//         certsRequestData.append(\"user_ph\", registerDataObj.phone);\n\n//         jsonObj = {\n//             registerDataObj,\n//             precheckDataObj,\n//             certRequestDataObj,\n//             staffDataObj,\n//             documentsDataObj\n//         };\n\n//         Context.data.json_obj = JSON.stringify(jsonObj);\n//     } catch (err) {\n//         Context.data.error_exists = true;\n//         Context.data.error = err.message;\n//     };\n// };\n\n// function base64ToArrayBuffer(base64: string) {\n//     let binary_string = atob(base64);\n//     let len = binary_string.length;\n//     let bytes = new Uint8Array(len);\n\n//     for (var i = 0; i \u003c len; i++) {\n//         bytes[i] = binary_string.charCodeAt(i);\n//     }\n//     return bytes.buffer;\n// }\n\n// function arrayBufferToBase64(buffer: ArrayBuffer): string {\n//     let binary = '';\n//     let bytes = new Uint8Array(buffer);\n//     let len = bytes.byteLength;\n\n//     for (let i = 0; i \u003c len; i++) {\n//         binary += String.fromCharCode(bytes[i]);\n//     };\n\n//     return btoa(binary);\n// };\n\n// async function precheck(): Promise\u003cvoid\u003e {\n//     try {\n//         await serializeData();\n//         await signMeProvider.precheck();\n//     } catch (err) {\n//         throw new Error(err.message)\n//     };\n// };\n\n// async function register(): Promise\u003cvoid\u003e {\n//     try {\n//         await signMeProvider.register();\n//     } catch (err) {\n//         throw new Error(err.message)\n//     };\n// };\n\n// async function sendPhotos(): Promise\u003cvoid\u003e {\n//     try {\n//         await signMeProvider.sendDocs();\n//     } catch (err) {\n//         throw new Error(err.message);\n//     };\n// };\n\n// async function activate(): Promise\u003cvoid\u003e {\n//     try {\n//         await signMeProvider.activate();\n//     } catch (err) {\n//         throw new Error(err.message)\n//     };\n// };\n\n// async function refreshData(): Promise\u003cvoid\u003e {\n//     Context.data.data_changed = true;\n// };\n\n// type certificateInfo = {\n//     type: string,\n//     nonExportable: boolean\n// };\n\n// type docField = {\n//     type: string,\n//     value: string\n// };\n\n// type cspInfo = {\n//     type: string\n// };\n\n// type passportInfoData = {\n//     requisitesToAddOrUpdate: docField[]\n// };\n\n// type issueData = {\n//     certificateTemplateInfo: certificateInfo,\n//     subjectInfo: userData,\n//     cspInfo: cspInfo\n// };\n\n// type confirmIssueData = {\n//     operationToConfirm: string,\n//     parameters: {\n//         snilsNumber: string,\n//         birthDate: string\n//     }\n// };\n\n// type userData = {\n//     inn: string,\n//     lastname: string,\n//     firstname: string,\n//     middlename: string,\n//     email: string,\n//     phone: string,\n//     type: string\n// };\n\n// type fileData = {\n//     size: string,\n//     extension: string,\n//     fileBuffer: ArrayBuffer,\n//     name: string\n// };\n\n// type requestData = issueData | passportInfoData;\n// type errorKey = keyof typeof Context.fields.error_type.variants\n\n// const stableData = {\n//     certificateType: {\n//         type: \"notQualified\",\n//         nonExportable: false\n//     },\n//     personType: \"naturalPerson\",\n//     cspType: \"asess\"\n// };\n// let releaseStatementObj: passportInfoData = {\n//     requisitesToAddOrUpdate: []\n// };\n// let userDataObj: userData;\n// let certificateTemplateInfoObj: certificateInfo;\n// let cspInfoObj: cspInfo;\n// let issueDataObj: issueData;\n// let passportInfoObj: passportInfoData = {\n//     requisitesToAddOrUpdate: []\n// };\n// let releaseStatementInfo: passportInfoData = {\n//     requisitesToAddOrUpdate: []\n// };\n// let fileDataObj: fileData = {\n//     fileBuffer: new ArrayBuffer(0),\n//     size: \"0\",\n//     extension: \"\",\n//     name: \"\"\n// };\n\n// let confirmIssueDataObj: confirmIssueData = {\n//     operationToConfirm: \"\",\n//     parameters: {\n//         snilsNumber: \"\",\n//         birthDate: \"\"\n//     }\n// };\n\n// let dataObj: any;\n\n// class KonturLogger {\n//     data: string;\n//     error: string;\n//     baseUrl = Namespace.params.data.kontur_server_address;\n\n//     async logData(response: FetchResponse | undefined) {\n//         response = response!;\n//         let responseEndpoint = response.url.replace(`${this.baseUrl}/v1/issues`, \"\");\n//         let responseJson: any;\n//         let currentDoc = Context.data.current_doc;\n//         let requestId = Context.data.request_id;\n//         let responseStatus: string = \"\";\n//         let fileName: string = \"\"\n\n//         switch (responseEndpoint) {\n//             case \"\":\n//                 responseJson = await response.json();\n//                 let issueId = responseJson.id;\n//                 Context.data.debug = JSON.stringify(responseJson);\n//                 Context.data.request_id = issueId;\n//                 break;\n//             case `/${requestId}`:\n//                 responseJson = await response.json();\n//                 let actualized = responseJson.actualized;\n//                 Context.data.issue_status = responseJson.status;\n//                 Context.data.request_actualized = actualized;\n//                 Context.data.debug = JSON.stringify(responseJson);\n//                 break;\n//             case `/${requestId}/documents/${currentDoc}`:\n//                 if (response.status == 204) {\n//                     responseStatus = `Документ ${currentDoc} успешно загружен.`;\n//                 } else {\n//                     this.logError(\"data_error\", undefined, `Не удалось загрузить документ ${currentDoc}.`);\n//                 };\n\n//                 Context.data.debug = responseStatus;\n//                 break;\n//             case `/${requestId}/documents/${currentDoc}/pages`:\n//                 if (response.status == 204) {\n//                     responseStatus = `Страница документа ${currentDoc} успешно загружена.`;\n//                 } else {\n//                     this.logError(\"data_error\", undefined, `Не удалось загрузить страницу к документу ${currentDoc}.`);\n//                 }\n//                 Context.data.debug = responseStatus;\n//                 break;\n//             case `/${requestId}/templates/releaseStatement`:\n//                 fileName = `Заявление на выпуск сертификата для ${Context.data.surname} ${Context.data.name} ${Context.data.lastname} ${new TDate().format(\"DD.MM.YYYY\")}.pdf`;\n//                 let releaseStatement = await Context.fields.release_statement.create(fileName, await response.arrayBuffer());\n//                 Context.data.release_statement = releaseStatement;\n//                 break;\n//             case `/${requestId}/documents/releaseStatement/sign`:\n//                 Context.data.request_confirmed = true;\n//                     let confirmTask = await Namespace.processes.unep_issue_request._searchTasks().where((f, g) =\u003e g.and(\n//                     f.performers.has(Context.data.user!),\n//                     f.state.like(\"in_progress\")\n//                 )).first();\n//                 if (confirmTask) {\n//                     let taskExits = await confirmTask!.getExits();\n//                     await confirmTask!.submitTask(taskExits[0].id)\n//                     return;\n//                 };\n//                 break;\n//         };\n//     };\n\n//     async logError(_type: Enum$Context$error_type, response?: FetchResponse, error?: string) {\n//         Context.data.error_exists = true;\n//         let errorVariant: TEnum\u003cEnum$Context$error_type\u003e = {name: Context.fields.error_type.variants[_type as errorKey].name, code: _type};\n//         Context.data.error_type = errorVariant;\n//         if (response!.url.includes(\"confirmation-requests\")) {\n//             let confirmTask = await Namespace.processes.unep_issue_request._searchTasks().where((f, g) =\u003e g.and(\n//                 f.performers.has(Context.data.user!),\n//                 f.state.like(\"in_progress\")\n//             )).first();\n//             if (confirmTask) {\n//                 let taskExits = await confirmTask!.getExits();\n//                 await confirmTask!.submitTask(taskExits[0].id);\n//                 Context.data.error = await response!.text();\n//             };\n//             return;\n//         };\n\n//         if (!!response) {\n//             switch (response.status) {\n//                 case 400:\n//                     if (response.url.includes(\"sign\")) {\n//                         let responseJson = await response.json();\n//                         let errorCode = responseJson.error.code;\n//                         switch (errorCode) {\n//                             case \"ConfirmationInProgress\":\n//                                 Context.data.error_exists = false;\n//                                 Context.data.request_confirmed = false;\n//                                 break;\n//                             case \"ConfirmationFailed\":\n//                                 let errorType = responseJson.error.details[0].code;\n//                                 if (errorType == \"ConfirmationRejected\") {\n//                                     Context.data.confirmation_error_reason = \"Пользователь отказался от выпуска УНЭП.\";\n//                                     break;\n//                                 } else if (errorType == \"UserNotFoundInEsia\") {\n//                                     Context.data.confirmation_error_reason = \"У пользователя отсутствует подтвержденная учетная запись в ЕСИА.\";\n//                                     break;\n//                                 } else if (errorType == \"ConfirmationExpired\"){\n//                                     Context.data.confirmation_error_reason = \"Истекло время на подтверждение личности\";\n//                                     break;\n//                                 };\n//                             default:\n//                                 Context.data.error = responseJson.error.message;\n//                                 throw new Error();\n//                         };\n//                     }\n//                     const errorDetails = (await response.json()).error.details;\n//                     const errorFields = errorDetails.map((field: any) =\u003e {\n//                         return JSON.stringify({\n//                             'Поле': field.target,\n//                             'Причина': field.message\n//                         });\n//                     }).join(\", \");\n//                     throw new Error(`Ошибка в данных, неверные поля: ${errorFields}`);\n//                 case 401:\n//                     throw new Error(\"Неверный api-ключ\");\n//                 case 403:\n//                     throw new Error(\"Недостаточно прав на создание заявки\");\n//                 case 404:\n//                     throw new Error(\"Заявка с данным идентификатором не найдена.\");\n//                 case 408:\n//                     Context.data.connection_timed_out = true;\n//                     throw new Error(\"Превышено время ожидания запроса.\")\n//                 case 409:\n//                     throw new Error(\"Данная заявка в процессе актуализации.\")\n//                 case 429:\n//                     throw new Error(\"Данные заявки изменялись слишком много раз, попробуйте заново.\")\n//             };\n//         };\n\n//         throw new Error(error);\n//     };\n// };\n\n// class KonturProvider {\n//     constructor (logger: KonturLogger) {\n//         this.logger = logger;\n//     };\n\n//     private baseUrl = `${Namespace.params.data.kontur_server_address}/v1/issues`;\n//     private apiToken = \"7a823d8d-098b-30c2-2ac8-05d773c1e494\"\n//     private headers: Record\u003cstring, string\u003e = {\n//         \"X-KONTUR-APIKEY\": this.apiToken,\n//         \"Content-Type\": \"application/json\"\n//     };\n//     private logger: KonturLogger;\n\n//     private apiPaths = {\n//         create_issue: {\n//             path: this.baseUrl,\n//             method: \"POST\"\n//         },\n//         check_issue: {\n//             path: `${this.baseUrl}/issueId`,\n//             method: \"GET\",\n//             getPath: function(id: string) {\n//                 return this.path.replace(\"issueId\", id);\n//             }\n//         },\n//         send_doc_info: {\n//             path: `${this.baseUrl}/issueId/documents/docType`,\n//             method: \"PUT\",\n//             getPath(id: string, docType: string) {\n//                 return this.path.replace(\"issueId\", id).replace(\"docType\", docType)\n//             }\n//         },\n//         send_doc_page: {\n//             path: `${this.baseUrl}/issueId/documents/docType/pages`,\n//             method: \"POST\",\n//             getPath: function(id: string, docType: string) {\n//                 return this.path.replace(\"issueId\", id).replace(\"docType\", docType)\n//             }\n//         },\n//         create_doc_template: {\n//             path: `${this.baseUrl}/issueId/templates/templateType`,\n//             method: \"POST\",\n//             getPath: function(id: string, template: string) {\n//                 return this.path.replace(\"issueId\", id).replace(\"templateType\", template);\n//             }\n//         },\n//         send_to_confirmation: {\n//             path: `${this.baseUrl}/issueId/confirmation-requests`,\n//             method: \"POST\",\n//             getPath: function(id: string) {\n//                 return this.path.replace(\"issueId\", id)\n//             }\n//         },\n//         confirm_release: {\n//             path: `${this.baseUrl}/issueId/documents/releaseStatement/sign`,\n//             method: \"POST\",\n//             getPath: function(id: string) {\n//                 return this.path.replace(\"issueId\", id);\n//             }\n//         },\n//         validate_issue: {\n//             path: `${this.baseUrl}/issueId/validate`,\n//             method: \"POST\",\n//             getPath: function(id: string) {\n//                 return this.path.replace(\"issueId\", id)\n//             }\n//         },\n//         get_certificate: {\n//             path: `${this.baseUrl}/issueId/download-certificate`,\n//             method: \"POST\",\n//             getPath: function(id: string) {\n//                 return this.path.replace(\"issueId\", id)\n//             }\n//         }\n//     };\n\n//     private body: any;\n//     private fileDataObj: fileData\n\n//     private async serializeFiles() {\n//         const passportFile = await Context.data.passport_main_page!.fetch();\n//         const passportFileLink = await passportFile.getDownloadUrl();\n//         const passportFileExtension = passportFile.data.__name.split(\".\").slice(-1)[0];\n//         const passportArrayBuffer = await fetch(passportFileLink).then(async file =\u003e await file.arrayBuffer());\n//         const passportFileSize = passportArrayBuffer.byteLength;\n\n//         this.fileDataObj = {\n//             extension: passportFileExtension,\n//             size: passportFileSize.toString(),\n//             fileBuffer: passportArrayBuffer,\n//             name: passportFile.data.__name\n//         };\n//     };\n\n//     private actualize() {\n//         Context.data.request_actualized = false;\n//         Context.data.error = \"\";\n//     };\n\n//     async makeRequest(url: string, method: string) {\n//         this.actualize();\n//         let response: FetchResponse | undefined = undefined;\n//         try {\n//             response = await fetch(url, {\n//                 method,\n//                 headers: this.headers,\n//                 body: this.body || undefined\n//             });\n//         } catch (err) {\n//             Context.data.error = err.message;\n//             await this.logger.logError(\"sdk_error\", undefined, err.message);\n//         };\n        \n//         if (!response!.ok) {\n//             await this.logger.logError(\"data_error\", response!)\n//         };\n//         await this.logger.logData(response);\n//     };\n\n\n//     async createIssue() {\n//         let issueData = JSON.parse(Context.data.json_obj!).issueDataObj\n//         this.body = JSON.stringify(issueData);\n//         let pathObj = this.apiPaths.create_issue;\n//         let [path, method] = [pathObj.path, pathObj.method];\n//         await this.makeRequest(path, method);\n//     };\n\n//     async checkIssue() {\n//         let pathObj = this.apiPaths.check_issue;\n//         let [path, method] = [pathObj.getPath(Context.data.request_id!), pathObj.method];\n//         this.body = \"\";\n//         await this.makeRequest(path, method);\n//     };\n\n//     async createDocs() {\n//         let passportInfo = JSON.parse(Context.data.json_obj!).passportInfoObj;\n//         let releaseStatementInfo = JSON.parse(Context.data.json_obj!).releaseStatementInfo;\n//         Context.data.debug = JSON.stringify(passportInfo)\n//         let requestId = Context.data.request_id!;\n//         let pathObj = this.apiPaths.send_doc_info;\n//         let method = pathObj.method;\n//         let path: string;\n//         let docCode = Context.data.document_type!.code;\n//         if (docCode == \"passport\") {\n//             path = pathObj.getPath(requestId, \"passport\")\n//         } else {\n//             path = pathObj.getPath(requestId, \"otherIdentity\")\n//         }\n//         Context.data.current_doc = docCode;\n//         this.body = JSON.stringify(passportInfo);\n//         await this.makeRequest(path, method);\n//         path = pathObj.getPath(requestId, \"releaseStatement\");\n//         Context.data.current_doc = \"releaseStatement\";\n//         this.body = JSON.stringify(releaseStatementInfo);\n//         await this.makeRequest(path, pathObj.method);\n//     };\n\n//     async sendPages() {\n//         await this.serializeFiles();\n//         let requestId = Context.data.request_id!;\n//         let pathObj = this.apiPaths.send_doc_page;\n//         let method = pathObj.method;\n//         let path: string;\n//         let docCode = Context.data.document_type!.code;\n//         if (docCode == \"passport\") {\n//             path = pathObj.getPath(requestId, \"passport\") \n//         } else {\n//             path = pathObj.getPath(requestId, \"otherIdentity\") \n//         }\n//         let contentType: string = \"\";\n//         let fileExt = this.fileDataObj.extension;\n//         this.body = this.fileDataObj.fileBuffer;\n\n//         if (fileExt === \"jpg\" || fileExt === \"jpeg\") {\n//             contentType = \"image/jpeg\"\n//         } else if (fileExt === \"pdf\") {\n//             contentType = \"application/pdf\"\n//         } else if (fileExt === \"png\") {\n//             contentType = \"image/png\"\n//         } else if (fileExt === \"gif\") {\n//             contentType = \"image/gif\"\n//         } else {\n//             await this.logger.logError(\"data_error\", undefined, `Неподдерживаемый формат файла для документа ${this.fileDataObj.name}: .${this.fileDataObj.extension}`);\n//         };\n\n//         this.headers[\"Content-Type\"] = contentType;\n//         this.headers[\"Content-Length\"] = this.fileDataObj.size;\n//         await this.makeRequest(path, method);\n\n//         [path, method] = [pathObj.getPath(requestId, \"releaseStatement\"), pathObj.method];\n//         await this.makeRequest(path, method);\n//     };\n\n//     async createTemplate() {\n//         this.body = undefined;\n//         let pathObj = this.apiPaths.create_doc_template;\n//         let [path, method] = [pathObj.getPath(Context.data.request_id!, \"releaseStatement\"), pathObj.method];\n//         await this.makeRequest(path, method);\n//         Context.data.connection_timed_out = false;\n//     };\n\n//     async createConfirmationRequest() {\n//         let snils = Context.data.snils!;\n//         snils = snils.replace(/-/g, \"\").replace(/\\s/g, \"\");\n//         this.body = JSON.stringify({\n//             operationToConfirm: \"signingReleaseStatementWithEsia\",\n//             parameters: {\n//                 snilsNumber: snils,\n//                 birthDate: Context.data.birth_date!.asDatetime(new TTime()).format()\n//             }\n//         });\n//         let pathObj = this.apiPaths.send_to_confirmation;\n//         let [path, method] = [pathObj.getPath(Context.data.request_id!), pathObj.method];\n//         await this.makeRequest(path, method);\n//     };\n\n//     async signReleaseStatement() {\n//         this.body = JSON.stringify({});\n//         let pathObj = this.apiPaths.confirm_release;\n//         let [path, method] = [pathObj.getPath(Context.data.request_id!), pathObj.method];\n//         await this.makeRequest(path, method);\n//     };\n\n// };\n\n// async function serialize() {\n//     try {\n//         const personType = stableData.personType;\n//         const inn = Context.data.inn!;\n//         const lastname = Context.data.lastname!;\n//         const firstname = Context.data.name!;\n//         const middlename = Context.data.surname!;\n//         const email = Context.data.email![0].email!;\n//         const phone = Context.data.phone![0].tel.slice(-10);\n//         const series = Context.data.passport_series!;\n//         const passportNumber = Context.data.passport_number!;\n//         const issueDate = Context.data.passport_date!.format(\"DD.MM.YYYY\");\n//         const birthDate = Context.data.birth_date!.format(\"DD.MM.YYYY\");\n//         const birthPlace = `${Context.data.country} ${Context.data.region} ${Context.data.city}`;\n//         let issueOrganizationId = Context.data.passport_code!;\n//         const docCode = Context.data.document_type!.code;\n\n//         if (issueOrganizationId.includes(\"-\")) {\n//             issueOrganizationId = issueOrganizationId.replace(/-/g, \"\");\n//         };\n\n//         if (docCode == \"passport\") {\n//             passportInfoObj.requisitesToAddOrUpdate = [\n//                 {type: \"series\", value: series},\n//                 {type: \"number\", value: passportNumber},\n//                 {type: \"issueDate\", value: issueDate},\n//                 {type: \"birthDate\", value: birthDate},\n//                 {type: \"birthPlace\", value: birthPlace},\n//                 {type: \"issueOrganizationId\", value: issueOrganizationId},\n//             ];\n//         } else {\n//             let expirationDate = Context.data.identity_expiration ? Context.data.identity_expiration.format(\"DD.MM.YYYY\") : \"\";\n//             let issuedBy = Context.data.issued_by!;\n//             passportInfoObj.requisitesToAddOrUpdate = [\n//                 {type: \"number\", value: passportNumber},\n//                 {type: \"issueDate\", value: issueDate},\n//                 {type: \"issueOrganization\", value: issuedBy}\n//             ];\n//             if (!!expirationDate) {\n//                 passportInfoObj.requisitesToAddOrUpdate.push({type: \"validTo\", value: expirationDate});\n//             };\n//             if (!!Context.data.passport_series) {\n//                 passportInfoObj.requisitesToAddOrUpdate.push({type: \"series\", value: series});\n//             };\n//         };\n\n//         certificateTemplateInfoObj = stableData.certificateType;\n//         cspInfoObj = {\n//             type: stableData.cspType\n//         };\n//         userDataObj = {\n//             inn,\n//             lastname,\n//             firstname,\n//             middlename,\n//             email,\n//             type: personType,\n//             phone\n//         };\n//         issueDataObj = {\n//             certificateTemplateInfo: certificateTemplateInfoObj,\n//             subjectInfo: userDataObj,\n//             cspInfo: cspInfoObj\n//         };\n\n//         Context.data.json_obj = JSON.stringify({issueDataObj, passportInfoObj, releaseStatementInfo})\n//     } catch (err) {\n//         await konturLogger.logError(\"sdk_error\", undefined, `Ошибка в данных: ${err.message}`);\n//     };\n// };\n\n// const konturLogger = new KonturLogger();\n// const konturProvider = new KonturProvider(konturLogger);\n\n// async function createIssue(): Promise\u003cvoid\u003e {\n//     Context.data.error_exists = false;\n//     await serialize();\n\n//     try {\n//         await konturProvider.createIssue();\n//     } catch (err) {\n//         Context.data.error = err.message;\n//     };\n// };\n\n// async function checkIssue(): Promise\u003cvoid\u003e {\n//     Context.data.error_exists = false;\n    \n//     try {\n//         await konturProvider.checkIssue();\n//     } catch (err) {\n//         Context.data.error = err.message;\n//     };\n// };\n\n// async function sendDocs(): Promise\u003cvoid\u003e {\n//     Context.data.error_exists = false;\n\n//     try {\n//         await konturProvider.createDocs();\n//     } catch (err) {\n//         Context.data.error = err.message;\n//     };\n// };\n\n// async function sendPages(): Promise\u003cvoid\u003e {\n//     Context.data.error_exists = false;\n\n//     try {\n//         await konturProvider.sendPages();\n//     } catch (err) {\n//         Context.data.error = err.message;\n//     };\n// };\n\n// async function createReleaseStatementTemplate(): Promise\u003cvoid\u003e {\n//     Context.data.error_exists = false;\n\n//     try {\n//         await konturProvider.createTemplate();\n//     } catch (err) {\n//         Context.data.error = err.message;\n//     };\n// };\n\n// async function createConfirmationRequest(): Promise\u003cvoid\u003e {\n//     Context.data.error_exists = false;\n\n//     try {\n//         await konturProvider.createConfirmationRequest();\n//     } catch (err) {\n//         Context.data.error = err.message;\n//     };\n// };\n\n// async function confirmIssue(): Promise\u003cvoid\u003e {\n//     Context.data.error_exists = false;\n//     try {\n//         await konturProvider.signReleaseStatement();\n//     } catch (err) {\n//         Context.data.error = err.message;\n//     };\n// };",
  "forms": [
    {
      "id": "",
      "code": "form_989420e2-dea4-4620-93ff-1a48cc36975f",
      "name": "Ознакомиться с заявкой",
      "values": {
        "formType": "task-form",
        "formGroup": {
          "path": ["context"]
        }
      },
      "widget": {
        "draft": false,
        "deleted": false,
        "version": 4
      },
      "content": {
        "[footer]": [
          {
            "id": "31979bac-00bd-4123-a901-9d14190c8dde",
            "values": {
              "buttons": {
                "path": ["actionButtons"]
              }
            },
            "content": null,
            "descriptor": "buttons-panel",
            "descriptorVersion": null
          }
        ],
        "[content]": [
          {
            "id": "c18e9118-cda2-49f4-ae50-5414c9b970b2",
            "values": {
              "shadow": true
            },
            "content": {
              "": [
                {
                  "id": "dcdd3e4e-0c49-483b-87c2-8c782a8890f0",
                  "values": {
                    "form": {
                      "path": ["context"]
                    },
                    "fields": {
                      "path": ["fields"]
                    }
                  },
                  "content": null,
                  "descriptor": "dynamic-form",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "modal-body",
            "descriptorVersion": null
          }
        ],
        "[sidebar]": [
          {
            "id": "39d7757a-529f-4526-98f3-fddc66becf85",
            "values": null,
            "content": {
              "": [
                {
                  "id": "abe4b782-6e2d-49cc-a57e-81b636422ee5",
                  "values": {
                    "context": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "target-widget",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "231b371a-64ae-4b61-8014-cba6da318ac9",
            "values": null,
            "content": {
              "": [
                {
                  "id": "5e39b91d-aea4-467e-862f-0f8766eb44df",
                  "values": {
                    "context": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "linked-item",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "a4469de0-d7f3-11ec-9d64-0242ac120002",
            "values": null,
            "content": {
              "": [
                {
                  "id": "3ead7c41-6dfa-4144-80da-2bfb5f0ccf59",
                  "values": {
                    "formGroup": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "item-reminder",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "56d1d0e8-aa83-4cdd-ae43-294b26ad4d04",
            "values": null,
            "content": {
              "": [
                {
                  "id": "e1525e34-14ba-456b-b703-f407945c01e0",
                  "values": {
                    "formGroup": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "item-tasks",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "eef018f2-1d3a-4600-a19d-791733b28b5e",
            "values": null,
            "content": {
              "": [
                {
                  "id": "e0a17dec-603a-461a-becf-861637630584",
                  "values": {
                    "target": {
                      "path": ["target"]
                    }
                  },
                  "content": null,
                  "descriptor": "messages-target",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          }
        ],
        "[formInfoPanel]": [
          {
            "id": "dcc1dbeb-8e2d-4b3b-86a3-66151d00e82e",
            "values": {
              "__validateResult": {
                "path": ["context", "__validateResult"]
              }
            },
            "content": null,
            "descriptor": "validation-info-block",
            "descriptorVersion": null
          }
        ],
        "[headerControls]": [
          {
            "id": "475aa008-aaff-402f-8de2-408bae1f1928",
            "values": {
              "task": {
                "path": ["task"]
              }
            },
            "content": null,
            "descriptor": "task-percent-widget",
            "descriptorVersion": null
          },
          {
            "id": "702d9c59-77ae-4dd5-b71a-a5fe7b58858f",
            "values": {
              "item": {
                "path": ["__itemRef"]
              }
            },
            "content": null,
            "descriptor": "extension-zone-toolbar-widget",
            "descriptorVersion": null
          },
          {
            "id": "f7b11c79-4267-4f5b-a002-dd629d549682",
            "values": {
              "task": {
                "path": ["task"]
              },
              "skipRulesCheck": true
            },
            "content": null,
            "descriptor": "process-item-map",
            "descriptorVersion": null
          },
          {
            "id": "ff2500ee-6573-49cd-a9e8-2d5c93350f26",
            "values": {
              "icon": "menu_vertical",
              "view": "icon",
              "label": "bpm.tasks.item@menu",
              "action": {
                "path": ["menuAction"]
              }
            },
            "content": null,
            "descriptor": "button",
            "descriptorVersion": null
          }
        ],
        "[headerCustomization]": []
      },
      "descriptor": "item-form-complex-popup",
      "descriptorVersion": 2
    },
    {
      "id": "",
      "code": "form_ea5bae13-bd64-40db-92c7-4967f8872379",
      "name": "Ознакомиться с заявкой и подписать через ЕСИА",
      "values": {
        "formType": "task-form",
        "formGroup": {
          "path": ["context"]
        }
      },
      "widget": {
        "draft": false,
        "deleted": false,
        "version": 4
      },
      "content": {
        "[footer]": [
          {
            "id": "31979bac-00bd-4123-a901-9d14190c8dde",
            "values": {
              "buttons": {
                "path": ["actionButtons"]
              }
            },
            "content": null,
            "descriptor": "buttons-panel",
            "descriptorVersion": null
          }
        ],
        "[content]": [
          {
            "id": "c18e9118-cda2-49f4-ae50-5414c9b970b2",
            "values": {
              "shadow": true
            },
            "content": {
              "": [
                {
                  "id": "dcdd3e4e-0c49-483b-87c2-8c782a8890f0",
                  "values": {
                    "form": {
                      "path": ["context"]
                    },
                    "fields": {
                      "path": ["fields"]
                    }
                  },
                  "content": null,
                  "descriptor": "dynamic-form",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "modal-body",
            "descriptorVersion": null
          }
        ],
        "[sidebar]": [
          {
            "id": "39d7757a-529f-4526-98f3-fddc66becf85",
            "values": null,
            "content": {
              "": [
                {
                  "id": "abe4b782-6e2d-49cc-a57e-81b636422ee5",
                  "values": {
                    "context": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "target-widget",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "231b371a-64ae-4b61-8014-cba6da318ac9",
            "values": null,
            "content": {
              "": [
                {
                  "id": "5e39b91d-aea4-467e-862f-0f8766eb44df",
                  "values": {
                    "context": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "linked-item",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "a4469de0-d7f3-11ec-9d64-0242ac120002",
            "values": null,
            "content": {
              "": [
                {
                  "id": "3ead7c41-6dfa-4144-80da-2bfb5f0ccf59",
                  "values": {
                    "formGroup": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "item-reminder",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "56d1d0e8-aa83-4cdd-ae43-294b26ad4d04",
            "values": null,
            "content": {
              "": [
                {
                  "id": "e1525e34-14ba-456b-b703-f407945c01e0",
                  "values": {
                    "formGroup": {
                      "path": ["context"]
                    }
                  },
                  "content": null,
                  "descriptor": "item-tasks",
                  "descriptorVersion": 4
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          },
          {
            "id": "eef018f2-1d3a-4600-a19d-791733b28b5e",
            "values": null,
            "content": {
              "": [
                {
                  "id": "e0a17dec-603a-461a-becf-861637630584",
                  "values": {
                    "target": {
                      "path": ["target"]
                    }
                  },
                  "content": null,
                  "descriptor": "messages-target",
                  "descriptorVersion": null
                }
              ]
            },
            "descriptor": "sidebar-widget",
            "descriptorVersion": null
          }
        ],
        "[formInfoPanel]": [
          {
            "id": "c1d522ef-fbde-4bdd-9c5a-73d82abb53fb",
            "values": {
              "__validateResult": {
                "path": ["context", "__validateResult"]
              }
            },
            "content": null,
            "descriptor": "validation-info-block",
            "descriptorVersion": null
          }
        ],
        "[headerControls]": [
          {
            "id": "475aa008-aaff-402f-8de2-408bae1f1928",
            "values": {
              "task": {
                "path": ["task"]
              }
            },
            "content": null,
            "descriptor": "task-percent-widget",
            "descriptorVersion": null
          },
          {
            "id": "702d9c59-77ae-4dd5-b71a-a5fe7b58858f",
            "values": {
              "item": {
                "path": ["__itemRef"]
              }
            },
            "content": null,
            "descriptor": "extension-zone-toolbar-widget",
            "descriptorVersion": null
          },
          {
            "id": "f7b11c79-4267-4f5b-a002-dd629d549682",
            "values": {
              "task": {
                "path": ["task"]
              },
              "skipRulesCheck": true
            },
            "content": null,
            "descriptor": "process-item-map",
            "descriptorVersion": null
          },
          {
            "id": "ff2500ee-6573-49cd-a9e8-2d5c93350f26",
            "values": {
              "icon": "menu_vertical",
              "view": "icon",
              "label": "bpm.tasks.item@menu",
              "action": {
                "path": ["menuAction"]
              }
            },
            "content": null,
            "descriptor": "button",
            "descriptorVersion": null
          }
        ],
        "[headerCustomization]": []
      },
      "descriptor": "item-form-complex-popup",
      "descriptorVersion": 2
    }
  ],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "instance",
      "variable": ""
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": false,
    "allowNamespace": false,
    "applicationContext": false,
    "fieldVisibilityConditions": {
      "inn": {
        "enabled": false,
        "conditions": []
      },
      "city": {
        "enabled": false,
        "conditions": []
      },
      "name": {
        "enabled": false,
        "conditions": []
      },
      "ogrn": {
        "enabled": false,
        "conditions": []
      },
      "user": {
        "enabled": false,
        "conditions": []
      },
      "debug": {
        "enabled": false,
        "conditions": []
      },
      "email": {
        "enabled": false,
        "conditions": []
      },
      "error": {
        "enabled": false,
        "conditions": []
      },
      "phone": {
        "enabled": false,
        "conditions": []
      },
      "snils": {
        "enabled": false,
        "conditions": []
      },
      "stage": {
        "enabled": false,
        "conditions": []
      },
      "gender": {
        "enabled": false,
        "conditions": []
      },
      "region": {
        "enabled": false,
        "conditions": []
      },
      "api_key": {
        "enabled": false,
        "conditions": []
      },
      "country": {
        "enabled": false,
        "conditions": []
      },
      "surname": {
        "enabled": false,
        "conditions": []
      },
      "json_obj": {
        "enabled": false,
        "conditions": []
      },
      "lastname": {
        "enabled": false,
        "conditions": []
      },
      "provider": {
        "enabled": false,
        "conditions": []
      },
      "response": {
        "enabled": false,
        "conditions": []
      },
      "staff_id": {
        "enabled": false,
        "conditions": []
      },
      "issued_by": {
        "enabled": false,
        "conditions": []
      },
      "birth_date": {
        "enabled": false,
        "conditions": []
      },
      "error_type": {
        "enabled": false,
        "conditions": []
      },
      "request_id": {
        "enabled": false,
        "conditions": []
      },
      "snils_file": {
        "enabled": false,
        "conditions": []
      },
      "birth_place": {
        "enabled": false,
        "conditions": []
      },
      "current_doc": {
        "enabled": false,
        "conditions": []
      },
      "data_changed": {
        "enabled": false,
        "conditions": []
      },
      "error_exists": {
        "enabled": false,
        "conditions": []
      },
      "issue_status": {
        "enabled": false,
        "conditions": []
      },
      "document_type": {
        "enabled": false,
        "conditions": []
      },
      "passport_code": {
        "enabled": false,
        "conditions": []
      },
      "passport_date": {
        "enabled": false,
        "conditions": []
      },
      "request_exists": {
        "enabled": false,
        "conditions": []
      },
      "passport_number": {
        "enabled": false,
        "conditions": []
      },
      "passport_series": {
        "enabled": false,
        "conditions": []
      },
      "request_rejected": {
        "enabled": false,
        "conditions": []
      },
      "responsible_user": {
        "enabled": false,
        "conditions": []
      },
      "release_statement": {
        "enabled": false,
        "conditions": []
      },
      "request_confirmed": {
        "enabled": false,
        "conditions": []
      },
      "unep_issue_method": {
        "enabled": false,
        "conditions": []
      },
      "passport_main_page": {
        "enabled": false,
        "conditions": []
      },
      "request_actualized": {
        "enabled": false,
        "conditions": []
      },
      "identity_expiration": {
        "enabled": false,
        "conditions": []
      },
      "repeat_confirmation": {
        "enabled": false,
        "conditions": []
      },
      "signed_request_scan": {
        "enabled": false,
        "conditions": []
      },
      "connection_timed_out": {
        "enabled": false,
        "conditions": []
      },
      "passport_living_page": {
        "enabled": false,
        "conditions": []
      },
      "unep_issue_confirm_type": {
        "enabled": false,
        "conditions": []
      },
      "issue_confirmation_error": {
        "enabled": false,
        "conditions": []
      },
      "confirmation_error_reason": {
        "enabled": false,
        "conditions": []
      },
      "issue_confirmation_type_changed": {
        "enabled": false,
        "conditions": []
      },
      "request_after_personal_data_changed": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
