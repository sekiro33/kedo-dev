{
  "__id": "018f9fc7-fd1e-7170-8a93-0bc3a688fc4e",
  "namespace": "ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd",
  "code": "unep_issue_request_signme",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "Запрос на выпуск (Sign.me)",
  "type": "bpmn",
  "draft": false,
  "version": 15,
  "context": [
    {
      "code": "name",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "Дмитрий",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Имя",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "request_rejected",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявка отклонена",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "email",
      "type": "EMAIL",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Электронная почта",
        "data": {}
      }
    },
    {
      "code": "ogrn",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "123",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ОГРН компании",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "passport_code",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "180-007",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Код подразделения",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "request_exists",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявка существует",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "lastname",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "Александрович",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Отчество",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "signed_request_scan",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Скан подписанного заявления",
        "data": {}
      }
    },
    {
      "code": "api_key",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "0AXPZD21MY812DYA",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Api ключ",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "country",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "Россия",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Страна",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "passport_number",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "9414",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Номер паспорта",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "inn",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "380347998291",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ИНН",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "phone",
      "type": "PHONE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Номер телефона",
        "data": {
          "type": ""
        }
      }
    },
    {
      "code": "gender",
      "type": "ENUM",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "enumItems": [
          {
            "code": "m",
            "name": "Мужской",
            "checked": true
          },
          {
            "code": "f",
            "name": "Женский",
            "checked": false
          }
        ]
      },
      "view": {
        "name": "Пол",
        "data": {}
      }
    },
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "stage",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Стадия",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "issued_by",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "отделом",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Кем выдан",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "passport_main_page",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Скан главной страницы паспорта",
        "data": {}
      }
    },
    {
      "code": "certs_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Сертификаты JSON",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "region",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "Удмуртия",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Регион",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "release_statement",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявление на выпуск сертификата",
        "data": {}
      }
    },
    {
      "code": "city",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "Воткинск",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Город",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "request_confrimed",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Заявка подтверждена",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "request_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Идентификатор заявки",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "certs",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Сертификаты",
        "data": {}
      }
    },
    {
      "code": "snils_file",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Скан СНИЛСа",
        "data": {}
      }
    },
    {
      "code": "passport_series",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "438771",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Серия паспорта",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "passport_date",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата выдачи документа",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        }
      }
    },
    {
      "code": "surname",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "Алексеев",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Фамилия",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "passport_living_page",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Скан страницы с пропиской",
        "data": {}
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "json_obj",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Данные json",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "error_exists",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Есть ошибка",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        }
      }
    },
    {
      "code": "birth_date",
      "type": "DATETIME",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата рождения",
        "data": {
          "additionalType": "date",
          "defaultTimeType": "startOfDay",
          "timeOptional": false
        }
      }
    },
    {
      "code": "response",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ответ сервера",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "user",
      "type": "SYS_USER",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        }
      },
      "view": {
        "name": "Пользователь",
        "data": {}
      }
    },
    {
      "code": "responsible_user",
      "type": "SYS_USER",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        }
      },
      "view": {
        "name": "Ответственный",
        "data": {}
      }
    },
    {
      "code": "snils",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": "12312312312",
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "СНИЛС",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "automatic_reissue",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Автоматический перевыпуск",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true,
        "output": true
      }
    }
  ],
  "manualRun": true,
  "readonly": false,
  "__createdAt": "2023-05-11T12:57:03.655652771Z",
  "__createdBy": "6c362877-9ef9-45f4-aa6f-e5e126ee96c0",
  "__updatedAt": "2024-06-03T12:55:52.755016136Z",
  "__updatedBy": "40489035-c2e3-4dba-8113-51ef4cb9dad3",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 104,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "type": "start",
        "color": "#ffffff",
        "exits": ["445c6a02-66e1-4b0d-b0f3-91a924c12c64"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true,
              "hideEmpty": false
            },
            {
              "code": "phone",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "email",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "birth_date",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_date",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_main_page",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_living_page",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "snils_file",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "user",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "responsible_user",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "release_statement",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "city",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "name",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_number",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "region",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "snils",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_series",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "inn",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "surname",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "country",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "issued_by",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "passport_code",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "gender",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "lastname",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            },
            {
              "code": "api_key",
              "tooltip": "",
              "readonly": false,
              "required": false,
              "hideEmpty": false
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "Запрос на выпуск (Sign.me) - {$__createdAt}",
          "titleGenerateMethod": "template"
        }
      },
      "3060f958-407b-4b91-8ca6-e8fda83b420b": {
        "x": 32,
        "y": 1008,
        "id": "3060f958-407b-4b91-8ca6-e8fda83b420b",
        "icon": "script",
        "lane": "1a696312-ba1f-45d0-b792-57bbfe8a68f8",
        "name": "Создание заявки",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["2ceed87f-df63-445b-b297-a3f807c9e6b1"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "register",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "31c35817-0e5b-450f-8f36-7a18cee95acf": {
        "x": 80,
        "y": 752,
        "id": "31c35817-0e5b-450f-8f36-7a18cee95acf",
        "icon": "script",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "Подтвердить заявку",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["322b8267-cd02-4e0c-9f0f-5695fe13ddb3"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "activate",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "344426d3-fadf-465b-bf3f-b5d711734f57": {
        "x": 904,
        "y": 408,
        "id": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "icon": "user",
        "lane": "2a00099a-37f7-4bfd-8946-cc1136be4092",
        "name": "Ознакомиться с ошибкой",
        "type": "user",
        "color": "#daeef7",
        "exits": [
          "21ea98e0-1dd1-435a-b4f4-9ecaf661c628",
          "2441e476-490c-49e4-b1ae-d7791db462bb"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "name": "Ознакомиться с ошибкой при выпуске УНЭП на {$user}",
          "notify": true,
          "authorType": 0,
          "escalation": {
            "byTime": {
              "limit": {
                "days": 0,
                "kind": "duration",
                "hours": 0,
                "minutes": 0,
                "absolute": false
              },
              "action": {
                "notify": false,
                "interrupt": false,
                "receivers": []
              },
              "enabled": false
            }
          },
          "formFields": [
            {
              "code": "error",
              "tooltip": "",
              "readonly": true,
              "required": false,
              "hideEmpty": false
            }
          ],
          "allowReassign": true,
          "planDatesSettings": {
            "enabled": false,
            "planCodes": {
              "endCode": "",
              "startCode": ""
            }
          }
        }
      },
      "3705f03b-564e-4541-bb76-374234e083f3": {
        "x": 104,
        "y": 424,
        "id": "3705f03b-564e-4541-bb76-374234e083f3",
        "icon": "exclusive",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "c3543d02-5ece-4cf0-a9a7-b49487e475d3",
          "c2dcfec3-7b55-44e1-aa02-ae8b8f327e96"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "3c19c29b-3309-4e8f-b754-81c13436b037": {
        "x": 152,
        "y": 1008,
        "id": "3c19c29b-3309-4e8f-b754-81c13436b037",
        "icon": "script",
        "lane": "1a696312-ba1f-45d0-b792-57bbfe8a68f8",
        "name": "Записать сертификаты в систему",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["359630b9-89a1-45d0-ab61-838ec6b38c8f"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getCerts",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "47f38b62-50e1-447a-87a1-71b6eeb9232c": {
        "x": 104,
        "y": 560,
        "id": "47f38b62-50e1-447a-87a1-71b6eeb9232c",
        "icon": "exclusive",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "d70cc752-0193-428c-90c1-8844388b87e0",
          "ab130311-6885-4d0e-a82f-7ec6ceff15ea"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "4c793d3b-26f6-4b8e-9cc8-11cfe2417808": {
        "x": 80,
        "y": 280,
        "id": "4c793d3b-26f6-4b8e-9cc8-11cfe2417808",
        "icon": "script",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "Проверка существующих заявок",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["22a0ecdf-5362-46c6-a97b-a471f002c1b2"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "precheck",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "512930bf-47ae-4f10-b283-08166e17878f": {
        "x": 80,
        "y": 144,
        "id": "512930bf-47ae-4f10-b283-08166e17878f",
        "icon": "script",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "Сериализация входящих данных",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["f059cc0f-635c-4836-8923-b3c12b0d1266"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "serializeData",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "617f160b-12b5-4ff9-b9d7-1f7f57e09503": {
        "x": 104,
        "y": 232,
        "id": "617f160b-12b5-4ff9-b9d7-1f7f57e09503",
        "icon": "exclusive",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "e98d5d06-d741-46cb-b66a-c40daeba295e",
          "9bf17ae9-a773-40ab-8fc3-e3eea7f10678"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "662481b6-1286-4574-b1bd-b049d1257878": {
        "x": 784,
        "y": 424,
        "id": "662481b6-1286-4574-b1bd-b049d1257878",
        "icon": "exclusive",
        "lane": "2a00099a-37f7-4bfd-8946-cc1136be4092",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "4423f82d-0bd1-4025-b902-99ba8e0c42aa",
          "49dc80ce-3d4c-41ff-84ad-28613bfa7982"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "73d4340d-0397-48fb-973d-a276e11df040": {
        "x": 280,
        "y": 1024,
        "id": "73d4340d-0397-48fb-973d-a276e11df040",
        "icon": "exclusive",
        "lane": "1a696312-ba1f-45d0-b792-57bbfe8a68f8",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "92c18a82-a479-46b0-8c43-2ecb281f745d",
          "69288123-79f3-4487-a4b9-9ed5f51aa4f5"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "9246ad8a-f41c-4b2a-8c2a-f0635841caf6": {
        "x": 488,
        "y": 408,
        "id": "9246ad8a-f41c-4b2a-8c2a-f0635841caf6",
        "icon": "script",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "Записать существующие сертификаты",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["5feeb417-8968-4f73-98fb-6d302e67af88"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "getCerts",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "99db4948-b6ff-4f3d-b4b0-d2209fa47b0f": {
        "x": 104,
        "y": 360,
        "id": "99db4948-b6ff-4f3d-b4b0-d2209fa47b0f",
        "icon": "exclusive",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "76deacca-8956-42d1-86cd-5844bf8881df",
          "56f0f71d-7814-47b6-8324-c5830c821bd7"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "a05cb4ca-e800-4f01-a93a-3453d597a1b0": {
        "x": 80,
        "y": 608,
        "id": "a05cb4ca-e800-4f01-a93a-3453d597a1b0",
        "icon": "script",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "Отправить документы к заявке",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["12290547-1008-45e7-9b21-1a7d1c578e2c"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "sendPhotos",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "c132f90d-4060-4abf-a5d8-41097e405792": {
        "x": 104,
        "y": 840,
        "id": "c132f90d-4060-4abf-a5d8-41097e405792",
        "icon": "exclusive",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "bfc7fc1c-14b5-47bb-883a-7fa2a8be1575",
          "e82c0f5a-1d2c-4af7-8724-be9dc5c8cb3e"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "c53c4caf-9e97-4f23-8506-851ecdf56c85": {
        "x": 368,
        "y": 1024,
        "id": "c53c4caf-9e97-4f23-8506-851ecdf56c85",
        "icon": "end",
        "lane": "1a696312-ba1f-45d0-b792-57bbfe8a68f8",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "cb633ac2-b54d-4e99-b07c-27115cdd2b16": {
        "x": 760,
        "y": 488,
        "id": "cb633ac2-b54d-4e99-b07c-27115cdd2b16",
        "icon": "user",
        "lane": "2a00099a-37f7-4bfd-8946-cc1136be4092",
        "name": "Проверить сертификаты",
        "type": "user",
        "color": "#daeef7",
        "exits": ["1eb6f441-c1b6-4ae2-8ea2-00b1c37d14f2"],
        "width": 80,
        "height": 64,
        "settings": {
          "name": "Проверить сертификаты для пользователя {$user}",
          "notify": true,
          "authorType": 0,
          "escalation": {
            "byTime": {
              "limit": {
                "days": 0,
                "kind": "duration",
                "hours": 0,
                "minutes": 0,
                "absolute": false
              },
              "action": {
                "notify": false,
                "interrupt": false,
                "receivers": []
              },
              "enabled": false
            }
          },
          "formFields": [
            {
              "code": "certs",
              "tooltip": "",
              "readonly": true,
              "required": false,
              "hideEmpty": false
            }
          ],
          "allowReassign": true,
          "planDatesSettings": {
            "enabled": false,
            "planCodes": {
              "endCode": "",
              "startCode": ""
            }
          }
        }
      },
      "ec976729-c170-4914-bf14-a2d3affcc769": {
        "x": 104,
        "y": 696,
        "id": "ec976729-c170-4914-bf14-a2d3affcc769",
        "icon": "exclusive",
        "lane": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "b9a66928-9beb-445d-93ff-cd6aedafdc75",
          "236b38cd-8242-409e-a49d-9cd4b6792f11"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "fc9ea404-bedc-4a9d-b845-0814bc65119e": {
        "x": 856,
        "y": 504,
        "id": "fc9ea404-bedc-4a9d-b845-0814bc65119e",
        "icon": "end",
        "lane": "2a00099a-37f7-4bfd-8946-cc1136be4092",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "1a696312-ba1f-45d0-b792-57bbfe8a68f8": {
        "x": 8,
        "y": 944,
        "id": "1a696312-ba1f-45d0-b792-57bbfe8a68f8",
        "name": "Пользователь",
        "color": "#d6f0cc",
        "width": 588,
        "height": 260,
        "settings": {
          "type": "dynamic",
          "groups": [null],
          "variable": "user",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      },
      "2a00099a-37f7-4bfd-8946-cc1136be4092": {
        "x": 596,
        "y": 8,
        "id": "2a00099a-37f7-4bfd-8946-cc1136be4092",
        "name": "Ответственный",
        "color": "#d6f0cc",
        "width": 452,
        "height": 1196,
        "settings": {
          "type": "dynamic",
          "groups": [null],
          "variable": "responsible_user",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      },
      "ba1e7f4c-847e-4c42-857a-71ac5256033f": {
        "x": -36,
        "y": 8,
        "id": "ba1e7f4c-847e-4c42-857a-71ac5256033f",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 632,
        "height": 936,
        "settings": {
          "type": "dynamic",
          "groups": [null],
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "12290547-1008-45e7-9b21-1a7d1c578e2c": {
        "id": "12290547-1008-45e7-9b21-1a7d1c578e2c",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 672
          },
          {
            "x": 120,
            "y": 696
          }
        ],
        "type": "plain",
        "source": "a05cb4ca-e800-4f01-a93a-3453d597a1b0",
        "target": "ec976729-c170-4914-bf14-a2d3affcc769",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "1eb6f441-c1b6-4ae2-8ea2-00b1c37d14f2": {
        "id": "1eb6f441-c1b6-4ae2-8ea2-00b1c37d14f2",
        "name": "",
        "path": [
          {
            "x": 840,
            "y": 520
          },
          {
            "x": 856,
            "y": 520
          }
        ],
        "type": "plain",
        "source": "cb633ac2-b54d-4e99-b07c-27115cdd2b16",
        "target": "fc9ea404-bedc-4a9d-b845-0814bc65119e",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "21ea98e0-1dd1-435a-b4f4-9ecaf661c628": {
        "id": "21ea98e0-1dd1-435a-b4f4-9ecaf661c628",
        "name": "",
        "path": [
          {
            "x": 904,
            "y": 456
          },
          {
            "x": 892,
            "y": 456
          },
          {
            "x": 892,
            "y": 496
          },
          {
            "x": 900,
            "y": 496
          },
          {
            "x": 900,
            "y": 520
          },
          {
            "x": 888,
            "y": 520
          }
        ],
        "type": "plain",
        "source": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "target": "fc9ea404-bedc-4a9d-b845-0814bc65119e",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "22a0ecdf-5362-46c6-a97b-a471f002c1b2": {
        "id": "22a0ecdf-5362-46c6-a97b-a471f002c1b2",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 344
          },
          {
            "x": 120,
            "y": 360
          }
        ],
        "type": "plain",
        "source": "4c793d3b-26f6-4b8e-9cc8-11cfe2417808",
        "target": "99db4948-b6ff-4f3d-b4b0-d2209fa47b0f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "236b38cd-8242-409e-a49d-9cd4b6792f11": {
        "id": "236b38cd-8242-409e-a49d-9cd4b6792f11",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 728
          },
          {
            "x": 120,
            "y": 752
          }
        ],
        "type": "default",
        "source": "ec976729-c170-4914-bf14-a2d3affcc769",
        "target": "31c35817-0e5b-450f-8f36-7a18cee95acf",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "2441e476-490c-49e4-b1ae-d7791db462bb": {
        "id": "2441e476-490c-49e4-b1ae-d7791db462bb",
        "name": "Новая заявка",
        "path": [
          {
            "x": 964,
            "y": 408
          },
          {
            "x": 964,
            "y": 176
          },
          {
            "x": 160,
            "y": 176
          }
        ],
        "type": "plain",
        "source": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "target": "512930bf-47ae-4f10-b283-08166e17878f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "primary",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "2ceed87f-df63-445b-b297-a3f807c9e6b1": {
        "id": "2ceed87f-df63-445b-b297-a3f807c9e6b1",
        "name": "",
        "path": [
          {
            "x": 32,
            "y": 1040
          },
          {
            "x": 24,
            "y": 1040
          },
          {
            "x": 24,
            "y": 576
          },
          {
            "x": 104,
            "y": 576
          }
        ],
        "type": "plain",
        "source": "3060f958-407b-4b91-8ca6-e8fda83b420b",
        "target": "47f38b62-50e1-447a-87a1-71b6eeb9232c",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "322b8267-cd02-4e0c-9f0f-5695fe13ddb3": {
        "id": "322b8267-cd02-4e0c-9f0f-5695fe13ddb3",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 816
          },
          {
            "x": 120,
            "y": 840
          }
        ],
        "type": "plain",
        "source": "31c35817-0e5b-450f-8f36-7a18cee95acf",
        "target": "c132f90d-4060-4abf-a5d8-41097e405792",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "359630b9-89a1-45d0-ab61-838ec6b38c8f": {
        "id": "359630b9-89a1-45d0-ab61-838ec6b38c8f",
        "name": "",
        "path": [
          {
            "x": 232,
            "y": 1040
          },
          {
            "x": 280,
            "y": 1040
          }
        ],
        "type": "plain",
        "source": "3c19c29b-3309-4e8f-b754-81c13436b037",
        "target": "73d4340d-0397-48fb-973d-a276e11df040",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "4423f82d-0bd1-4025-b902-99ba8e0c42aa": {
        "id": "4423f82d-0bd1-4025-b902-99ba8e0c42aa",
        "name": "",
        "path": [
          {
            "x": 800,
            "y": 456
          },
          {
            "x": 800,
            "y": 488
          }
        ],
        "type": "default",
        "source": "662481b6-1286-4574-b1bd-b049d1257878",
        "target": "cb633ac2-b54d-4e99-b07c-27115cdd2b16",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "445c6a02-66e1-4b0d-b0f3-91a924c12c64": {
        "id": "445c6a02-66e1-4b0d-b0f3-91a924c12c64",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 104
          },
          {
            "x": 120,
            "y": 144
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "512930bf-47ae-4f10-b283-08166e17878f",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "49dc80ce-3d4c-41ff-84ad-28613bfa7982": {
        "id": "49dc80ce-3d4c-41ff-84ad-28613bfa7982",
        "name": "",
        "path": [
          {
            "x": 816,
            "y": 440
          },
          {
            "x": 892,
            "y": 440
          },
          {
            "x": 892,
            "y": 456
          },
          {
            "x": 904,
            "y": 456
          }
        ],
        "type": "plain",
        "source": "662481b6-1286-4574-b1bd-b049d1257878",
        "target": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "error_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "56f0f71d-7814-47b6-8324-c5830c821bd7": {
        "id": "56f0f71d-7814-47b6-8324-c5830c821bd7",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 392
          },
          {
            "x": 120,
            "y": 424
          }
        ],
        "type": "default",
        "source": "99db4948-b6ff-4f3d-b4b0-d2209fa47b0f",
        "target": "3705f03b-564e-4541-bb76-374234e083f3",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "5feeb417-8968-4f73-98fb-6d302e67af88": {
        "id": "5feeb417-8968-4f73-98fb-6d302e67af88",
        "name": "",
        "path": [
          {
            "x": 568,
            "y": 440
          },
          {
            "x": 784,
            "y": 440
          }
        ],
        "type": "plain",
        "source": "9246ad8a-f41c-4b2a-8c2a-f0635841caf6",
        "target": "662481b6-1286-4574-b1bd-b049d1257878",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "69288123-79f3-4487-a4b9-9ed5f51aa4f5": {
        "id": "69288123-79f3-4487-a4b9-9ed5f51aa4f5",
        "name": "",
        "path": [
          {
            "x": 296,
            "y": 1024
          },
          {
            "x": 296,
            "y": 904
          },
          {
            "x": 992,
            "y": 904
          },
          {
            "x": 992,
            "y": 456
          },
          {
            "x": 984,
            "y": 456
          }
        ],
        "type": "plain",
        "source": "73d4340d-0397-48fb-973d-a276e11df040",
        "target": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "error_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "76deacca-8956-42d1-86cd-5844bf8881df": {
        "id": "76deacca-8956-42d1-86cd-5844bf8881df",
        "name": "",
        "path": [
          {
            "x": 136,
            "y": 376
          },
          {
            "x": 924,
            "y": 376
          },
          {
            "x": 924,
            "y": 408
          }
        ],
        "type": "plain",
        "source": "99db4948-b6ff-4f3d-b4b0-d2209fa47b0f",
        "target": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "error_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "92c18a82-a479-46b0-8c43-2ecb281f745d": {
        "id": "92c18a82-a479-46b0-8c43-2ecb281f745d",
        "name": "",
        "path": [
          {
            "x": 312,
            "y": 1040
          },
          {
            "x": 368,
            "y": 1040
          }
        ],
        "type": "default",
        "source": "73d4340d-0397-48fb-973d-a276e11df040",
        "target": "c53c4caf-9e97-4f23-8506-851ecdf56c85",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "9bf17ae9-a773-40ab-8fc3-e3eea7f10678": {
        "id": "9bf17ae9-a773-40ab-8fc3-e3eea7f10678",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 264
          },
          {
            "x": 120,
            "y": 280
          }
        ],
        "type": "default",
        "source": "617f160b-12b5-4ff9-b9d7-1f7f57e09503",
        "target": "4c793d3b-26f6-4b8e-9cc8-11cfe2417808",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "ab130311-6885-4d0e-a82f-7ec6ceff15ea": {
        "id": "ab130311-6885-4d0e-a82f-7ec6ceff15ea",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 592
          },
          {
            "x": 120,
            "y": 608
          }
        ],
        "type": "default",
        "source": "47f38b62-50e1-447a-87a1-71b6eeb9232c",
        "target": "a05cb4ca-e800-4f01-a93a-3453d597a1b0",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "b9a66928-9beb-445d-93ff-cd6aedafdc75": {
        "id": "b9a66928-9beb-445d-93ff-cd6aedafdc75",
        "name": "",
        "path": [
          {
            "x": 136,
            "y": 712
          },
          {
            "x": 944,
            "y": 712
          },
          {
            "x": 944,
            "y": 472
          }
        ],
        "type": "plain",
        "source": "ec976729-c170-4914-bf14-a2d3affcc769",
        "target": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "error_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "bfc7fc1c-14b5-47bb-883a-7fa2a8be1575": {
        "id": "bfc7fc1c-14b5-47bb-883a-7fa2a8be1575",
        "name": "",
        "path": [
          {
            "x": 136,
            "y": 856
          },
          {
            "x": 964,
            "y": 856
          },
          {
            "x": 964,
            "y": 472
          }
        ],
        "type": "plain",
        "source": "c132f90d-4060-4abf-a5d8-41097e405792",
        "target": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "error_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c2dcfec3-7b55-44e1-aa02-ae8b8f327e96": {
        "id": "c2dcfec3-7b55-44e1-aa02-ae8b8f327e96",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 456
          },
          {
            "x": 120,
            "y": 552
          },
          {
            "x": 52,
            "y": 552
          },
          {
            "x": 52,
            "y": 1008
          }
        ],
        "type": "default",
        "source": "3705f03b-564e-4541-bb76-374234e083f3",
        "target": "3060f958-407b-4b91-8ca6-e8fda83b420b",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c3543d02-5ece-4cf0-a9a7-b49487e475d3": {
        "id": "c3543d02-5ece-4cf0-a9a7-b49487e475d3",
        "name": "",
        "path": [
          {
            "x": 136,
            "y": 440
          },
          {
            "x": 488,
            "y": 440
          }
        ],
        "type": "plain",
        "source": "3705f03b-564e-4541-bb76-374234e083f3",
        "target": "9246ad8a-f41c-4b2a-8c2a-f0635841caf6",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "request_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            },
            {
              "a": {
                "kind": "context",
                "value": "automatic_reissue"
              },
              "b": {
                "kind": "manual",
                "value": false
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": true
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "d70cc752-0193-428c-90c1-8844388b87e0": {
        "id": "d70cc752-0193-428c-90c1-8844388b87e0",
        "name": "",
        "path": [
          {
            "x": 136,
            "y": 576
          },
          {
            "x": 924,
            "y": 576
          },
          {
            "x": 924,
            "y": 472
          }
        ],
        "type": "plain",
        "source": "47f38b62-50e1-447a-87a1-71b6eeb9232c",
        "target": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "error_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e82c0f5a-1d2c-4af7-8724-be9dc5c8cb3e": {
        "id": "e82c0f5a-1d2c-4af7-8724-be9dc5c8cb3e",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 872
          },
          {
            "x": 120,
            "y": 888
          },
          {
            "x": 192,
            "y": 888
          },
          {
            "x": 192,
            "y": 1008
          }
        ],
        "type": "default",
        "source": "c132f90d-4060-4abf-a5d8-41097e405792",
        "target": "3c19c29b-3309-4e8f-b754-81c13436b037",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e98d5d06-d741-46cb-b66a-c40daeba295e": {
        "id": "e98d5d06-d741-46cb-b66a-c40daeba295e",
        "name": "",
        "path": [
          {
            "x": 136,
            "y": 248
          },
          {
            "x": 944,
            "y": 248
          },
          {
            "x": 944,
            "y": 408
          }
        ],
        "type": "plain",
        "source": "617f160b-12b5-4ff9-b9d7-1f7f57e09503",
        "target": "344426d3-fadf-465b-bf3f-b5d711734f57",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "error_exists"
              },
              "b": {
                "kind": "manual",
                "value": true
              },
              "type": "BOOLEAN",
              "inversion": false,
              "operation": {
                "relation": "equal",
                "inversion": false,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "f059cc0f-635c-4836-8923-b3c12b0d1266": {
        "id": "f059cc0f-635c-4836-8923-b3c12b0d1266",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 208
          },
          {
            "x": 120,
            "y": 232
          }
        ],
        "type": "plain",
        "source": "512930bf-47ae-4f10-b283-08166e17878f",
        "target": "617f160b-12b5-4ff9-b9d7-1f7f57e09503",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "class SignMeLogger {\n    async logData(response: FetchResponse, body?: string) {\n        let requestEndpoint: string = \"\";\n        let provider: SignProviderItem | undefined;\n\n        if (response.url.includes(\"sign/cer/\")) {\n            requestEndpoint = \"cer\"\n        } else {\n            requestEndpoint = response.url.split(\"/\").slice(-1)[0];\n        };\n\n        let responseJson: any = {};\n        let responseText = await response.text();;\n        Context.data.stage = requestEndpoint;\n\n        try {\n            switch (requestEndpoint) {\n                case \"precheck\":\n                    responseJson = JSON.parse(responseText);\n                    if (Object.keys(responseJson).length \u003e 0) {\n                        let rootObj = responseJson.phone || responseJson.email || responseJson.inn || responseJson.snils;\n                        Context.data.request_exists = true;\n                        Context.data.debug = JSON.stringify(rootObj)\n\n                        if (rootObj.created \u0026\u0026 rootObj.approved \u0026\u0026 !rootObj.rejected) {\n                            Context.data.debug += \" issue exists\"\n                            const user = await Context.data.user!.fetch();\n                            const now = new TDate();\n                            let existsField = Object.keys(responseJson)[0];\n                            let existsValue = JSON.parse(Context.data.json_obj!).precheckDataObj[existsField];\n                            const issueId = rootObj.id.toString();\n                            Context.data.request_id = issueId;\n                            const issueExists = await System.signs.digitalSigns.search().where((f, g) =\u003e g.and(\n                                f.__deletedAt.eq(null),\n                                f.issueID.eq(issueId)\n                            )).first();\n                            Context.data.debug += ` ${issueId}, issueExists = ${issueExists}`;\n                            if (!issueExists) {\n                                Context.data.debug += \" creating issue in system..\"\n                                provider = await System.signs.providers.search().where(f =\u003e f.code.eq(\"SignMe\")).first();\n                                await System.signs.digitalSigns.createDraft(Context.data.request_id!, provider!);\n                                const newdigitalSignApp = Namespace.params.fields.digital_signs_list.app.create();\n                                newdigitalSignApp.data.country = Context.data.country;\n                                newdigitalSignApp.data.email = Context.data.email![0].email;\n                                newdigitalSignApp.data.external_id = Context.data.request_id;\n                                newdigitalSignApp.data.__name = `${user.data.__name} (${now.format(\"DD.MM.YY\")})`;\n                                newdigitalSignApp.data.name = user.data.__name;\n                                newdigitalSignApp.data.status = \"Создана\";\n                                newdigitalSignApp.data.inn = Context.data.inn;\n                                newdigitalSignApp.data.user = user;\n                                await newdigitalSignApp.save();\n                            };\n                            Context.data.response = `Найдена подтвержденнная заявка в системе, совпадение по полю ${existsField}: ${existsValue}`;\n                        } else if (!rootObj.created \u0026\u0026 !rootObj.approved \u0026\u0026 !rootObj.rejected) {\n                            let existsField = Object.keys(responseJson)[0];\n                            let existsValue = JSON.parse(Context.data.json_obj!).precheckDataObj[existsField];\n                            Context.data.request_id = rootObj.id;\n                            Context.data.response = `Найдена неподтвержденнная заявка в системе, совпадение по полю ${existsField}: ${existsValue}, идентификатор заявки: ${rootObj.id}. На данном этапе заявки вы можете изменить её данные.`;\n                        } else if (rootObj.rejected) {\n                            let rejectComment = rootObj.reject_comment;\n                            Context.data.response = `Заявка отклонена, причина: ${rejectComment}`;\n                        };\n                    };\n                    break;\n                case \"api\":\n                    if (responseText.includes(\"error\")) {\n                        Context.data.error = responseText;\n                        Context.data.error_exists = true;\n                        return;\n                    };\n\n                    responseJson = JSON.parse(responseText);\n                    provider = await System.signs.providers.search().where(f =\u003e f.code.eq(\"SignMe\")).first();\n                    let requestId = responseJson.id.toString();\n                    await System.signs.digitalSigns.createDraft(requestId, provider!);\n                    let requestBase64 = responseJson.pdf;\n                    let requestBuffer = base64ToArrayBuffer(requestBase64);\n                    let requestFile = await Context.fields.release_statement.create(\"Заявка на выпуск сертификата.pdf\", requestBuffer);\n                    Context.data.release_statement = requestFile;\n                    Context.data.request_id = requestId;\n                    break;\n                case \"photo\": \n                    if (!response.ok) {\n                        responseJson = JSON.parse(responseText).error;\n                        let errorCode = responseJson.code;\n                        let errorMessage: string = \"\";\n                        let docType: any;\n\n                        switch (errorCode) {\n                            case 1:\n                            case \"1\":\n                                errorMessage = `HHTP 500: Ошибка сервера, у нас сохранились логи, запишите точное время для поиска ошибки. (Точное время выполнения запроса: ${new Datetime().format(\"DD.MM.YY HH:MM:SS\")})`;\n                                break\n                            case 2:\n                            case \"2\":\n                                errorMessage = `HTTP 400: Неправильный json: ${body}`;\n                                break;\n                            case 3:\n                            case \"3\":\n                                errorMessage = `HTTP 403: Неверный API-ключ.`;\n                                break;\n                            case 4:\n                            case \"4\":\n                                let userSnils = Context.data.snils;\n                                errorMessage = `HTTP 404: Пользователь со СНИЛС ${userSnils} не найден.`;\n                                break;\n                            case 6:\n                            case \"6\":\n                                docType = JSON.parse(body!).doctype;\n                                errorMessage = `Неправильный тип документа: ${docType}, разрешенные виды документов - между 1 и 17.`;\n                                break;\n                            case 7:\n                            case \"7\":\n                                docType = JSON.parse(body!).doctype;\n                                errorMessage = `Проверьте base64 содержимое файла ${docType}`;\n                                break;\n                            case 8:\n                            case \"8\":\n                                let fileName = JSON.parse(body!).name;\n                                errorMessage = `Неправильное имя файла: ${fileName}`;\n                                break;\n                        };\n\n                        Context.data.error = errorMessage;\n                        Context.data.error_exists = true;\n                    };\n                case \"activate\":\n                    if (responseText.includes(\"1\")) {\n                        Context.data.request_confirmed = true;\n                        let currentDigitalSign = await System.signs.digitalSigns.search().where((f, g) =\u003e g.and(\n                            f.__deletedAt.eq(null),\n                            f.issueID.eq(Context.data.request_id!),\n                            f.__createdBy.eq(Context.data.user!)\n                        )).first();\n                    };\n\n                    break;\n                case \"comstaff\":\n                    if (responseText.includes(\"error\")) {\n                        Context.data.error = responseText;\n                        return;\n                    };\n\n                    let userId = responseText;\n                    Context.data.staff_id = userId;\n                    break;\n                case \"userinfo\":\n                    if (responseText.includes(\"error\")) {\n                        Context.data.error_exists = true;\n                        Context.data.error = responseText;\n                        return;\n                    };\n                    responseJson = JSON.parse(responseText);\n                    const certData = responseJson.keys.map((key: any) =\u003e {\n                        return {\n                            id: key.id.toString(),\n                            valid: key.date\n                        };\n                    });\n                    Context.data.certs_json = JSON.stringify(certData);\n                    break;\n                case \"keys\":\n                    responseJson = JSON.parse(responseText);\n                    if (responseJson.error) {\n                        Context.data.error_exists = true;\n                        Context.data.error = responseJson.error;\n                        return;\n                    };\n\n                    let certificateId = responseJson[0].id;\n                    Context.data.certificate_id = certificateId;\n                    break;\n                case \"cer\":\n                    if (!response.ok) {\n                        Context.data.error_exists = true;\n                        return;\n                    };\n                    responseJson = JSON.parse(responseText)\n                    provider = await System.signs.providers.search().where(f =\u003e f.code.eq(\"SignMe\")).first();\n                    let user = await Context.data.user!.fetch();\n                    const certsData = JSON.parse(Context.data.certs_json!);\n                    const now = new TDate();\n                    for (let key of Object.keys(responseJson)) {\n                        const certItem = certsData.find((cert: any) =\u003e cert.id === key)\n                        const newdigitalSignApp = await Namespace.params.fields.digital_signs_list.app.search().where((f, g) =\u003e g.and(\n                            f.__deletedAt.eq(null),\n                            f.external_id.eq(certItem.id)\n                        )).first();\n                        let certBase64 = responseJson[key];\n                        const certFile = await Context.fields.passport_main_page.create(`${user.data.__name} (${now.format(\"DD.MM.YY\")})`, base64ToArrayBuffer(certBase64));\n                        if (newdigitalSignApp) {\n                            newdigitalSignApp!.data.valid_to = new Datetime(certItem.valid);\n                            newdigitalSignApp!.data.cert_file = certFile;\n                            newdigitalSignApp!.data.serial_number = certItem.id;\n                            await newdigitalSignApp!.save();\n                        }\n                        let certArrayBuffer = base64ToArrayBuffer(certBase64);\n                        const issueExists = !!await System.signs.digitalSigns.search().where((f, g) =\u003e g.and(\n                            f.__deletedAt.eq(null),\n                            f.issueID.eq(Context.data.request_id!),\n                            f.__createdBy.eq(Context.data.user!)\n                        )).first();\n                        if (!issueExists) {\n                            let newIssue = await System.signs.digitalSigns.createDraft(Context.data.request_id!, provider!);\n                            await newIssue.setPublicKey(certArrayBuffer);\n                            await newIssue.setStatus(\u003cDigitalSignRequestStatus\u003e\"released\");\n                        }\n                        let newCert = await Context.fields.certs.create(`${user.data.__name}.cer`, certArrayBuffer);\n                        Context.data.certs ? Context.data.certs!.push(newCert): Context.data.certs = [newCert];\n                    };\n                    break;\n            };\n        } catch {\n            throw new Error(responseText)\n        }\n\n    };\n};\n\nclass SignMeProvider {\n    private method = \"POST\";\n    private contentType = \"application/json\"\n    private headers: Record\u003cstring, string\u003e = {\n        \"Content-Type\": this.contentType\n    };\n    private baseUrl: string = Namespace.params.data.sign_me_server_address;\n    private logger: SignMeLogger;\n\n    private paths = {\n        precheckPath: `${this.baseUrl}/register/precheck`,\n        registerPath: `${this.baseUrl}/register/api`,\n        activatePath: `${this.baseUrl}/register/activate`,\n        comstaffPath: `${this.baseUrl}/register/comstaff`,\n        userInfoPath: `${this.baseUrl}/register/userinfo`,\n        certsInfoPath: `${this.baseUrl}/certapi/keys`,\n        sendDocsPath: `${this.baseUrl}/photo`,\n        getCertsPath: `${this.baseUrl}/sign/cer/`\n    };\n\n    constructor(logger: SignMeLogger) {\n        this.logger = logger;\n    };\n\n    async makeRequest(path: string, body: string | any) {\n        Context.data.error_exists = false;\n        Context.data.error = \"\";\n        let response: FetchResponse | undefined;\n        let headers = this.headers;\n        let method = this.method\n        if (path.includes(\"cer\")) {\n            headers = {\n                \n            }\n        }\n        try {\n            response = await fetch(path, {\n                headers,\n                method,\n                body\n            });\n\n            if (path.includes(\"photo\")) {\n                await this.logger.logData(response, body);\n            } else {\n                await this.logger.logData(response);\n            };\n        } catch (err) {\n            Context.data.error = err.message;\n            Context.data.error_exists = true;\n        };\n    };\n\n    async precheck() {\n        let path = this.paths.precheckPath;\n        let body = JSON.stringify(JSON.parse(Context.data.json_obj!).precheckDataObj);\n        await this.makeRequest(path, body);\n    };\n\n    async register() {\n        let path = this.paths.registerPath;\n\n        if (Context.data.data_changed) {\n            await serializeData();\n            Context.data.data_changed = false;\n        };\n\n        let body = JSON.stringify(JSON.parse(Context.data.json_obj!).registerDataObj);\n\n        await this.makeRequest(path, body);\n    };\n\n    async activate() {\n        let path = this.paths.activatePath;\n        let activateBody: activateData = {\n            api_key,\n            uid: Context.data.request_id!,\n            noemail: true\n        };\n        let body = JSON.stringify(activateBody);\n        await this.makeRequest(path, body);\n    };\n\n    async sendDocs() {\n        let path = this.paths.sendDocsPath;\n        let documentsObj: documentsData = JSON.parse(Context.data.json_obj!).documentsDataObj;\n        let body: string;\n\n        for (let document of documentsObj) {\n            body = JSON.stringify(document);\n            await this.makeRequest(path, body);\n        };\n    };\n\n    async createUser() {\n        let path = this.paths.comstaffPath;\n        let data = new FormData();\n        data.append(\"user_ph\", Context.data.phone![0].tel);\n        data.append(\"key\", Context.data.api_key!);\n        await this.makeRequest(path, data);\n    };\n\n    async getCertsInfo() {\n        let path = this.paths.userInfoPath;\n        let body = JSON.stringify({\n            key: api_key,\n            phone: Context.data.phone![0].tel,\n            id: Context.data.request_id\n        });\n        await this.makeRequest(path, body)\n        path = this.paths.getCertsPath;\n        let data = new FormData();\n        data.append(\"user_ph\", Context.data.phone![0].tel);\n        data.append(\"key\", Context.data.api_key!);\n        await this.makeRequest(path, data);\n    };\n};\n\n\nconst numberToDocTypeReference: Record\u003cstring, string\u003e = {\n    \"1\": \"passport_main_page\",\n    \"2\": \"passport_living_page\",\n    \"3\": \"snils_file\",\n    \"4\": \"release_statement\"\n};\nconst signMeLogger = new SignMeLogger();\nconst signMeProvider = new SignMeProvider(signMeLogger);\nconst api_key = Context.data.api_key!;\nconst ogrn = Context.data.ogrn!;\nconst method: string = \"POST\";\nconst headers = {\n    \"Content-Type\": \"application/json\"\n};\nconst blankFileBase64 = \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAAAMSURBVBhXY/j//z8ABf4C/qc1gYQAAAAASUVORK5CYII=\";\n\ntype revokeCertificate = {\n    id: string,\n    api_key: string\n};\n\ntype documentData = {\n    api_key: string,\n    utype: string,\n    uid: string,\n    name: string,\n    file: string,\n    doctype: string\n};\n\ntype documentsData = documentData[];\n\ntype activateData = {\n    api_key: string,\n    uid: string,\n    noemail?: Boolean\n};\n\ntype staffData = {\n    key: string,\n    phone: string,\n    cogrn: string\n};\n\ninterface certRequestData {\n    api_key: string,\n    snils: string,\n    inn?: string,\n    kpp?: string\n};\n\ninterface precheckData extends certRequestData {\n    phone: string,\n    email: string,\n};\n\ninterface registerData extends precheckData {\n    name: string,\n    surname: string,\n    lastname: string,\n    bdate: string,\n    gender: string,\n    ps: string,\n    pn: string,\n    issued: string,\n    pcode: string,\n    pdate: string,\n    country: string,\n    region: string,\n    city: string,\n    street?: string,\n    house?: string,\n    building?: string,\n    room?: string,\n    regtype: string,\n    external?: string,\n    delivery: string,\n    ca: string,\n    noemail: string\n};\n\ntype requestBody = certRequestData | precheckData | registerData | activateData | staffData | revokeCertificate | FormData | undefined;\ntype contextKey = keyof typeof Context.data;\n\n\nlet documentsDataObj: documentsData = [];\nlet certsRequestData = new FormData()\nlet cecrtificateBase64: string;\nlet certRequestDataObj: certRequestData; \nlet precheckDataObj: precheckData;\nlet registerDataObj: registerData;\nlet staffDataObj: staffData; \nlet user: UserItem;\nlet responseData: string;\n\n\nasync function serializeData(): Promise\u003cvoid\u003e {\n    Context.data.error = \"\";\n    Context.data.error_exists = false;\n    try {\n        let inn = Context.data.inn!;\n        let name = Context.data.name!;\n        let surname = Context.data.surname!;\n        let lastname = Context.data.lastname!;\n        let email = Context.data.email![0].email;\n        let phone = Context.data.phone![0].tel;\n        let gender = Context.data.gender!.code.toUpperCase();;\n        let bdate = Context.data.birth_date!.format(\"YYYY-MM-DD\");\n        let pn = Context.data.passport_number!;\n        let ps = Context.data.passport_series!;\n        let pdate = Context.data.passport_date!.format(\"YYYY-MM-DD\");\n        let pcode = Context.data.passport_code!;\n        let issued = Context.data.issued_by!;\n        let snils = Context.data.snils!;\n        let country = \"ru\";\n        let region = Context.data.region!;\n        let city = Context.data.city!;\n        let jsonObj = {};\n\n        for (let key of Object.keys(numberToDocTypeReference)) {\n            let contextKey: contextKey = numberToDocTypeReference[key];\n            let fileName: string;\n            let fileBase64: string;\n            if (!Context.data[contextKey]) {\n                fileName = \"blank.png\";\n                fileBase64 = blankFileBase64;\n            } else {\n                fileName = await Context.data[contextKey].fetch().then((f: any) =\u003e f.data.__name);\n                let downloadUrl = await Context.data[contextKey].getDownloadUrl();\n                let currentDocBuffer = await fetch(downloadUrl).then(async r =\u003e await r.arrayBuffer());\n                fileBase64 = arrayBufferToBase64(currentDocBuffer);\n            }\n            let currentDocObj: documentData = {\n                api_key,\n                utype: \"1\",\n                uid: snils,\n                doctype: key,\n                file: fileBase64,\n                name: fileName\n            };\n            documentsDataObj.push(currentDocObj);\n        };\n\n        registerDataObj = {\n            api_key,\n            inn,\n            name,\n            surname,\n            lastname,\n            email,\n            phone,\n            gender,\n            bdate,\n            pn,\n            ps,\n            pdate,\n            pcode,\n            issued,\n            snils,\n            country,\n            region,\n            city,\n            regtype: Context.data.data_changed ? \"3\" : \"2\",\n            delivery: \"0\",\n            ca: \"NKEP12\",\n            noemail: \"1\"\n        };\n\n        precheckDataObj = {\n            api_key,\n            phone,\n            snils,\n            email,\n            inn\n        };\n\n        certRequestDataObj = {\n            api_key,\n            snils\n        };\n\n        staffDataObj = {\n            key: api_key,\n            cogrn: ogrn,\n            phone\n        };\n        \n        certsRequestData.append(\"key\", api_key);\n        certsRequestData.append(\"user_ph\", registerDataObj.phone);\n\n        jsonObj = {\n            registerDataObj,\n            precheckDataObj,\n            certRequestDataObj,\n            staffDataObj,\n            documentsDataObj\n        };\n\n        Context.data.json_obj = JSON.stringify(jsonObj);\n    } catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n    };\n};\n\nfunction base64ToArrayBuffer(base64: string) {\n    let binary_string = atob(base64);\n    let len = binary_string.length;\n    let bytes = new Uint8Array(len);\n\n    for (var i = 0; i \u003c len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer): string {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n    let len = bytes.byteLength;\n\n    for (let i = 0; i \u003c len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    };\n\n    return btoa(binary);\n};\n\nasync function precheck(): Promise\u003cvoid\u003e {\n    try {\n        await signMeProvider.precheck();\n    } catch (err) {\n        throw new Error(err.message)\n    };\n};\n\nasync function register(): Promise\u003cvoid\u003e {\n    try {\n        await signMeProvider.register();\n    } catch (err) {\n        throw new Error(err.message)\n    };\n};\n\nasync function sendPhotos(): Promise\u003cvoid\u003e {\n    try {\n        await signMeProvider.sendDocs();\n    } catch (err) {\n        throw new Error(err.message);\n    };\n};\n\nasync function activate(): Promise\u003cvoid\u003e {\n    try {\n        await signMeProvider.activate();\n    } catch (err) {\n        throw new Error(err.message)\n    };\n};\n\nasync function getCerts(): Promise\u003cvoid\u003e {\n    try {\n        await signMeProvider.getCertsInfo();\n    } catch (err) {\n        throw new Error(err.message)\n    };\n};",
  "forms": [],
  "settings": {
    "logged": true,
    "debugForm": {
      "allFields": false,
      "formFields": [
        {
          "code": "__name",
          "tooltip": "Название экземпляра процесса, будет показываться в задачах",
          "readonly": false,
          "required": true,
          "hideEmpty": false
        },
        {
          "code": "phone",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "email",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "birth_date",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "passport_date",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "passport_main_page",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "passport_living_page",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "snils_file",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "user",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "responsible_user",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "release_statement",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "city",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "name",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "passport_number",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "region",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "snils",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "passport_series",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "inn",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "surname",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "country",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "issued_by",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "passport_code",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "gender",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "lastname",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        },
        {
          "code": "api_key",
          "tooltip": "",
          "readonly": false,
          "required": false,
          "hideEmpty": false
        }
      ]
    },
    "targetFeed": {
      "type": "instance",
      "variable": ""
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": false,
    "applicationContext": false,
    "importsDependencies": [],
    "useStartFormInDebug": true,
    "fieldVisibilityConditions": {
      "inn": {
        "enabled": false,
        "conditions": []
      },
      "city": {
        "enabled": false,
        "conditions": []
      },
      "name": {
        "enabled": false,
        "conditions": []
      },
      "ogrn": {
        "enabled": false,
        "conditions": []
      },
      "user": {
        "enabled": false,
        "conditions": []
      },
      "certs": {
        "enabled": false,
        "conditions": []
      },
      "debug": {
        "enabled": false,
        "conditions": []
      },
      "email": {
        "enabled": false,
        "conditions": []
      },
      "error": {
        "enabled": false,
        "conditions": []
      },
      "phone": {
        "enabled": false,
        "conditions": []
      },
      "snils": {
        "enabled": false,
        "conditions": []
      },
      "stage": {
        "enabled": false,
        "conditions": []
      },
      "gender": {
        "enabled": false,
        "conditions": []
      },
      "region": {
        "enabled": false,
        "conditions": []
      },
      "api_key": {
        "enabled": false,
        "conditions": []
      },
      "country": {
        "enabled": false,
        "conditions": []
      },
      "surname": {
        "enabled": false,
        "conditions": []
      },
      "json_obj": {
        "enabled": false,
        "conditions": []
      },
      "lastname": {
        "enabled": false,
        "conditions": []
      },
      "response": {
        "enabled": false,
        "conditions": []
      },
      "issued_by": {
        "enabled": false,
        "conditions": []
      },
      "birth_date": {
        "enabled": false,
        "conditions": []
      },
      "certs_json": {
        "enabled": false,
        "conditions": []
      },
      "request_id": {
        "enabled": false,
        "conditions": []
      },
      "snils_file": {
        "enabled": false,
        "conditions": []
      },
      "error_exists": {
        "enabled": false,
        "conditions": []
      },
      "passport_code": {
        "enabled": false,
        "conditions": []
      },
      "passport_date": {
        "enabled": false,
        "conditions": []
      },
      "request_exists": {
        "enabled": false,
        "conditions": []
      },
      "passport_number": {
        "enabled": false,
        "conditions": []
      },
      "passport_series": {
        "enabled": false,
        "conditions": []
      },
      "request_rejected": {
        "enabled": false,
        "conditions": []
      },
      "responsible_user": {
        "enabled": false,
        "conditions": []
      },
      "automatic_reissue": {
        "enabled": false,
        "conditions": []
      },
      "release_statement": {
        "enabled": false,
        "conditions": []
      },
      "request_confrimed": {
        "enabled": false,
        "conditions": []
      },
      "passport_main_page": {
        "enabled": false,
        "conditions": []
      },
      "signed_request_scan": {
        "enabled": false,
        "conditions": []
      },
      "passport_living_page": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
