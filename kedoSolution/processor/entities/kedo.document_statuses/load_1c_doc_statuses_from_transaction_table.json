{
  "__id": "018c8757-193c-7ebd-aa81-7490c08524f9",
  "namespace": "kedo.document_statuses",
  "code": "load_1c_doc_statuses_from_transaction_table",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "(1C) Загрузить статусы документов из таблицы обмена информацией",
  "type": "bpmn",
  "draft": false,
  "version": 3,
  "context": [
    {
      "code": "document_statuses",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "document_statuses",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Статусы документов"
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-04-27T04:30:06.069082156Z",
  "__createdBy": "6c362877-9ef9-45f4-aa6f-e5e126ee96c0",
  "__updatedAt": "2023-04-27T05:14:22.808857202Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 104,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "5f507eee-4be2-4ea7-8ccc-3cc95ce789c7",
        "type": "start",
        "color": "#ffffff",
        "exits": ["a2d08c03-1656-4e58-b8cd-6c009238719a"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "(1C) Загрузить статусы документов из таблицы обмена информацией ({$document_statuses})",
          "titleGenerateMethod": "template"
        }
      },
      "12bf9e4b-85ec-4169-9af4-780db55c1bf8": {
        "x": 80,
        "y": 152,
        "id": "12bf9e4b-85ec-4169-9af4-780db55c1bf8",
        "icon": "script",
        "lane": "5f507eee-4be2-4ea7-8ccc-3cc95ce789c7",
        "name": "Загрузка",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["692950ef-4c13-464f-a2cd-6506d1b42f5b"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "loadStatuses",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "7c44a488-86e1-4ab9-8d66-f084fd363771": {
        "x": 104,
        "y": 272,
        "id": "7c44a488-86e1-4ab9-8d66-f084fd363771",
        "icon": "end",
        "lane": "5f507eee-4be2-4ea7-8ccc-3cc95ce789c7",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "5f507eee-4be2-4ea7-8ccc-3cc95ce789c7": {
        "x": 8,
        "y": 8,
        "id": "5f507eee-4be2-4ea7-8ccc-3cc95ce789c7",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 224,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "692950ef-4c13-464f-a2cd-6506d1b42f5b": {
        "id": "692950ef-4c13-464f-a2cd-6506d1b42f5b",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 216
          },
          {
            "x": 120,
            "y": 272
          }
        ],
        "type": "plain",
        "source": "12bf9e4b-85ec-4169-9af4-780db55c1bf8",
        "target": "7c44a488-86e1-4ab9-8d66-f084fd363771",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "a2d08c03-1656-4e58-b8cd-6c009238719a": {
        "id": "a2d08c03-1656-4e58-b8cd-6c009238719a",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 104
          },
          {
            "x": 120,
            "y": 152
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "12bf9e4b-85ec-4169-9af4-780db55c1bf8",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\nasync function loadStatuses(): Promise\u003cvoid\u003e {\n    const statusData = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.table_name.eq(\"Catalog_EM_СтатусыELMA\")\n        )).first()\n    \n    if (!!statusData) {\n        const existsingStatuses = await Namespace.app.document_statuses.search()\n            .where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()\n        const parsedStatusData = JSON.parse(statusData.data.table_data!).map((item: any) =\u003e {\n            return item.data\n        })\n        const promises : Promise\u003cany\u003e[] = []\n        for(let i = 0; i \u003c parsedStatusData.length; i++) {\n            let app = existsingStatuses.find(item =\u003e item.data.guid === parsedStatusData[i][\"Ref\"])\n            if (!app) {\n                app = Namespace.app.document_statuses.create()\n            }\n\n            app.data.__name = parsedStatusData[i][\"Description\"]\n            app.data.full_name = parsedStatusData[i][\"ИмяДляРазработчика\"]\n            app.data.guid = parsedStatusData[i][\"Ref\"]\n            app.data.is_blocking = !!parsedStatusData[i][\"БлокироватьДокумент\"]\n            promises.push(app.save())\n        }\n        await Promise.all(promises)\n    }\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "object",
      "variable": "document_statuses"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": true,
    "applicationContext": false,
    "fieldVisibilityConditions": {}
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
