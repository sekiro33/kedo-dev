{
  "__id": "3612f450-3320-4b64-a979-8483667bed3c",
  "__name": "__oldПолучить документ из 1С",
  "code": "create_awaiting_doc",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "type": [
    {
      "code": "script",
      "name": "Скрипт"
    }
  ],
  "group": "7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "icon": "system",
  "color": "#fde9a0",
  "itemName": "",
  "description": "",
  "retryCount": 1,
  "retryDelay": 5,
  "context": [
    {
      "code": "document_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "id Документа",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "response_1c_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ответ",
        "data": {
          "additionalType": "string"
        },
        "output": false
      }
    },
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "request_parameters",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "url Запроса",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "found_files",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": false,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Найденные файлы",
        "data": {},
        "output": true
      }
    },
    {
      "code": "files",
      "type": "FILE",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Файл",
        "data": {}
      }
    },
    {
      "code": "iteration_number",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Номер итераций",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "string"
        },
        "output": false
      }
    },
    {
      "code": "connection_name",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Имя подключенной базы",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    }
  ],
  "draft": false,
  "published": true,
  "data": {
    "scripts": "/**\nЗдесь вы можете написать скрипты для сложной серверной обработки контекста во время выполнения процесса.\nДля написания скриптов используйте TypeScript (https://www.typescriptlang.org).\nДокументация TS SDK доступна на сайте https://tssdk.elma365.com.\n\nСигнатуры функций\n\nДля синхронного взаимодействия:\n\tasync function action(): Promise\u003cvoid\u003e;\n\nДля модели проверки результата:\n\tasync function action(): Promise\u003cvoid\u003e;\n\tasync function check(): Promise\u003cboolean\u003e;\n\nДля модели обратного вызова:\n\tasync function action(url: string): Promise\u003cvoid\u003e;\n\tasync function callback(req: HTTPRequest): Promise\u003cvoid\u003e;\n\n**/\n\nlet baseUrl: string;\nlet login: string\nlet password: string\nlet myHeaders: any\n\nfunction getConnectionInfo(): Error | null {\n\tconst connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n\tif (!connectionsArray) {\n\t\treturn new Error(`Не найдено записей подключения`)\n\t}\n\n\tconst currentConnection = connectionsArray.length \u003e 1 ? connectionsArray.find((item: any) =\u003e {\n\t\treturn item.name === Context.data.connection_name\n\t}) : connectionsArray[0]\n\tif(!currentConnection) {\n\t\treturn new Error(`Не найдено подключение c именем ${Context.data.connection_name}`)\n\t}\n\n\tbaseUrl = currentConnection.url;\n\tlogin = currentConnection.login\n\tpassword = currentConnection.password\n\tmyHeaders = {\n\t\tAuthorization: `Basic ${btoa(login + ':' + password)}`,\n\t};\n\treturn null\n}\n\n\nasync function action(): Promise\u003cvoid\u003e{\n\tContext.data.iteration_number = 0\n\tconst error = getConnectionInfo();\n\tif (error !== null) {\n\t\tContext.data.error = error.message\n\t}\n\n\twriteToDocApp();\n}\n\nasync function check(): Promise\u003cboolean\u003e {\n\tconst error = getConnectionInfo();\n\tif (error !== null) {\n\t\tContext.data.error = error.message\n\t}\n\tContext.data.request_parameters = 'InformationRegister_EM_ДокументыСотрудников?$format=json'\n\tif (!baseUrl || !login) {\n\t\treturn true\n\t}\n\tawait makeRequest('GET', 'InformationRegister_EM_ДокументыСотрудников?$format=json');\n\tif (!!Context.data.response_1c_json) {\n\t\tconst response = JSON.parse(Context.data.response_1c_json!);\n\t\tconst documents = response.value.filter((item: any) =\u003e {\n\t\t\treturn item[\"Документ\"] === Context.data.document_id;\n\t\t})\n\n\t\tif (!!documents) {\n\t\t\tawait getFiles();\n\t\t\treturn true\n\t\t}\n\t\tContext.data.iteration_number = Context.data.iteration_number ? Context.data.iteration_number + 1 : 1\n\n\t\tif(Context.data.iteration_number \u003e 10) {\n\t\t\tContext.data.error = `Could not find requested document in 10 iterations`;\n\t\t\tthrow new Error(`Could not find requested document in 10 iterations`);\n\t\t\treturn true\n\t\t}\n\t}\n\n\n\treturn false\n};\n\nasync function getFiles(): Promise\u003cvoid\u003e {\n\tContext.data.request_parameters = `InformationRegister_EM_ПечатныеФормыДокументов?$format=json`;\n\tawait makeRequest('GET', `InformationRegister_EM_ПечатныеФормыДокументов?$format=json`);\n\tawait parseFiles();\n\n}\n\nasync function changeStatus(docData: any): Promise\u003cvoid\u003e {\n\tconst statusApp = await Namespace.params.fields.statuses_app.app.search().where(f =\u003e f.__name.eq('На подписании')).first();\n\tif (!!statusApp) {\n\t\tconst changeURL = `${docData[\"СтатусДокумента@navigationLinkUrl\"].split('/')[0]}?$format=json`\n\t\tconst body:any = {\n\t\t\t\"СтатусДокумента_Key\": statusApp.data.guid,\n\t\t}\n\n\t\tconst stringBody = JSON.stringify(body)\n\t\tawait makeRequest('PATCH', changeURL, stringBody)\n\t}\n}\n\nasync function writeToDocApp(): Promise\u003cvoid\u003e {\n//    const serverApp = await Namespace.params.fields.additional_app.app.search().first();\n//    if (!!serverApp) {\n//       const knownDocuments = serverApp.data.massiv_izvestnykh_dokumentov ? JSON.parse(serverApp.data.massiv_izvestnykh_dokumentov) : [];\n//       knownDocuments.push(Context.data.document_id);\n//       serverApp.data.massiv_izvestnykh_dokumentov = JSON.stringify(knownDocuments);\n//       await serverApp.save();\n//    }\n} \n\nasync function parseFiles(): Promise\u003cvoid\u003e {\n    const response = JSON.parse(Context.data.response_1c_json!);\n    const documents = response.value.filter((item: any) =\u003e {\n        return item[\"Документ\"] === Context.data.document_id;\n    })\n\n    if (!!documents){\n        const allFiles: FileItem[] = []\n        for(let document of documents) {\n\t\t\tconst fileJSON = JSON.parse(document[\"ХранилищеПечатнойФормы\"]);\n\t\t\tconst fileExtension = fileJSON.type;\n\t\t\tconst fileString = fileJSON.data.replace(/\\\\r\\\\n/g, '')\n\t\t\tconst fileArrayBuffer = await getArrayBufferFromBase64(fileString);\n            const newFile = await Context.fields.files.create(`${document[\"ПечатнаяФорма\"]}.${fileExtension.toLowerCase()}`, fileArrayBuffer);\n\t\t\tawait changeStatus(document)\n            allFiles.push(newFile)\n        }\n        Context.data.found_files = allFiles\n    }\n}\n\nasync function getArrayBufferFromBase64(base64: string):Promise\u003cArrayBuffer\u003e {\n    var binary_string = atob(base64);\n    var len = binary_string.length; \n    var bytes = new Uint8Array(len); \n    for (var i = 0; i \u003c len; i++) {\n        bytes[i] = binary_string.charCodeAt(i); \n    } \n    return bytes.buffer; \n}\n\nasync function makeRequest(method: string, url: string, body?: string) {\n\tconst requestOptions: FetchRequest = {\n\t\tmethod: method,\n\t\theaders: myHeaders,\n\t};\n\n\tif (!!body) {\n\t\trequestOptions.body = body;\n\t}\n\n\tconst resUrl = baseUrl + '/' + url;\n\n\ttry {\n\t\tconst response = await fetch(`${encodeURI(resUrl)}`, requestOptions)\n\t\tif (!response.ok) {\n\t\t\tContext.data.error += ` staff data res.status error; resUrl - ${resUrl} `\n\t\t\tthrow new Error(`res error ${resUrl}`);\n\t\t}\n\n\t\tContext.data.response_1c_json = JSON.stringify(await response.json());\n\t} catch (err){\n\t\tContext.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `\n\t\tthrow new Error(err)\n\t}\n}",
    "execution": [
      {
        "code": "future",
        "name": "Запрос результата"
      }
    ],
    "allowGlobal": false,
    "checkInterval": "1m"
  },
  "async": true,
  "deprecated": true,
  "deprecatedMessage": "Неактуально",
  "__createdAt": "2024-05-27T06:34:20.651507792Z",
  "__createdBy": "59e0911f-230a-4b6d-becf-6b302a91977a",
  "__updatedAt": "2024-06-04T10:55:35.624155875Z",
  "__updatedBy": "59e0911f-230a-4b6d-becf-6b302a91977a",
  "__deletedAt": null
}
