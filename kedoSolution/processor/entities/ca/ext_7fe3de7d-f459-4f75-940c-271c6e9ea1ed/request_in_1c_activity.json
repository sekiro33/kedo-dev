{
  "__id": "4b59537a-2627-4581-9216-3d74ef5ba0a8",
  "__name": "__old(1С ЗУП) Запрос данных в 1С",
  "code": "request_in_1c",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "type": [
    {
      "code": "script",
      "name": "Скрипт"
    }
  ],
  "group": "7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "icon": "system",
  "color": "#20c997",
  "itemName": "",
  "description": "",
  "retryCount": 10,
  "retryDelay": 10,
  "context": [
    {
      "code": "request_parameters",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": true,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Параметры запроса",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "response_1c_json",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ответ 1С (JSON)",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "request_type",
      "type": "ENUM",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "enumItems": [
          {
            "code": "get",
            "name": "GET",
            "checked": true
          },
          {
            "code": "post",
            "name": "POST",
            "checked": false
          },
          {
            "code": "patch",
            "name": "PATCH",
            "checked": false
          }
        ]
      },
      "view": {
        "name": "Тип запроса",
        "data": {},
        "input": false
      }
    },
    {
      "code": "request_body",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Тело запроса",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "request_type_string",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Тип запроса строка",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "connection_name",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Название базы 1С",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    }
  ],
  "draft": false,
  "published": true,
  "data": {
    "scripts": "/**\nЗдесь вы можете написать скрипты для сложной серверной обработки контекста во время выполнения процесса.\nДля написания скриптов используйте TypeScript (https://www.typescriptlang.org).\nДокументация TS SDK доступна на сайте https://tssdk.elma365.com.\n\nСигнатуры функций\n\nДля синхронного взаимодействия:\n\tasync function action(): Promise\u003cvoid\u003e;\n\nДля модели проверки результата:\n\tasync function action(): Promise\u003cvoid\u003e;\n\tasync function check(): Promise\u003cboolean\u003e;\n\nДля модели обратного вызова:\n\tasync function action(url: string): Promise\u003cvoid\u003e;\n\tasync function callback(req: HTTPRequest): Promise\u003cvoid\u003e;\n\n**/\n\nlet baseUrl: string;\nlet login: string\nlet password: string\nlet myHeaders: any\n\nfunction getConnectionInfo(): Error | null {\n\tconst connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n\tif (!connectionsArray) {\n\t\treturn new Error(`Не найдено записей подключения`)\n\t}\n\n\tconst currentConnection = Context.data.connection_name ? connectionsArray.find((item: any) =\u003e {\n\t\treturn item.name === Context.data.connection_name\n\t}) : connectionsArray[0]\n\tif (!currentConnection) {\n\t\treturn new Error(`Не найдено подключение c именем ${Context.data.connection_name}`)\n\t}\n\n\tbaseUrl = currentConnection.url;\n\tlogin = currentConnection.login\n\tpassword = currentConnection.password\n\tmyHeaders = {\n\t\tAuthorization: `Basic ${btoa(login + ':' + password)}`,\n\t};\n\treturn null\n}\n\nasync function action(): Promise\u003cvoid\u003e {\n\tconst error = getConnectionInfo()\n\n\tif (error !== null) {\n\t\tContext.data.error = error.message\n\t\treturn;\n\t}\n\n\tconst requestOptions: FetchRequest = {\n\t\tmethod: Context.data.request_type_string ? Context.data.request_type_string : 'GET',\n\t\theaders: myHeaders,\n\t};\n\tif (!!Context.data.request_body) {\n\t\trequestOptions.body = Context.data.request_body;\n\t}\n\n\tconst resUrl = `${baseUrl}/${Context.data.request_parameters}`;\n\n\ttry {\n\t\tconst response = await fetch(`${encodeURI(resUrl)}`, requestOptions)\n\t\tif (!response.ok) {\n\t\t\tContext.data.error += ` staff data res.status error; resUrl - ${resUrl} `\n\t\t\tthrow new Error(`response status ${response.status} staff data res.status error; resUrl - ${resUrl}`)\n\t\t}\n\n\t\tContext.data.response_1c_json = JSON.stringify(await response.json());\n\t} catch (err) {\n\t\tContext.data.error += `try/catch error ${err}; resUrl - ${resUrl}`\n\t\tthrow new Error(`try/catch error ${err.message}; resUrl - ${resUrl}`)\n\t}\n}",
    "execution": [
      {
        "code": "sync",
        "name": "Синхронное"
      }
    ],
    "allowGlobal": false,
    "checkInterval": ""
  },
  "async": false,
  "deprecated": true,
  "deprecatedMessage": "Перенесено в модуль 1С",
  "__createdAt": "2024-05-27T06:34:22.018323714Z",
  "__createdBy": "59e0911f-230a-4b6d-becf-6b302a91977a",
  "__updatedAt": "2024-05-30T22:21:10.013897644Z",
  "__updatedBy": "59e0911f-230a-4b6d-becf-6b302a91977a",
  "__deletedAt": null
}
