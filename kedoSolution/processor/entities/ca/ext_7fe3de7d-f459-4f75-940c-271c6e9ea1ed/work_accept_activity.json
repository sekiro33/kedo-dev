{
  "__id": "c87ab8e6-7862-41b9-bef3-4c372407272b",
  "__name": "(1С) Создать прием на работу",
  "code": "work_accept",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "type": [
    {
      "code": "script",
      "name": "Скрипт"
    }
  ],
  "group": "7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "icon": "system",
  "color": "#20c997",
  "itemName": "",
  "description": "",
  "retryCount": 1,
  "retryDelay": 5,
  "context": [
    {
      "code": "staff",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": true,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "namespace": "kedo"
      },
      "view": {
        "name": "Сотрудник",
        "data": {},
        "input": true
      }
    },
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "response",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ответ",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "connection_name",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Название базы 1С",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "alternative_integration",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Альтернативная интеграция",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true
      }
    },
    {
      "code": "integration_app_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ID приложения интеграции",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "individual_id_1c",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ID ФЛ",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "id_1c",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ID 1C",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    }
  ],
  "draft": false,
  "published": true,
  "data": {
    "scripts": "/**\nЗдесь вы можете написать скрипты для сложной серверной обработки контекста во время выполнения процесса.\nДля написания скриптов используйте TypeScript (https://www.typescriptlang.org).\nДокументация TS SDK доступна на сайте https://tssdk.elma365.com.\n\nСигнатуры функций\n\nДля синхронного взаимодействия:\n\tasync function action(): Promise\u003cvoid\u003e;\n\nДля модели проверки результата:\n\tasync function action(): Promise\u003cvoid\u003e;\n\tasync function check(): Promise\u003cboolean\u003e;\n\nДля модели обратного вызова:\n\tasync function action(url: string): Promise\u003cvoid\u003e;\n\tasync function callback(req: HTTPRequest): Promise\u003cvoid\u003e;\n\n**/\n\nlet baseUrl: string;\nlet login: string\nlet password: string\nlet myHeaders: any\n\n/*\nВиды документов \"ВидДокумента\"\nВодительскоеУдостоверение\nВоенныйБилет\nВоенныйБилетОфицераЗапаса\nДипломатическийПаспорт\nЗагранпаспортРФ\nЗагранпаспортСССР\nПаспортРФ\nПаспортСССР\nПаспортМинморфлота\nПаспортМоряка\nСвидетельствоОРождении\nУдостоверениеОфицера\n*/\n\ninterface IStaffInfo {\n\t\"Сотрудник\": IStaff,\n\t\"ФизЛицо\": IIndividual,\n\t\"Документы\": IPassport[],\n}\n\ninterface IIndividual {\n\t\"Guid\": string,\n\t\"ДатаРождения\": string,\n\t\"Пол\": string,\n\t\"ИНН\"?: string,\n\t\"ФИО\": string,\n\t\"Фамилия\": string,\n\t\"Имя\": string,\n\t\"Отчество\"?: string,\n\t\"СтраховойНомерПФР\"?: string,\n\t\"КонтактнаяИнформация\"?: IContactInfo[],\n}\n\ninterface IDocument {\n\t\"ВидДокумента\" : string,\n}\n\ninterface IPassport {\n\t\"ВидДокумента\" : \"ПаспортРФ\",\n\t\"Серия\": string,\n\t\"Номер\": string,\n\t\"ДатаВыдачи\": string,\n\t\"КемВыдан\": string,\n\t\"КодПодразделения\": string,\n\t\"ЯвляетсяДокументомУдостоверяющимЛичность\": boolean,\n}\n\ninterface IContactInfo {\n\t\"Тип\": \"Адрес\" | \"Телефон\" | \"АдресЭлектроннойПочты\",\n\t\"Вид_Key\" : string,\n\t\"Значение\": string,\n}\n\ninterface IStaff {\n\t\"Guid\": string,\n\t\"ГоловнаяОрганизация\": string,\n}\n\ntype Staff = ApplicationItem\u003cApplication$kedo$staff$Data, Application$kedo$staff$Params\u003e;\ntype Organization = ApplicationItem\u003cApplication$kedo$organization$Data, Application$kedo$organization$Params\u003e;\n\nfunction getConnectionInfo(): Error | null {\n\tconst connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n\tif (!connectionsArray) {\n\t\treturn new Error(`Не найдено записей подключения`)\n\t}\n\n\n\tconst currentConnection = connectionsArray.length \u003e 1 ? connectionsArray.find((item: any) =\u003e {\n\t\treturn item.name === Context.data.connection_name\n\t}) : connectionsArray[0]\n\tif (!currentConnection) {\n\t\treturn new Error(`Не найдено подключение c именем ${Context.data.connection_name}`)\n\t}\n\n\tbaseUrl = currentConnection.url;\n\tlogin = currentConnection.login\n\tpassword = currentConnection.password\n\tmyHeaders = {\n\t\tAuthorization: `Basic ${btoa(login + ':' + password)}`,\n\t};\n\treturn null\n}\n\nasync function get_staff_info(staff: Staff, id1c: string, individualId: string, organization: Organization): Promise\u003cIStaffInfo\u003e {\n\tconst staff_info: IStaffInfo = {\n\t\t\"Сотрудник\": {\n\t\t\t\"Guid\": id1c,\n\t\t\t\"ГоловнаяОрганизация\": organization.data.ref_key ?? \"\",\n\t\t},\n\t\t\"ФизЛицо\": {\n\t\t\t\"Guid\": individualId,\n\t\t\t\"ДатаРождения\": staff.data.date_of_birth!.format(\"YYYY-MM-DDT00:00:00\"),\n\t\t\t\"Пол\": staff.data.sex == true ? \"Мужской\" : \"Женский\",\n\t\t\t\"ИНН\": staff.data.inn ?? \"\",\n\t\t\t\"ФИО\": staff.data.__name,\n\t\t\t\"Фамилия\": staff.data.surname ?? \"\",\n\t\t\t\"Имя\": staff.data.name ?? \"\",\n\t\t\t\"Отчество\": staff.data.middlename ?? \"\",\n\t\t\t\"СтраховойНомерПФР\": staff.data.snils ?? \"\",\n\t\t\t\"КонтактнаяИнформация\": get_contact_info(staff),\n\t\t},\n\t\t\"Документы\": [\n\t\t\tget_passport(staff),\n\t\t]\n\t}\n\n\treturn staff_info;\n}\n\nfunction get_passport(staff: Staff): IPassport {\n\treturn {\n\t\t\"ВидДокумента\" : \"ПаспортРФ\",\n\t\t\"Серия\": staff.data.passport_series!,\n\t\t\"Номер\": staff.data.passport_number!,\n\t\t\"ДатаВыдачи\": staff.data.date_of_issue!.format(\"YYYY-MM-DDT00:00:00\"),\n\t\t\"КемВыдан\": staff.data.issued_by!,\n\t\t\"КодПодразделения\": staff.data.passport_department_code!,\n\t\t\"ЯвляетсяДокументомУдостоверяющимЛичность\": true,\n\t}\n}\n\nfunction get_contact_info(staff: Staff): IContactInfo[] {\n\tconst contacts: IContactInfo[] = [];\n\n\tif (staff.data.email) {\n\t\tcontacts.push({\n\t\t\t\"Тип\": \"АдресЭлектроннойПочты\",\n\t\t\t\"Вид_Key\" : \"dceee501-d2e6-11e4-8fb4-14dae9b19c71\",\n\t\t\t\"Значение\": staff.data.email.email,\n\t\t})\n\t}\n\n\tif (staff.data.phone) {\n\t\tcontacts.push({\n\t\t\t\"Тип\": \"Телефон\",\n\t\t\t\"Вид_Key\" : \"82bc737b-0a3f-11e3-93c0-001b11b25590\",\n\t\t\t\"Значение\": staff.data.phone.tel,\n\t\t})\n\t}\n\n\tif (staff.data.address) {\n\t\tcontacts.push({\n\t\t\t\"Тип\": \"Адрес\",\n\t\t\t\"Вид_Key\" : \"5d56f793-8eda-4697-b26d-5afc3972f430\",\n\t\t\t\"Значение\": staff.data.address,\n\t\t})\n\t}\n\n\treturn contacts;\n}\n\nasync function action(): Promise\u003cvoid\u003e {\n\tconst currentDate = new TDate();\n\tconst staff = await Context.data.staff!.fetch();\n\n\tconst [organization, subdivision, position] = await Promise.all([\n\t\tstaff.data.organization!.fetch(),\n\t\tstaff.data.structural_subdivision!.fetch(),\n\t\tstaff.data.position!.fetch(),\n\t]);\n\n\tconst id1C = staff.data.id_1c ?? generateGUID();\n\tconst individualID = staff.data.individual_id_1c ?? generateGUID();\n\n\tContext.data.id_1c = id1C;\n\tContext.data.individual_id_1c = individualID;\n\n\tconst body = {\n\t\t\"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n\t\t\"Организация_Key\": organization.data.ref_key ?? \"\",\n\t\t\"Подразделение_Key\": subdivision.data.ref_key ?? \"\",\n\t\t\"Должность_Key\": position.data.ref_key ?? \"\",\n\t\t\"Сотрудник_Key\": id1C,\n\t\t\"ДатаПриема\": staff.data.work_start!.format(\"YYYY-MM-DDT00:00:00\"),\n\t\t\"КоличествоСтавок\": 1,\n\t\t\"ВидЗанятости\": \"ОсновноеМестоРаботы\",\n\t\t\"ГрафикРаботы_Key\": \"899b02dc-7a6b-11e2-9362-001b11b25590\",\n\t\t\"ВидТарифнойСтавки\": \"МесячнаяТарифнаяСтавка\",\n\t\t\"ВидДоговора\": \"ТрудовойДоговор\",\n\t\t\"СрочныйДоговор\": false,\n\t\t\"СезонныйДоговор\": false,\n\t\t\"ДанныеСотрудников\": [\n\t\t\tawait get_staff_info(staff, id1C, individualID, organization),\n\t\t]\n\t}\n\n\tif (Context.data.alternative_integration) {\n\t\tconst accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c;\n\t\tconst integration_app = Namespace.params.fields.awaiting_docs_table_1c.app.create();\n\n\t\tintegration_app.data.__name = `Прием на работу (${staff.data.__name})`;\n\t\tintegration_app.data.document_odata_name = \"Document_ПриемНаРаботу\";\n\t\tintegration_app.data.accounting_systems = accounting1c;\n\t\tintegration_app.data.document_creation_data = JSON.stringify(body);\n\t\tintegration_app.data.personal_guid_1c = JSON.stringify([individualID]);\n\t\tintegration_app.data.additional_info = `${staff.data.__name} - ${staff.data.id_1c ? \"Сотрудник существует\" : \"Новый\"}`;\n\t\tintegration_app.data.base_1c_name = Context.data.connection_name;\n\n\t\tawait integration_app.save()\n\n\t\tContext.data.integration_app_id = integration_app.data.__id\n\t} else {\n\t\tconst error = getConnectionInfo()\n\t\tif (error != null) {\n\t\t\tContext.data.error = error.message\n\t\t\treturn\n\t\t}\n\n\t\tconst createURL = `${baseUrl}/Document_ПриемНаРаботу?$format=json`;\n\t\tconst stringBody = JSON.stringify(body)\n\t\tawait makeRequest('POST', createURL, stringBody);\n\t}\n\n\t/*\n\tconst resUrl = `${baseUrl}/Catalog_Должности(guid'${Context.data.pos_id}')?$format=json`;\n\tawait makeRequest('GET', resUrl)\n\t\n\tconst currentDate = new TDate();\n\tconst posResponse = JSON.parse(Context.data.response!)\n\tconst workFunction = posResponse[\"ТрудоваяФункция_Key\"]*/\n}\n\nfunction generateGUID(): string {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t\tvar r = Math.random() * 16 | 0, v = c == 'x' ? r : (r \u0026 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nasync function makeRequest(method: string, url: string, body?: string) {\n\tconst requestOptions: FetchRequest = {\n\t\tmethod: method,\n\t\theaders: myHeaders,\n\t};\n\n\tif (!!body) {\n\t\trequestOptions.body = body;\n\t}\n\n\tconst resUrl = url;\n\n\ttry {\n\t\tconst response = await fetch(`${encodeURI(resUrl)}`, requestOptions)\n\t\tif (!response.ok) {\n\t\t\tContext.data.error += ` staff data res.status error; resUrl - ${resUrl} `\n\t\t\tthrow new Error(`res error ${resUrl}`);\n\t\t}\n\n\t\tContext.data.response = JSON.stringify(await response.json());\n\t} catch (err) {\n\t\tContext.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `\n\t\tthrow new Error(err)\n\t}\n}",
    "execution": [
      {
        "code": "sync",
        "name": "Синхронное"
      }
    ],
    "allowGlobal": false,
    "checkInterval": ""
  },
  "async": false,
  "__createdAt": "2023-12-20T13:08:01.913439314Z",
  "__createdBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "__updatedAt": "2024-02-14T11:09:54.571222698Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "__deletedAt": null
}
