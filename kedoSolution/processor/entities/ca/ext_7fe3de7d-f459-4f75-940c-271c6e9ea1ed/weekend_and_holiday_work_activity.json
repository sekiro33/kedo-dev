{
  "__id": "61e6bdff-e8ab-45c6-bffd-efb48f8a4af2",
  "__name": "(1С) Создать работа в выходные и праздничные дни",
  "code": "weekend_and_holiday_work",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "type": [
    {
      "code": "script",
      "name": "Скрипт"
    }
  ],
  "group": "7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "icon": "system",
  "color": "#20c997",
  "itemName": "",
  "description": "",
  "retryCount": 10,
  "retryDelay": 5,
  "context": [
    {
      "code": "response",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ответ",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "org_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": true,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "id Организации",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "reason",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Причина",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "employee_data",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": true,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Данные сотрудников",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "connection_name",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Имя подключения 1С",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "compensation_type",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Вид компенсации (Отгул/ПовышеннаяОплата)",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "registration_month",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": true,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Месяц регистрации ('YYYY-MM')",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "alternative_way",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Альтернативная интеграция",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true
      }
    },
    {
      "code": "integration_app_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "id Приложения интеграции",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "individual_id_1c",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ИД ФЛ 1С",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "comment",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Комментарий",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "additional_info",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дополнительная информация",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    }
  ],
  "draft": false,
  "published": true,
  "data": {
    "scripts": "interface EmployeeWeekendsWork {\n\tid: string;\n\tindividualId: string;\n\tdates: string[]; //datetime.format('YYYY-MM-DD')[]\n\tcompensationType: string; // Отгул / ПовышеннаяОплата\n\thours : number;\n}\n\nenum CompensationType {\n\tIncreasedPay = \"Отгул\",\n\tCompensatoryHoliday = \"ПовышеннаяОплата\"\n}\n\nlet baseUrl: string;\nlet login: string\nlet password: string\nlet myHeaders: any\n\nfunction getConnectionInfo(): Error | null {\n\tconst connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n\tif (!connectionsArray) {\n\t\treturn new Error(`Не найдено записей подключения`)\n\t}\n\n\n\tconst currentConnection = connectionsArray.length \u003e 1 ? connectionsArray.find((item: any) =\u003e {\n\t\treturn item.name === Context.data.connection_name\n\t}) : connectionsArray[0]\n\tif (!currentConnection) {\n\t\treturn new Error(`Не найдено подключение c именем ${Context.data.connection_name}`)\n\t}\n\n\tbaseUrl = currentConnection.url;\n\tlogin = currentConnection.login\n\tpassword = currentConnection.password\n\tmyHeaders = {\n\t\tAuthorization: `Basic ${btoa(login + ':' + password)}`,\n\t};\n\treturn null\n}\n\nasync function action(): Promise\u003cvoid\u003e {\n\n\tconst currentDate = new TDate();\n\tconst employeeData = JSON.parse(Context.data.employee_data!);\n\n\tconst dates: string[] = [];\n\temployeeData.forEach((item: any) =\u003e {\n\t\titem.dates.forEach((date: string) =\u003e {\n\t\t\t//@ts-ignore\n\t\t\tif (!dates.includes(date)) {\n\t\t\t\tdates.push(date)\n\t\t\t}\n\t\t})\n\t})\n\n\tconst individuals: any[] = [];\n\tconst workTable: any[] = [];\n\tconst individualIds: string[] = []\n\temployeeData.forEach((item: any, index: number) =\u003e {\n\t\tdates.forEach((date: string) =\u003e {\n\t\t\tworkTable.push({\n\t\t\t\t\"LineNumber\": `${workTable.length + 1}`,\n\t\t\t\t\"Сотрудник_Key\": item.id,\n\t\t\t\t\"Дата\": `${date}T00:00:00`,\n\t\t\t\t\"СпособКомпенсацииПереработки\": item.compensationType ?? \"ПовышеннаяОплата\",\n\t\t\t\t\"ОтработаноЧасов\": item.hours,\n\t\t\t\t\"НеРаботал\": !item.dates.includes(date)\n\t\t\t})\n\t\t})\n\n\t\tconst isEmployeeExisting = individuals.find((individual: any) =\u003e individual[\"ФизическоеЛицо_Key\"] === item.individualId)\n\t\tif (!isEmployeeExisting) {\n\t\t\tindividualIds.push(item.individualId)\n\t\t\tindividuals.push({\n\t\t\t\t\"LineNumber\": `${individuals.length + 1}`,\n\t\t\t\t\"ФизическоеЛицо_Key\": item.individualId\n\t\t\t})\n\t\t}\n\t})\n\n\tconst startDate = dates.sort()[0]\n\n\tconst body = {\n\t\t\"СогласиеТребуется\": true,\n\t\t\"ВремяВЧасах\": true,\n\t\t\"ВремяУчтено\": true,\n\t\t\"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n\t\t\"ПериодРегистрации\": `${Context.data.registration_month}-01T00:00:00`,\n\t\t\"Организация_Key\": Context.data.org_id,\n\t\t\"Причина\": Context.data.reason || '',\n\t\t\"ДатаНачалаСобытия\": `${startDate}T00:00:00`,\n\t\t\"СогласиеПолучено\": true,\n\t\t\"Сотрудники\": workTable,\n\t\t\"Комментарий\" : Context.data.comment ?? \"\"\n\t}\n\t\n\tContext.data.post_body = JSON.stringify(body)\n\n\tif (!Context.data.alternative_way) {\n\t\tconst error = getConnectionInfo()\n\t\tif (error != null) {\n\t\t\tContext.data.error = error.message\n\t\t\treturn\n\t\t}\n\t\tconst requestOptions: FetchRequest = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: myHeaders,\n\t\t};\n\n\t\trequestOptions.body = JSON.stringify(body);\n\n\n\t\tContext.data.debug = 'fetch'\n\t\tconst resUrl = `${baseUrl}/Document_РаботаВВыходныеИПраздничныеДни?$format=json`;\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${encodeURI(resUrl)}`, requestOptions)\n\t\t\tif (!response.ok) {\n\t\t\t\tContext.data.error += ` staff data res.status error; resUrl - ${resUrl} `\n\t\t\t\tthrow new Error(`res error ${resUrl}`);\n\t\t\t}\n\n\t\t\tContext.data.response = JSON.stringify(await response.json());\n\t\t} catch (err) {\n\t\t\tContext.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `\n\t\t\tthrow new Error(err.message)\n\t\t}\n\t} else {\n\t\tconst accounting1c = Namespace.params.fields.awaiting_docs_table_1c.app.fields.accounting_systems.variants.zup_1c\n\t\tconst awaitingApp = Namespace.params.fields.awaiting_docs_table_1c.app.create()\n\t\tawaitingApp.data.__name = \"Работа в выходные и праздничные дни\"\n\t\tawaitingApp.data.document_odata_name = \"Document_РаботаВВыходныеИПраздничныеДни\"\n\t\tawaitingApp.data.accounting_systems = accounting1c\n\t\tawaitingApp.data.personal_guid_1c = JSON.stringify(individualIds)\n\t\tawaitingApp.data.document_creation_data = JSON.stringify(body);\n\t\tawaitingApp.data.additional_info = Context.data.additional_info ?? \"\";\n\t\tawaitingApp.data.base_1c_name = Context.data.connection_name;\n\t\tawait awaitingApp.save()\n\n\t\tContext.data.integration_app_id = awaitingApp.data.__id\n\t}\n}",
    "execution": [
      {
        "code": "sync",
        "name": "Синхронное"
      }
    ],
    "allowGlobal": false,
    "checkInterval": ""
  },
  "async": false,
  "__createdAt": "2023-12-20T13:08:01.95059188Z",
  "__createdBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "__updatedAt": "2024-02-14T11:09:54.642444147Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "__deletedAt": null
}
