{
  "__id": "9a8f91cf-df72-471c-95cf-78e3edadfa37",
  "__name": "Создание сотрудников",
  "code": "create_employees_1c",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "type": [
    {
      "code": "script",
      "name": "Скрипт"
    }
  ],
  "group": "7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "icon": "system",
  "color": "#fde9a0",
  "itemName": "",
  "description": "",
  "retryCount": 0,
  "retryDelay": 5,
  "context": [
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "batch_size",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": true,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Размер пачки",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        },
        "input": true
      }
    },
    {
      "code": "skip_amount",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": true,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Количество обработанных сотрудников",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        },
        "input": true
      }
    }
  ],
  "draft": false,
  "published": true,
  "data": {
    "scripts": "/**\nЗдесь вы можете написать скрипты для сложной серверной обработки контекста во время выполнения процесса.\nДля написания скриптов используйте TypeScript (https://www.typescriptlang.org).\nДокументация TS SDK доступна на сайте https://tssdk.elma365.com.\n\nСигнатуры функций\n\nДля синхронного взаимодействия:\n\tasync function action(): Promise\u003cvoid\u003e;\n\nДля модели проверки результата:\n\tasync function action(): Promise\u003cvoid\u003e;\n\tasync function check(): Promise\u003cboolean\u003e;\n\nДля модели обратного вызова:\n\tasync function action(url: string): Promise\u003cvoid\u003e;\n\tasync function callback(req: HTTPRequest): Promise\u003cvoid\u003e;\n\n**/\n\ninterface EmployeeInfo {\n    id: string;\n    code: string;\n    individual_id: string;\n    name: TFullName;\n    email?: TEmail\u003cEmailType.Work\u003e;\n    phoneNumber?: TPhone\u003cPhoneType.Work\u003e;\n    sex: boolean;\n    marriage: boolean;\n    birthDate: TDate;\n    city: string;\n    street?: string;\n    home?: string;\n    apartment?: string;\n    housing?: string;\n    passportSeries: string;\n    passportNumber: string;\n    passportDepCode: string;\n    passportIssueDate: TDate;\n    passportIssuer: string;\n    snils: string;\n    inn: string;\n    category?: any;\n    organisation?: any;\n    entity?: any;\n    position?: any;\n    subdivision?: any;\n    value_1?: string;\n    value_2?: string;\n    value_3?: string;\n}\n\nlet baseUrl: string;\nlet login: string\nlet password: string\nlet myHeaders: any\n\nasync function action(): Promise\u003cvoid\u003e {\n\tconst personalInfo = await makeRequest('GET', \"Catalog_ФизическиеЛица?$format=json\")\n\tconst docs = await makeRequest('GET', \"InformationRegister_ДокументыФизическихЛиц?$format=json\")\n\tconst employees = await makeRequest('GET', `Catalog_Сотрудники?$format=json\u0026$skip=${Context.data.skip_amount}\u0026$top=${Context.data.batch_size}`)\n    const positions = await makeRequest('GET', \"InformationRegister_ЗанятостьПозицийШтатногоРасписания?$format=json\")\n\n\tlet promises: Promise\u003cvoid\u003e[] = [];\n    if (!(employees \u0026\u0026 personalInfo \u0026\u0026 docs \u0026\u0026 positions))\n        return;\n\n    const category = await Namespace.params.fields.category_app.app.search().where(f =\u003e f.__name.eq(\"Сотрудник без ограничений\")).first();\n    const allStaffs = await Namespace.params.fields.employee_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allOrganizations = await Namespace.params.fields.org_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allSubdivisions = await Namespace.params.fields.subdiv_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allPositions = await Namespace.params.fields.position_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n\n    let positionsArray: any[] = [];\n    for (const position of positions.value) {\n        positionsArray = positionsArray.concat(position.RecordSet)\n    }\n\n    for (let i = 0; i \u003c employees.value.length; i++) {\n        const data = employees.value[i];\n        const employeePersonalInfo = personalInfo.value.find((info: any) =\u003e info.Ref_Key === data[\"ФизическоеЛицо_Key\"]);\n        const employeePassportInfo = docs.value.find((info: any) =\u003e info[\"Физлицо_Key\"] === data[\"ФизическоеЛицо_Key\"]);\n        if (!(employeePersonalInfo \u0026\u0026 employeePassportInfo)) continue;\n        const address = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info: any) =\u003e info[\"Тип\"] === \"Адрес\");\n        let addressObj: any;\n        // if (address[\"Значение\"])\n        //     addressObj = JSON.parse(address[\"Значение\"]);\n        const email = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info: any) =\u003e info[\"Тип\"] === \"АдресЭлектроннойПочты\");\n        const phoneNumber = employeePersonalInfo[\"КонтактнаяИнформация\"].find((info: any) =\u003e info[\"Тип\"] === \"Телефон\");\n        const [birthYear, birthMonth, birthDay] = employeePersonalInfo[\"ДатаРождения\"].split(\"T\")[0].split(\"-\").map((item: string) =\u003e parseInt(item));\n        const [issueYear, issueMonth, issueDay] = employeePassportInfo[\"ДатаВыдачи\"].split(\"T\")[0].split(\"-\").map((item: string) =\u003e parseInt(item));\n        //находим организацию, отдел и позицию ШР\n        let entityUser: TApplication\u003cApplication$_system_catalogs$_my_companies$Data, Application$_system_catalogs$_my_companies$Params, Application$_system_catalogs$_my_companies$Processes\u003e | undefined;\n        let positionUser: ApplicationItem\u003cApplication$kedo$position$Data, Application$kedo$position$Params\u003e | undefined;\n        let subdivisionUser: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e | undefined;\n        const orgId = data[\"ГоловнаяОрганизация_Key\"];\n        const organization = allOrganizations.find(f =\u003e f.data.ref_key === orgId);\n        if (organization) {\n            entityUser = organization.data.entity\n            const positionsUser = positionsArray.filter(f =\u003e f[\"ФизическоеЛицо_Key\"] === data[\"ФизическоеЛицо_Key\"] \u0026\u0026 f[\"ГоловнаяОрганизация_Key\"] === data[\"ГоловнаяОрганизация_Key\"]);\n            if (positionsUser.length \u003e 0) {\n                positionUser = allPositions.find(f =\u003e f.data.ref_key === positionsUser[0][\"ПозицияШтатногоРасписания_Key\"]);\n                if (positionUser) {\n                    const subdivisions = allSubdivisions.filter(f =\u003e f.data.organization \u0026\u0026 f.data.organization.id === organization.id);\n                    subdivisionUser = subdivisions.find(f =\u003e f.data.positions \u0026\u0026 f.data.positions.find(f =\u003e f.id === positionUser!.id))\n                }\n            }\n        }\n\n        const singleEmployeeData: EmployeeInfo = {\n            id: data.Ref_Key,\n            code: data.Code,\n            name: {\n                firstname: employeePersonalInfo[\"Имя\"],\n                lastname: employeePersonalInfo[\"Фамилия\"],\n                middlename: employeePersonalInfo[\"Отчество\"],\n            },\n            email: email ? {\n                email: email[\"АдресЭП\"],\n                type: EmailType.Work,\n            } : undefined,\n            phoneNumber: phoneNumber ? {\n                tel: phoneNumber[\"Представление\"].replace(/\\D+/g, \"\"),\n                type: PhoneType.Work,\n            } : undefined,\n            sex: employeePersonalInfo[\"Пол\"] === \"Мужской\",\n            marriage: false,\n            birthDate: new TDate(birthYear, birthMonth, birthDay),\n            city: addressObj ? addressObj.city || addressObj.area : undefined,\n            street: addressObj ? addressObj.street : undefined,\n            home: addressObj ? addressObj.houseNumber : undefined,\n            apartment: addressObj ? addressObj.apartments ? addressObj.apartments[0].number : undefined : undefined,\n            housing: addressObj ? addressObj.buildings ? addressObj.buildings[0].number : undefined : undefined,\n            passportSeries: employeePassportInfo[\"Серия\"].replace(/\\s/g, ''),\n            passportNumber: employeePassportInfo[\"Номер\"],\n            passportDepCode: employeePassportInfo[\"КодПодразделения\"],\n            passportIssueDate: new TDate(issueYear, issueMonth, issueDay),\n            passportIssuer: employeePassportInfo[\"КемВыдан\"],\n            snils: employeePersonalInfo[\"СтраховойНомерПФР\"],\n            inn: employeePersonalInfo[\"ИНН\"],\n            individual_id: employeePersonalInfo.Ref_Key,\n            organisation: organization,\n            entity: entityUser,\n            position: positionUser,\n            subdivision: subdivisionUser,\n\n            value_1: Context.data.value_1 \u0026\u0026 personalInfo[`${Context.data.value_1}`] ? personalInfo[`${Context.data.value_1}`] : undefined,\n            value_2: Context.data.value_2 \u0026\u0026 personalInfo[`${Context.data.value_2}`] ? personalInfo[`${Context.data.value_2}`] : undefined,\n            value_3: Context.data.value_3 \u0026\u0026 personalInfo[`${Context.data.value_3}`] ? personalInfo[`${Context.data.value_3}`] : undefined,\n        }\n        // создаём нового сотрудника или обновляем уже имеющегося\n        let userApp: ApplicationItem\u003cApplication$kedo$staff$Data, Application$kedo$staff$Params\u003e;\n        const user = allStaffs.find(f =\u003e f.data.id_1c === singleEmployeeData.id);\n        if (user)\n            userApp = user\n        else\n            userApp = Namespace.params.fields.employee_app.app.create()\n\n        userApp.data.full_name = singleEmployeeData.name;\n        userApp.data.name = singleEmployeeData.name.firstname;\n        userApp.data.surname = singleEmployeeData.name.lastname;\n        userApp.data.middlename = singleEmployeeData.name.middlename;\n        userApp.data.personal_number = singleEmployeeData.code;\n        userApp.data.email = singleEmployeeData.email;\n        // userApp.data.staff_member = Context.data.staff_member;\n        userApp.data.phone = singleEmployeeData.phoneNumber;\n        userApp.data.sex = singleEmployeeData.sex;\n        userApp.data.position = singleEmployeeData.position;\n        userApp.data.structural_subdivision = singleEmployeeData.subdivision;\n        userApp.data.marriage = singleEmployeeData.marriage;\n        userApp.data.date_of_birth = singleEmployeeData.birthDate;\n        userApp.data.city = singleEmployeeData.city;\n        userApp.data.street = singleEmployeeData.street;\n        userApp.data.home = singleEmployeeData.home;\n        userApp.data.apartment = singleEmployeeData.apartment;\n        userApp.data.housing = singleEmployeeData.housing;\n        userApp.data.passport_series = singleEmployeeData.passportSeries;\n        userApp.data.passport_number = singleEmployeeData.passportNumber;\n        userApp.data.passport_department_code = singleEmployeeData.passportDepCode;\n        userApp.data.date_of_issue = singleEmployeeData.passportIssueDate;\n        userApp.data.issued_by = singleEmployeeData.passportIssuer;\n        userApp.data.snils = singleEmployeeData.snils;\n        userApp.data.inn = singleEmployeeData.inn;\n        userApp.data.organization = singleEmployeeData.organisation;\n        userApp.data.entity = singleEmployeeData.entity;\n        if (userApp.data.staff_categories \u0026\u0026 userApp.data.staff_categories.length \u003e 0)\n            userApp.data.staff_categories = userApp.data.staff_categories\n        else if (category)\n            userApp.data.staff_categories = (userApp.data.staff_categories || []).concat(category)\n        userApp.data.notification = userApp.fields.notification.variants.email;\n        userApp.data.id_1c = singleEmployeeData.id;\n        userApp.data.individual_id_1c = singleEmployeeData.individual_id;\n        // userApp.data.is_employed = Context.data.is_employed;\n        // userApp.data.unep_issue_required = Context.data.unep_issue_required;\n        userApp.data.staff_access = true;\n        userApp.data.address = `\n                ${singleEmployeeData.city ? singleEmployeeData.city : \"\"}\n                ${singleEmployeeData.street ? \", ул. \" + singleEmployeeData.street : \"\"}\n                ${singleEmployeeData.home ? \", д. \" + singleEmployeeData.home : \"\"}\n                ${singleEmployeeData.housing ? \", корп. \" + singleEmployeeData.housing : \"\"}\n                ${singleEmployeeData.apartment ? \", кв. \" + singleEmployeeData.apartment : \"\"}\n            `;\n\n        userApp.data.value_1 = singleEmployeeData.value_1;\n        userApp.data.value_2 = singleEmployeeData.value_2;\n        userApp.data.value_3 = singleEmployeeData.value_3;\n\n        promises.push(userApp.save());\n        if (promises.length \u003e 10) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n    await Promise.all(promises)\n}\n\n\nfunction getConnectionInfo(): Error | null {\n\tconst connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n\tif (!connectionsArray) {\n\t\treturn new Error(`Не найдено записей подключения`)\n\t}\n\n\tconst currentConnection = connectionsArray.length \u003e 1 ? connectionsArray.find((item: any) =\u003e {\n\t\treturn item.name === Context.data.connection_name\n\t}) : connectionsArray[0]\n\tif(!currentConnection) {\n\t\treturn new Error(`Не найдено подключение c именем ${Context.data.connection_name}`)\n\t}\n\n\tbaseUrl = currentConnection.url;\n\tlogin = currentConnection.login\n\tpassword = currentConnection.password\n\tmyHeaders = {\n\t\tAuthorization: `Basic ${btoa(login + ':' + password)}`,\n\t};\n\treturn null\n}\n\nasync function makeRequest(method: string, url: string, body?: string): Promise\u003cany\u003e {\n\tconst error = getConnectionInfo();\n\tif (error !== null) {\n\t\tContext.data.error = error.message\n\t\treturn null\n\t}\n\tconst requestOptions: FetchRequest = {\n\t\tmethod: method,\n\t\theaders: myHeaders,\n\t};\n\n\tif (!!body) {\n\t\trequestOptions.body = body;\n\t}\n\n\tconst resUrl = baseUrl + '/' + url;\n\n\ttry {\n\t\tconst response = await fetch(`${encodeURI(resUrl)}`, requestOptions)\n\t\tif (!response.ok) {\n\t\t\tContext.data.error += ` staff data res.status error; resUrl - ${resUrl} `\n\t\t\tthrow new Error(`res error ${resUrl}`);\n\t\t}\n\t\tconst responseJSON = await response.json()\n\t\treturn responseJSON\n\t} catch (err){\n\t\tContext.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `\n\t\tthrow new Error(err)\n\t}\n}",
    "execution": [
      {
        "code": "sync",
        "name": "Синхронное"
      }
    ],
    "allowGlobal": false,
    "checkInterval": ""
  },
  "async": false,
  "__createdAt": "2023-12-20T13:08:02.269425325Z",
  "__createdBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "__updatedAt": "2024-02-14T11:09:55.712906167Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "__deletedAt": null
}
