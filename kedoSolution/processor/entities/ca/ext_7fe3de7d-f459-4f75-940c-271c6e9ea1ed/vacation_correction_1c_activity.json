{
  "__id": "3c1fdc33-37c9-488d-bb70-22fa85cd797f",
  "__name": "(1С) Корректировка отпуска",
  "code": "vacation_correction_1c",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "type": [
    {
      "code": "script",
      "name": "Скрипт"
    }
  ],
  "group": "7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "icon": "system",
  "color": "#20c997",
  "itemName": "",
  "description": "",
  "retryCount": 0,
  "retryDelay": 5,
  "context": [
    {
      "code": "days_amount",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Колчиество дней отпуска",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        },
        "input": true
      }
    },
    {
      "code": "connection_name",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Имя подключения 1С",
        "data": {
          "additionalType": "string"
        },
        "input": false
      }
    },
    {
      "code": "reason",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Основание для отпуска",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "additional_vacations",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дополнительные отпуска",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "integration_app_id",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "ID приложения интеграции",
        "data": {
          "additionalType": "string"
        },
        "input": true,
        "output": true
      }
    },
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        },
        "output": true
      }
    },
    {
      "code": "alternativnaya_integraciya",
      "type": "BOOLEAN",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": false,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Альтернативная интеграция",
        "data": {
          "additionalType": "radio",
          "noValue": "Нет",
          "yesValue": "Да"
        },
        "input": true
      }
    },
    {
      "code": "start_date_1c",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата начала отпуска/отсутствия (1C)",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "end_date_1c",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дата окончания отпуска/отсутствия (1С)",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    },
    {
      "code": "additional_info",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Дополнительная информация",
        "data": {
          "additionalType": "string"
        },
        "input": true
      }
    }
  ],
  "draft": false,
  "published": true,
  "data": {
    "scripts": "/**\nЗдесь вы можете написать скрипты для сложной серверной обработки контекста во время выполнения процесса.\nДля написания скриптов используйте TypeScript (https://www.typescriptlang.org).\nДокументация TS SDK доступна на сайте https://tssdk.elma365.com.\n\nСигнатуры функций\n\nДля синхронного взаимодействия:\n\tasync function action(): Promise\u003cvoid\u003e;\n\nДля модели проверки результата:\n\tasync function action(): Promise\u003cvoid\u003e;\n\tasync function check(): Promise\u003cboolean\u003e;\n\nДля модели обратного вызова:\n\tasync function action(url: string): Promise\u003cvoid\u003e;\n\tasync function callback(req: HTTPRequest): Promise\u003cvoid\u003e;\n\n**/\n\ninterface AdditionalVacation {\n\ttype_vacation_key: string;\n\tamount_of_days: number;\n\tstart_date: string; // TDate.format(\"YYYY-MM-DD\")\n\tend_date: string; // TDate.format(\"YYYY-MM-DD\")\n\treason: string;\n}\n\nlet baseUrl: string;\nlet login: string\nlet password: string\nlet myHeaders: any\n\nfunction getConnectionInfo(): Error | null {\n\tconst connectionsArray = Namespace.params.data.list_of_connected_platforms ? JSON.parse(Namespace.params.data.list_of_connected_platforms) : undefined;\n\tif (!connectionsArray) {\n\t\treturn new Error(`Не найдено записей подключения`)\n\t}\n\t\n\n\tconst currentConnection = connectionsArray.length \u003e 1 ? connectionsArray.find((item: any) =\u003e {\n\t\treturn item.name === Context.data.connection_name\n\t}) : connectionsArray[0]\n\tif(!currentConnection) {\n\t\treturn new Error(`Не найдено подключение c именем ${Context.data.connection_name}`)\n\t}\n\n\tbaseUrl = currentConnection.url;\n\tlogin = currentConnection.login\n\tpassword = currentConnection.password\n\tmyHeaders = {\n\t\tAuthorization: `Basic ${btoa(login + ':' + password)}`,\n\t};\n\treturn null\n}\n\nasync function action(): Promise\u003cvoid\u003e{\n\tconst currentDate = new TDate();\n\tconst addVacationArr: any[] = [];\n\tconst isAddVacation = Context.data.additional_vacations \u0026\u0026 Context.data.additional_vacations.length \u003e 0;\n\tconst body: any = {\n\t\t\"Date\": `${currentDate.format('YYYY-MM-DD')}T00:00:00`,\n\t}\n\n\tif (isAddVacation) {\n\t\tconst vacationsData = JSON.parse(Context.data.additional_vacations!);\n\n\t\tvacationsData.forEach((i: any) =\u003e {\n\t\t\taddVacationArr.push({\n\t\t\t\t\"LineNumber\": `${addVacationArr.length + 1}`,\n\t\t\t\t\"ВидОтпуска_Key\": i.type_vacation_key,\n\t\t\t\t\"КоличествоДней\": i.amount_of_days,\n\t\t\t\t\"ДатаНачала\": `${i.start_date}`,\n\t\t\t\t\"ДатаОкончания\": `${i.end_date}`,\n\t\t\t\t\"Основание\": i.base\n\t\t\t});\n\t\t})\t\t\t\n\t\tbody[\"ДополнительныеОтпуска\"] = addVacationArr\n\t\tbody[\"ПредоставитьДополнительныйОтпуск\"] = true\n\t}\t\n\n\tif (Context.data.start_date_1c) {\n\t\tbody[\"ДатаНачалаОсновногоОтпуска\"] = `${Context.data.start_date_1c}T00:00:00`\n\t\tbody[\"ДатаНачалаПериодаОтсутствия\"] = `${Context.data.start_date_1c}T00:00:00`\n\t}\n\n\n\tif (Context.data.end_date_1c) {\n\t\tbody[\"ДатаОкончанияОсновногоОтпуска\"] = `${Context.data.end_date_1c}T00:00:00`\n\t\tbody[\"ДатаОкончанияПериодаОтсутствия\"] = `${Context.data.end_date_1c}T00:00:00`\n\t} \n\n\tif (Context.data.days_amount) {\n\t\tbody[\"КоличествоДнейОсновногоОтпуска\"] = Context.data.days_amount\n\t}\n\n\tif(Context.data.reason) {\n\t\tbody[\"Основание\"] = Context.data.reason\n\t}\n\n\tif (!Context.data.alternativnaya_integraciya) {\n\t\tconst error = getConnectionInfo()\n\t\tif (error != null) {\n\t\t\tContext.data.error = error.message\n\t\t\treturn\n\t\t}\n\t\treturn;\n\t\tconst requestOptions: FetchRequest = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: myHeaders,\n\t\t};\n\n\n\t\t\n\n\t\trequestOptions.body = JSON.stringify(body);\n\n\t\tconst resUrl = `${baseUrl}/Document_Отпуск?$format=json`;\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${encodeURI(resUrl)}`, requestOptions)\n\t\t\tif (!response.ok) {\n\t\t\t\tContext.data.error += ` staff data res.status error; resUrl - ${resUrl} `\n\t\t\t\tthrow new Error(`res error ${resUrl}`);\n\t\t\t}\n\n\t\t\tContext.data.response = JSON.stringify(await response.json());\n\t\t} catch (err){\n\t\t\tContext.data.error += ` try/catch error ${err}; resUrl - ${resUrl} `\n\t\t\tthrow new Error(err)\n\t\t}\n\t} else {\n\t\tconst awaitingApp = await Namespace.params.fields.awaiting_docs_table_1c.app.search()\n\t\t\t.where((f,g) =\u003e g.and(\n\t\t\t\tf.__deletedAt.eq(null),\n\t\t\t\tf.__id.eq(Context.data.integration_app_id!)\n\t\t\t)).first();\n\t\t//const awaitingApp = foundApps.find(item =\u003e item.data.__id === Context.data.integration_app_id);\n\n\t\tif (!awaitingApp) {\n\t\t\tContext.data.error = `Couldn't find an element of awaiting_docs_table_1c app with id ${Context.data.integration_app_id}`\n\t\t\treturn;\n\t\t}\n\t\tconst readyStatus = Namespace.params.fields.awaiting_docs_table_1c.app.fields.__status.variants.ready\n\t\t\n\t\tawaitingApp.data.document_creation_data = JSON.stringify(body);\n\t\tawaitingApp.data.isCorrection = true;\n\t\tawaitingApp.data.status_1c = '';\n\t\tawaitingApp.data.additional_info = Context.data.additional_info ?? \"\";\n\t\tawaitingApp.data.base_1c_name = Context.data.connection_name ?? undefined;\n\t\tawait awaitingApp.save();\n\t\tawait awaitingApp.setStatus(readyStatus);\n\n\t\tContext.data.integration_app_id = awaitingApp.data.__id;\n\t}\n}",
    "execution": [
      {
        "code": "sync",
        "name": "Синхронное"
      }
    ],
    "allowGlobal": false,
    "checkInterval": ""
  },
  "async": false,
  "__createdAt": "2023-12-20T13:08:01.606920107Z",
  "__createdBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "__updatedAt": "2024-02-14T11:09:53.815338395Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "__deletedAt": null
}
