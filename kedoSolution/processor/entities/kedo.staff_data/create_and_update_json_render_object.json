{
  "__id": "018c8757-193c-7ece-b013-26cef9e38389",
  "namespace": "kedo.staff_data",
  "code": "create_and_update_json_render_object",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "(1С) Создание объекта JSON для работы виджета ШР",
  "type": "bpmn",
  "draft": false,
  "version": 4,
  "context": [
    {
      "code": "json_name",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Название",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "debug",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "staff_data",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff_data",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Данные ШР из 1С"
      }
    },
    {
      "code": "json_data",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "JSON данные",
        "data": {
          "additionalType": "string"
        }
      }
    },
    {
      "code": "maximum_nesting_in_staffing",
      "type": "FLOAT",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": 20,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Максимальная вложенность в штатном расписании",
        "data": {
          "additionalType": "integer",
          "showRowSeparator": true
        }
      }
    },
    {
      "code": "error",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Ошибка",
        "data": {
          "additionalType": "string"
        }
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-05-02T09:09:37.107158736Z",
  "__createdBy": "6c362877-9ef9-45f4-aa6f-e5e126ee96c0",
  "__updatedAt": "2024-01-29T06:53:57.638829442Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 232,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "94464674-8282-45dc-a303-41013d908b8c",
        "type": "start",
        "color": "#ffffff",
        "exits": ["939d368d-cd47-440a-b1ef-6e7a45624b4f"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "(1С) Создание объекта JSON для работы виджета ШР ({$staff_data})",
          "titleGenerateMethod": "template"
        }
      },
      "3eecc5c1-ee81-4a3b-9796-9979a2d13ced": {
        "x": 312,
        "y": 56,
        "id": "3eecc5c1-ee81-4a3b-9796-9979a2d13ced",
        "icon": "script",
        "lane": "94464674-8282-45dc-a303-41013d908b8c",
        "name": "Создать JSON",
        "type": "script",
        "color": "#fde9a0",
        "exits": [
          "eaa40b73-fdf7-456c-9045-13d0e565b5ee",
          "2182acd5-063f-4a10-a934-7b327f820a57"
        ],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "parseJson",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "exit": "eaa40b73-fdf7-456c-9045-13d0e565b5ee",
              "notify": false,
              "interrupt": true,
              "receivers": []
            }
          }
        }
      },
      "41384cb3-caaa-45e7-a9c6-c20c29caa0ff": {
        "x": 448,
        "y": 72,
        "id": "41384cb3-caaa-45e7-a9c6-c20c29caa0ff",
        "icon": "exclusive",
        "lane": "94464674-8282-45dc-a303-41013d908b8c",
        "name": "",
        "type": "gateway",
        "color": "#ffffff",
        "exits": [
          "e6c1e654-5959-4af6-a64d-945e592153f4",
          "f8651ee1-9ac7-4457-88d2-5568e841f5a4"
        ],
        "width": 32,
        "height": 32,
        "settings": {
          "func": "",
          "type": "exclusive",
          "useFunc": false,
          "funcType": "STRING",
          "description": ""
        }
      },
      "4572675b-45e4-4c4b-b918-cff2ce22843b": {
        "x": 656,
        "y": 72,
        "id": "4572675b-45e4-4c4b-b918-cff2ce22843b",
        "icon": "end",
        "lane": "94464674-8282-45dc-a303-41013d908b8c",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "70771736-2b9b-4f4a-b7a1-9e9f266b0718": {
        "x": 528,
        "y": 176,
        "id": "70771736-2b9b-4f4a-b7a1-9e9f266b0718",
        "icon": "user",
        "lane": "94464674-8282-45dc-a303-41013d908b8c",
        "name": "Просмотр ошибки парсинга объекта Штатного расписания",
        "type": "user",
        "color": "#daeef7",
        "exits": ["1b18dd9e-1ed4-46e5-b051-a2625f43ad2d"],
        "width": 80,
        "height": 64,
        "settings": {
          "name": "",
          "notify": true,
          "authorType": 0,
          "escalation": {
            "byTime": {
              "limit": {
                "days": 0,
                "kind": "duration",
                "hours": 0,
                "minutes": 0,
                "absolute": false
              },
              "action": {
                "notify": false,
                "interrupt": false,
                "receivers": []
              },
              "enabled": false
            }
          },
          "formFields": [
            {
              "code": "error",
              "tooltip": "",
              "readonly": true,
              "required": false,
              "hideEmpty": false
            }
          ],
          "allowReassign": true,
          "planDatesSettings": {
            "enabled": false,
            "planCodes": {
              "endCode": "",
              "startCode": ""
            }
          }
        }
      },
      "f255b0e7-03ab-4447-95c5-aa55725e21e3": {
        "x": 520,
        "y": 56,
        "id": "f255b0e7-03ab-4447-95c5-aa55725e21e3",
        "icon": "notification",
        "lane": "94464674-8282-45dc-a303-41013d908b8c",
        "name": "Объект для отрисовки ШР сформирован",
        "type": "notification",
        "color": "#ffff66",
        "exits": ["5b6bbcd9-fa48-427f-bc3f-5987208a1e63"],
        "width": 80,
        "height": 64,
        "settings": {
          "author": {
            "code": "",
            "kind": "system"
          },
          "target": {
            "kind": "process"
          },
          "receivers": [
            {
              "kind": "current"
            }
          ],
          "messageHeader": "Объект для отрисовки ШР сформирован"
        }
      },
      "feb72720-b0d3-4346-addc-5c31cb3c70e7": {
        "x": 312,
        "y": 176,
        "id": "feb72720-b0d3-4346-addc-5c31cb3c70e7",
        "icon": "script",
        "lane": "94464674-8282-45dc-a303-41013d908b8c",
        "name": "Обработка ошибки",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["d8f55f29-9ab4-4b73-b3bf-e329dc3183ee"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "errorHandle",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      }
    },
    "lanes": {
      "94464674-8282-45dc-a303-41013d908b8c": {
        "x": 8,
        "y": 8,
        "id": "94464674-8282-45dc-a303-41013d908b8c",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 892,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "1b18dd9e-1ed4-46e5-b051-a2625f43ad2d": {
        "id": "1b18dd9e-1ed4-46e5-b051-a2625f43ad2d",
        "name": "ОК",
        "path": [
          {
            "x": 608,
            "y": 208
          },
          {
            "x": 672,
            "y": 208
          },
          {
            "x": 672,
            "y": 104
          }
        ],
        "type": "plain",
        "source": "70771736-2b9b-4f4a-b7a1-9e9f266b0718",
        "target": "4572675b-45e4-4c4b-b918-cff2ce22843b",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "primary",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "2182acd5-063f-4a10-a934-7b327f820a57": {
        "id": "2182acd5-063f-4a10-a934-7b327f820a57",
        "name": "",
        "path": [
          {
            "x": 392,
            "y": 88
          },
          {
            "x": 448,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "3eecc5c1-ee81-4a3b-9796-9979a2d13ced",
        "target": "41384cb3-caaa-45e7-a9c6-c20c29caa0ff",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "5b6bbcd9-fa48-427f-bc3f-5987208a1e63": {
        "id": "5b6bbcd9-fa48-427f-bc3f-5987208a1e63",
        "name": "",
        "path": [
          {
            "x": 600,
            "y": 88
          },
          {
            "x": 656,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "f255b0e7-03ab-4447-95c5-aa55725e21e3",
        "target": "4572675b-45e4-4c4b-b918-cff2ce22843b",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "939d368d-cd47-440a-b1ef-6e7a45624b4f": {
        "id": "939d368d-cd47-440a-b1ef-6e7a45624b4f",
        "name": "",
        "path": [
          {
            "x": 264,
            "y": 88
          },
          {
            "x": 312,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "3eecc5c1-ee81-4a3b-9796-9979a2d13ced",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "d8f55f29-9ab4-4b73-b3bf-e329dc3183ee": {
        "id": "d8f55f29-9ab4-4b73-b3bf-e329dc3183ee",
        "name": "",
        "path": [
          {
            "x": 392,
            "y": 208
          },
          {
            "x": 528,
            "y": 208
          }
        ],
        "type": "plain",
        "source": "feb72720-b0d3-4346-addc-5c31cb3c70e7",
        "target": "70771736-2b9b-4f4a-b7a1-9e9f266b0718",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e6c1e654-5959-4af6-a64d-945e592153f4": {
        "id": "e6c1e654-5959-4af6-a64d-945e592153f4",
        "name": "",
        "path": [
          {
            "x": 464,
            "y": 104
          },
          {
            "x": 464,
            "y": 192
          },
          {
            "x": 528,
            "y": 192
          }
        ],
        "type": "plain",
        "source": "41384cb3-caaa-45e7-a9c6-c20c29caa0ff",
        "target": "70771736-2b9b-4f4a-b7a1-9e9f266b0718",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [
            {
              "a": {
                "kind": "context",
                "value": "error"
              },
              "type": "STRING",
              "inversion": false,
              "operation": {
                "relation": "empty",
                "inversion": true,
                "caseInsensitive": false
              },
              "conjunction": false
            }
          ],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "eaa40b73-fdf7-456c-9045-13d0e565b5ee": {
        "id": "eaa40b73-fdf7-456c-9045-13d0e565b5ee",
        "name": "",
        "path": [
          {
            "x": 352,
            "y": 120
          },
          {
            "x": 352,
            "y": 176
          }
        ],
        "type": "error",
        "source": "3eecc5c1-ee81-4a3b-9796-9979a2d13ced",
        "target": "feb72720-b0d3-4346-addc-5c31cb3c70e7",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "f8651ee1-9ac7-4457-88d2-5568e841f5a4": {
        "id": "f8651ee1-9ac7-4457-88d2-5568e841f5a4",
        "name": "",
        "path": [
          {
            "x": 480,
            "y": 88
          },
          {
            "x": 520,
            "y": 88
          }
        ],
        "type": "default",
        "source": "41384cb3-caaa-45e7-a9c6-c20c29caa0ff",
        "target": "f255b0e7-03ab-4447-95c5-aa55725e21e3",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "async function parseJson(): Promise\u003cvoid\u003e {\n    Context.data.max_nesting_fact = 0;\n    let countOfIterations: number = 40;\n    const savedIds: string[] = []\n    if (Context.data.maximum_nesting_in_staffing) {\n        countOfIterations = Context.data.maximum_nesting_in_staffing;\n    }\n\n    let count: number = 0;\n\n    class Element {\n        [x: string]: any;\n        constructor(data: { [x: string]: any; }) {\n            this._id = data.data.__id ? data.data.__id : null;\n            this._description = data.data.__name ? data.data.__name : null;\n            this._ref_key = data.data.ref_key ? data.data.ref_key : null;\n            this._owner_key = data.data.owner_key ? data.data.owner_key : null;\n            this._parent_key = data.data.subdivision ? data.data.subdivision.id : null;\n            this._division_key = data.data.division_key ? data.data.division_key : null;\n            this._position_key = data.data.position_key ? data.data.position_key : null;\n            this._org_id = data.data.organization ? data.data.organization.id : null\n            this._element_template = {\n                description: \"\",\n                id: \"\",\n                ref_key: \"\",\n                owner_key: \"\",\n                parent_key: \"\",\n                division_key: \"\",\n                position_key: \"\",\n                org_id: \"\",\n                children: null,\n            }\n        }\n\n        getElement() {\n            const element = Object.assign(this._element_template);\n            element.id = this._id;\n            element.description = this._description;\n            element.ref_key = this._ref_key;\n            element.owner_key = this._owner_key;\n            element.parent_key = this._parent_key;\n            element.division_key = this._division_key;\n            element.position_key = this._position_key;\n            element.org_id = this._org_id;\n            element.is_subdiv = false\n\n            return element;\n        }\n    }\n\n  //  const positionsObj = await Namespace.app.position.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const positionsObj = await Namespace.app.position.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n        )).where((f, g) =\u003e g.or(\n            f.is_closed.eq(false),\n            f.is_closed.eq(null),\n        )).size(10000).all();\n    const subdivisions = await Namespace.app.structural_subdivision.search().where(f =\u003e f.__deletedAt.eq(null)).where((f, g) =\u003e g.or(\n            f.is_closed.eq(false),\n            f.is_closed.eq(null),\n        )).size(10000).all();\n    const organisations = await Namespace.app.organization.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n\n    let resultObj: any = { children: null };\n\n    // ==========================================================\n    let lineOfElements: any = [];\n\n    async function checkElementParent(element: { parent_key: any; ref_key: any; owner_key: any; org_id: any }) {\n        // проверка на цикличные ссылки\n        if (count \u003e countOfIterations) {\n            Context.data.error += 'Превышен лимит вложенности штатного расписания ';\n            return;\n        }\n\n        if (element.parent_key != null) {\n            if (element.parent_key !== \"00000000-0000-0000-0000-000000000000\") {\n                let elementParentData: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e | undefined;\n                try {\n                    elementParentData = subdivisions.find(x =\u003e x.data.__id == element.parent_key);\n                }\n                catch (err) {\n                    Context.data.error += 'Ошибка при поиске приложения подразделения ';\n                    throw new Error(err)\n                }\n\n                if (elementParentData) {\n                    const elementClass = new Element(elementParentData);\n                    const parentElement = elementClass.getElement();\n                    lineOfElements.push(parentElement);\n                    count++;\n\n                    if (count \u003e Context.data.max_nesting_fact!) {\n                        Context.data.max_nesting_fact = count;\n                    }\n\n                    await checkElementParent(parentElement);\n                }\n            }\n        } else {\n            let elementOwnerData: ApplicationItem\u003cApplication$kedo$organization$Data, Application$kedo$organization$Params\u003e | undefined;\n\n            try {\n                elementOwnerData = organisations.find(x =\u003e x.data.__id == element.org_id);\n            }\n            catch (err) {\n                throw new Error(err);\n            }\n\n            if (elementOwnerData) {\n                const elementClass = new Element(elementOwnerData);\n                const ownerElement = elementClass.getElement();\n                lineOfElements.push(ownerElement);\n            }\n        }\n    }\n\n    async function createElementTree(data: any) {\n        lineOfElements = [];\n\n        const elementClass = new Element(data);\n        const element = elementClass.getElement();               \n        lineOfElements.push(element);       \n        count = 0;    \n        await checkElementParent(element);\n    }    \n\n    function commitBranchIteartion(targetObj: { children: any[] | null; }, dataIndex: number) {\n        if (dataIndex === -1) {\n            return targetObj;\n        }\n\n        if (targetObj.children === null) {\n            const nextTargetObj = commitBranchIteartion(lineOfElements[dataIndex], dataIndex - 1);\n            targetObj.children = [];\n            targetObj.children.push(nextTargetObj);\n        } else {\n            let ifFinded = false;\n\n            targetObj.children.forEach((item) =\u003e {\n                if (item.ref_key === lineOfElements[dataIndex].ref_key) {\n                    const nextTargetObj = commitBranchIteartion(item, dataIndex - 1);\n                    item = nextTargetObj;\n\n                    ifFinded = true;\n                }\n            });\n\n            if (!ifFinded) {\n                const nextTargetObj = commitBranchIteartion(lineOfElements[dataIndex], dataIndex - 1);\n                targetObj.children.push(nextTargetObj);\n            }\n        }\n        return targetObj;\n    }\n\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let i = 0; i \u003c organisations.length; i++) {\n        if (!organisations[i].data.ref_key) {\n            organisations[i].data.ref_key = organisations[i].data.__id\n            promises.push(organisations[i].save())\n        }\n    }\n    await Promise.all(promises)\n    promises = []\n\n    for (let i = 0; i \u003c positionsObj.length; i++) {\n        Context.data.debug += ` ${i} `\n        let positionItem = positionsObj[i];\n\n        if(!positionItem.data.ref_key){\n            positionItem.data.ref_key = positionItem.data.__id;\n            await positionItem.save();\n        }\n\n        await createElementTree(positionsObj[i])\n        resultObj = commitBranchIteartion(resultObj, lineOfElements.length - 1);       \n        Context.data.debug += ` done ` \n        \n    } \n\n    const processedDivIDs: string[] = [] \n    function createTreeForEmptySubdiv(subdivision: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e, tree: any): [any, string] {\n        const element = new Element(subdivision)\n        const resultObjString = JSON.stringify(resultObj)\n        processedDivIDs.push(subdivision.data.__id)\n        \n        if (!tree) {\n            tree = element.getElement()\n        } else {\n            const elementObj = element.getElement()\n            elementObj.is_subdiv = true\n            elementObj.children = [tree]\n            tree = elementObj\n        }\n\n        if (!!subdivision.data.subdivision) {\n            const parentSubdivId = subdivision.data.subdivision!.id\n            Context.data.debug += `SUBDIV ID ${parentSubdivId}`\n            if (resultObjString.includes(parentSubdivId)) {\n                return [tree, parentSubdivId]\n            }\n            const parentSubdiv = subdivisions.find((item: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e) =\u003e {\n                return item.data.__id === parentSubdivId\n            })\n            if (!!parentSubdiv)\n                return createTreeForEmptySubdiv(parentSubdiv!, tree)\n        } else{\n            const orgId = subdivision.data.organization?.id\n            if (!orgId) {\n                return [null, \"\"]\n            }\n\n            if (resultObjString.includes(orgId)) {\n                return [tree, orgId]\n            } else {\n                Context.data.debug += ` Couldnt find org of subdivision ${subdivision.data.__id} in resultObj`\n                return [null, \"\"]\n            }\n\n        }\n\n        return [null, \"\"]\n    }\n\n    function addChildByParentId(targetObj: any, parentId: string, child: any) {\n        if (!targetObj.children || targetObj.children.length === 0) {\n            return;\n        }\n\n        for (let i = 0; i \u003c targetObj.children.length; i++) {\n            const element = targetObj.children[i]\n            if (element.id === parentId) {\n                if (Array.isArray(element.children)) {\n                    element.children.push(child)\n                } else {\n                    element.children = [child]\n                }\n                return\n            }\n\n            addChildByParentId(element, parentId, child)\n        }\n        return\n    }\n\n    // const processedOrgs: string[] = resultObj.children.map((item: any) =\u003e item.id)\n    // const orgsWithoutPositions: ApplicationItem\u003cApplication$kedo$organization$Data, Application$kedo$organization$Params\u003e[] =  organisations.filter(item =\u003e {\n    //     const isProcessed = processedOrgs.find((id: string) =\u003e id === item.data.__id)\n    //     return !isProcessed\n    // })\n\n    // for (let i = 0; i \u003c orgsWithoutPositions.length; i++) {\n    //     const currentOrg = orgsWithoutPositions[i]\n    //     if (!currentOrg.data.ref_key) {\n    //         currentOrg.data.ref_key = currentOrg.data.__id\n    //         await currentOrg.save()\n    //     }\n    //     const orgElement = new Element(currentOrg)\n    //     resultObj.children.push(orgElement.getElement())\n    // }\n    // const subdivisionsWithoutPositions: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e[] = subdivisions.filter(\n    //     (div: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e) =\u003e {\n    //         return div.data.positions ? div.data.positions.length === 0 : true\n    //     }\n    // )\n    \n\n    // for (let i = 0; i \u003c subdivisionsWithoutPositions.length; i++) {\n    //     const item = subdivisionsWithoutPositions[i]\n\n    //     if(!item.data.ref_key){\n    //         item.data.ref_key = item.data.__id;\n    //         promises.push(item.save());\n    //     } \n    // }\n    // Context.data.debug += ` subdivisions wo pos ${subdivisionsWithoutPositions.length} `\n    // for (let i = 0; i \u003c subdivisionsWithoutPositions.length; i++) {\n    //     const item = subdivisionsWithoutPositions[i]\n\n    //     const isProcessed = processedDivIDs.find((id: string) =\u003e id === item.data.__id)\n    //     if (!!isProcessed) continue;\n    //     const [tree, parentId] = createTreeForEmptySubdiv(item, null)\n    //     Context.data.debug += ` parent id ${parentId} tree ${JSON.stringify(tree)}`\n    //     addChildByParentId(resultObj, parentId, tree)\n\n    // }\n\n    if (!Context.data.error) {\n        const jsonObj = Application.create();\n        jsonObj.data.__name = \"Объект штатного расписания от \" + new Datetime().format();\n        jsonObj.data.json_staffing_data = JSON.stringify(resultObj);\n        await jsonObj.save();\n    }\n}\n\nasync function errorHandle(): Promise\u003cvoid\u003e {\n    if (!Context.data.error) {\n        Context.data.error = \"Неизвестная ошибка выполнения сценария\"\n    }\n}",
  "forms": [],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "object",
      "variable": "staff_data"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": true,
    "applicationContext": false,
    "importsDependencies": [],
    "fieldVisibilityConditions": {
      "debug": {
        "enabled": false,
        "conditions": []
      },
      "error": {
        "enabled": false,
        "conditions": []
      },
      "json_data": {
        "enabled": false,
        "conditions": []
      },
      "json_name": {
        "enabled": false,
        "conditions": []
      },
      "maximum_nesting_in_staffing": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
