{
  "__id": "018f09bb-bf48-7e7f-a6eb-02980a666332",
  "namespace": "kedo.staff_data",
  "code": "load_staffing_data_from_transaction_table_1C",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "(1С) Загрузка/обновление ШР из таблицы обмена данными",
  "type": "bpmn",
  "draft": false,
  "version": 6,
  "context": [
    {
      "code": "staff_data",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "staff_data",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Данные ШР из 1С"
      }
    },
    {
      "code": "app_legal_entity",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "_my_companies",
        "filter": {
          "value": {
            "tf": {}
          },
          "enabled": false
        },
        "bindings": null,
        "namespace": "_system_catalogs",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Приложение Юридическое Лицо",
        "data": {}
      }
    },
    {
      "code": "debug",
      "type": "STRING",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": false,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {},
      "view": {
        "name": "Debug",
        "data": {
          "additionalType": "string"
        }
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-05-02T09:18:37.200236235Z",
  "__createdBy": "6c362877-9ef9-45f4-aa6f-e5e126ee96c0",
  "__updatedAt": "2024-05-08T08:47:53.892804609Z",
  "__updatedBy": "7e61e9a9-edda-49a3-baa2-87b36c4fbb6c",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 24,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "type": "start",
        "color": "#ffffff",
        "exits": ["95da6687-70ce-4b28-a551-506706523e1a"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "(1С) Загрузка/обновление ШР из таблицы обмена данными ({$staff_data})",
          "titleGenerateMethod": "template"
        }
      },
      "027196b5-40ce-43a1-9483-24e1aafba1f7": {
        "x": 576,
        "y": 56,
        "id": "027196b5-40ce-43a1-9483-24e1aafba1f7",
        "icon": "script",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Ссылка подразделений",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["6f3c0e43-762e-4b80-b9c5-098916cb2a00"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "fillAppsLinks",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "0f476641-b7d4-4a84-9436-6422885076a4": {
        "x": 680,
        "y": 400,
        "id": "0f476641-b7d4-4a84-9436-6422885076a4",
        "icon": "script",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Загрузка связей ШР",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["c34769bc-6337-456f-9be0-0a5cf381de31"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "linkFix",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "13fa8f12-0d17-4042-a36d-bf7c320a13f7": {
        "x": 680,
        "y": 184,
        "id": "13fa8f12-0d17-4042-a36d-bf7c320a13f7",
        "icon": "script",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Заполнение руководителей",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["11322075-abe5-44d3-945a-60c78194db63"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "fillOrgHeadPositions",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "185edf1e-c78c-4652-b249-9bf6e024d376": {
        "x": 680,
        "y": 56,
        "id": "185edf1e-c78c-4652-b249-9bf6e024d376",
        "icon": "script",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Заполнение ссылок позиций",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["147a9115-db47-4b2e-a6ee-267e1c4099cf"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "fillPosLinks",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "402ba882-fac3-4ca2-ac1e-834d1a0e4199": {
        "x": 704,
        "y": 528,
        "id": "402ba882-fac3-4ca2-ac1e-834d1a0e4199",
        "icon": "end",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      },
      "64894a1f-c3ca-4d87-a070-20b9ef4a9a7a": {
        "x": 216,
        "y": 56,
        "id": "64894a1f-c3ca-4d87-a070-20b9ef4a9a7a",
        "icon": "script",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Загрузка позиций и подразделений",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["51a18e62-24c6-4cb7-801a-6caab5713cb5"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "loadPositionsAndSubdividions",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "8bfac87e-8fb6-4fe0-9bbf-d8cdc4747061": {
        "x": 360,
        "y": 56,
        "id": "8bfac87e-8fb6-4fe0-9bbf-d8cdc4747061",
        "icon": "script",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Загрузки организаций",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["c1826831-f6af-4a20-88d3-ffe276279476"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "loadOrgs",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "be4bb5c0-05e8-4bf6-b84a-f975820e4d46": {
        "x": 464,
        "y": 56,
        "id": "be4bb5c0-05e8-4bf6-b84a-f975820e4d46",
        "icon": "script",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Заполнение ссылок организаций",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["076ec48b-9694-4e06-851f-63de7603920c"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "fillOrgLinks",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "dcde95a4-69b0-4df2-8ee1-a3a22ef22495": {
        "x": 680,
        "y": 288,
        "id": "dcde95a4-69b0-4df2-8ee1-a3a22ef22495",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Обновить объект JSON для виджета ШР",
        "type": "call",
        "color": "#ffffff",
        "exits": ["03fa8b6f-7f50-4389-9a13-633b8d788978"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "create_and_update_json_render_object",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.staff_data",
          "subProcessTargetFieldCode": ""
        }
      },
      "ec10f6e0-7961-44cf-974b-56d1a1e6003b": {
        "x": 104,
        "y": 56,
        "id": "ec10f6e0-7961-44cf-974b-56d1a1e6003b",
        "lane": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Загрузить графики работы",
        "type": "call",
        "color": "#ffffff",
        "exits": ["bc1230e5-59f4-4913-956e-bb203ea8a02e"],
        "width": 80,
        "height": 64,
        "settings": {
          "code": "load_work_schedules_1cv",
          "async": false,
          "input": [],
          "output": [],
          "namespace": "kedo.work_schedules",
          "subProcessTargetFieldCode": ""
        }
      }
    },
    "lanes": {
      "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e": {
        "x": 8,
        "y": 8,
        "id": "6a127a9b-79a8-4ebe-8acd-4e6bfb48046e",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 876,
        "height": 732,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "03fa8b6f-7f50-4389-9a13-633b8d788978": {
        "id": "03fa8b6f-7f50-4389-9a13-633b8d788978",
        "name": "",
        "path": [
          {
            "x": 720,
            "y": 352
          },
          {
            "x": 720,
            "y": 400
          }
        ],
        "type": "plain",
        "source": "dcde95a4-69b0-4df2-8ee1-a3a22ef22495",
        "target": "0f476641-b7d4-4a84-9436-6422885076a4",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "076ec48b-9694-4e06-851f-63de7603920c": {
        "id": "076ec48b-9694-4e06-851f-63de7603920c",
        "name": "",
        "path": [
          {
            "x": 544,
            "y": 88
          },
          {
            "x": 576,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "be4bb5c0-05e8-4bf6-b84a-f975820e4d46",
        "target": "027196b5-40ce-43a1-9483-24e1aafba1f7",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "11322075-abe5-44d3-945a-60c78194db63": {
        "id": "11322075-abe5-44d3-945a-60c78194db63",
        "name": "",
        "path": [
          {
            "x": 720,
            "y": 248
          },
          {
            "x": 720,
            "y": 288
          }
        ],
        "type": "plain",
        "source": "13fa8f12-0d17-4042-a36d-bf7c320a13f7",
        "target": "dcde95a4-69b0-4df2-8ee1-a3a22ef22495",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "147a9115-db47-4b2e-a6ee-267e1c4099cf": {
        "id": "147a9115-db47-4b2e-a6ee-267e1c4099cf",
        "name": "",
        "path": [
          {
            "x": 720,
            "y": 120
          },
          {
            "x": 720,
            "y": 184
          }
        ],
        "type": "plain",
        "source": "185edf1e-c78c-4652-b249-9bf6e024d376",
        "target": "13fa8f12-0d17-4042-a36d-bf7c320a13f7",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "51a18e62-24c6-4cb7-801a-6caab5713cb5": {
        "id": "51a18e62-24c6-4cb7-801a-6caab5713cb5",
        "name": "",
        "path": [
          {
            "x": 296,
            "y": 88
          },
          {
            "x": 360,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "64894a1f-c3ca-4d87-a070-20b9ef4a9a7a",
        "target": "8bfac87e-8fb6-4fe0-9bbf-d8cdc4747061",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "6f3c0e43-762e-4b80-b9c5-098916cb2a00": {
        "id": "6f3c0e43-762e-4b80-b9c5-098916cb2a00",
        "name": "",
        "path": [
          {
            "x": 656,
            "y": 88
          },
          {
            "x": 680,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "027196b5-40ce-43a1-9483-24e1aafba1f7",
        "target": "185edf1e-c78c-4652-b249-9bf6e024d376",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "95da6687-70ce-4b28-a551-506706523e1a": {
        "id": "95da6687-70ce-4b28-a551-506706523e1a",
        "name": "",
        "path": [
          {
            "x": 56,
            "y": 88
          },
          {
            "x": 104,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "ec10f6e0-7961-44cf-974b-56d1a1e6003b",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "bc1230e5-59f4-4913-956e-bb203ea8a02e": {
        "id": "bc1230e5-59f4-4913-956e-bb203ea8a02e",
        "name": "",
        "path": [
          {
            "x": 184,
            "y": 88
          },
          {
            "x": 216,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "ec10f6e0-7961-44cf-974b-56d1a1e6003b",
        "target": "64894a1f-c3ca-4d87-a070-20b9ef4a9a7a",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c1826831-f6af-4a20-88d3-ffe276279476": {
        "id": "c1826831-f6af-4a20-88d3-ffe276279476",
        "name": "",
        "path": [
          {
            "x": 440,
            "y": 88
          },
          {
            "x": 464,
            "y": 88
          }
        ],
        "type": "plain",
        "source": "8bfac87e-8fb6-4fe0-9bbf-d8cdc4747061",
        "target": "be4bb5c0-05e8-4bf6-b84a-f975820e4d46",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "c34769bc-6337-456f-9be0-0a5cf381de31": {
        "id": "c34769bc-6337-456f-9be0-0a5cf381de31",
        "name": "",
        "path": [
          {
            "x": 720,
            "y": 464
          },
          {
            "x": 720,
            "y": 528
          }
        ],
        "type": "plain",
        "source": "0f476641-b7d4-4a84-9436-6422885076a4",
        "target": "402ba882-fac3-4ca2-ac1e-834d1a0e4199",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\nasync function loadPositionsAndSubdividions(): Promise\u003cvoid\u003e {\n\n    Context.data.debug += \" in load \";\n\n    const allDivisions = await Namespace.app.structural_subdivision.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const allPositions = await Namespace.app.position.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const searchData = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.table_name.eq(\"Catalog_ШтатноеРасписание\")\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .size(10000).all()\n    const sortedApps = searchData.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    })\n    const baseArray: any[] = []\n    const latestData = baseArray.concat(...(sortedApps.filter(item =\u003e item.data.table_name === \"Catalog_ШтатноеРасписание\" \u0026\u0026 !!item.data.table_data).map(item =\u003e JSON.parse(item.data.table_data!))))\n    let data1C: any[] = []\n    if (!!searchData) {\n        data1C = latestData.map((item: any) =\u003e item.data)\n    } else {\n        Context.data.debug += \" return \";\n        return;\n    }\n\n    try {\n        let promises: Promise\u003cvoid\u003e[] = [];\n        const employmentType = Namespace.app.position.fields.employment_type.variants.main_workplace\n        const workRelationsTypeApps = await Namespace.app.type_employment_relationship.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null)\n            )).size(10000).all()\n        const workRelationsType = workRelationsTypeApps.find(item =\u003e {\n            return item.data.__name.includes(\"Бессрочный\")\n        })\n        const workSchedules = await Namespace.app.work_schedules.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null)\n            )).size(10000).all()\n        Context.data.debug += `length is ${data1C.length}`\n        const positionRefArr: string[] = []\n        for (let i = 0; i \u003c data1C.length; i++) {\n            const data = data1C[i]\n\n            Context.data.debug += data['Должность'];\n\n            if (data['Должность'] === \"00000000-0000-0000-0000-000000000000\" || !!(positionRefArr.find((ref: string) =\u003e ref === data[\"Ref\"]))) {\n                continue;\n            }\n\n            let app: ApplicationItem\u003cApplication$kedo$position$Data, Application$kedo$position$Params\u003e | undefined;\n\n            app = allPositions.find(f =\u003e f.data.ref_key === data[\"Ref\"]);\n            const isClosed = data[\"Закрыта\"]\n            if (!app \u0026\u0026 isClosed) continue\n            if (!app) {\n                app = Namespace.app.position.create();\n                //app.data.is_closed = false;\n            }\n            app.data.is_closed = false;\n            if (isClosed) {\n                app.data.is_closed = true;\n            }\n\n            if (!!data[\"ГрафикРаботыСотрудников\"]) {\n                const workSchedule = workSchedules.find(item =\u003e item.data.id_1c === data[\"ГрафикРаботыСотрудников\"][\"data\"])\n                app.data.work_schedules = workSchedule\n            }\n\n            app.data.__name = data[\"Description\"];\n            app.data.ref_key = data[\"Ref\"];\n            app.data.owner_key = data[\"Owner\"][\"data\"];\n            app.data.parent_key = data[\"Parent\"];\n            app.data.position_key = data[\"Должность\"];\n            app.data.remote_work = false\n            app.data.employment_type = employmentType\n            app.data.type_employment_relationship = workRelationsType\n            const salaryValue = data[\"ОкладТариф\"];\n            app.data.salary = new Money(salaryValue, 'RUB');\n            const date = data[\"ДатаУтверждения\"].split('T')[0].split('-');\n            const year = date[0];\n            const month = date[1];\n            const day = date[2];\n            app.data.approval_date = new TDate(year, month, day);\n            app.data.quantity = Number(data[\"КоличествоСтавок\"]);\n            positionRefArr.push(data[\"Ref\"])\n            promises.push(app.save())\n            if (promises.length \u003e 30) {\n                await Promise.all(promises)\n                promises = []\n            }\n        }\n        await Promise.all(promises)\n        promises = []\n        const divisionRefArr: string[] = []\n        for (let i = 0; i \u003c data1C.length; i++) {\n            const data = data1C[i]\n            if (data['Должность'] !== \"00000000-0000-0000-0000-000000000000\" || !!(divisionRefArr.find((ref: string) =\u003e ref === data[\"Ref\"]))) {\n                continue;\n            }\n            let app: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e | undefined;\n            app = allDivisions.find(f =\u003e f.data.ref_key === data[\"Ref\"]);\n            const isClosed = data[\"Закрыта\"]\n            if (!app \u0026\u0026 isClosed) continue\n            if (!app) {\n                app = Namespace.app.structural_subdivision.create();\n                //app.data.is_closed = false;\n            }\n            app.data.is_closed = false;\n            if (isClosed) {\n                app.data.is_closed = true;\n            }\n\n            app.data.__name = data[\"Description\"];\n            app.data.ref_key = data[\"Ref\"];\n            app.data.subdiv_key = data[\"Подразделение\"];\n            app.data.owner_key = data[\"Owner\"][\"data\"];\n            app.data.parent_key = data[\"Parent\"];\n            app.data.position_key = data[\"Должность\"];\n            divisionRefArr.push(data[\"Ref\"])\n\n            promises.push(app.save())\n            if (promises.length \u003e 30) {\n                await Promise.all(promises)\n                promises = []\n            }\n        }\n        Context.data.debug += `done length ${data1C.length}`\n        await Promise.all(promises);\n    } catch (e: any) {\n        Context.data.debug += `An error occured: name ${e.name}, message ${e.message}`\n    }\n\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let app of searchData) {\n        app.data.is_processed = true\n        promises.push(app.save())\n        if (promises.length \u003e= 20) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n}\n\nasync function loadOrgs(): Promise\u003cvoid\u003e {\n    const searchData = await Namespace.app.posted_1c_data.search()\n        .where((f) =\u003e f.__deletedAt.eq(null))\n        .where((f, g) =\u003e g.or(\n            f.table_name.eq(\"Catalog_Организации\"),\n            f.table_name.eq(\"InformationRegister_СведенияОбОтветственныхЛицах\")\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .size(10000).all()\n    if (!searchData) {\n        return;\n    }\n    const sortedApps = searchData.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    })\n\n    const latestData = parseData(sortedApps, \"Catalog_Организации\")\n\n    let data1C: any[] = []\n    if (!!latestData) {\n        data1C = latestData.map((item: any) =\u003e item.data)\n    } else {\n        return;\n    }\n    const loadedOrgsIds: string[] = []\n    for (let i = 0; i \u003c data1C.length; i++) {\n        const ownerData = data1C[i]\n        if (!!(loadedOrgsIds.find((ref: string) =\u003e ref === ownerData.Ref))) {\n            continue\n        }\n        let appEntity: ApplicationItem\u003cApplication$_system_catalogs$_my_companies$Data, Application$_system_catalogs$_my_companies$Params\u003e | undefined;\n        let appOrganization: ApplicationItem\u003cApplication$kedo$organization$Data, Application$kedo$organization$Params\u003e | undefined;\n        appOrganization = await Namespace.app.organization.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.ref_key.eq(ownerData.Ref)\n            ))\n            .first()\n        if (appOrganization \u0026\u0026 appOrganization.data.entity) {\n            appEntity = await appOrganization.data.entity.fetch();\n        } else {\n            \n            appOrganization = await Namespace.app.organization.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.inn.eq(ownerData[\"ИНН\"])\n            ))\n            .first()\n            \n            if (!appOrganization) {\n                appOrganization = Namespace.app.organization.create();\n            } else {\n                if (appOrganization.data.entity)\n                appEntity = await appOrganization.data.entity.fetch();   \n            } \n        }\n        if (!appEntity) {\n            appEntity = await Context.fields.app_legal_entity.app.search()\n                .where((f, g) =\u003e g.and(\n                    f.__deletedAt.eq(null),\n                    f.__name.eq(ownerData[\"Description\"])\n                ))\n                .first()\n        }\n        if (!appEntity) {\n            appEntity = Context.fields.app_legal_entity.app.create();\n        }\n        if (appEntity) {\n            appEntity.data.__name = ownerData[\"Description\"];\n            appEntity.data._full_legal_name = ownerData[\"НаименованиеПолное\"];\n            if (!appEntity.data._inn) {\n                appEntity.data._inn = ownerData[\"ИНН\"];\n            }\n            if (!appEntity.data._ogrn) {\n                appEntity.data._ogrn = ownerData[\"ОГРН\"];\n            }\n\n            if (!appEntity.data._email || appEntity.data._email.length === 0) {\n                const email = ownerData[\"КонтактнаяИнформация\"]?.find((info: any) =\u003e info[\"Тип\"] === \"АдресЭлектроннойПочты\");\n                if (email) {\n                    appEntity.data._email = [{\n                        email: email[\"АдресЭП\"],\n                        type: EmailType.Work,\n                    }]\n                }\n            }\n            \n            try {\n            if (!appEntity.data._phone) {\n                const phone = ownerData[\"КонтактнаяИнформация\"]?.find((info: any) =\u003e info[\"Тип\"] === \"Телефон\")\n                appEntity.data._phone = {\n                    tel: phone[\"Представление\"].replace(/\\D+/g, \"\"),\n                    type: PhoneType.Main,\n                }\n            }\n            } catch (e) {\n\n            }\n\n            try {\n            const legalAddressType = \"6b0a2669-1bb5-4c9a-9466-54433ac0a955\"\n            const actualAddressType = \"afa527f2-8b59-4c20-95ae-d0d5a08111ee\"\n            if (!appEntity.data._legal_address) {\n                const addressField = ownerData[\"КонтактнаяИнформация\"]?.find((info: any) =\u003e info[\"Тип\"] === \"Адрес\" \u0026\u0026 info[\"Вид\"] === legalAddressType)\n                if (addressField) {\n                    appEntity.data._legal_address = addressField[\"Представление\"]\n                }\n            }\n            if (!appEntity.data._actual_address) {\n                const addressField = ownerData[\"КонтактнаяИнформация\"]?.find((info: any) =\u003e info[\"Тип\"] === \"Адрес\" \u0026\u0026 info[\"Вид\"] === actualAddressType)\n                if (addressField) {\n                    appEntity.data._actual_address = addressField[\"Представление\"]\n                }\n            }\n            } catch (e) {}\n            \n            await appEntity.save();\n        }\n\n        appOrganization.data.entity = appEntity;\n        appOrganization.data.ref_key = ownerData.Ref;\n        appOrganization.data.owner_key = '';\n        appOrganization.data.parent_key = '';\n        appOrganization.data.position_key = '';\n        appOrganization.data.inn = ownerData[\"ИНН\"];\n        appOrganization.data.base_1c = ownerData[\"ИмяБазы\"];\n\n        if (ownerData.Ref !== ownerData[\"ГоловнаяОрганизация\"]) {\n            const app = await Namespace.app.organization.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.ref_key.eq(ownerData[\"ГоловнаяОрганизация\"])\n            ))\n            .first();\n\n            if (app) {\n                appOrganization.data.head_org = app;    \n            }    \n        } \n\n        loadedOrgsIds.push(ownerData.Ref)\n        await appOrganization.save();\n    }\n\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let app of searchData) {\n        app.data.is_processed = true\n        promises.push(app.save())\n        if (promises.length \u003e= 20) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n}\n\nasync function fillAppsLinks(): Promise\u003cvoid\u003e {\n    // получаем данные по данной базе 1С\n    const allSubdivisions = await Namespace.app.structural_subdivision.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all();\n    const allPositions = await Namespace.app.position.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all();\n\n    Context.data.debug += `pos ${allPositions.length} subdiv  ${allSubdivisions.length}`\n    // проходимся по каждому подразделению и записываем его в элементы\n    for (const subdivisionParent of allSubdivisions) {\n\n        const subdivisionsChild = allSubdivisions.filter(f =\u003e f.data.parent_key === subdivisionParent.data.ref_key || f.data.parent_key === subdivisionParent.data.subdiv_key);\n        for (let subdivisionChild of subdivisionsChild) {\n            subdivisionChild.data.subdivision = subdivisionParent;\n            try {\n                await subdivisionChild.save()\n            } catch (e: any) {\n                Context.data.debug += `SUBDIV ${subdivisionParent.data.__name} An error occured: name ${e.name}, message ${e.message}`\n            }\n        }\n    }\n}\n\nasync function fillPosLinks(): Promise\u003cvoid\u003e {\n    // получаем данные по данной базе 1С\n    const allSubdivisions = await Namespace.app.structural_subdivision.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all();\n    const allPositions = await Namespace.app.position.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all();\n\n    Context.data.debug += `pos ${allPositions.length} subdiv  ${allSubdivisions.length}`\n    let promises: Promise\u003cvoid\u003e[] = [];\n    // проходимся по каждому подразделению и записываем его в элементы\n    for (const subdivisionParent of allSubdivisions) {\n\n        const positionsChild = allPositions.filter(f =\u003e f.data.parent_key === subdivisionParent.data.ref_key || f.data.parent_key === subdivisionParent.data.subdiv_key);\n        for (let positionChild of positionsChild) {\n            positionChild.data.subdivision = subdivisionParent;\n            promises.push(positionChild.save())\n            if (promises.length \u003e 30) {\n                try {\n                    await Promise.all(promises)\n                } catch (e: any) {\n                    Context.data.debug += `SUBDIV ${subdivisionParent.data.__name} An error occured: name ${e.name}, message ${e.message}`\n                }\n                promises = []\n            }\n        }\n        await Promise.all(promises)\n\n    }\n}\n\nasync function fillOrgHeadPositions(): Promise\u003cvoid\u003e {\n    \n    try {\n    \n    const tables = await Namespace.app.posted_1c_data.search()\n        .where(f =\u003e f.__deletedAt.eq(null))\n        .where((f, g) =\u003e g.or(\n            f.table_name.eq(\"InformationRegister_ПозицииРуководителейПодразделений\"),\n            f.table_name.eq(\"Catalog_СтруктураПредприятия\")\n        ))\n        .where((f, g) =\u003e g.or(\n            f.is_processed.eq(false),\n            f.is_processed.eq(null),\n        ))\n        .size(10000).all()\n    const sortedApps = tables.length \u003e= 2 ? tables.sort((a, b) =\u003e {\n        const aDate: any = a.data.__createdAt.asDate()\n        const bDate: any = b.data.__createdAt.asDate()\n        return aDate - bDate\n    }) : tables\n    const baseArray: any[] = []\n\n    const headPositions = baseArray.concat(...(sortedApps.filter(item =\u003e item.data.table_name === \"InformationRegister_ПозицииРуководителейПодразделений\" \u0026\u0026 !!item.data.table_data).map(item =\u003e JSON.parse(item.data.table_data!))))\n\n    const sdStructure = baseArray.concat(...(sortedApps.filter(item =\u003e item.data.table_name === \"Catalog_СтруктураПредприятия\" \u0026\u0026 !!item.data.table_data).map(item =\u003e JSON.parse(item.data.table_data!))))\n\n    if (!!sdStructure \u0026\u0026 !!headPositions \u0026\u0026 sdStructure.length \u003e 0 \u0026\u0026 headPositions.length \u003e 0) {\n        const headData = headPositions.map((item: any) =\u003e item.data[\"Record\"])\n        const sdData = sdStructure.map((item: any) =\u003e item.data)\n        const subdivisions = await Namespace.app.structural_subdivision.search()\n            .where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()\n        const positions = await Namespace.app.position.search()\n            .where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()\n        for (let subdivision of headData) {\n            const posRef = subdivision[0][\"ПозицияШтатногоРасписания\"]\n            const sdStructureRef = subdivision[0][\"Подразделение\"]\n            const struct = sdData.find((item: any) =\u003e item.Ref === sdStructureRef)\n            if (!struct) continue\n            const sdRef = struct[\"Источник\"].data\n\n            Context.data.debug += `found pos and sd ${posRef} ${sdRef}`\n            const foundSubdivision = subdivisions.find(item =\u003e {\n                return item.data.subdiv_key === sdRef\n            })\n            const foundPosition = positions.find(item =\u003e {\n                return item.data.ref_key === posRef\n            })\n            if (!!foundPosition \u0026\u0026 !!foundSubdivision) {\n                Context.data.debug += `success!!`\n                foundSubdivision.data.position = foundPosition\n                await foundSubdivision.save()\n            }\n        }\n    }\n\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let app of tables) {\n        app.data.is_processed = true\n        promises.push(app.save())\n        if (promises.length \u003e= 20) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n\n    } catch (e) {\n        Context.data.debug += ` name ${e.name}, message ${e.message} `;\n    }\n}\n\nasync function linkFix(): Promise\u003cvoid\u003e {\n    const positions = await Namespace.app.position.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.subdivision.eq(null)\n        )).size(10000).all()\n    if (!positions || positions.length === 0) {\n        return\n    }\n    //@ts-ignore\n    const positionParentKeys: string[] = positions.filter(item =\u003e !!item.data.parent_key).map(item =\u003e item.data.parent_key)\n    const subdivs = await Namespace.app.structural_subdivision.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.ref_key.in(positionParentKeys)\n        )).size(10000).all()\n    Context.data.debug += \" length \" + positions.length\n    for (let i = 0; i \u003c positions.length; i++) {\n        const curPos = positions[i]\n        const parentKey = curPos.data.parent_key\n        if (!parentKey) continue;\n        const subdiv = subdivs.find(div =\u003e div.data.ref_key === parentKey)\n        curPos.data.subdivision = subdiv\n        await curPos.save()\n\n    }\n}\nasync function fillOrgLinks(): Promise\u003cvoid\u003e {\n    const allOrganizations = await Namespace.app.organization.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all();\n    const allSubdivisions = await Namespace.app.structural_subdivision.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all();\n    const allPositions = await Namespace.app.position.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null)\n        ))\n        .size(10000)\n        .all();\n\n    let promises: Promise\u003cvoid\u003e[] = [];\n    for (const organiaztion of allOrganizations) {\n        try {\n            const subdivisions = allSubdivisions.filter(f =\u003e f.data.owner_key === organiaztion.data.ref_key);\n            const positions = allPositions.filter(f =\u003e f.data.owner_key === organiaztion.data.ref_key);\n            for (let subdivision of subdivisions) {\n                subdivision.data.organization = organiaztion;\n                promises.push(subdivision.save())\n                if (promises.length \u003e 30) {\n                    await Promise.all(promises)\n                    promises = []\n                }\n            }\n            await Promise.all(promises)\n            for (let position of positions) {\n                position.data.organization = organiaztion;\n                promises.push(position.save())\n                if (promises.length \u003e 30) {\n                    await Promise.all(promises)\n                    promises = []\n                }\n            }\n            await Promise.all(promises)\n        } catch (e: any) {\n            Context.data.debug += `ORG ${organiaztion.data.__name} An error occured: name ${e.name}, message ${e.message}`\n        }\n    }\n}\n\nconst parseData = (data: any[], tableName: string): any[] =\u003e {\n    const result: any[] = []\n    data.forEach(item =\u003e {\n        if (item.data.table_name === tableName \u0026\u0026 !!item.data.table_data) {\n            let tableData = JSON.parse(item.data.table_data!);\n            for (let tableElement of tableData) {\n                tableElement.data[\"ИмяБазы\"] = item.data.base_1c_name;\n            }\n\n            result.push(...tableData);\n        }\n    })\n\n    return result;\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "debugForm": {
      "allFields": false,
      "formFields": []
    },
    "targetFeed": {
      "type": "object",
      "variable": "staff_data"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": true,
    "applicationContext": false,
    "importsDependencies": [],
    "useStartFormInDebug": true,
    "fieldVisibilityConditions": {
      "debug": {
        "enabled": false,
        "conditions": []
      },
      "app_legal_entity": {
        "enabled": false,
        "conditions": []
      }
    }
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
