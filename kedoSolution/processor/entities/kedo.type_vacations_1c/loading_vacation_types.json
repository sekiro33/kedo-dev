{
  "__id": "018c8757-193c-7ee0-b256-c2d484b7c48a",
  "namespace": "kedo.type_vacations_1c",
  "code": "loading_vacation_types",
  "category": "00000000-0000-0000-0000-000000000000",
  "__name": "(1С) Загрузка типов отпусков",
  "type": "bpmn",
  "draft": false,
  "version": 4,
  "context": [
    {
      "code": "type_vacations_1c",
      "type": "SYS_COLLECTION",
      "searchable": false,
      "indexed": false,
      "deleted": false,
      "array": true,
      "required": false,
      "single": true,
      "defaultValue": null,
      "calcByFormula": false,
      "formula": "",
      "data": {
        "code": "type_vacations_1c",
        "filter": null,
        "bindings": null,
        "namespace": "kedo",
        "isDependent": false,
        "linkedFieldCode": ""
      },
      "view": {
        "name": "Тип отпуска 1С"
      }
    }
  ],
  "manualRun": false,
  "readonly": false,
  "__createdAt": "2023-05-12T04:21:04.466506289Z",
  "__createdBy": "6c362877-9ef9-45f4-aa6f-e5e126ee96c0",
  "__updatedAt": "2024-01-26T07:42:21.918392316Z",
  "__updatedBy": "7303b866-4220-4086-a09e-348a76b12c73",
  "process": {
    "items": {
      "00000000-0000-0000-0000-000000000000": {
        "x": 104,
        "y": 72,
        "id": "00000000-0000-0000-0000-000000000000",
        "lane": "df95c99a-78c5-4cad-9ddb-535b43ea92ec",
        "type": "start",
        "color": "#ffffff",
        "exits": ["e481cb18-8802-40d9-9c28-ee406f60bf34"],
        "width": 32,
        "height": 32,
        "settings": {
          "formFields": [
            {
              "code": "__name",
              "display": "Название",
              "tooltip": "Название экземпляра процесса, будет показываться в задачах",
              "readonly": false,
              "required": true
            }
          ],
          "instruction": "",
          "notifyMessage": "Запущен процесс",
          "titleTemplate": "(1С) Загрузка типов отпусков ({$type_vacations_1c})",
          "titleGenerateMethod": "template"
        }
      },
      "07fef6f6-eabd-42cb-8528-dd4cb89df6a9": {
        "x": 80,
        "y": 144,
        "id": "07fef6f6-eabd-42cb-8528-dd4cb89df6a9",
        "icon": "script",
        "lane": "df95c99a-78c5-4cad-9ddb-535b43ea92ec",
        "name": "Загрузка",
        "type": "script",
        "color": "#fde9a0",
        "exits": ["696326fa-2453-4eb2-a8e9-0c8e2ee2866f"],
        "width": 80,
        "height": 64,
        "settings": {
          "func": "loadTypes",
          "count": 1,
          "delay": 5,
          "retry": true,
          "escalation": {
            "byError": {
              "notify": false,
              "interrupt": false,
              "receivers": []
            }
          }
        }
      },
      "4077c800-dd8e-421f-8a2e-9f08da061599": {
        "x": 104,
        "y": 248,
        "id": "4077c800-dd8e-421f-8a2e-9f08da061599",
        "icon": "end",
        "lane": "df95c99a-78c5-4cad-9ddb-535b43ea92ec",
        "name": "",
        "type": "end",
        "color": "#ffffff",
        "exits": [],
        "width": 32,
        "height": 32,
        "settings": {
          "actions": [],
          "isModal": false,
          "actionType": "nothing",
          "messageText": "",
          "redirectUrl": ""
        }
      }
    },
    "lanes": {
      "df95c99a-78c5-4cad-9ddb-535b43ea92ec": {
        "x": 8,
        "y": 8,
        "id": "df95c99a-78c5-4cad-9ddb-535b43ea92ec",
        "name": "Инициатор",
        "color": "#d6f0cc",
        "width": 764,
        "height": 600,
        "settings": {
          "type": "dynamic",
          "variable": "__createdBy",
          "permissionExtend": {
            "kind": "simple"
          }
        },
        "direction": "vertical",
        "multiInstance": false
      }
    },
    "paper": {
      "format": "A4",
      "orientation": "landscape"
    },
    "transitions": {
      "696326fa-2453-4eb2-a8e9-0c8e2ee2866f": {
        "id": "696326fa-2453-4eb2-a8e9-0c8e2ee2866f",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 208
          },
          {
            "x": 120,
            "y": 248
          }
        ],
        "type": "plain",
        "source": "07fef6f6-eabd-42cb-8528-dd4cb89df6a9",
        "target": "4077c800-dd8e-421f-8a2e-9f08da061599",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      },
      "e481cb18-8802-40d9-9c28-ee406f60bf34": {
        "id": "e481cb18-8802-40d9-9c28-ee406f60bf34",
        "name": "",
        "path": [
          {
            "x": 120,
            "y": 104
          },
          {
            "x": 120,
            "y": 144
          }
        ],
        "type": "plain",
        "source": "00000000-0000-0000-0000-000000000000",
        "target": "07fef6f6-eabd-42cb-8528-dd4cb89df6a9",
        "settings": {
          "exit": {
            "confirm": "none",
            "interrupt": false,
            "skipCheck": false,
            "formFields": [],
            "buttonClass": "default",
            "confirmText": "",
            "popoverSize": "md",
            "formDescription": ""
          },
          "conditions": [],
          "descritpion": ""
        },
        "nameShift": 0
      }
    }
  },
  "scripts": "/**\nHere you can write scripts for complex server processing of the context during process execution.\nTo write scripts, use TypeScript (https://www.typescriptlang.org).\nELMA365 SDK documentation available on https://tssdk.elma365.com.\n**/\n\nasync function loadTypes(): Promise\u003cvoid\u003e {\n    const vacationsTypes = await Namespace.app.posted_1c_data.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.table_name.eq(\"Catalog_ВидыОтпусков\")\n        )).where((f, g) =\u003e g.or(\n            f.is_processed.eq(null),\n            f.is_processed.eq(false),\n        ))\n        .size(10000).all()\n\n    if (vacationsTypes.length === 0) {\n        return;\n    }\n    const sortedApps = vacationsTypes.sort((a, b) =\u003e {\n      const aDate: any = a.data.__createdAt.asDate()\n      const bDate: any = b.data.__createdAt.asDate()\n      return bDate - aDate\n    })\n\n    const latestData = sortedApps[0]\n    const typeApps = await Namespace.app.type_vacations_1c.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()\n    const typeData = JSON.parse(latestData.data.table_data!)\n    let promises: Promise\u003cvoid\u003e[] = []\n    for (let i = 0; i \u003c typeData.length; i++) {\n        const currentType = typeData[i].data\n        const existingApp = typeApps.find(item =\u003e item.data.guid === currentType[\"Ref\"])\n        if (!!existingApp) continue;\n        const newApp = Namespace.app.type_vacations_1c.create()\n        newApp.data.__name = currentType[\"Description\"]\n        newApp.data.guid = currentType[\"Ref\"]\n        promises.push(newApp.save())\n\n        if (promises.length \u003e 50) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n\n    await Promise.all(promises)\n\n    promises = []\n\n    for (let app of vacationsTypes) {\n        app.data.is_processed = true\n        promises.push(app.save())\n        if (promises.length \u003e= 30) {\n            await Promise.all(promises)\n            promises = []\n        }\n    }\n    await Promise.all(promises)\n}\n",
  "forms": [],
  "settings": {
    "logged": true,
    "targetFeed": {
      "type": "object",
      "variable": "type_vacations_1c"
    },
    "allowGlobal": false,
    "instanceCard": {
      "allFields": true,
      "formFields": []
    },
    "notifyOnStart": true,
    "allowNamespace": true,
    "applicationContext": false,
    "importsDependencies": [],
    "fieldVisibilityConditions": {}
  },
  "hideInList": false,
  "applicationLink": false,
  "__deletedAt": null
}
