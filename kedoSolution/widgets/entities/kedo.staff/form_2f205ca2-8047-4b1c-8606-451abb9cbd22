{"__id":"018e89f9-2412-7adf-84e8-cfd83d5218c9","namespace":"kedo.staff","code":"form_2f205ca2-8047-4b1c-8606-451abb9cbd22","__name":"Проверка документов для трудоустройства","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":3,"hidden":true,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"fc072c0c-912c-46ef-8e8f-5e989e917890","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"formGroup":{"path":["context"]},"systemFunctions":{"validate":{"kind":"Function","name":"validation","type":"client"}},"formType":"task-form"},"content":{"[footer]":[{"id":"31979bac-00bd-4123-a901-9d14190c8dde","descriptor":"buttons-panel","values":{"buttons":{"path":["actionButtons"]}}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"__renderContentAsync":false,"__renderContentOnDemand":false,"__outlet":"","__baseURL":"","__relativeURL":"","__onMouseLeave":{"kind":"Function","name":"toggleSelection","type":"client"},"__isConstValues":[]},"content":{"":[{"id":"9642dc02-3a19-4157-b02f-18d2b0e2d106","descriptor":"kedo@custom_info","descriptorVersion":1,"values":{"__styles":"margin-bottom: 10px; width: 100%","__baseURL":"","info_type":[{"code":"warning","name":"Предупреждение"}],"info_string":{"path":["text_infoblock"]},"__relativeURL":"","__isConstValues":[],"__outlet":""}},{"id":"dcdd3e4e-0c49-483b-87c2-8c782a8890f0","descriptor":"dynamic-form","values":{"form":{"path":["context"]},"fields":{"path":["fields"]}}},{"id":"a94deea8-1337-4310-aedd-c6f2cb00e780","descriptor":"groupbox","values":{"__styles":"margin-top: 10px;","expanded":true,"__relativeURL":"","__isConstValues":[],"__renderContentAsync":false,"title":"Пакет документов","__outlet":"","__baseURL":"","styleEnum":[{"code":"default","name":"Default"}],"collapsible":false},"content":{"":[{"id":"71af54ef-3187-42ae-b990-d9cea383cbb9","descriptor":"elma-info-block","values":{"__hidden":{"path":["isTrueTypeDocument"]},"__baseURL":"","__relativeURL":"","text":"Приложены документы с неккоректными форматами","typeEnum":[{"code":"danger","name":"Ошибка (красный)"}],"__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false,"__outlet":""},"content":{"":[]}},{"id":"4c1ddf92-55b3-4fe9-80ef-d4b326a32e24","descriptor":"dynamic-form-row","values":{"hideEmpty":false,"__readOnly":null,"__relativeURL":"","onChangeValue":{"kind":"Function","name":"chechTypeDocument","type":"client"},"__isConstValues":[],"tooltip":"Приложите файл в формате .pdf, .docx или .xlsx","__outlet":"","__baseURL":"","showDisplayName":true,"__renderContentOnDemand":false,"control":{"path":["context","labor_contract_file"]},"required":true,"bindingMode":false}},{"id":"c5652306-9e2a-403e-a7a9-4bd4fc425c98","descriptor":"dynamic-form-row","values":{"__readOnly":null,"__outlet":"","__baseURL":"","__relativeURL":"","__isConstValues":[],"showDisplayName":true,"required":{"path":["context","admission_order_required"]},"bindingMode":false,"hideEmpty":false,"__hidden":{"path":["context","admission_order_required"],"modifier":"not"},"onChangeValue":{"kind":"Function","name":"chechTypeDocument","type":"client"},"__renderContentOnDemand":false,"control":{"path":["context","admission_order_file"]},"tooltip":"Приложите файл в формате .pdf, .docx или .xlsx"}},{"id":"9fdab17d-b01e-42b0-9bc6-ae5c977c797f","descriptor":"dynamic-form-row","values":{"__outlet":"","__readOnly":null,"control":{"path":["context","information_about_labor_activity_file"]},"tooltip":"Приложите файл в формате .pdf, .docx или .xlsx","__baseURL":"","__relativeURL":"","__renderContentOnDemand":false,"__hidden":{"path":["context","information_about_labor_activity_required"],"modifier":"not"},"required":{"path":["context","information_about_labor_activity_required"]},"hideEmpty":false,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"chechTypeDocument","type":"client"},"__isConstValues":[],"showDisplayName":true}},{"id":"329e105e-6d13-4199-bf38-b31a2ca18af5","descriptor":"dynamic-form-row","values":{"__outlet":"","bindingMode":false,"__isConstValues":[],"onChangeValue":{"kind":"Function","name":"chechTypeDocument","type":"client"},"control":{"path":["context","job_application_file"]},"tooltip":"Приложите файл в формате .pdf, .docx или .xlsx","showDisplayName":true,"__hidden":{"path":["context","job_application_required"],"modifier":"not"},"required":{"path":["context","job_application_required"]},"__baseURL":"","hideEmpty":false,"__readOnly":null,"__relativeURL":"","__renderContentOnDemand":false}},{"id":"f14f3501-282b-44f0-aae9-6149f26d641d","descriptor":"dynamic-form-row","values":{"control":{"path":["context","consent_processing_personal_data_file"]},"hideEmpty":false,"__relativeURL":"","showDisplayName":true,"__baseURL":"","__readOnly":null,"__isConstValues":[],"required":{"path":["context","consent_processing_personal_data_required"]},"bindingMode":false,"__renderContentOnDemand":false,"tooltip":"Приложите файл в формате .pdf, .docx или .xlsx","__hidden":{"path":["context","consent_processing_personal_data_required"],"modifier":"not"},"__outlet":"","onChangeValue":{"kind":"Function","name":"chechTypeDocument","type":"client"}}},{"id":"9121595d-e763-4c50-b870-66c468a0d361","descriptor":"dynamic-form-row","values":{"__baseURL":"","tooltip":"Приложите файл в формате .pdf, .docx или .xlsx","required":false,"hideEmpty":false,"__readOnly":null,"showDisplayName":true,"__renderContentOnDemand":false,"bindingMode":false,"__relativeURL":"","control":{"path":["context","additional_agreement_to_the_contract_table"]},"__outlet":"","onChangeValue":{"kind":"Function","name":"chechTypeDocument","type":"client"},"__isConstValues":[],"widgetCustomSettings":{"kind":"BlobObject","settings":{"columnsView":{"file":{"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":true,"compression":false,"verticalAlign":"middle"},"doc_type":{"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":true,"compression":false,"verticalAlign":"middle"}},"allowDeleteRows":false}}}},{"id":"3a598562-5db8-418a-897f-6e32851aaf59","descriptor":"dynamic-form-row","values":{"required":false,"__relativeURL":"","__onMouseLeave":{"kind":"Function","name":{},"type":"client"},"__renderContentOnDemand":false,"tooltip":"Приложите файл в формате .pdf, .docx или .xlsx","__baseURL":"","hideEmpty":false,"bindingMode":false,"control":{"path":["context","additional_agreement_table"]},"widgetCustomSettings":{"kind":"BlobObject","settings":{"columnsView":{"file":{"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":true,"compression":false,"verticalAlign":"middle"}},"allowDeleteRows":false}},"__outlet":"","__readOnly":null,"onChangeValue":{"kind":"Function","name":"chechTypeDocument","type":"client"},"__isConstValues":[],"showDisplayName":true}}]}}]}}],"[sidebar]":[{"id":"39d7757a-529f-4526-98f3-fddc66becf85","descriptor":"sidebar-widget","content":{"":[{"id":"abe4b782-6e2d-49cc-a57e-81b636422ee5","descriptor":"target-widget","values":{"context":{"path":["context"]}}}]}},{"id":"231b371a-64ae-4b61-8014-cba6da318ac9","descriptor":"sidebar-widget","content":{"":[{"id":"5e39b91d-aea4-467e-862f-0f8766eb44df","descriptor":"linked-item","values":{"context":{"path":["context"]}}}]}},{"id":"a4469de0-d7f3-11ec-9d64-0242ac120002","descriptor":"sidebar-widget","content":{"":[{"id":"3ead7c41-6dfa-4144-80da-2bfb5f0ccf59","descriptor":"item-reminder","values":{"formGroup":{"path":["context"]}}}]}},{"id":"56d1d0e8-aa83-4cdd-ae43-294b26ad4d04","descriptor":"sidebar-widget","content":{"":[{"id":"e1525e34-14ba-456b-b703-f407945c01e0","descriptor":"item-tasks","descriptorVersion":4,"values":{"formGroup":{"path":["context"]}}}]}},{"id":"eef018f2-1d3a-4600-a19d-791733b28b5e","descriptor":"sidebar-widget","content":{"":[{"id":"e0a17dec-603a-461a-becf-861637630584","descriptor":"messages-target","values":{"target":{"path":["target"]}}}]}}],"[formInfoPanel]":[{"id":"09fa4324-8dd3-4786-a0a8-a794158f3482","descriptor":"validation-info-block","values":{"__validateResult":{"path":["context","__validateResult"]}}}],"[headerControls]":[{"id":"475aa008-aaff-402f-8de2-408bae1f1928","descriptor":"task-percent-widget","values":{"task":{"path":["task"]}}},{"id":"702d9c59-77ae-4dd5-b71a-a5fe7b58858f","descriptor":"extension-zone-toolbar-widget","values":{"item":{"path":["__itemRef"]}}},{"id":"f7b11c79-4267-4f5b-a002-dd629d549682","descriptor":"process-item-map","values":{"task":{"path":["task"]},"skipRulesCheck":true}},{"id":"ff2500ee-6573-49cd-a9e8-2d5c93350f26","descriptor":"button","values":{"icon":"menu_vertical","view":"icon","label":"bpm.tasks.item@menu","action":{"path":["menuAction"]},"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}}],"[headerCustomization]":[]}},"fields":[{"code":"text_infoblock","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Текст инфоблока","data":{"additionalType":"markdown"}}},{"code":"string","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"string","data":{"additionalType":"string"},"input":true,"output":true}},{"code":"isTrueTypeDocument","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":true,"calcByFormula":false,"formula":"","data":{},"view":{"name":"isTrueTypeDocument","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}}],"fieldVisibilityConditions":{"string":{"enabled":false,"conditions":[]},"text_infoblock":{"enabled":false,"conditions":[]},"isTrueTypeDocument":{"enabled":false,"conditions":[]},"istruetypedocument":{"enabled":false,"conditions":[]}},"scriptOptions":{"allowNamespace":true},"clientScripts":"/* Client scripts module */\n\ndeclare const window: any;\ndeclare const document: any;\ndeclare const console: any;\n\nconst BUTTON_NAME = `Доотправить документы`;\n\nconst INFOBLOCK_TEXT_INTEGRATION = `\n        \u003cdiv style=\"padding: 10px\"\u003e\n            \u003cp\u003eПроверьте полученные документы. При необходимости вы можете их заменить или добавить новые.\u003c/p\u003e\n            \u003cp\u003eЕсли вы хотите доотправить документы из учетной системы: отправьте печатные формы из учетной системы и выполните действие \u003cb\u003eДоотправить документы\u003c/b\u003e.\u003c/p\u003e\n            \u003cp\u003eВы можете настроить список полей документов, которые необходимо прикрепить. Для этого перейдите в \u003ca href=\"${System.getBaseUrl()}/kedo/settings\" target=\"_blank\"\u003eМеню настроек КЭДО\u003c/a\u003e и поменяйте статус необходимых параметров.\u003c/p\u003e\n        \u003c/div\u003e`\n\nconst INFOBLOCK_TEXT_ATTACH = `\n        \u003cdiv style=\"padding: 10px\"\u003e\n            \u003cp\u003eПриложите необходимые для трудоустройства документы.\u003c/p\u003e\n            \u003cp\u003eВы можете настроить список полей документов, которые необходимо прикрепить. Для этого перейдите в \u003ca href=\"${System.getBaseUrl()}/kedo/settings\" target=\"_blank\"\u003eМеню настроек КЭДО\u003c/a\u003e и поменяйте статус необходимых параметров.\u003c/p\u003e\n        \u003c/div\u003e`\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    await getKedoSettings();\n\n    // Если идем по ветке ручного прикладывания файлов - скрываем кнпоку повтортного получения печатных форм из 1С.\n    if (Context.data.attach_file == true) {\n        hideIntegrationButton();\n        ViewContext.data.text_infoblock = INFOBLOCK_TEXT_ATTACH;\n    } else {\n        ViewContext.data.text_infoblock = INFOBLOCK_TEXT_INTEGRATION;\n    }\n}\n\nfunction toggleSelection(): void {\n    document.querySelector(\".modal__main\").click();\n}\n\nfunction hideIntegrationButton(): void {\n    const modal = document.querySelector('.modal__main');\n\n    if (!modal) {\n        window.setTimeout(hideIntegrationButton, 500);\n        return;\n    }\n\n    const buttons = modal.querySelectorAll('button');\n\n    for (const button of buttons) {\n        // При смене названия перехода нужно будет поменять сравниваемое значение\n        if (button.textContent \u0026\u0026 button.textContent.trim() == BUTTON_NAME) {\n            // Скрыть родительский div у кнопки.\n            // Если не скрывать, то остается лишнее пространство между кнопками.\n            button.parentElement.style.display = \"none\";\n            button.style.display = \"none\";\n            return;\n        }\n    }\n\n    window.setTimeout(hideIntegrationButton, 500);\n}\n\nasync function getKedoSettings(): Promise\u003cvoid\u003e {\n    const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n\n    const information_about_labor_activity = settings.find(f =\u003e f.data.code == \"information_about_labor_activity\");\n    Context.data.information_about_labor_activity_required = information_about_labor_activity ? information_about_labor_activity.data.status : false;\n\n    const admission_order = settings.find(f =\u003e f.data.code == \"admission_order\");\n    Context.data.admission_order_required = admission_order ? admission_order.data.status : false;\n\n    const app_employment = settings.find(f =\u003e f.data.code == \"app_employment\");\n    Context.data.job_application_required = app_employment ? app_employment.data.status : false;\n\n    // Значение \"Требуется согласие на обработку ПДн?\" \n    const staff = await Context.data.staff?.fetch();\n    Context.data.consent_processing_personal_data_required = (staff \u0026\u0026 staff.data.consent_processing_pdn) ? staff.data.consent_processing_pdn : false;\n}\n\n\nasync function validation(): Promise\u003cValidationResult\u003e {\n    const result = new ValidationResult();\n\n    const checkFileLoading = document.querySelector('.file-loading');\n\n    if (checkFileLoading) {\n        result.addMessage('Дождитесь окончания загрузки файла(-ов)')\n        return result;\n    }\n\n    if (ViewContext.data.isTrueTypeDocument == false) {\n        result.addMessage('Приложены документы с неккоректными форматами')\n        return result;\n    }\n\n    return result;\n}\n\nasync function chechTypeDocument(): Promise\u003cvoid\u003e {\n    if (Context.data.labor_contract_file) {\n        const fileName = await Context.data.labor_contract_file.fetch();\n        if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n            ViewContext.data.isTrueTypeDocument = true;\n        } else {\n            ViewContext.data.isTrueTypeDocument = false;\n            return\n        }\n    }\n    if (Context.data.admission_order_file) {\n        const fileName = await Context.data.admission_order_file.fetch();\n        if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n            ViewContext.data.isTrueTypeDocument = true;\n        } else {\n            ViewContext.data.isTrueTypeDocument = false;\n            return\n        }\n    }\n    if (Context.data.information_about_labor_activity_file) {\n        const fileName = await Context.data.information_about_labor_activity_file.fetch();\n        if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n            ViewContext.data.isTrueTypeDocument = true;\n        } else {\n            ViewContext.data.isTrueTypeDocument = false;\n            return\n        }\n    }\n    if (Context.data.job_application_file) {\n        const fileName = await Context.data.job_application_file.fetch();\n        if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n            ViewContext.data.isTrueTypeDocument = true;\n        } else {\n            ViewContext.data.isTrueTypeDocument = false;\n            return\n        }\n    }\n    if (Context.data.consent_processing_personal_data_file) {\n        const fileName = await Context.data.consent_processing_personal_data_file.fetch();\n        if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n            ViewContext.data.isTrueTypeDocument = true;\n        } else {\n            ViewContext.data.isTrueTypeDocument = false;\n            return\n        }\n    }\n    await chechTypeDocumentTable();\n}\n\nasync function chechTypeDocumentTable(): Promise\u003cvoid\u003e {\n    if (Context.data.additional_agreement_table \u0026\u0026 Context.data.additional_agreement_table.length \u003e 0) {\n        for (let row of Context.data.additional_agreement_table) {\n            const fileTableFileName = await row.file.fetch();\n            if (fileTableFileName.data.__name.endsWith('.pdf') || fileTableFileName.data.__name.endsWith('.PDF') || fileTableFileName.data.__name.endsWith('.docx') || fileTableFileName.data.__name.endsWith('.DOCX') || fileTableFileName.data.__name.endsWith('.xlsx') || fileTableFileName.data.__name.endsWith('.XLSX')) {\n                ViewContext.data.isTrueTypeDocument = true;\n            } else {\n                ViewContext.data.isTrueTypeDocument = false;\n                return\n            }\n        }\n    } \n\n    if (Context.data.additional_agreement_to_the_contract_table \u0026\u0026 Context.data.additional_agreement_to_the_contract_table.length \u003e 0) {\n        for (let row of Context.data.additional_agreement_to_the_contract_table) {\n            const fileTableFileName = await row.file.fetch();\n            if (fileTableFileName.data.__name.endsWith('.pdf') || fileTableFileName.data.__name.endsWith('.PDF') || fileTableFileName.data.__name.endsWith('.docx') || fileTableFileName.data.__name.endsWith('.DOCX') || fileTableFileName.data.__name.endsWith('.xlsx') || fileTableFileName.data.__name.endsWith('.XLSX')) {\n                ViewContext.data.isTrueTypeDocument = true;\n            } else {\n                ViewContext.data.isTrueTypeDocument = false;\n                return\n            }\n        }\n    } \n}\n","clientScriptOptions":{"allowNamespace":true,"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{"allowNamespace":true},"dataFieldCode":"context"},"dataNamespace":"kedo.staff","dataCode":"_process_get_employment_print_forms_1c_workflow","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        const BUTTON_NAME = `Доотправить документы`;\n        const INFOBLOCK_TEXT_INTEGRATION = `\n        \u003cdiv style=\"padding: 10px\"\u003e\n            \u003cp\u003eПроверьте полученные документы. При необходимости вы можете их заменить или добавить новые.\u003c/p\u003e\n            \u003cp\u003eЕсли вы хотите доотправить документы из учетной системы: отправьте печатные формы из учетной системы и выполните действие \u003cb\u003eДоотправить документы\u003c/b\u003e.\u003c/p\u003e\n            \u003cp\u003eВы можете настроить список полей документов, которые необходимо прикрепить. Для этого перейдите в \u003ca href=\"${System.getBaseUrl()}/kedo/settings\" target=\"_blank\"\u003eМеню настроек КЭДО\u003c/a\u003e и поменяйте статус необходимых параметров.\u003c/p\u003e\n        \u003c/div\u003e`;\n        const INFOBLOCK_TEXT_ATTACH = `\n        \u003cdiv style=\"padding: 10px\"\u003e\n            \u003cp\u003eПриложите необходимые для трудоустройства документы.\u003c/p\u003e\n            \u003cp\u003eВы можете настроить список полей документов, которые необходимо прикрепить. Для этого перейдите в \u003ca href=\"${System.getBaseUrl()}/kedo/settings\" target=\"_blank\"\u003eМеню настроек КЭДО\u003c/a\u003e и поменяйте статус необходимых параметров.\u003c/p\u003e\n        \u003c/div\u003e`;\n        async function onInit() {\n            await getKedoSettings();\n            if (Context.data.attach_file == true) {\n                hideIntegrationButton();\n                ViewContext.data.text_infoblock = INFOBLOCK_TEXT_ATTACH;\n            }\n            else {\n                ViewContext.data.text_infoblock = INFOBLOCK_TEXT_INTEGRATION;\n            }\n        }\n        function toggleSelection() {\n            document.querySelector(\".modal__main\").click();\n        }\n        function hideIntegrationButton() {\n            const modal = document.querySelector('.modal__main');\n            if (!modal) {\n                window.setTimeout(hideIntegrationButton, 500);\n                return;\n            }\n            const buttons = modal.querySelectorAll('button');\n            for (const button of buttons) {\n                if (button.textContent \u0026\u0026 button.textContent.trim() == BUTTON_NAME) {\n                    button.parentElement.style.display = \"none\";\n                    button.style.display = \"none\";\n                    return;\n                }\n            }\n            window.setTimeout(hideIntegrationButton, 500);\n        }\n        async function getKedoSettings() {\n            var _a;\n            const settings = await Namespace.app.settings.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            const information_about_labor_activity = settings.find(f =\u003e f.data.code == \"information_about_labor_activity\");\n            Context.data.information_about_labor_activity_required = information_about_labor_activity ? information_about_labor_activity.data.status : false;\n            const admission_order = settings.find(f =\u003e f.data.code == \"admission_order\");\n            Context.data.admission_order_required = admission_order ? admission_order.data.status : false;\n            const app_employment = settings.find(f =\u003e f.data.code == \"app_employment\");\n            Context.data.job_application_required = app_employment ? app_employment.data.status : false;\n            const staff = await ((_a = Context.data.staff) === null || _a === void 0 ? void 0 : _a.fetch());\n            Context.data.consent_processing_personal_data_required = (staff \u0026\u0026 staff.data.consent_processing_pdn) ? staff.data.consent_processing_pdn : false;\n        }\n        async function validation() {\n            const result = new ValidationResult();\n            const checkFileLoading = document.querySelector('.file-loading');\n            if (checkFileLoading) {\n                result.addMessage('Дождитесь окончания загрузки файла(-ов)');\n                return result;\n            }\n            if (ViewContext.data.isTrueTypeDocument == false) {\n                result.addMessage('Приложены документы с неккоректными форматами');\n                return result;\n            }\n            return result;\n        }\n        async function chechTypeDocument() {\n            if (Context.data.labor_contract_file) {\n                const fileName = await Context.data.labor_contract_file.fetch();\n                if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n                    ViewContext.data.isTrueTypeDocument = true;\n                }\n                else {\n                    ViewContext.data.isTrueTypeDocument = false;\n                    return;\n                }\n            }\n            if (Context.data.admission_order_file) {\n                const fileName = await Context.data.admission_order_file.fetch();\n                if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n                    ViewContext.data.isTrueTypeDocument = true;\n                }\n                else {\n                    ViewContext.data.isTrueTypeDocument = false;\n                    return;\n                }\n            }\n            if (Context.data.information_about_labor_activity_file) {\n                const fileName = await Context.data.information_about_labor_activity_file.fetch();\n                if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n                    ViewContext.data.isTrueTypeDocument = true;\n                }\n                else {\n                    ViewContext.data.isTrueTypeDocument = false;\n                    return;\n                }\n            }\n            if (Context.data.job_application_file) {\n                const fileName = await Context.data.job_application_file.fetch();\n                if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n                    ViewContext.data.isTrueTypeDocument = true;\n                }\n                else {\n                    ViewContext.data.isTrueTypeDocument = false;\n                    return;\n                }\n            }\n            if (Context.data.consent_processing_personal_data_file) {\n                const fileName = await Context.data.consent_processing_personal_data_file.fetch();\n                if (fileName.data.__name.endsWith('.pdf') || fileName.data.__name.endsWith('.PDF') || fileName.data.__name.endsWith('.docx') || fileName.data.__name.endsWith('.DOCX') || fileName.data.__name.endsWith('.xlsx') || fileName.data.__name.endsWith('.XLSX')) {\n                    ViewContext.data.isTrueTypeDocument = true;\n                }\n                else {\n                    ViewContext.data.isTrueTypeDocument = false;\n                    return;\n                }\n            }\n            await chechTypeDocumentTable();\n        }\n        async function chechTypeDocumentTable() {\n            if (Context.data.additional_agreement_table \u0026\u0026 Context.data.additional_agreement_table.length \u003e 0) {\n                for (let row of Context.data.additional_agreement_table) {\n                    const fileTableFileName = await row.file.fetch();\n                    if (fileTableFileName.data.__name.endsWith('.pdf') || fileTableFileName.data.__name.endsWith('.PDF') || fileTableFileName.data.__name.endsWith('.docx') || fileTableFileName.data.__name.endsWith('.DOCX') || fileTableFileName.data.__name.endsWith('.xlsx') || fileTableFileName.data.__name.endsWith('.XLSX')) {\n                        ViewContext.data.isTrueTypeDocument = true;\n                    }\n                    else {\n                        ViewContext.data.isTrueTypeDocument = false;\n                        return;\n                    }\n                }\n            }\n            if (Context.data.additional_agreement_to_the_contract_table \u0026\u0026 Context.data.additional_agreement_to_the_contract_table.length \u003e 0) {\n                for (let row of Context.data.additional_agreement_to_the_contract_table) {\n                    const fileTableFileName = await row.file.fetch();\n                    if (fileTableFileName.data.__name.endsWith('.pdf') || fileTableFileName.data.__name.endsWith('.PDF') || fileTableFileName.data.__name.endsWith('.docx') || fileTableFileName.data.__name.endsWith('.DOCX') || fileTableFileName.data.__name.endsWith('.xlsx') || fileTableFileName.data.__name.endsWith('.XLSX')) {\n                        ViewContext.data.isTrueTypeDocument = true;\n                    }\n                    else {\n                        ViewContext.data.isTrueTypeDocument = false;\n                        return;\n                    }\n                }\n            }\n        }\n        return {\n            onInit,\n            toggleSelection,\n            hideIntegrationButton,\n            getKedoSettings,\n            validation,\n            chechTypeDocument,\n            chechTypeDocumentTable\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"toggleSelection","parameters":[],"type":"[object Object]"},{"name":"hideIntegrationButton","parameters":[],"type":"[object Object]"},{"name":"getKedoSettings","parameters":[],"type":"[object Object]"},{"name":"validation","parameters":[],"type":"[object Object]"},{"name":"chechTypeDocument","parameters":[],"type":"[object Object]"},{"name":"chechTypeDocumentTable","parameters":[],"type":"[object Object]"}],"clientDependencies":{"applications":[],"collections":[{"namespace":"kedo","code":"settings"},{"namespace":"kedo","code":"staff"}],"pages":[{"namespace":"global","code":"kedo"}]}},"__createdAt":"2024-03-29T11:29:50.095502568Z","__createdBy":"d78f4b2f-13a2-4903-aeeb-fdb72d5b9d0c","__updatedAt":"2024-04-19T08:51:03.586092224Z","__updatedBy":"54584d91-0741-4200-a803-b00376614edb","__deletedAt":null}
