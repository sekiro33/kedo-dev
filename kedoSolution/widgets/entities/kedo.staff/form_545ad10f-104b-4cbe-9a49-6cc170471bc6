{"__id":"018e89f9-227e-7acf-9a02-6328daa3942c","namespace":"kedo.staff","code":"form_545ad10f-104b-4cbe-9a49-6cc170471bc6","__name":"Проверить документы для трудоустройства","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":3,"hidden":true,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"0664b29d-482b-4808-b88e-a2f4ca95ae60","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"systemFunctions":{"validate":{"kind":"Function","name":"validation","type":"client"}},"formType":"task-form","formGroup":{"path":["context"]}},"content":{"[headerCustomization]":[],"[footer]":[{"id":"31979bac-00bd-4123-a901-9d14190c8dde","descriptor":"buttons-panel","values":{"buttons":{"path":["actionButtons"]}}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"dcdd3e4e-0c49-483b-87c2-8c782a8890f0","descriptor":"dynamic-form","values":{"fields":{"path":["fields"]},"form":{"path":["context"]}}},{"id":"2ce61962-229e-47f1-a005-693440e8dd27","descriptor":"elma-info-block","values":{"__hidden":{"path":["istruetypedocument"]},"typeEnum":[{"code":"danger","name":"Ошибка (красный)"}],"__baseURL":"","__relativeURL":"","__isConstValues":[],"text":"Приложены документы с неккоректными форматами","__outlet":"","__renderContentAsync":false,"__renderContentOnDemand":false},"content":{"":[]}},{"id":"a7d303f6-114f-4a0d-ba3f-11dcca6e3b70","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"showDisplayName":true,"required":true,"hideEmpty":false,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"labor_contract_onchange","type":"client"},"control":{"path":["context","file_labor_contract"]},"tooltip":"Приложите файл в формате .docx или .xlsx","__readOnly":null}},{"id":"8a789ce4-101b-4d44-8e5b-74dae82d77af","descriptor":"dynamic-form-row","values":{"__readOnly":null,"onChangeValue":{"kind":"Function","name":"admission_order_onchange","type":"client"},"control":{"path":["context","file_admission_order"]},"__hidden":{"path":["context","create_admission_order"],"modifier":"not"},"hideEmpty":false,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"tooltip":"Приложите файл в формате .docx или .xlsx","required":{"path":["context","create_admission_order"]}}},{"id":"fd72d795-d1f3-46ae-a3f8-f5eeefa93e36","descriptor":"dynamic-form-row","values":{"tooltip":"Приложите файл в формате .docx или .xlsx","__hidden":{"path":["job_application_required"],"modifier":"not"},"__outlet":"","required":{"path":["job_application_required"]},"__relativeURL":"","control":{"path":["context","file_job_application"]},"hideEmpty":false,"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"job_application_onchange","type":"client"},"__isConstValues":[],"showDisplayName":true,"__baseURL":""}},{"id":"12f8e4eb-1a6a-40ed-a695-e5106ba1dd5a","descriptor":"dynamic-form-row","values":{"tooltip":"Приложите файл в формате .docx или .xlsx","__hidden":{"path":["context","create_app_labor"],"modifier":"not"},"onChangeValue":{"kind":"Function","name":"information_about_labor_activity_onchange","type":"client"},"__isConstValues":[],"bindingMode":false,"displayName":"Файл заявления о ПСТД","showDisplayName":true,"control":{"path":["context","file_information_about_labor_activity"]},"required":{"path":["context","create_app_labor"]},"hideEmpty":false,"__readOnly":null}},{"id":"1dbf2092-327a-4a14-a61a-49c774907ab5","descriptor":"dynamic-form-row","values":{"__relativeURL":"","showDisplayName":true,"__baseURL":"","hideEmpty":false,"bindingMode":false,"displayName":"Файл согласия на обработку ПДн","__isConstValues":[],"control":{"path":["context","consent_processing_personal_data_file"]},"__hidden":{"path":["context","need_consent_processing_personal_data"],"modifier":"not"},"required":{"path":["context","need_consent_processing_personal_data"]},"tooltip":"Приложите файл в формате .docx или .xlsx","__readOnly":null,"__outlet":"","onChangeValue":{"kind":"Function","name":"consent_processing_personal_data_onchange","type":"client"}}},{"id":"7ddbcfce-eb3e-4f94-98a4-4401899b5be1","descriptor":"dynamic-form-row","values":{"__outlet":"","bindingMode":false,"displayName":"Документы трудойстройства","__isConstValues":[],"showDisplayName":true,"__renderContentOnDemand":false,"control":{"path":["context","other_docs"]},"required":false,"__baseURL":"","tooltip":"Приложите файлы в формате .docx или .xlsx","onChangeValue":{"kind":"Function","name":"other_documents_table_onchange","type":"client"},"hideEmpty":false,"__readOnly":null,"__relativeURL":"","widgetCustomSettings":{"kind":"BlobObject","settings":{"columnsView":{"doc_file":{"key":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":true,"compression":false,"verticalAlign":"middle","backgroundColor":""},"doc_type":{"key":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":true,"compression":false,"verticalAlign":"middle","backgroundColor":""},"view_file":{"key":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":true,"required":false,"compression":false,"verticalAlign":"middle","backgroundColor":""}},"allowDeleteRows":true}}}},{"id":"3c01db7b-4951-4433-9e8e-6af9b93fe753","descriptor":"dynamic-form-row","values":{"__baseURL":"","hideEmpty":false,"__isConstValues":[],"__readOnly":null,"__relativeURL":"","onChangeValue":{"kind":"Function","name":"additional_agreement_table_onchange","type":"client"},"control":{"path":["context","additional_contract_table"]},"tooltip":"Приложите файлы в формате .docx или .xlsx","__outlet":"","widgetCustomSettings":{"kind":"BlobObject","settings":{"columnsView":{"file":{"key":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":true,"compression":false,"verticalAlign":"middle","backgroundColor":""},"name":{"key":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":true,"tensile":false,"readonly":false,"required":false,"compression":false,"verticalAlign":"middle","backgroundColor":""},"view_file":{"key":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":true,"required":false,"compression":false,"verticalAlign":"middle","backgroundColor":""}},"allowDeleteRows":true}},"required":false,"__classes":"custom-table","bindingMode":false,"showDisplayName":true,"__renderContentOnDemand":false}}]}}],"[sidebar]":[{"id":"39d7757a-529f-4526-98f3-fddc66becf85","descriptor":"sidebar-widget","content":{"":[{"id":"abe4b782-6e2d-49cc-a57e-81b636422ee5","descriptor":"target-widget","values":{"context":{"path":["context"]}}}]}},{"id":"231b371a-64ae-4b61-8014-cba6da318ac9","descriptor":"sidebar-widget","content":{"":[{"id":"5e39b91d-aea4-467e-862f-0f8766eb44df","descriptor":"linked-item","values":{"context":{"path":["context"]}}}]}},{"id":"a4469de0-d7f3-11ec-9d64-0242ac120002","descriptor":"sidebar-widget","content":{"":[{"id":"3ead7c41-6dfa-4144-80da-2bfb5f0ccf59","descriptor":"item-reminder","values":{"formGroup":{"path":["context"]}}}]}},{"id":"56d1d0e8-aa83-4cdd-ae43-294b26ad4d04","descriptor":"sidebar-widget","content":{"":[{"id":"e1525e34-14ba-456b-b703-f407945c01e0","descriptor":"item-tasks","descriptorVersion":4,"values":{"formGroup":{"path":["context"]},"itemModel":{"path":["itemModel"]}}}]}},{"id":"eef018f2-1d3a-4600-a19d-791733b28b5e","descriptor":"sidebar-widget","content":{"":[{"id":"e0a17dec-603a-461a-becf-861637630584","descriptor":"messages-target","values":{"target":{"path":["target"]}}}]}}],"[formInfoPanel]":[{"id":"997da745-acbc-4d20-9b67-a8b1335697bd","descriptor":"validation-info-block","values":{"__validateResult":{"path":["context","__validateResult"]}}}],"[headerControls]":[{"id":"475aa008-aaff-402f-8de2-408bae1f1928","descriptor":"task-percent-widget","values":{"task":{"path":["task"]}}},{"id":"702d9c59-77ae-4dd5-b71a-a5fe7b58858f","descriptor":"extension-zone-toolbar-widget","values":{"item":{"path":["__itemRef"]}}},{"id":"f7b11c79-4267-4f5b-a002-dd629d549682","descriptor":"process-item-map","values":{"task":{"path":["task"]},"skipRulesCheck":true}},{"id":"ff2500ee-6573-49cd-a9e8-2d5c93350f26","descriptor":"button","values":{"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"menu_vertical","view":"icon","label":"bpm.tasks.item@menu","action":{"path":["menuAction"]}}}]}},"fields":[{"code":"additional_agreement_temp_table","type":"TABLE","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"fields":[{"code":"__count","data":null,"type":"FLOAT","view":{"data":{"additionalType":"integer"},"name":"Количество элементов","system":true},"array":false,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"__index","data":{},"type":"FLOAT","view":{"data":{"additionalType":"integer"},"name":"№","disabled":true},"array":false,"single":true,"deleted":false,"formula":"","indexed":true,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"file","data":{},"type":"FILE","view":{"data":{},"name":"Файл"},"array":true,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"view_file","data":{},"type":"FILE","view":{"data":{},"name":"Просмотр загруженного файла"},"array":true,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"name","data":{},"type":"STRING","view":{"data":{"additionalType":"string"},"name":"Название файла"},"array":false,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false}],"result":{"file":{"kind":"none","label":"","formula":"sum"},"name":{"kind":"none","label":"","formula":"sum"},"__count":{"kind":"none","label":"","formula":"sum"},"__index":{"kind":"none","label":"","formula":"sum"},"view_file":{"kind":"none","label":"","formula":"sum"}}},"view":{"name":"Дополнительные соглашения (таблица-посредник)","data":{"allowDeleteRows":false,"collapseNestedHeaders":false,"columnsView":{"file":{"align":"left","backgroundColor":"","compression":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"hidden":false,"key":false,"readonly":false,"required":false,"tensile":false,"verticalAlign":"middle","width":175},"name":{"align":"left","compression":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"hidden":false,"readonly":false,"required":false,"tensile":false,"verticalAlign":"middle","width":175},"view_file":{"align":"left","backgroundColor":"","compression":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"hidden":false,"key":false,"readonly":false,"required":false,"tensile":false,"verticalAlign":"middle","width":175}},"footerHidden":false,"groupingSettings":{"code":"","kind":"None","sort":"asc"},"headerHidden":false,"maxRowCount":0,"relativeWidth":false,"showOrderNumbers":false,"viewTemplate":"Элементов: {$__count}","viewVariant":"table"}}},{"code":"additional_agreement_table_string","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"additional_agreement_table_string","data":{"additionalType":"string"}}},{"code":"other_docs_table_string","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"other_docs_table_string","data":{"additionalType":"string"}}},{"code":"job_application_required","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Требуется заявление на трудоустройство?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"istruetypedocument","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":true,"calcByFormula":false,"formula":"","data":{},"view":{"name":"isTrueTypeDocument","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}}],"fieldVisibilityConditions":{"istruetypedocument":{"enabled":false,"conditions":[]},"other_docs_table_string":{"enabled":false,"conditions":[]},"job_application_required":{"enabled":false,"conditions":[]},"additional_agreement_temp_table":{"enabled":false,"conditions":[]},"additional_agreement_table_string":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"/* Client scripts module */\n\ndeclare const console: any;\ndeclare const document: any;\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    // Проверка - требуется ли заявление на трудоустройство?\n    // Если заявление уже создано и подписано, прикреплять не нужно.\n    const job_application = !!Context.data.job_application;\n    ViewContext.data.job_application_required = !job_application \u0026\u0026 Context.data.app_employment;\n    ViewContext.data.istruetypedocument = true;\n}\n\nasync function additional_agreement_table_onchange(): Promise\u003cvoid\u003e {\n    await chechTypeDocument()\n    const additional_agreement_table = Context.data.additional_contract_table!;\n\n    for (let i = additional_agreement_table.length - 1; i \u003e= 0; i--) {\n        const row = additional_agreement_table[i];\n\n        if (row.file \u0026\u0026 !row.view_file) {\n            const file = await row.file.fetch();\n            const new_file = await Context.fields.additional_contract_table.fields.file.createFromLink(file.data.__name, await file.getDownloadUrl());\n            row.view_file = new_file;\n        }\n\n        if (!row.file \u0026\u0026 row.view_file) {\n            row.view_file = undefined!;\n        }\n    }\n\n    if (JSON.stringify((Context.data.additional_contract_table as any).json()) !== ViewContext.data.additional_agreement_table_string) {\n        ViewContext.data.additional_agreement_table_string = JSON.stringify((Context.data.additional_contract_table as any).json());\n        Context.data.additional_contract_table = Context.data.additional_contract_table;\n    }\n    \n}\n\nasync function other_documents_table_onchange(): Promise\u003cvoid\u003e {\n    await chechTypeDocument()\n    const other_documents_tabel = Context.data.other_docs!;\n\n    for (let i = other_documents_tabel.length - 1; i \u003e= 0; i--) {\n        const row = other_documents_tabel[i];\n\n        if (row.doc_file \u0026\u0026 !row.view_file) {\n            const file = await row.doc_file.fetch();\n            const new_file = await Context.fields.other_docs.fields.doc_file.createFromLink(file.data.__name, await file.getDownloadUrl());\n            row.view_file = new_file;\n        }\n\n        if (!row.doc_file \u0026\u0026 row.view_file) {\n            row.view_file = undefined!;\n        }\n    }\n\n    if (JSON.stringify((Context.data.other_docs as any).json()) !== ViewContext.data.other_docs_table_string) {\n        ViewContext.data.other_docs_table_string = JSON.stringify((Context.data.other_docs as any).json());\n        Context.data.other_docs = Context.data.other_docs;\n    }\n    \n}\n\nfunction get_file_extension(filename: string) {\n    const ext = /^.+\\.([^.]+)$/.exec(filename);\n    return ext == null ? \"\" : ext[1];\n}\n\nasync function labor_contract_onchange(): Promise\u003cvoid\u003e {\n    if (Context.data.file_labor_contract) {\n        const file = await Context.data.file_labor_contract.fetch();\n        const ext = get_file_extension(file.data.__name);\n\n        if (ext == \"\" || ext == 'pdf') {\n            Context.data.file_labor_contract = undefined;\n        }\n    }\n    await chechTypeDocument()\n}\n\nasync function admission_order_onchange(): Promise\u003cvoid\u003e {\n    if (Context.data.file_admission_order) {\n        const file = await Context.data.file_admission_order.fetch();\n        const ext = get_file_extension(file.data.__name);\n\n        if (ext == \"\" || ext == 'pdf') {\n            Context.data.file_admission_order = undefined;\n        }\n    }\n    await chechTypeDocument()\n}\n\nasync function job_application_onchange(): Promise\u003cvoid\u003e {\n    if (Context.data.file_job_application) {\n        const file = await Context.data.file_job_application.fetch();\n        const ext = get_file_extension(file.data.__name);\n\n        if (ext == \"\" || ext == 'pdf') {\n            Context.data.file_job_application = undefined;\n        }\n    }\n    await chechTypeDocument()\n}\n\nasync function information_about_labor_activity_onchange(): Promise\u003cvoid\u003e {\n    if (Context.data.file_information_about_labor_activity) {\n        const file = await Context.data.file_information_about_labor_activity.fetch();\n        const ext = get_file_extension(file.data.__name);\n\n        if (ext == \"\" || ext == 'pdf') {\n            Context.data.file_information_about_labor_activity = undefined;\n        }\n    }\n    await chechTypeDocument()\n}\n\nasync function consent_processing_personal_data_onchange(): Promise\u003cvoid\u003e {\n    if (Context.data.consent_processing_personal_data_file) {\n        const file = await Context.data.consent_processing_personal_data_file.fetch();\n        const ext = get_file_extension(file.data.__name);\n\n        if (ext == \"\" || ext == 'pdf') {\n            Context.data.consent_processing_personal_data_file = undefined;\n        }\n    }\n    await chechTypeDocument()\n}\n\nasync function validation(): Promise\u003cValidationResult\u003e {\n    const result = new ValidationResult();\n    const checkFileLoading = document.querySelector('.file-loading');\n    if (checkFileLoading) {\n        result.addMessage('Дождитесь окончания загрузки файла(-ов)')\n        return result;\n    }\n    if (ViewContext.data.istruetypedocument == false) {\n        result.addMessage('Приложены документы с неккоректными форматами')\n        return result;\n    }\n    return result;\n}\n\n\n\nasync function chechTypeDocument(): Promise\u003cvoid\u003e {\n    if (Context.data.file_labor_contract) {\n        const fileName = await Context.data.file_labor_contract.fetch();\n        if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n            ViewContext.data.istruetypedocument = true;\n        } else {\n            ViewContext.data.istruetypedocument = false;\n            return\n        }\n    }\n    if (Context.data.file_admission_order) {\n        const fileName = await Context.data.file_admission_order.fetch();\n        if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n            ViewContext.data.istruetypedocument = true;\n        } else {\n            ViewContext.data.istruetypedocument = false;\n            return\n        }\n    }\n    if (Context.data.file_information_about_labor_activity) {\n        const fileName = await Context.data.file_information_about_labor_activity.fetch();\n        if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n            ViewContext.data.istruetypedocument = true;\n        } else {\n            ViewContext.data.istruetypedocument = false;\n            return\n        }\n    }\n    if (Context.data.file_job_application) {\n        const fileName = await Context.data.file_job_application.fetch();\n        if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n            ViewContext.data.istruetypedocument = true;\n        } else {\n            ViewContext.data.istruetypedocument = false;\n            return\n        }\n    }\n    if (Context.data.consent_processing_personal_data_file) {\n        const fileName = await Context.data.consent_processing_personal_data_file.fetch();\n        if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n            ViewContext.data.istruetypedocument = true;\n        } else {\n            ViewContext.data.istruetypedocument = false;\n            return\n        }\n    }\n    await chechTypeDocumentTable()\n    console.log(ViewContext.data.istruetypedocument)\n}\n\nasync function chechTypeDocumentTable(): Promise\u003cvoid\u003e {\n    if (Context.data.other_docs) {\n        for (let row of Context.data.other_docs) {\n            const fileTableFileName = await row.doc_file.fetch();\n            if (fileTableFileName.data.__name.includes('.docx') || fileTableFileName.data.__name.includes('.DOCX') || fileTableFileName.data.__name.includes('.xlsx') || fileTableFileName.data.__name.includes('.XLSX')) {\n                ViewContext.data.istruetypedocument = true;\n            } else {\n                ViewContext.data.istruetypedocument = false;\n                return\n            }\n        }\n    }\n\n    if (Context.data.additional_contract_table) {\n        for (let row of Context.data.additional_contract_table) {\n            const fileTableFileName = await row.file.fetch();\n            if (fileTableFileName.data.__name.includes('.docx') || fileTableFileName.data.__name.includes('.DOCX') || fileTableFileName.data.__name.includes('.xlsx') || fileTableFileName.data.__name.includes('.XLSX')) {\n                ViewContext.data.istruetypedocument = true;\n            } else {\n                ViewContext.data.istruetypedocument = false;\n                return\n            }\n        }\n    }\n}","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{},"dataFieldCode":"context"},"dataNamespace":"kedo.staff","dataCode":"_process_toolbar_button","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        async function onInit() {\n            const job_application = !!Context.data.job_application;\n            ViewContext.data.job_application_required = !job_application \u0026\u0026 Context.data.app_employment;\n            ViewContext.data.istruetypedocument = true;\n        }\n        async function additional_agreement_table_onchange() {\n            await chechTypeDocument();\n            const additional_agreement_table = Context.data.additional_contract_table;\n            for (let i = additional_agreement_table.length - 1; i \u003e= 0; i--) {\n                const row = additional_agreement_table[i];\n                if (row.file \u0026\u0026 !row.view_file) {\n                    const file = await row.file.fetch();\n                    const new_file = await Context.fields.additional_contract_table.fields.file.createFromLink(file.data.__name, await file.getDownloadUrl());\n                    row.view_file = new_file;\n                }\n                if (!row.file \u0026\u0026 row.view_file) {\n                    row.view_file = undefined;\n                }\n            }\n            if (JSON.stringify(Context.data.additional_contract_table.json()) !== ViewContext.data.additional_agreement_table_string) {\n                ViewContext.data.additional_agreement_table_string = JSON.stringify(Context.data.additional_contract_table.json());\n                Context.data.additional_contract_table = Context.data.additional_contract_table;\n            }\n        }\n        async function other_documents_table_onchange() {\n            await chechTypeDocument();\n            const other_documents_tabel = Context.data.other_docs;\n            for (let i = other_documents_tabel.length - 1; i \u003e= 0; i--) {\n                const row = other_documents_tabel[i];\n                if (row.doc_file \u0026\u0026 !row.view_file) {\n                    const file = await row.doc_file.fetch();\n                    const new_file = await Context.fields.other_docs.fields.doc_file.createFromLink(file.data.__name, await file.getDownloadUrl());\n                    row.view_file = new_file;\n                }\n                if (!row.doc_file \u0026\u0026 row.view_file) {\n                    row.view_file = undefined;\n                }\n            }\n            if (JSON.stringify(Context.data.other_docs.json()) !== ViewContext.data.other_docs_table_string) {\n                ViewContext.data.other_docs_table_string = JSON.stringify(Context.data.other_docs.json());\n                Context.data.other_docs = Context.data.other_docs;\n            }\n        }\n        function get_file_extension(filename) {\n            const ext = /^.+\\.([^.]+)$/.exec(filename);\n            return ext == null ? \"\" : ext[1];\n        }\n        async function labor_contract_onchange() {\n            if (Context.data.file_labor_contract) {\n                const file = await Context.data.file_labor_contract.fetch();\n                const ext = get_file_extension(file.data.__name);\n                if (ext == \"\" || ext == 'pdf') {\n                    Context.data.file_labor_contract = undefined;\n                }\n            }\n            await chechTypeDocument();\n        }\n        async function admission_order_onchange() {\n            if (Context.data.file_admission_order) {\n                const file = await Context.data.file_admission_order.fetch();\n                const ext = get_file_extension(file.data.__name);\n                if (ext == \"\" || ext == 'pdf') {\n                    Context.data.file_admission_order = undefined;\n                }\n            }\n            await chechTypeDocument();\n        }\n        async function job_application_onchange() {\n            if (Context.data.file_job_application) {\n                const file = await Context.data.file_job_application.fetch();\n                const ext = get_file_extension(file.data.__name);\n                if (ext == \"\" || ext == 'pdf') {\n                    Context.data.file_job_application = undefined;\n                }\n            }\n            await chechTypeDocument();\n        }\n        async function information_about_labor_activity_onchange() {\n            if (Context.data.file_information_about_labor_activity) {\n                const file = await Context.data.file_information_about_labor_activity.fetch();\n                const ext = get_file_extension(file.data.__name);\n                if (ext == \"\" || ext == 'pdf') {\n                    Context.data.file_information_about_labor_activity = undefined;\n                }\n            }\n            await chechTypeDocument();\n        }\n        async function consent_processing_personal_data_onchange() {\n            if (Context.data.consent_processing_personal_data_file) {\n                const file = await Context.data.consent_processing_personal_data_file.fetch();\n                const ext = get_file_extension(file.data.__name);\n                if (ext == \"\" || ext == 'pdf') {\n                    Context.data.consent_processing_personal_data_file = undefined;\n                }\n            }\n            await chechTypeDocument();\n        }\n        async function validation() {\n            const result = new ValidationResult();\n            const checkFileLoading = document.querySelector('.file-loading');\n            if (checkFileLoading) {\n                result.addMessage('Дождитесь окончания загрузки файла(-ов)');\n                return result;\n            }\n            if (ViewContext.data.istruetypedocument == false) {\n                result.addMessage('Приложены документы с неккоректными форматами');\n                return result;\n            }\n            return result;\n        }\n        async function chechTypeDocument() {\n            if (Context.data.file_labor_contract) {\n                const fileName = await Context.data.file_labor_contract.fetch();\n                if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n                    ViewContext.data.istruetypedocument = true;\n                }\n                else {\n                    ViewContext.data.istruetypedocument = false;\n                    return;\n                }\n            }\n            if (Context.data.file_admission_order) {\n                const fileName = await Context.data.file_admission_order.fetch();\n                if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n                    ViewContext.data.istruetypedocument = true;\n                }\n                else {\n                    ViewContext.data.istruetypedocument = false;\n                    return;\n                }\n            }\n            if (Context.data.file_information_about_labor_activity) {\n                const fileName = await Context.data.file_information_about_labor_activity.fetch();\n                if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n                    ViewContext.data.istruetypedocument = true;\n                }\n                else {\n                    ViewContext.data.istruetypedocument = false;\n                    return;\n                }\n            }\n            if (Context.data.file_job_application) {\n                const fileName = await Context.data.file_job_application.fetch();\n                if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n                    ViewContext.data.istruetypedocument = true;\n                }\n                else {\n                    ViewContext.data.istruetypedocument = false;\n                    return;\n                }\n            }\n            if (Context.data.consent_processing_personal_data_file) {\n                const fileName = await Context.data.consent_processing_personal_data_file.fetch();\n                if (fileName.data.__name.includes('.docx') || fileName.data.__name.includes('.DOCX') || fileName.data.__name.includes('.xlsx') || fileName.data.__name.includes('.XLSX')) {\n                    ViewContext.data.istruetypedocument = true;\n                }\n                else {\n                    ViewContext.data.istruetypedocument = false;\n                    return;\n                }\n            }\n            await chechTypeDocumentTable();\n            console.log(ViewContext.data.istruetypedocument);\n        }\n        async function chechTypeDocumentTable() {\n            if (Context.data.other_docs) {\n                for (let row of Context.data.other_docs) {\n                    const fileTableFileName = await row.doc_file.fetch();\n                    if (fileTableFileName.data.__name.includes('.docx') || fileTableFileName.data.__name.includes('.DOCX') || fileTableFileName.data.__name.includes('.xlsx') || fileTableFileName.data.__name.includes('.XLSX')) {\n                        ViewContext.data.istruetypedocument = true;\n                    }\n                    else {\n                        ViewContext.data.istruetypedocument = false;\n                        return;\n                    }\n                }\n            }\n            if (Context.data.additional_contract_table) {\n                for (let row of Context.data.additional_contract_table) {\n                    const fileTableFileName = await row.file.fetch();\n                    if (fileTableFileName.data.__name.includes('.docx') || fileTableFileName.data.__name.includes('.DOCX') || fileTableFileName.data.__name.includes('.xlsx') || fileTableFileName.data.__name.includes('.XLSX')) {\n                        ViewContext.data.istruetypedocument = true;\n                    }\n                    else {\n                        ViewContext.data.istruetypedocument = false;\n                        return;\n                    }\n                }\n            }\n        }\n        return {\n            onInit,\n            additional_agreement_table_onchange,\n            other_documents_table_onchange,\n            get_file_extension,\n            labor_contract_onchange,\n            admission_order_onchange,\n            job_application_onchange,\n            information_about_labor_activity_onchange,\n            consent_processing_personal_data_onchange,\n            validation,\n            chechTypeDocument,\n            chechTypeDocumentTable\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"additional_agreement_table_onchange","parameters":[],"type":"[object Object]"},{"name":"other_documents_table_onchange","parameters":[],"type":"[object Object]"},{"name":"get_file_extension","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"labor_contract_onchange","parameters":[],"type":"[object Object]"},{"name":"admission_order_onchange","parameters":[],"type":"[object Object]"},{"name":"job_application_onchange","parameters":[],"type":"[object Object]"},{"name":"information_about_labor_activity_onchange","parameters":[],"type":"[object Object]"},{"name":"consent_processing_personal_data_onchange","parameters":[],"type":"[object Object]"},{"name":"validation","parameters":[],"type":"[object Object]"},{"name":"chechTypeDocument","parameters":[],"type":"[object Object]"},{"name":"chechTypeDocumentTable","parameters":[],"type":"[object Object]"}],"clientDependencies":{"applications":[],"collections":[],"pages":[]}},"__createdAt":"2024-03-29T11:29:49.690572155Z","__createdBy":"d78f4b2f-13a2-4903-aeeb-fdb72d5b9d0c","__updatedAt":"2024-04-19T08:47:02.961516804Z","__updatedBy":"54584d91-0741-4200-a803-b00376614edb","__deletedAt":null}
