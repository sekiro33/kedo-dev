{"__id":"018c8758-2e04-7c5e-adf7-dbde127a66da","namespace":"kedo.staff","code":"form_9ebcaec3-964f-4710-8ee2-544ff3673736","__name":"Проверить заполненность полей сотрудника","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":4,"hidden":true,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"449aae3a-fd97-491a-9778-b01002a9a08c","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"formType":"task-form","formGroup":{"path":["context"]},"systemFunctions":{"validate":{"kind":"Function","name":"validation","type":"client"}}},"content":{"[sidebar]":[{"id":"39d7757a-529f-4526-98f3-fddc66becf85","descriptor":"sidebar-widget","content":{"":[{"id":"abe4b782-6e2d-49cc-a57e-81b636422ee5","descriptor":"target-widget","values":{"context":{"path":["context"]}}}]}},{"id":"231b371a-64ae-4b61-8014-cba6da318ac9","descriptor":"sidebar-widget","content":{"":[{"id":"5e39b91d-aea4-467e-862f-0f8766eb44df","descriptor":"linked-item","values":{"context":{"path":["context"]}}}]}},{"id":"a4469de0-d7f3-11ec-9d64-0242ac120002","descriptor":"sidebar-widget","content":{"":[{"id":"3ead7c41-6dfa-4144-80da-2bfb5f0ccf59","descriptor":"item-reminder","values":{"formGroup":{"path":["context"]}}}]}},{"id":"56d1d0e8-aa83-4cdd-ae43-294b26ad4d04","descriptor":"sidebar-widget","content":{"":[{"id":"e1525e34-14ba-456b-b703-f407945c01e0","descriptor":"item-tasks","descriptorVersion":4,"values":{"formGroup":{"path":["context"]}}}]}},{"id":"eef018f2-1d3a-4600-a19d-791733b28b5e","descriptor":"sidebar-widget","content":{"":[{"id":"e0a17dec-603a-461a-becf-861637630584","descriptor":"messages-target","values":{"target":{"path":["target"]}}}]}}],"[formInfoPanel]":[{"id":"8d255e0c-cf25-4192-b62c-e42e07d95b4e","descriptor":"validation-info-block","values":{"__validateResult":{"path":["context","__validateResult"]}}}],"[headerControls]":[{"id":"475aa008-aaff-402f-8de2-408bae1f1928","descriptor":"task-percent-widget","values":{"task":{"path":["task"]}}},{"id":"702d9c59-77ae-4dd5-b71a-a5fe7b58858f","descriptor":"extension-zone-toolbar-widget","values":{"item":{"path":["__itemRef"]}}},{"id":"f7b11c79-4267-4f5b-a002-dd629d549682","descriptor":"process-item-map","values":{"task":{"path":["task"]},"skipRulesCheck":true}},{"id":"ff2500ee-6573-49cd-a9e8-2d5c93350f26","descriptor":"button","values":{"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"menu_vertical","view":"icon","label":"bpm.tasks.item@menu","action":{"path":["menuAction"]}}}],"[headerCustomization]":[],"[footer]":[{"id":"31979bac-00bd-4123-a901-9d14190c8dde","descriptor":"buttons-panel","values":{"buttons":{"path":["actionButtons"]}}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"54694523-8726-48dd-b767-70a176392c2a","descriptor":"kedo@custom_info","descriptorVersion":1,"values":{"info_type":[{"code":"warning","name":"Предупреждение"}],"info_string":{"path":["error_text"]},"__isConstValues":[],"__hidden":{"path":["show_error"],"modifier":"not"},"__styles":"width: 100%; margin-bottom: 10px"}},{"id":"3268f74f-3c8a-4f96-a17f-c0fb303f5042","descriptor":"groupbox","values":{"__renderContentAsync":false,"title":"Основная информация","__styles":"margin-bottom: 10px","expanded":true,"styleEnum":[{"code":"default","name":"Default"}],"collapsible":false,"__isConstValues":[]},"content":{"":[{"id":"749b651b-0723-4f31-b0fb-4e922cc2137f","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"showDisplayName":true,"control":{"path":["surname"]},"tooltip":null,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"required":true}},{"id":"add935d1-7ab6-4b7f-94d0-065333bc3d51","descriptor":"dynamic-form-row","values":{"required":true,"__isConstValues":[],"showDisplayName":true,"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"control":{"path":["name"]},"tooltip":null,"hideEmpty":false}},{"id":"59d93dbb-b9c9-4d2a-856a-4f660d00581e","descriptor":"dynamic-form-row","values":{"control":{"path":["middlename"]},"tooltip":null,"required":false,"__readOnly":null,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"showDisplayName":true,"hideEmpty":false,"bindingMode":false,"__isConstValues":[]}},{"id":"13cf3b5e-6910-4d69-a0ce-4145dc8ea958","descriptor":"dynamic-form-row","values":{"onChangeValue":{"kind":"Function","name":"check","type":"client"},"__isConstValues":[],"showDisplayName":true,"control":{"path":["phone"]},"tooltip":null,"__readOnly":null,"bindingMode":false,"required":true,"hideEmpty":false}},{"id":"d0de094e-14e9-45ec-ad1f-e1aeb0199bdb","descriptor":"dynamic-form-row","values":{"required":true,"hideEmpty":false,"bindingMode":false,"__isConstValues":[],"control":{"path":["email"]},"tooltip":null,"showDisplayName":true,"__readOnly":null,"onChangeValue":{"kind":"Function","name":"check","type":"client"}}}]}},{"id":"875b67f4-ca2e-4f0a-8317-5254b5cfa6c0","descriptor":"groupbox","values":{"collapsible":false,"__isConstValues":[],"__renderContentAsync":false,"title":"Информация о занимаемой должности","__styles":"margin-bottom: 10px","expanded":true,"styleEnum":[{"code":"default","name":"Default"}]},"content":{"":[{"id":"1220c41f-6a4d-4edd-b666-ed789f4c7217","descriptor":"dynamic-form-row","values":{"onChangeValue":{"kind":"Function","name":"change_position","type":"client"},"showCreateItem":false,"required":true,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["position"]},"tooltip":null}},{"id":"eaea1519-9c8c-4229-83b7-e759b2ac972e","descriptor":"dynamic-form-row","values":{"hideEmpty":true,"__readOnly":true,"__isConstValues":[],"showDisplayName":true,"control":{"path":["organization"]},"required":false,"showCreateItem":false,"tooltip":null,"bindingMode":false}},{"id":"5fc00634-2b6d-4108-8c2b-ebdb683c6647","descriptor":"dynamic-form-row","values":{"required":false,"hideEmpty":true,"showCreateItem":false,"control":{"path":["structural_subdivision"]},"tooltip":null,"__isConstValues":[],"showDisplayName":true,"__readOnly":true,"bindingMode":false}},{"id":"9463e38a-05f4-48c4-85f2-14fc6fdf0b01","descriptor":"dynamic-form-row","values":{"control":{"path":["type_employment"]},"tooltip":null,"required":true,"__isConstValues":[],"hideEmpty":false,"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"showDisplayName":true}},{"id":"172605d0-b0ed-4c56-8870-6d959e8d4abe","descriptor":"dynamic-form-row","values":{"onChangeValue":{"kind":"Function","name":"check","type":"client"},"showDisplayName":true,"__readOnly":null,"bindingMode":false,"displayName":"Дата приема на позицию","__isConstValues":[],"control":{"path":["work_start"]},"tooltip":null,"required":true,"hideEmpty":false}},{"id":"72f677d5-cccc-4c27-b451-cd67516b951e","descriptor":"dynamic-form-row","values":{"required":true,"hideEmpty":false,"__isConstValues":[],"control":{"path":["admission_date_organization"]},"tooltip":null,"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"showDisplayName":true}}]}},{"id":"1822093e-71d2-471b-8a56-b29eb605e368","descriptor":"groupbox","values":{"__isConstValues":[],"__renderContentAsync":false,"title":"Персональные данные сотрудника","__hidden":{"path":["personal_data_employee"]},"expanded":true,"styleEnum":[{"code":"default","name":"Default"}],"collapsible":false},"content":{"":[{"id":"bab077ec-9484-4bbf-b2be-283990d6712b","descriptor":"tabset","values":{"__styles":"margin-top: 10px","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"558ebcb9-9d17-4617-8798-a4db1eb631c8","descriptor":"tab","values":{"__renderContentOnDemand":false,"title":"Паспортные данные","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"8e36b1b4-4e43-4e21-b4e7-548191436a89","descriptor":"modal-body","content":{"":[{"id":"b8e1a430-2604-45a1-9179-b986cbd0624f","descriptor":"dynamic-form-row","values":{"tooltip":null,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"__isConstValues":[],"control":{"path":["passport_series"]},"required":{"path":["personal_data_required"]},"showDisplayName":true}},{"id":"969bdaae-7a79-4676-a474-83eef9394724","descriptor":"dynamic-form-row","values":{"bindingMode":false,"showDisplayName":true,"tooltip":null,"required":{"path":["personal_data_required"]},"hideEmpty":false,"__readOnly":null,"control":{"path":["passport_number"]},"onChangeValue":{"kind":"Function","name":"check","type":"client"},"__isConstValues":[]}},{"id":"76bf25c6-de0a-4ed7-94d6-d06dcd0d4acb","descriptor":"dynamic-form-row","values":{"tooltip":null,"hideEmpty":false,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"__isConstValues":[],"control":{"path":["date_of_issue"]},"required":{"path":["personal_data_required"]},"__readOnly":null,"showDisplayName":true}},{"id":"2c73ead4-0eaa-4462-a8d2-bb89ce9ceaa4","descriptor":"dynamic-form-row","values":{"onChangeValue":{"kind":"Function","name":"check","type":"client"},"showDisplayName":true,"tooltip":null,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[],"control":{"path":["issued_by"]},"required":{"path":["personal_data_required"]}}},{"id":"21279044-d6b2-40e3-8884-09bc803778ba","descriptor":"dynamic-form-row","values":{"tooltip":null,"required":{"path":["personal_data_required"]},"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"showDisplayName":true,"control":{"path":["passport_department_code"]},"hideEmpty":false,"__readOnly":null,"__isConstValues":[]}}]}}]}},{"id":"0d5a6876-76d9-492f-9705-eb1a5ee757b7","descriptor":"tab","values":{"title":"Адрес регистрации","__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false},"content":{"":[{"id":"d71853f5-ae0c-4335-93d3-b76be0439823","descriptor":"modal-body","content":{"":[{"id":"d557f434-6fd2-4cb6-b1ab-e598cab8bc17","descriptor":"dynamic-form-row","values":{"control":{"path":["address"]},"tooltip":null,"required":{"path":["personal_data_required"]},"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"hideEmpty":false,"__isConstValues":[],"showDisplayName":true}}]}}]}},{"id":"fcd8cfd0-00cf-4bdc-8bcf-60b171a8698f","descriptor":"tab","values":{"__renderContentOnDemand":false,"title":"ИНН, СНИЛС","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"e44946fd-48ab-4bc2-b054-13d8f73307d2","descriptor":"modal-body","content":{"":[{"id":"8dc624c3-b877-46d6-8454-38eccae1adae","descriptor":"dynamic-form-row","values":{"control":{"path":["inn"]},"hideEmpty":false,"__readOnly":null,"showDisplayName":true,"tooltip":null,"required":{"path":["personal_data_required"]},"bindingMode":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"__isConstValues":[]}},{"id":"9e2e4710-9e66-4b3c-a3fc-83968270acbf","descriptor":"dynamic-form-row","values":{"tooltip":null,"hideEmpty":false,"onChangeValue":{"kind":"Function","name":"check","type":"client"},"__isConstValues":[],"showDisplayName":true,"control":{"path":["snils"]},"required":{"path":["personal_data_required"]},"__readOnly":null,"bindingMode":false}}]}}]}}]}}]}}]}}]}},"fields":[{"code":"show_error","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"show_error","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"error_text","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"error_text","data":{"additionalType":"string"}}},{"code":"error_stack","type":"JSON","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"error_stack","data":{}}},{"code":"surname","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Фамилия","data":{"additionalType":"string"}}},{"code":"name","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Имя","data":{"additionalType":"string"}}},{"code":"middlename","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Отчество","data":{"additionalType":"string"}}},{"code":"phone","type":"PHONE","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Телефон","data":{"type":"work"}}},{"code":"date_of_birth","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Дата рождения","data":{"additionalType":"date","defaultTimeType":"startOfDay","timeOptional":false}}},{"code":"passport_series","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Серия","data":{"additionalType":"string"}}},{"code":"passport_number","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Номер","data":{"additionalType":"string"}}},{"code":"passport_department_code","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Код подразделения","data":{"additionalType":"string"}}},{"code":"date_of_issue","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Дата выдачи","data":{"additionalType":"date","defaultTimeType":"startOfDay","timeOptional":false}}},{"code":"issued_by","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Кем выдан","data":{"additionalType":"string"}}},{"code":"snils","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"СНИЛС","data":{"additionalType":"string"}}},{"code":"inn","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"ИНН","data":{"additionalType":"string"}}},{"code":"position","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"position","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Позиция ШР","data":{}}},{"code":"organization","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"organization","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Организация","data":{}}},{"code":"structural_subdivision","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"structural_subdivision","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Подразделение","data":{}}},{"code":"work_start","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Дата приема на работу","data":{"additionalType":"date","defaultTimeType":"startOfDay","timeOptional":false}}},{"code":"address","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Адрес регистрации","data":{"additionalType":"string"}}},{"code":"email","type":"EMAIL","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Электронная почта","data":{"type":"work"}}},{"code":"modal","type":"JSON","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"modal","data":{}}},{"code":"personal_data_employee","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Личные данные вносит субъект","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"admission_date_organization","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Дата приёма в организацию","data":{"additionalType":"date","defaultTimeType":"startOfDay","timeOptional":false}}},{"code":"personal_data_required","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Обязательность персональных данных сотрудника","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"type_employment","type":"ENUM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"enumItems":[{"code":"main_workplace","name":"Основное место работы","checked":false},{"code":"internal_combination","name":"Внутреннее совместительство","checked":false},{"code":"external_combination","name":"Внешнее совместительство","checked":false}]},"view":{"name":"Вид занятости","data":{}}}],"fieldVisibilityConditions":{"inn":{"enabled":false,"conditions":[]},"name":{"enabled":false,"conditions":[]},"email":{"enabled":false,"conditions":[]},"modal":{"enabled":false,"conditions":[]},"phone":{"enabled":false,"conditions":[]},"snils":{"enabled":false,"conditions":[]},"address":{"enabled":false,"conditions":[]},"surname":{"enabled":false,"conditions":[]},"position":{"enabled":false,"conditions":[]},"issued_by":{"enabled":false,"conditions":[]},"error_text":{"enabled":false,"conditions":[]},"middlename":{"enabled":false,"conditions":[]},"show_error":{"enabled":false,"conditions":[]},"work_start":{"enabled":false,"conditions":[]},"error_stack":{"enabled":false,"conditions":[]},"organization":{"enabled":false,"conditions":[]},"date_of_birth":{"enabled":false,"conditions":[]},"date_of_issue":{"enabled":false,"conditions":[]},"passport_number":{"enabled":false,"conditions":[]},"passport_series":{"enabled":false,"conditions":[]},"type_employment":{"enabled":false,"conditions":[]},"elektronnaya_pochta":{"enabled":false,"conditions":[]},"personal_data_employee":{"enabled":false,"conditions":[]},"personal_data_required":{"enabled":false,"conditions":[]},"structural_subdivision":{"enabled":false,"conditions":[]},"passport_department_code":{"enabled":false,"conditions":[]},"admission_date_organization":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"/* Client scripts module */\n\nlet modal: ModalError;\n\nclass ModalError {\n    error_stack: string[];\n\n    wrapper_style: string;\n\n    constructor() {\n        this.error_stack = [];\n        this.wrapper_style = `display: flex; flex-direction: column; padding-top: 10px`;\n    }\n\n    add_text_error(text: string) {\n        this.error_stack.push(`\u003cli\u003e${text}\u003c/li\u003e`);\n    }\n\n    add_link_error(text: string, ref: RefItem) {\n        const link = `(p:item/${ref.namespace}/${ref.code}/${ref.id})`;\n        this.error_stack.push(`\u003cli\u003e\u003ca href=${link}\u003e${text}\u003c/a\u003e\u003c/li\u003e`);\n    }\n\n    show_errors() {\n        if (this.error_stack.length \u003e 0) {\n            this.error_stack = [...new Set(this.error_stack)]\n\n            ViewContext.data.show_error = true;\n            const errors = this.error_stack.join('');\n            ViewContext.data.error_text = `\u003cdiv style=\"${this.wrapper_style}\"\u003e\u003cul\u003e${errors}\u003c/ul\u003e\u003c/div\u003e`\n        }\n    }\n\n    hide_errors() {\n        ViewContext.data.show_error = false;\n        this.error_stack = [];\n        ViewContext.data.error_text = undefined;\n    }\n}\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    ViewContext.data.modal = new ModalError();\n    await set_fields();\n    await check();\n}\n\n// Заполнение полей на форме.\nasync function set_fields(): Promise\u003cvoid\u003e {\n    if (Context.data.staff) {\n        const staff = await Context.data.staff.fetch();\n\n        // ФИО.\n        ViewContext.data.name = staff.data.name;\n        ViewContext.data.surname = staff.data.surname;\n        ViewContext.data.middlename = staff.data.middlename;\n\n        // Основные данные.\n        ViewContext.data.date_of_birth = staff.data.date_of_birth;\n        if (staff.data.directory_of_regions) {\n            ViewContext.data.address = `${staff.data.directory_of_regions}, ${staff.data.city}, ${staff.data.street}, ${staff.data.home}`;\n        } else {\n            ViewContext.data.address = `${staff.data.city}, ${staff.data.street}, ${staff.data.home}`;\n        }\n        ViewContext.data.position = staff.data.position;\n        ViewContext.data.organization = staff.data.organization;\n        ViewContext.data.structural_subdivision = staff.data.structural_subdivision;\n        ViewContext.data.type_employment = staff.data.employment_type;\n        ViewContext.data.phone = staff.data.phone;\n        ViewContext.data.work_start = staff.data.work_start;\n        ViewContext.data.admission_date_organization = staff.data.admission_date_position;\n        ViewContext.data.email = staff.data.email;\n\n        // Паспортные данные.\n        ViewContext.data.passport_number = staff.data.passport_number;\n        ViewContext.data.passport_series = staff.data.passport_series;\n        ViewContext.data.passport_department_code = staff.data.passport_department_code;\n        ViewContext.data.issued_by = staff.data.issued_by;\n        ViewContext.data.date_of_issue = staff.data.date_of_issue;\n\n        // ИНН, СНИЛС.\n        ViewContext.data.inn = staff.data.inn;\n        ViewContext.data.snils = staff.data.snils;\n\n        ViewContext.data.personal_data_employee = staff.data.personal_data_employee;\n        ViewContext.data.personal_data_required = !staff.data.personal_data_employee;\n    }\n}\n\nasync function change_position(): Promise\u003cvoid\u003e {\n    if (ViewContext.data.position) {\n        const position = await ViewContext.data.position.fetch();\n        ViewContext.data.organization = position.data.organization;\n        ViewContext.data.structural_subdivision = position.data.subdivision;\n        await check();\n    }\n}\n\nasync function check(): Promise\u003cvoid\u003e {\n    modal = ViewContext.data.modal;\n    modal.hide_errors();\n\n    await check_staff();\n    await checkPhone();\n    await checkEmail();\n\n    modal.show_errors();\n}\n\nasync function check_staff(): Promise\u003cvoid\u003e {\n    if (!ViewContext.data.name) {\n        modal.add_text_error('У сотрудника не указано имя');\n    }\n\n    if (!ViewContext.data.surname) {\n        modal.add_text_error('У сотрудника не указана фамилия');\n    }\n\n    if (!ViewContext.data.position) {\n        modal.add_text_error('У сотрудника отсутствует позиция ШР');\n    }\n\n    if (ViewContext.data.position \u0026\u0026 !ViewContext.data.structural_subdivision) {\n        modal.add_text_error('У выбранной позиции ШР отсутствует подразделение.');\n    }\n\n    if (ViewContext.data.position \u0026\u0026 !ViewContext.data.organization) {\n        modal.add_text_error('У выбранной позиции ШР отсутствует организация.')\n    }\n\n    if (!ViewContext.data.structural_subdivision) {\n        modal.add_text_error('У сотрудника не указано подразделение');\n    }\n\n    if (!ViewContext.data.organization) {\n        modal.add_text_error('У сотрудника не указана организация');\n    }\n\n    if (!ViewContext.data.work_start) {\n        modal.add_text_error('У сотрудника не указана дата приёма на позицию');\n    }\n\n    if (!ViewContext.data.admission_date_organization) {\n        modal.add_text_error('У сотрудника не указана дата приёма в организацию');\n    }\n\n    if (!ViewContext.data.type_employment) {\n        modal.add_text_error('Не выбран вид занятости');\n    }\n\n    if (ViewContext.data.personal_data_required == true) {\n        if (!ViewContext.data.inn) {\n            modal.add_text_error('У сотрудника не указан ИНН');\n        }\n\n        if (!ViewContext.data.snils) {\n            modal.add_text_error('У сотрудника не указан СНИЛС');\n        }\n\n        if (!ViewContext.data.passport_number) {\n            modal.add_text_error('У сотрудника не указан номер паспорта');\n        }\n\n        if (!ViewContext.data.passport_series) {\n            modal.add_text_error('У сотрудника не указана серия паспорта');\n        }\n\n        if (!ViewContext.data.date_of_issue) {\n            modal.add_text_error('У сотрудника не указана дата выдачи паспорта');\n        }\n\n        if (!ViewContext.data.issued_by) {\n            modal.add_text_error('У сотрудника не указано кем выдан паспорт');\n        }\n\n        if (!ViewContext.data.passport_department_code) {\n            modal.add_text_error('У сотрудника не указан код подразделения');\n        }\n\n        if (!ViewContext.data.address) {\n            modal.add_text_error('У сотрудника не указан адрес');\n        }\n    }\n}\n\nasync function checkPhone(): Promise\u003cvoid\u003e {\n    const staff = await Context.data.staff!.fetch();\n    const phone = ViewContext.data.phone;\n\n    if (phone \u0026\u0026 phone.tel.length \u003e= 10) {\n        const double = await Application.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.phone.eq(phone!),\n                f.__id.neq(staff.data.__id)\n            ))\n            .first()\n\n        if (double) {\n            //ViewContext.data.staff = double;\n            const ref = new RefItem(double.namespace, double.code, double.id);\n            modal.add_link_error('Сотрудник с таким номером телефона уже существует', ref)\n        }\n    } else {\n        modal.add_text_error('У сотрудника не указан номер телефона');\n    }\n}\n\nasync function checkEmail(): Promise\u003cvoid\u003e {\n    const staff = await Context.data.staff!.fetch();\n    const email = ViewContext.data.email;\n\n    if (email \u0026\u0026 email.email.length \u003e= 6) {\n        const double = await Application.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.email.eq(email!.email),\n                f.__id.neq(staff.data.__id)\n            ))\n            .first()\n\n        if (double) {\n            const ref = new RefItem(double.namespace, double.code, double.id);\n            modal.add_link_error('Сотрудник с таким email-адресом уже существует', ref)\n        }\n\n        if (Context.data.user_already_exists == false) {\n            const doubleUser = await System.users.search()\n                .where((f, g) =\u003e g.and(\n                    f.__status.eq(UserStatus.Active),\n                    f.email.eq(email!.email)\n                ))\n                .first()\n            if (doubleUser) {\n                const ref = new RefItem(doubleUser.namespace, doubleUser.code, doubleUser.id);\n                modal.add_link_error('Пользователь с таким email-адресом уже существует', ref)\n            }\n        }\n    } else {\n        modal.add_text_error('У сотрудника не указана электронная почта');\n    }\n}\n\nasync function update_fields(): Promise\u003cvoid\u003e {\n    const staff = await Context.data.staff!.fetch();\n\n    // ФИО.\n    staff.data.name = ViewContext.data.name;\n    staff.data.surname = ViewContext.data.surname;\n    staff.data.middlename = ViewContext.data.middlename;\n\n    // Основные данные.\n    staff.data.date_of_birth = ViewContext.data.date_of_birth;\n    staff.data.address = ViewContext.data.address;\n    staff.data.position = ViewContext.data.position;\n    staff.data.organization = ViewContext.data.organization;\n    staff.data.structural_subdivision = ViewContext.data.structural_subdivision;\n    staff.data.phone = ViewContext.data.phone;\n    staff.data.email = ViewContext.data.email;\n    staff.data.work_start = ViewContext.data.work_start;\n    staff.data.employment_type = ViewContext.data.type_employment;\n\n    let employment_row = staff.data.employment_table!.find(f =\u003e f.type_employment.code == 'main_workplace');\n\n    if (!employment_row) {\n        employment_row = staff.data.employment_table!.insert();\n    }\n\n    employment_row.position = ViewContext.data.position!;\n    employment_row.organization = ViewContext.data.organization!;\n    employment_row.subdivision = ViewContext.data.structural_subdivision!;\n    employment_row.admission_date_position = ViewContext.data.work_start!;\n    employment_row.type_employment = ViewContext.data.type_employment!;\n    employment_row.admission_date_organization = ViewContext.data.admission_date_organization!;\n\n    if (ViewContext.data.personal_data_required == true) {\n        // Паспортные данные.\n        staff.data.passport_number = ViewContext.data.passport_number;\n        staff.data.passport_series = ViewContext.data.passport_series;\n        staff.data.passport_department_code = ViewContext.data.passport_department_code;\n        staff.data.issued_by = ViewContext.data.issued_by;\n        staff.data.date_of_issue = ViewContext.data.date_of_issue;\n\n        // ИНН, СНИЛС.\n        staff.data.inn = ViewContext.data.inn;\n        staff.data.snils = ViewContext.data.snils;\n    }\n\n    await staff.save();\n}\n\ndeclare const console: any;\n\nasync function validation(): Promise\u003cValidationResult\u003e {\n    const result = new ValidationResult();\n\n    const modal: ModalError = ViewContext.data.modal;\n\n    if (modal \u0026\u0026 modal.error_stack.length \u003e 0) {\n        result.addMessage('На форме присутствуют ошибки. Исправьте их.');\n    } else {\n        await update_fields();\n    }\n\n    return result;\n}\n","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{},"dataFieldCode":"context"},"dataNamespace":"kedo.staff","dataCode":"_process_user_prompt","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        let modal;\n        class ModalError {\n            constructor() {\n                this.error_stack = [];\n                this.wrapper_style = `display: flex; flex-direction: column; padding-top: 10px`;\n            }\n            add_text_error(text) {\n                this.error_stack.push(`\u003cli\u003e${text}\u003c/li\u003e`);\n            }\n            add_link_error(text, ref) {\n                const link = `(p:item/${ref.namespace}/${ref.code}/${ref.id})`;\n                this.error_stack.push(`\u003cli\u003e\u003ca href=${link}\u003e${text}\u003c/a\u003e\u003c/li\u003e`);\n            }\n            show_errors() {\n                if (this.error_stack.length \u003e 0) {\n                    this.error_stack = [...new Set(this.error_stack)];\n                    ViewContext.data.show_error = true;\n                    const errors = this.error_stack.join('');\n                    ViewContext.data.error_text = `\u003cdiv style=\"${this.wrapper_style}\"\u003e\u003cul\u003e${errors}\u003c/ul\u003e\u003c/div\u003e`;\n                }\n            }\n            hide_errors() {\n                ViewContext.data.show_error = false;\n                this.error_stack = [];\n                ViewContext.data.error_text = undefined;\n            }\n        }\n        async function onInit() {\n            ViewContext.data.modal = new ModalError();\n            await set_fields();\n            await check();\n        }\n        async function set_fields() {\n            if (Context.data.staff) {\n                const staff = await Context.data.staff.fetch();\n                ViewContext.data.name = staff.data.name;\n                ViewContext.data.surname = staff.data.surname;\n                ViewContext.data.middlename = staff.data.middlename;\n                ViewContext.data.date_of_birth = staff.data.date_of_birth;\n                if (staff.data.directory_of_regions) {\n                    ViewContext.data.address = `${staff.data.directory_of_regions}, ${staff.data.city}, ${staff.data.street}, ${staff.data.home}`;\n                }\n                else {\n                    ViewContext.data.address = `${staff.data.city}, ${staff.data.street}, ${staff.data.home}`;\n                }\n                ViewContext.data.position = staff.data.position;\n                ViewContext.data.organization = staff.data.organization;\n                ViewContext.data.structural_subdivision = staff.data.structural_subdivision;\n                ViewContext.data.type_employment = staff.data.employment_type;\n                ViewContext.data.phone = staff.data.phone;\n                ViewContext.data.work_start = staff.data.work_start;\n                ViewContext.data.admission_date_organization = staff.data.admission_date_position;\n                ViewContext.data.email = staff.data.email;\n                ViewContext.data.passport_number = staff.data.passport_number;\n                ViewContext.data.passport_series = staff.data.passport_series;\n                ViewContext.data.passport_department_code = staff.data.passport_department_code;\n                ViewContext.data.issued_by = staff.data.issued_by;\n                ViewContext.data.date_of_issue = staff.data.date_of_issue;\n                ViewContext.data.inn = staff.data.inn;\n                ViewContext.data.snils = staff.data.snils;\n                ViewContext.data.personal_data_employee = staff.data.personal_data_employee;\n                ViewContext.data.personal_data_required = !staff.data.personal_data_employee;\n            }\n        }\n        async function change_position() {\n            if (ViewContext.data.position) {\n                const position = await ViewContext.data.position.fetch();\n                ViewContext.data.organization = position.data.organization;\n                ViewContext.data.structural_subdivision = position.data.subdivision;\n                await check();\n            }\n        }\n        async function check() {\n            modal = ViewContext.data.modal;\n            modal.hide_errors();\n            await check_staff();\n            await checkPhone();\n            await checkEmail();\n            modal.show_errors();\n        }\n        async function check_staff() {\n            if (!ViewContext.data.name) {\n                modal.add_text_error('У сотрудника не указано имя');\n            }\n            if (!ViewContext.data.surname) {\n                modal.add_text_error('У сотрудника не указана фамилия');\n            }\n            if (!ViewContext.data.position) {\n                modal.add_text_error('У сотрудника отсутствует позиция ШР');\n            }\n            if (ViewContext.data.position \u0026\u0026 !ViewContext.data.structural_subdivision) {\n                modal.add_text_error('У выбранной позиции ШР отсутствует подразделение.');\n            }\n            if (ViewContext.data.position \u0026\u0026 !ViewContext.data.organization) {\n                modal.add_text_error('У выбранной позиции ШР отсутствует организация.');\n            }\n            if (!ViewContext.data.structural_subdivision) {\n                modal.add_text_error('У сотрудника не указано подразделение');\n            }\n            if (!ViewContext.data.organization) {\n                modal.add_text_error('У сотрудника не указана организация');\n            }\n            if (!ViewContext.data.work_start) {\n                modal.add_text_error('У сотрудника не указана дата приёма на позицию');\n            }\n            if (!ViewContext.data.admission_date_organization) {\n                modal.add_text_error('У сотрудника не указана дата приёма в организацию');\n            }\n            if (!ViewContext.data.type_employment) {\n                modal.add_text_error('Не выбран вид занятости');\n            }\n            if (ViewContext.data.personal_data_required == true) {\n                if (!ViewContext.data.inn) {\n                    modal.add_text_error('У сотрудника не указан ИНН');\n                }\n                if (!ViewContext.data.snils) {\n                    modal.add_text_error('У сотрудника не указан СНИЛС');\n                }\n                if (!ViewContext.data.passport_number) {\n                    modal.add_text_error('У сотрудника не указан номер паспорта');\n                }\n                if (!ViewContext.data.passport_series) {\n                    modal.add_text_error('У сотрудника не указана серия паспорта');\n                }\n                if (!ViewContext.data.date_of_issue) {\n                    modal.add_text_error('У сотрудника не указана дата выдачи паспорта');\n                }\n                if (!ViewContext.data.issued_by) {\n                    modal.add_text_error('У сотрудника не указано кем выдан паспорт');\n                }\n                if (!ViewContext.data.passport_department_code) {\n                    modal.add_text_error('У сотрудника не указан код подразделения');\n                }\n                if (!ViewContext.data.address) {\n                    modal.add_text_error('У сотрудника не указан адрес');\n                }\n            }\n        }\n        async function checkPhone() {\n            const staff = await Context.data.staff.fetch();\n            const phone = ViewContext.data.phone;\n            if (phone \u0026\u0026 phone.tel.length \u003e= 10) {\n                const double = await Application.search()\n                    .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.phone.eq(phone), f.__id.neq(staff.data.__id)))\n                    .first();\n                if (double) {\n                    const ref = new RefItem(double.namespace, double.code, double.id);\n                    modal.add_link_error('Сотрудник с таким номером телефона уже существует', ref);\n                }\n            }\n            else {\n                modal.add_text_error('У сотрудника не указан номер телефона');\n            }\n        }\n        async function checkEmail() {\n            const staff = await Context.data.staff.fetch();\n            const email = ViewContext.data.email;\n            if (email \u0026\u0026 email.email.length \u003e= 6) {\n                const double = await Application.search()\n                    .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.email.eq(email.email), f.__id.neq(staff.data.__id)))\n                    .first();\n                if (double) {\n                    const ref = new RefItem(double.namespace, double.code, double.id);\n                    modal.add_link_error('Сотрудник с таким email-адресом уже существует', ref);\n                }\n                if (Context.data.user_already_exists == false) {\n                    const doubleUser = await System.users.search()\n                        .where((f, g) =\u003e g.and(f.__status.eq(UserStatus.Active), f.email.eq(email.email)))\n                        .first();\n                    if (doubleUser) {\n                        const ref = new RefItem(doubleUser.namespace, doubleUser.code, doubleUser.id);\n                        modal.add_link_error('Пользователь с таким email-адресом уже существует', ref);\n                    }\n                }\n            }\n            else {\n                modal.add_text_error('У сотрудника не указана электронная почта');\n            }\n        }\n        async function update_fields() {\n            const staff = await Context.data.staff.fetch();\n            staff.data.name = ViewContext.data.name;\n            staff.data.surname = ViewContext.data.surname;\n            staff.data.middlename = ViewContext.data.middlename;\n            staff.data.date_of_birth = ViewContext.data.date_of_birth;\n            staff.data.address = ViewContext.data.address;\n            staff.data.position = ViewContext.data.position;\n            staff.data.organization = ViewContext.data.organization;\n            staff.data.structural_subdivision = ViewContext.data.structural_subdivision;\n            staff.data.phone = ViewContext.data.phone;\n            staff.data.email = ViewContext.data.email;\n            staff.data.work_start = ViewContext.data.work_start;\n            staff.data.employment_type = ViewContext.data.type_employment;\n            let employment_row = staff.data.employment_table.find(f =\u003e f.type_employment.code == 'main_workplace');\n            if (!employment_row) {\n                employment_row = staff.data.employment_table.insert();\n            }\n            employment_row.position = ViewContext.data.position;\n            employment_row.organization = ViewContext.data.organization;\n            employment_row.subdivision = ViewContext.data.structural_subdivision;\n            employment_row.admission_date_position = ViewContext.data.work_start;\n            employment_row.type_employment = ViewContext.data.type_employment;\n            employment_row.admission_date_organization = ViewContext.data.admission_date_organization;\n            if (ViewContext.data.personal_data_required == true) {\n                staff.data.passport_number = ViewContext.data.passport_number;\n                staff.data.passport_series = ViewContext.data.passport_series;\n                staff.data.passport_department_code = ViewContext.data.passport_department_code;\n                staff.data.issued_by = ViewContext.data.issued_by;\n                staff.data.date_of_issue = ViewContext.data.date_of_issue;\n                staff.data.inn = ViewContext.data.inn;\n                staff.data.snils = ViewContext.data.snils;\n            }\n            await staff.save();\n        }\n        async function validation() {\n            const result = new ValidationResult();\n            const modal = ViewContext.data.modal;\n            if (modal \u0026\u0026 modal.error_stack.length \u003e 0) {\n                result.addMessage('На форме присутствуют ошибки. Исправьте их.');\n            }\n            else {\n                await update_fields();\n            }\n            return result;\n        }\n        return {\n            onInit,\n            set_fields,\n            change_position,\n            check,\n            check_staff,\n            checkPhone,\n            checkEmail,\n            update_fields,\n            validation\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"set_fields","parameters":[],"type":"[object Object]"},{"name":"change_position","parameters":[],"type":"[object Object]"},{"name":"check","parameters":[],"type":"[object Object]"},{"name":"check_staff","parameters":[],"type":"[object Object]"},{"name":"checkPhone","parameters":[],"type":"[object Object]"},{"name":"checkEmail","parameters":[],"type":"[object Object]"},{"name":"update_fields","parameters":[],"type":"[object Object]"},{"name":"validation","parameters":[],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:12.311677936Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:08:42.069565471Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
