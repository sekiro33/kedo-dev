{
  "__id": "018fe30a-13ce-7a29-a3fd-4bd4d5a86df8",
  "namespace": "kedo.staff",
  "code": "_create",
  "__name": "Форма создания",
  "description": "",
  "extensionZoneCode": "",
  "sort": 0,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 6,
  "hidden": false,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "types": ["form"],
    "template": {
      "id": "65e68769-f3c0-43f2-afa3-f90ee0ad2dd8",
      "descriptor": "item-form-complex-popup",
      "descriptorVersion": 2,
      "values": {
        "systemFunctions": {
          "validate": {
            "kind": "Function",
            "name": "validate",
            "type": "client"
          }
        },
        "sidebarAvailable": false,
        "__renderContentAsync": false,
        "formGroup": {
          "path": ["item"]
        },
        "__isConstValues": []
      },
      "content": {
        "[headerControls]": [],
        "[headerCustomization]": [
          {
            "id": "45cdc0b8-ec69-4768-b149-8fd365cf9bb2",
            "descriptor": "button",
            "values": {
              "view": "default",
              "onClick": {
                "kind": "Function",
                "name": "random_fill",
                "type": "server"
              },
              "runProcessSettings": {
                "kind": "",
                "settings": {
                  "code": "",
                  "field": "",
                  "binding": null,
                  "namespace": ""
                }
              },
              "createAppItemSettings": {
                "kind": "",
                "settings": {
                  "code": "",
                  "field": "",
                  "binding": null,
                  "namespace": ""
                }
              },
              "__isConstValues": [],
              "processPopoverSize": [
                {
                  "code": "default",
                  "name": "shared.common.button@widget-process-popover-size-default",
                  "translate": true
                }
              ],
              "icon": "chart_scatter",
              "label": "Случайное заполнение данных",
              "action": null,
              "__hidden": {
                "functionName": "currentUserInGroups",
                "functionParams": {
                  "groupsNs": ["system@administrators"]
                }
              },
              "runInPopover": null,
              "runActionEnum": [
                {
                  "code": "undefined",
                  "name": "shared.common.button@widget-runAction-none",
                  "translate": true
                }
              ]
            }
          }
        ],
        "[footer]": [
          {
            "id": "6fb7376f-dcd6-476c-9f04-986d82fe80f7",
            "descriptor": "zone-content",
            "values": {
              "zoneCode": "[footer]"
            }
          }
        ],
        "[content]": [
          {
            "id": "c18e9118-cda2-49f4-ae50-5414c9b970b2",
            "descriptor": "modal-body",
            "values": {
              "shadow": true
            },
            "content": {
              "": [
                {
                  "id": "8a5f36d5-89ea-4b7c-9147-a32965fcb5f0",
                  "descriptor": "tabset",
                  "values": {
                    "__isConstValues": [],
                    "__renderContentAsync": false
                  },
                  "content": {
                    "": [
                      {
                        "id": "cdbe1356-fd00-4cd1-8b49-4c216761f791",
                        "descriptor": "tab",
                        "values": {
                          "title": "Основная информация",
                          "__isConstValues": [],
                          "__renderContentAsync": false,
                          "__renderContentOnDemand": false
                        },
                        "content": {
                          "": [
                            {
                              "id": "a1b7dc2e-0497-4526-8a6c-89749ed3e5ff",
                              "descriptor": "modal-body",
                              "content": {
                                "": [
                                  {
                                    "id": "70a52c08-475d-4248-a75d-ebcebe3cd4b0",
                                    "descriptor": "row-layout",
                                    "values": {
                                      "elementsAlignEnum": [
                                        {
                                          "code": "left",
                                          "name": "shared.common.row-layout@widget-elements-align-left"
                                        }
                                      ],
                                      "__renderContentAsync": false,
                                      "__styles": "margin: 0px; padding: 0px",
                                      "__isConstValues": []
                                    },
                                    "content": {
                                      "": [
                                        {
                                          "id": "a00836d5-eb47-4d3a-b73d-481d14a998d8",
                                          "descriptor": "row-layout",
                                          "values": {
                                            "__isConstValues": [],
                                            "elementsAlignEnum": [
                                              {
                                                "code": "left",
                                                "name": "shared.common.row-layout@widget-elements-align-left"
                                              }
                                            ],
                                            "__renderContentAsync": false,
                                            "__styles": "margin: 0px; padding: 0px; width: 70%"
                                          },
                                          "content": {
                                            "": [
                                              {
                                                "id": "98820281-95aa-431c-b3ce-bb84993e3a1f",
                                                "descriptor": "code",
                                                "values": {
                                                  "html": "\u003c!-- \u003cstyle\u003e\n    elma-type-email div {\n        min-width: 24rem;\n    }\n    elma-info-block div {\n        background-color: #FFF8E6 !important;\n        border: 1px solid #FABE00 !important;\n    }\n\u003c/style\u003e --\u003e",
                                                  "hideContent": true,
                                                  "contentPlaceholder": "css"
                                                }
                                              },
                                              {
                                                "id": "c9fde183-e6e6-4248-bb65-b2f9acff6b0b",
                                                "descriptor": "code",
                                                "values": {
                                                  "html": "\u003cscript\u003e\n    $(document).ready(() =\u003e {\n        window.saveButton = document.querySelector('footer.modal-footer button.btn.btn-primary')\n    })\n\u003c/script\u003e",
                                                  "hideContent": true,
                                                  "contentPlaceholder": "Блокировка кнопки сохранения"
                                                }
                                              },
                                              {
                                                "id": "4c0c6f73-6927-44bc-a117-a35d1b8a0af1",
                                                "descriptor": "groupbox",
                                                "values": {
                                                  "styleEnum": [
                                                    {
                                                      "code": "default",
                                                      "name": "Default"
                                                    }
                                                  ],
                                                  "collapsible": false,
                                                  "__isConstValues": [],
                                                  "__renderContentAsync": false,
                                                  "title": "Основная информация",
                                                  "__styles": "border-bottom: none; margin: 0px",
                                                  "expanded": true
                                                },
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "db75f08e-6f8d-4efd-8510-c7d958344668",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "__relativeURL": "",
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "refreshStaffGroups",
                                                          "type": "client"
                                                        },
                                                        "showDisplayName": true,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "staff_access"
                                                          ]
                                                        },
                                                        "required": true,
                                                        "__baseURL": "",
                                                        "hideEmpty": false,
                                                        "__readOnly": {
                                                          "path": ["edit"]
                                                        },
                                                        "bindingMode": false,
                                                        "__isConstValues": []
                                                      }
                                                    },
                                                    {
                                                      "id": "bf8910c3-5d12-489c-a891-20113e0b8449",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "hideEmpty": false,
                                                        "__readOnly": null,
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "viewUser",
                                                          "type": "client"
                                                        },
                                                        "__isConstValues": [],
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "user_already_exists"
                                                          ]
                                                        },
                                                        "required": {
                                                          "path": [
                                                            "viewreplay"
                                                          ]
                                                        },
                                                        "__baseURL": "",
                                                        "bindingMode": false,
                                                        "__relativeURL": "",
                                                        "showDisplayName": true,
                                                        "__hidden": {
                                                          "path": [
                                                            "viewreplay"
                                                          ],
                                                          "modifier": "not"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "id": "8c2c405f-aaa2-42ea-8e82-1ea80a173385",
                                                      "descriptor": "kedo@custom_info",
                                                      "descriptorVersion": 2,
                                                      "values": {
                                                        "__hidden": {
                                                          "path": [
                                                            "doublestaff"
                                                          ],
                                                          "modifier": "not"
                                                        },
                                                        "__outlet": "",
                                                        "__baseURL": "",
                                                        "info_type": [
                                                          {
                                                            "code": "warning",
                                                            "name": "Предупреждение"
                                                          }
                                                        ],
                                                        "info_string": "У выбранного внешнего пользователя уже существует карточка сотрудника.",
                                                        "__relativeURL": "",
                                                        "__isConstValues": []
                                                      }
                                                    },
                                                    {
                                                      "id": "dfd657ce-5a8f-4bc8-87a6-44c0a59765b0",
                                                      "descriptor": "kedo@custom_info",
                                                      "descriptorVersion": 2,
                                                      "values": {
                                                        "__outlet": "",
                                                        "__baseURL": "",
                                                        "info_type": [
                                                          {
                                                            "code": "warning",
                                                            "name": "Предупреждение"
                                                          }
                                                        ],
                                                        "info_string": "У выбранного пользователя уже существует карточка сотрудника.",
                                                        "__relativeURL": "",
                                                        "__isConstValues": [],
                                                        "__hidden": {
                                                          "path": [
                                                            "doubleuser"
                                                          ],
                                                          "modifier": "not"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "id": "cdcbafc0-d23e-4b0a-8010-d0d43de05820",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "required": {
                                                          "path": ["external"]
                                                        },
                                                        "__readOnly": null,
                                                        "__relativeURL": "",
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "getExtUserData",
                                                          "type": "client"
                                                        },
                                                        "__isConstValues": [],
                                                        "__hidden": {
                                                          "path": ["external"],
                                                          "modifier": "not"
                                                        },
                                                        "showDisplayName": true,
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "control": {
                                                          "path": [
                                                            "ext_user_app"
                                                          ]
                                                        },
                                                        "__baseURL": "",
                                                        "hideEmpty": false,
                                                        "bindingMode": false,
                                                        "showCreateItem": false
                                                      }
                                                    },
                                                    {
                                                      "id": "ccacee83-b062-49bf-ac27-843cd7d1d2de",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "ext_user"
                                                          ]
                                                        },
                                                        "__hidden": {
                                                          "path": ["internal"],
                                                          "modifier": "not"
                                                        },
                                                        "__outlet": "",
                                                        "required": {
                                                          "path": ["internal"]
                                                        },
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "getUserData",
                                                          "type": "client"
                                                        },
                                                        "showDisplayName": true,
                                                        "tooltip": null,
                                                        "__baseURL": "",
                                                        "hideEmpty": false,
                                                        "__readOnly": null,
                                                        "bindingMode": false,
                                                        "__relativeURL": "",
                                                        "__isConstValues": []
                                                      }
                                                    },
                                                    {
                                                      "id": "d0f6b1d7-d30b-44d6-a453-adc859218bda",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "required": true,
                                                        "hideEmpty": false,
                                                        "showDisplayName": true,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "surname"
                                                          ]
                                                        },
                                                        "tooltip": null,
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "setFIO",
                                                          "type": "client"
                                                        },
                                                        "__isConstValues": [],
                                                        "__readOnly": {
                                                          "path": [
                                                            "user_exist"
                                                          ]
                                                        },
                                                        "bindingMode": false
                                                      }
                                                    },
                                                    {
                                                      "id": "45e71da5-8ef5-4a06-84ff-46d63c5f8609",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "tooltip": null,
                                                        "required": true,
                                                        "hideEmpty": false,
                                                        "__readOnly": {
                                                          "path": [
                                                            "user_exist"
                                                          ]
                                                        },
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "setFIO",
                                                          "type": "client"
                                                        },
                                                        "showDisplayName": true,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "name"
                                                          ]
                                                        },
                                                        "__isConstValues": [],
                                                        "bindingMode": false
                                                      }
                                                    },
                                                    {
                                                      "id": "df38b86a-60a9-4db3-b177-ef364f4b40c9",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "__isConstValues": [],
                                                        "showDisplayName": true,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "no_middle_name"
                                                          ]
                                                        },
                                                        "required": false,
                                                        "hideEmpty": false,
                                                        "__readOnly": null,
                                                        "bindingMode": false,
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "no_middle_name_onchange",
                                                          "type": "client"
                                                        },
                                                        "tooltip": null
                                                      }
                                                    },
                                                    {
                                                      "id": "6f57617c-e0bd-4c2b-a699-7d1af6d755c9",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "showDisplayName": true,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "middlename"
                                                          ]
                                                        },
                                                        "tooltip": null,
                                                        "hideEmpty": false,
                                                        "__readOnly": {
                                                          "path": [
                                                            "user_exist"
                                                          ]
                                                        },
                                                        "__isConstValues": [],
                                                        "__hidden": {
                                                          "path": [
                                                            "item",
                                                            "no_middle_name"
                                                          ]
                                                        },
                                                        "required": false,
                                                        "bindingMode": false,
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "setFIO",
                                                          "type": "client"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "id": "46234a42-102c-4e46-87ac-e897b6ad7fbd",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "__readOnly": null,
                                                        "bindingMode": false,
                                                        "__isConstValues": [],
                                                        "showDisplayName": true,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "beginning_of_the_working_year"
                                                          ]
                                                        },
                                                        "tooltip": null,
                                                        "required": false,
                                                        "hideEmpty": false
                                                      }
                                                    },
                                                    {
                                                      "id": "b38a350b-e70f-4fda-8392-e904d361e5c0",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "showCreateItem": false,
                                                        "__renderContentOnDemand": false,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "employment_region"
                                                          ]
                                                        },
                                                        "tooltip": "По данному региону для сотрудника учитываются региональные праздники. В случае отсутствия региона учитываются только общероссийские праздники.",
                                                        "__outlet": "",
                                                        "__baseURL": "",
                                                        "bindingMode": false,
                                                        "__relativeURL": "",
                                                        "required": false,
                                                        "hideEmpty": false,
                                                        "__readOnly": null,
                                                        "__isConstValues": [],
                                                        "showDisplayName": true
                                                      }
                                                    },
                                                    {
                                                      "id": "06e6305d-14f8-47bc-a8fa-347f161a805d",
                                                      "descriptor": "row",
                                                      "values": {
                                                        "__isConstValues": [],
                                                        "__renderContentAsync": false
                                                      },
                                                      "content": {
                                                        "": [
                                                          {
                                                            "id": "84ba5614-cfe8-47b3-8d5c-0060b58b48d9",
                                                            "descriptor": "column",
                                                            "content": {
                                                              "": [
                                                                {
                                                                  "id": "b59316e8-d36c-4176-9d47-f77179c4fe1e",
                                                                  "descriptor": "dynamic-form-row",
                                                                  "values": {
                                                                    "hideEmpty": false,
                                                                    "__relativeURL": "",
                                                                    "tooltip": null,
                                                                    "required": true,
                                                                    "__readOnly": null,
                                                                    "__outlet": "",
                                                                    "__classes": "null-compact",
                                                                    "bindingMode": false,
                                                                    "__isConstValues": [],
                                                                    "showDisplayName": true,
                                                                    "__styles": "",
                                                                    "__baseURL": "",
                                                                    "onChangeValue": {
                                                                      "kind": "Function",
                                                                      "name": "checkPhone",
                                                                      "type": "client"
                                                                    },
                                                                    "control": {
                                                                      "path": [
                                                                        "item",
                                                                        "phone"
                                                                      ]
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "id": "006c5c66-6d82-4c91-8520-ce5f09633b84",
                                                                  "descriptor": "dynamic-form-row",
                                                                  "values": {
                                                                    "bindingMode": false,
                                                                    "__relativeURL": "",
                                                                    "onChangeValue": {
                                                                      "kind": "Function",
                                                                      "name": "checkEmail",
                                                                      "type": "client"
                                                                    },
                                                                    "tooltip": null,
                                                                    "required": {
                                                                      "path": [
                                                                        "email_required"
                                                                      ]
                                                                    },
                                                                    "__baseURL": "",
                                                                    "showDisplayName": true,
                                                                    "__renderContentOnDemand": false,
                                                                    "__outlet": "",
                                                                    "__styles": "",
                                                                    "hideEmpty": false,
                                                                    "__readOnly": {
                                                                      "path": [
                                                                        "is_reading_email"
                                                                      ]
                                                                    },
                                                                    "__isConstValues": [],
                                                                    "control": {
                                                                      "path": [
                                                                        "item",
                                                                        "email"
                                                                      ]
                                                                    },
                                                                    "__classes": "null-compact"
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "id": "d81f32dc-a334-4004-86cc-22b52878266f",
                                                            "descriptor": "column",
                                                            "content": {
                                                              "": [
                                                                {
                                                                  "id": "eac181a7-cc87-4c63-bb8a-81bcd6e60949",
                                                                  "descriptor": "kedo@custom_info",
                                                                  "descriptorVersion": 2,
                                                                  "values": {
                                                                    "__isConstValues": [],
                                                                    "__hidden": {
                                                                      "path": [
                                                                        "show_phone_auth_error"
                                                                      ],
                                                                      "modifier": "not"
                                                                    },
                                                                    "info_type": [
                                                                      {
                                                                        "code": "warning",
                                                                        "name": "Предупреждение"
                                                                      }
                                                                    ],
                                                                    "info_string": "\u003cdiv style=\"display: flex; flex-direction:column\"\u003e\n\u003cp style=\"color:red\"\u003e\u003cb\u003eВнимание!\u003c/b\u003e\u003c/p\u003e\u003cp\u003eОтключена возможность авторизации по номеру телефона. Обратитесь к администратору.\u003c/p\u003e\n\u003c/div\u003e"
                                                                  }
                                                                },
                                                                {
                                                                  "id": "8e19eb7c-6ae7-4d7a-b8bc-331a09616eb7",
                                                                  "descriptor": "kedo@custom_info",
                                                                  "descriptorVersion": 2,
                                                                  "values": {
                                                                    "__isConstValues": [],
                                                                    "__hidden": {
                                                                      "path": [
                                                                        "show_sms_provider_error"
                                                                      ],
                                                                      "modifier": "not"
                                                                    },
                                                                    "info_type": [
                                                                      {
                                                                        "code": "warning",
                                                                        "name": "Предупреждение"
                                                                      }
                                                                    ],
                                                                    "info_string": "\u003cdiv style=\"display: flex; flex-direction:column\"\u003e\n\u003cp style=\"color:red\"\u003e\u003cb\u003eВнимание!\u003c/b\u003e\u003c/p\u003e\u003cp\u003eНе обнаружены включенные модули SMS-провайдеров. Отправка SMS невозможна.\u003c/p\u003e\n\u003c/div\u003e"
                                                                  }
                                                                },
                                                                {
                                                                  "id": "630b35f1-1236-4fbe-bf61-39a8b93f3cc3",
                                                                  "descriptor": "kedo@custom_info",
                                                                  "descriptorVersion": 2,
                                                                  "values": {
                                                                    "__baseURL": "",
                                                                    "__isConstValues": [],
                                                                    "__renderContentOnDemand": false,
                                                                    "user": {
                                                                      "path": [
                                                                        "user"
                                                                      ]
                                                                    },
                                                                    "__hidden": {
                                                                      "path": [
                                                                        "doubleuserphone"
                                                                      ],
                                                                      "modifier": "not"
                                                                    },
                                                                    "__outlet": "",
                                                                    "info_type": [
                                                                      {
                                                                        "code": "danger",
                                                                        "name": "Ошибка"
                                                                      }
                                                                    ],
                                                                    "info_string": {
                                                                      "path": [
                                                                        "user_error_phone"
                                                                      ]
                                                                    },
                                                                    "__relativeURL": ""
                                                                  }
                                                                },
                                                                {
                                                                  "id": "fb0ab984-f1cd-41d2-bbc7-51044b1df264",
                                                                  "descriptor": "kedo@custom_info",
                                                                  "descriptorVersion": 2,
                                                                  "values": {
                                                                    "__baseURL": "",
                                                                    "info_type": [
                                                                      {
                                                                        "code": "danger",
                                                                        "name": "Ошибка"
                                                                      }
                                                                    ],
                                                                    "staff_app": {
                                                                      "path": [
                                                                        "staff"
                                                                      ]
                                                                    },
                                                                    "__hidden": {
                                                                      "path": [
                                                                        "doublephone"
                                                                      ],
                                                                      "modifier": "not"
                                                                    },
                                                                    "info_string": {
                                                                      "path": [
                                                                        "staff_error_phone"
                                                                      ]
                                                                    },
                                                                    "__relativeURL": "",
                                                                    "__isConstValues": [],
                                                                    "__renderContentOnDemand": false,
                                                                    "__outlet": ""
                                                                  }
                                                                },
                                                                {
                                                                  "id": "3900bafe-c3cc-45c6-a19e-45a1bd69d773",
                                                                  "descriptor": "kedo@custom_info",
                                                                  "descriptorVersion": 2,
                                                                  "values": {
                                                                    "__hidden": {
                                                                      "path": [
                                                                        "doubleemail"
                                                                      ],
                                                                      "modifier": "not"
                                                                    },
                                                                    "__baseURL": "",
                                                                    "info_type": [
                                                                      {
                                                                        "code": "danger",
                                                                        "name": "Ошибка"
                                                                      }
                                                                    ],
                                                                    "__relativeURL": "",
                                                                    "__isConstValues": [],
                                                                    "__renderContentOnDemand": false,
                                                                    "__outlet": "",
                                                                    "staff_app": {
                                                                      "path": [
                                                                        "staff_email"
                                                                      ]
                                                                    },
                                                                    "info_string": {
                                                                      "path": [
                                                                        "staff_error_email"
                                                                      ]
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "id": "bc2b9ecb-b32c-4506-a742-df42053c5055",
                                                                  "descriptor": "kedo@custom_info",
                                                                  "descriptorVersion": 2,
                                                                  "values": {
                                                                    "__isConstValues": [],
                                                                    "__outlet": "",
                                                                    "__baseURL": "",
                                                                    "info_string": {
                                                                      "path": [
                                                                        "user_error_email"
                                                                      ]
                                                                    },
                                                                    "__relativeURL": "",
                                                                    "__renderContentOnDemand": false,
                                                                    "user": {
                                                                      "path": [
                                                                        "user_email"
                                                                      ]
                                                                    },
                                                                    "__hidden": {
                                                                      "path": [
                                                                        "doubleuseremail"
                                                                      ],
                                                                      "modifier": "not"
                                                                    },
                                                                    "info_type": [
                                                                      {
                                                                        "code": "danger",
                                                                        "name": "Ошибка"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "id": "caa66a1c-dcd1-40a0-ae6f-1900b19fd981",
                                                "descriptor": "groupbox",
                                                "values": {
                                                  "expanded": true,
                                                  "styleEnum": [
                                                    {
                                                      "code": "default",
                                                      "name": "Default"
                                                    }
                                                  ],
                                                  "collapsible": false,
                                                  "__isConstValues": [],
                                                  "__renderContentAsync": false,
                                                  "title": "Документы для трудоустройства",
                                                  "__styles": "border-top: none; margin: 0px"
                                                },
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "128266e2-2fcc-4919-9dcc-c46fa8655a51",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "documents_for_employment"
                                                          ]
                                                        },
                                                        "__baseURL": "",
                                                        "bindingMode": false,
                                                        "__isConstValues": [],
                                                        "required": false,
                                                        "hideEmpty": false,
                                                        "displayName": "В таблице указывается список видов личных документов, которые кандидат должен прикрепить в процессе трудоустройства если включен параметр \"Требуется приложить сканы документов\" - да. ",
                                                        "__relativeURL": "",
                                                        "showDisplayName": true,
                                                        "__renderContentOnDemand": false,
                                                        "__outlet": "",
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "checkPassport",
                                                          "type": "client"
                                                        },
                                                        "tooltip": null,
                                                        "__readOnly": null,
                                                        "widgetCustomSettings": {
                                                          "kind": "BlobObject",
                                                          "settings": {
                                                            "columnsView": {
                                                              "doc": {
                                                                "font": {
                                                                  "bold": false,
                                                                  "color": "",
                                                                  "italic": false,
                                                                  "underline": false
                                                                },
                                                                "align": "left",
                                                                "width": 175,
                                                                "hidden": false,
                                                                "tensile": false,
                                                                "readonly": false,
                                                                "required": false,
                                                                "compression": false,
                                                                "verticalAlign": "middle"
                                                              },
                                                              "file_doc": {
                                                                "font": {
                                                                  "bold": false,
                                                                  "color": "",
                                                                  "italic": false,
                                                                  "underline": false
                                                                },
                                                                "align": "left",
                                                                "width": 175,
                                                                "hidden": false,
                                                                "tensile": false,
                                                                "readonly": {
                                                                  "path": [
                                                                    "view_skans"
                                                                  ]
                                                                },
                                                                "required": null,
                                                                "compression": false,
                                                                "verticalAlign": "middle"
                                                              }
                                                            },
                                                            "allowDeleteRows": true
                                                          }
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "id": "3d4e8ec2-abc3-4f81-aa3c-504c99292b43",
                                                      "descriptor": "kedo@custom_info",
                                                      "descriptorVersion": 2,
                                                      "values": {
                                                        "__hidden": {
                                                          "path": [
                                                            "wrong_file_format"
                                                          ],
                                                          "modifier": "not"
                                                        },
                                                        "info_type": [
                                                          {
                                                            "code": "warning",
                                                            "name": "Предупреждение"
                                                          }
                                                        ],
                                                        "info_string": "Обратите внимание, что для выпуска НЭП поддерживаются следующие форматы файлов: jpg, jpeg, png или pdf",
                                                        "__isConstValues": []
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "id": "6f63e9d4-483f-4852-ab78-4f613e3d7bb2",
                                          "descriptor": "row-layout",
                                          "values": {
                                            "__styles": "margin: 0px; padding: 0px; width: 30%",
                                            "__isConstValues": [],
                                            "elementsAlignEnum": [
                                              {
                                                "code": "left",
                                                "name": "shared.common.row-layout@widget-elements-align-left"
                                              }
                                            ],
                                            "__renderContentAsync": false
                                          },
                                          "content": {
                                            "": [
                                              {
                                                "id": "a2e655ae-4692-4558-b01c-4ed978238c18",
                                                "descriptor": "groupbox",
                                                "values": {
                                                  "expanded": true,
                                                  "styleEnum": [
                                                    {
                                                      "code": "default",
                                                      "name": "Default"
                                                    }
                                                  ],
                                                  "collapsible": false,
                                                  "__isConstValues": [],
                                                  "__renderContentAsync": false,
                                                  "title": "Настройка процесса приёма",
                                                  "__styles": "margin: 0px; border-left: none"
                                                },
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "f4c9cd14-2c05-4c09-ad88-b511d6ed0ba7",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "notification"
                                                          ]
                                                        },
                                                        "__outlet": "",
                                                        "hideEmpty": false,
                                                        "bindingMode": false,
                                                        "__renderContentOnDemand": false,
                                                        "__isConstValues": [],
                                                        "__baseURL": "",
                                                        "__relativeURL": "",
                                                        "tooltip": null,
                                                        "required": true,
                                                        "__readOnly": null,
                                                        "displayName": {
                                                          "path": [
                                                            "name_notification"
                                                          ]
                                                        },
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "change_notification_type",
                                                          "type": "client"
                                                        },
                                                        "showDisplayName": true
                                                      }
                                                    },
                                                    {
                                                      "id": "3743fcfd-d66b-4d40-9102-585e45f5fa64",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "__readOnly": null,
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "checkFields",
                                                          "type": "client"
                                                        },
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "is_employed"
                                                          ]
                                                        },
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "required": {
                                                          "path": [
                                                            "item",
                                                            "is_required"
                                                          ]
                                                        },
                                                        "__isConstValues": [],
                                                        "showDisplayName": true,
                                                        "__renderContentOnDemand": false,
                                                        "__baseURL": "",
                                                        "hideEmpty": false,
                                                        "bindingMode": false,
                                                        "__relativeURL": ""
                                                      }
                                                    },
                                                    {
                                                      "id": "dab335f8-ac32-4f5f-887d-f318bfea0a6d",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "__baseURL": "",
                                                        "bindingMode": false,
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "checkFields",
                                                          "type": "client"
                                                        },
                                                        "__isConstValues": [],
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "unep_issue_required"
                                                          ]
                                                        },
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "required": {
                                                          "path": [
                                                            "item",
                                                            "is_required"
                                                          ]
                                                        },
                                                        "showDisplayName": true,
                                                        "__renderContentOnDemand": false,
                                                        "hideEmpty": false,
                                                        "__readOnly": null,
                                                        "__relativeURL": ""
                                                      }
                                                    },
                                                    {
                                                      "id": "f52a9443-fa97-41f8-b244-ba05f0bdb8c6",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "__relativeURL": "",
                                                        "__isConstValues": [],
                                                        "showDisplayName": true,
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "__baseURL": "",
                                                        "__readOnly": null,
                                                        "bindingMode": false,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "consent_processing_pdn"
                                                          ]
                                                        },
                                                        "required": {
                                                          "path": [
                                                            "item",
                                                            "is_required"
                                                          ]
                                                        },
                                                        "hideEmpty": false
                                                      }
                                                    },
                                                    {
                                                      "id": "3bb628ef-e1e7-4dce-8e67-97e64eb979cd",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "__baseURL": "",
                                                        "hideEmpty": false,
                                                        "bindingMode": false,
                                                        "__relativeURL": "",
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "setPDN",
                                                          "type": "client"
                                                        },
                                                        "__isConstValues": [],
                                                        "__renderContentOnDemand": false,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "personal_data_employee"
                                                          ]
                                                        },
                                                        "__outlet": "",
                                                        "required": {
                                                          "path": [
                                                            "item",
                                                            "is_required"
                                                          ]
                                                        },
                                                        "__readOnly": null,
                                                        "showDisplayName": true,
                                                        "tooltip": null
                                                      }
                                                    },
                                                    {
                                                      "id": "f822f193-e59a-44ac-848a-ae4846021426",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "scans_personal_docs"
                                                          ]
                                                        },
                                                        "__hidden": {
                                                          "path": [
                                                            "view_skans"
                                                          ],
                                                          "modifier": "not"
                                                        },
                                                        "required": {
                                                          "path": [
                                                            "view_skans"
                                                          ]
                                                        },
                                                        "onChangeValue": {
                                                          "kind": "Function",
                                                          "name": "setDOCS",
                                                          "type": "client"
                                                        },
                                                        "__isConstValues": [],
                                                        "showDisplayName": true,
                                                        "tooltip": null,
                                                        "hideEmpty": false,
                                                        "__readOnly": null,
                                                        "bindingMode": false
                                                      }
                                                    },
                                                    {
                                                      "id": "db9ee1b7-3457-4355-adb6-48cb25d8f3ce",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "bindingMode": false,
                                                        "__relativeURL": "",
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "signing_soev_office"
                                                          ]
                                                        },
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "required": {
                                                          "path": [
                                                            "item",
                                                            "is_required"
                                                          ]
                                                        },
                                                        "hideEmpty": false,
                                                        "__readOnly": null,
                                                        "__isConstValues": [],
                                                        "showDisplayName": true,
                                                        "__baseURL": ""
                                                      }
                                                    },
                                                    {
                                                      "id": "2d594a0a-9df1-4abb-b5e9-aaa1b0b09017",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "required": false,
                                                        "__readOnly": null,
                                                        "__isConstValues": [],
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "docs_signing_type"
                                                          ]
                                                        },
                                                        "__hidden": {
                                                          "path": [
                                                            "leave_choice_to_staff"
                                                          ],
                                                          "modifier": "not"
                                                        },
                                                        "__baseURL": "",
                                                        "hideEmpty": false,
                                                        "bindingMode": false,
                                                        "__relativeURL": "",
                                                        "showDisplayName": true,
                                                        "__renderContentOnDemand": false
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "id": "9532dd60-05d9-48bb-9b20-50093445c5a7",
                                          "descriptor": "groupbox",
                                          "values": {
                                            "styleEnum": [
                                              {
                                                "code": "default",
                                                "name": "Default"
                                              }
                                            ],
                                            "collapsible": false,
                                            "__isConstValues": [],
                                            "__renderContentAsync": false,
                                            "title": "Персональные данные сотрудника",
                                            "__hidden": {
                                              "path": ["view_pdn"],
                                              "modifier": "not"
                                            },
                                            "__styles": "margin: 0px; border-top: none",
                                            "expanded": true
                                          },
                                          "content": {
                                            "": [
                                              {
                                                "id": "0262eaad-3b69-44c6-9cef-df49a6b18a30",
                                                "descriptor": "dynamic-form-row",
                                                "values": {
                                                  "hideEmpty": false,
                                                  "__readOnly": null,
                                                  "bindingMode": false,
                                                  "__isConstValues": [],
                                                  "showDisplayName": true,
                                                  "control": {
                                                    "path": [
                                                      "item",
                                                      "date_of_birth"
                                                    ]
                                                  },
                                                  "tooltip": null,
                                                  "required": {
                                                    "path": ["view_pdn"]
                                                  }
                                                }
                                              },
                                              {
                                                "id": "b846b97c-ecbc-4a4c-8eb2-583e55e673a7",
                                                "descriptor": "dynamic-form-row",
                                                "values": {
                                                  "required": {
                                                    "path": ["view_pdn"]
                                                  },
                                                  "hideEmpty": false,
                                                  "__readOnly": null,
                                                  "bindingMode": false,
                                                  "__isConstValues": [],
                                                  "showDisplayName": true,
                                                  "control": {
                                                    "path": ["item", "sex"]
                                                  },
                                                  "tooltip": null
                                                }
                                              },
                                              {
                                                "id": "84afb7e0-3d27-4417-aa7a-77f78dde551e",
                                                "descriptor": "row-layout",
                                                "values": {
                                                  "__styles": "margin: 0px; padding: 0px; display: flex; flex-wrap: nowrap; gap: 10px;",
                                                  "__baseURL": "",
                                                  "__relativeURL": "",
                                                  "__isConstValues": [],
                                                  "elementsAlignEnum": [
                                                    {
                                                      "code": "left",
                                                      "name": "shared.common.row-layout@widget-elements-align-left"
                                                    }
                                                  ],
                                                  "__renderContentAsync": false,
                                                  "__outlet": ""
                                                },
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "4d3d81d9-f3cb-43e7-b1b0-8ac70c75687a",
                                                      "descriptor": "groupbox",
                                                      "values": {
                                                        "title": "Паспортные данные",
                                                        "__styles": "margin: 0px; padding: 0px; width: 33%; border-right: none; padding: 5px",
                                                        "expanded": true,
                                                        "styleEnum": [
                                                          {
                                                            "code": "default",
                                                            "name": "Default"
                                                          }
                                                        ],
                                                        "collapsible": false,
                                                        "__isConstValues": [],
                                                        "__renderContentAsync": false
                                                      },
                                                      "content": {
                                                        "": [
                                                          {
                                                            "id": "98fa4674-1eba-49c3-a25d-07559e02e8e2",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "showDisplayName": true,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "russian_passport"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "__isConstValues": []
                                                            }
                                                          },
                                                          {
                                                            "id": "be5845cc-c55e-4e85-a9d9-bde5fe0255d2",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "onChangeValue": {
                                                                "kind": "Function",
                                                                "name": "checkSeries",
                                                                "type": "client"
                                                              },
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "passport_series"
                                                                ]
                                                              },
                                                              "__outlet": "",
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "__baseURL": "",
                                                              "hideEmpty": false,
                                                              "bindingMode": false,
                                                              "__relativeURL": "",
                                                              "__renderContentOnDemand": false,
                                                              "tooltip": null,
                                                              "__readOnly": null,
                                                              "__isConstValues": [],
                                                              "showDisplayName": true
                                                            }
                                                          },
                                                          {
                                                            "id": "235ee9c8-8509-4a32-a6fa-02e8a7fa5676",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "__outlet": "",
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "hideEmpty": false,
                                                              "__relativeURL": "",
                                                              "__isConstValues": [],
                                                              "showDisplayName": true,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "passport_number"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "__baseURL": "",
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "onChangeValue": {
                                                                "kind": "Function",
                                                                "name": "checkNumber",
                                                                "type": "client"
                                                              },
                                                              "__renderContentOnDemand": false
                                                            }
                                                          },
                                                          {
                                                            "id": "ea360a39-f21e-4000-8a35-6ed6be763beb",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "__isConstValues": [],
                                                              "showDisplayName": true,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "date_of_issue"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "id": "8ede69d9-48c0-4d2f-800e-faa0d726f3cf",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "bindingMode": false,
                                                              "__isConstValues": [],
                                                              "showDisplayName": true,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "issued_by"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "hideEmpty": false,
                                                              "__readOnly": null
                                                            }
                                                          },
                                                          {
                                                            "id": "07160bd1-91bf-4d36-9f9b-9c805cb8f894",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "__isConstValues": [],
                                                              "__renderContentOnDemand": false,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "passport_department_code"
                                                                ]
                                                              },
                                                              "__outlet": "",
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "__baseURL": "",
                                                              "__relativeURL": "",
                                                              "onChangeValue": {
                                                                "kind": "Function",
                                                                "name": "changePassDepCode",
                                                                "type": "client"
                                                              },
                                                              "showDisplayName": true,
                                                              "tooltip": null,
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "id": "64256ab8-91b3-4204-9d35-5d362988529d",
                                                      "descriptor": "groupbox",
                                                      "values": {
                                                        "__isConstValues": [],
                                                        "__renderContentAsync": false,
                                                        "title": "Адрес регистрации",
                                                        "__styles": "margin: 0px; padding: 0px; width: 33%; padding: 5px",
                                                        "expanded": true,
                                                        "styleEnum": [
                                                          {
                                                            "code": "default",
                                                            "name": "Default"
                                                          }
                                                        ],
                                                        "collapsible": false
                                                      },
                                                      "content": {
                                                        "": [
                                                          {
                                                            "id": "f61b2e52-a874-410d-9dce-d2f467255fcb",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "required": false,
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "__relativeURL": "",
                                                              "__isConstValues": [],
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "directory_of_regions"
                                                                ]
                                                              },
                                                              "__styles": "",
                                                              "__baseURL": "",
                                                              "bindingMode": false,
                                                              "showCreateItem": false,
                                                              "showDisplayName": true,
                                                              "tooltip": null,
                                                              "__outlet": ""
                                                            }
                                                          },
                                                          {
                                                            "id": "f8b4fa4c-fd46-4042-981a-956df364eb31",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "city"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "__isConstValues": [],
                                                              "showDisplayName": true
                                                            }
                                                          },
                                                          {
                                                            "id": "16daa9fd-44b3-4d34-b26e-beb7d1862eea",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "street"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "__isConstValues": [],
                                                              "showDisplayName": true
                                                            }
                                                          },
                                                          {
                                                            "id": "dbab3014-6d8b-4cb7-af1d-74756dd68a43",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "showDisplayName": true,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "home"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "__isConstValues": []
                                                            }
                                                          },
                                                          {
                                                            "id": "4750be1f-ea2a-479c-ba48-dd2ca4460413",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "showDisplayName": true,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "housing"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "required": false,
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "__isConstValues": []
                                                            }
                                                          },
                                                          {
                                                            "id": "dab0e249-e30e-4a96-93f0-f0f49b51edc0",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "tooltip": null,
                                                              "required": false,
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "__isConstValues": [],
                                                              "showDisplayName": true,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "apartment"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "id": "91f87163-e972-40f2-8e98-dd5627225439",
                                                      "descriptor": "groupbox",
                                                      "values": {
                                                        "title": "ИНН, СНИЛС",
                                                        "__styles": "margin: 0px; padding: 0px; width: 33%; padding: 5px",
                                                        "expanded": true,
                                                        "styleEnum": [
                                                          {
                                                            "code": "default",
                                                            "name": "Default"
                                                          }
                                                        ],
                                                        "collapsible": false,
                                                        "__isConstValues": [],
                                                        "__renderContentAsync": false
                                                      },
                                                      "content": {
                                                        "": [
                                                          {
                                                            "id": "4bee0ea0-64cf-481f-a174-cb62390e8a10",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "bindingMode": false,
                                                              "__relativeURL": "",
                                                              "onChangeValue": {
                                                                "kind": "Function",
                                                                "name": "checkDouble",
                                                                "type": "client"
                                                              },
                                                              "showDisplayName": true,
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "__baseURL": "",
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "__isConstValues": [],
                                                              "__renderContentOnDemand": false,
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "inn"
                                                                ]
                                                              },
                                                              "tooltip": null,
                                                              "__outlet": ""
                                                            }
                                                          },
                                                          {
                                                            "id": "633e5270-c2cf-44de-805d-109b2e8e2841",
                                                            "descriptor": "kedo@custom_info",
                                                            "descriptorVersion": 2,
                                                            "values": {
                                                              "__hidden": {
                                                                "path": [
                                                                  "wrong_inn_format"
                                                                ],
                                                                "modifier": "not"
                                                              },
                                                              "info_type": [
                                                                {
                                                                  "code": "danger",
                                                                  "name": "Ошибка"
                                                                }
                                                              ],
                                                              "info_string": "ИНН не соответствует единому формату РФ",
                                                              "__isConstValues": []
                                                            }
                                                          },
                                                          {
                                                            "id": "657dd9c5-1e84-435e-a1e3-8d41bde83d7e",
                                                            "descriptor": "dynamic-form-row",
                                                            "values": {
                                                              "__baseURL": "",
                                                              "__relativeURL": "",
                                                              "control": {
                                                                "path": [
                                                                  "item",
                                                                  "snils"
                                                                ]
                                                              },
                                                              "__outlet": "",
                                                              "required": {
                                                                "path": [
                                                                  "view_pdn"
                                                                ]
                                                              },
                                                              "hideEmpty": false,
                                                              "__readOnly": null,
                                                              "bindingMode": false,
                                                              "onChangeValue": {
                                                                "kind": "Function",
                                                                "name": "checkDouble",
                                                                "type": "client"
                                                              },
                                                              "__isConstValues": [],
                                                              "tooltip": null,
                                                              "__renderContentOnDemand": false,
                                                              "showDisplayName": true
                                                            }
                                                          },
                                                          {
                                                            "id": "fb22e81d-f21d-4a62-99be-29d478bc5e22",
                                                            "descriptor": "kedo@custom_info",
                                                            "descriptorVersion": 2,
                                                            "values": {
                                                              "__isConstValues": [],
                                                              "__hidden": {
                                                                "path": [
                                                                  "wrong_snils_format"
                                                                ],
                                                                "modifier": "not"
                                                              },
                                                              "info_type": [
                                                                {
                                                                  "code": "danger",
                                                                  "name": "Ошибка"
                                                                }
                                                              ],
                                                              "info_string": "СНИЛС не соответствует единому формату РФ"
                                                            }
                                                          },
                                                          {
                                                            "id": "55f774ec-f7d5-4f81-96de-b8edef94924d",
                                                            "descriptor": "elma-info-block",
                                                            "values": {
                                                              "text": "Сотрудник с таким ИНН/СНИЛС уже существует",
                                                              "__hidden": {
                                                                "path": [
                                                                  "doubleinnsnils"
                                                                ],
                                                                "modifier": "not"
                                                              },
                                                              "typeEnum": [
                                                                {
                                                                  "code": "danger",
                                                                  "name": "Ошибка (красный)"
                                                                }
                                                              ],
                                                              "__isConstValues": [],
                                                              "__renderContentAsync": false
                                                            },
                                                            "content": {
                                                              "": [
                                                                {
                                                                  "id": "625c745d-5f57-4c6e-b2df-dcb05f6f39e1",
                                                                  "descriptor": "dynamic-form-row",
                                                                  "values": {
                                                                    "__isConstValues": [],
                                                                    "showDisplayName": false,
                                                                    "control": {
                                                                      "path": [
                                                                        "staff_inn"
                                                                      ]
                                                                    },
                                                                    "tooltip": null,
                                                                    "required": false,
                                                                    "hideEmpty": false,
                                                                    "__readOnly": true,
                                                                    "bindingMode": false
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "id": "25288c1f-fc68-443d-a685-5d8083aee7eb",
                        "descriptor": "tab",
                        "values": {
                          "__isConstValues": [],
                          "__renderContentAsync": false,
                          "__renderContentOnDemand": true,
                          "title": "Занятость"
                        },
                        "content": {
                          "": [
                            {
                              "id": "7c84d54d-3391-4123-a358-3d9c737fb783",
                              "descriptor": "modal-body",
                              "content": {
                                "": [
                                  {
                                    "id": "f91ef484-7046-4e21-9184-e8695357256f",
                                    "descriptor": "groupbox",
                                    "values": {
                                      "styleEnum": [
                                        {
                                          "code": "default",
                                          "name": "Default"
                                        }
                                      ],
                                      "collapsible": false,
                                      "__isConstValues": [],
                                      "__renderContentAsync": false,
                                      "title": "Основная позиция",
                                      "__styles": "margin-bottom: 10px",
                                      "expanded": true
                                    },
                                    "content": {
                                      "": [
                                        {
                                          "id": "f81a52e3-60fc-4f9a-99b2-0cac995c3f5d",
                                          "descriptor": "row",
                                          "values": {
                                            "__isConstValues": [],
                                            "__renderContentAsync": false
                                          },
                                          "content": {
                                            "": [
                                              {
                                                "id": "c4055ad0-6340-4f2b-9a66-57322ec21d63",
                                                "descriptor": "column",
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "3e7ab3b0-f934-423d-a5bc-a5c1b4b46d48",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "tooltip": null,
                                                        "required": false,
                                                        "hideEmpty": true,
                                                        "bindingMode": false,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "position"
                                                          ]
                                                        },
                                                        "__readOnly": true,
                                                        "showCreateItem": false,
                                                        "__isConstValues": [],
                                                        "showDisplayName": true
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "id": "20a80796-47c3-4c34-94de-a61d567fbda2",
                                                "descriptor": "column",
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "8a478acd-04fc-43d4-86d6-d990932ea706",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "showCreateItem": false,
                                                        "__isConstValues": [],
                                                        "required": false,
                                                        "__readOnly": true,
                                                        "bindingMode": false,
                                                        "showDisplayName": true,
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "organization"
                                                          ]
                                                        },
                                                        "tooltip": null,
                                                        "hideEmpty": true
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "id": "b9e1f69c-8d25-47af-a162-37201015a0f5",
                                                "descriptor": "column",
                                                "values": {
                                                  "__isConstValues": [],
                                                  "__renderContentAsync": false
                                                },
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "e8ebdb1b-2bc6-4286-a430-432f1e6b8001",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "structural_subdivision"
                                                          ]
                                                        },
                                                        "hideEmpty": true,
                                                        "__readOnly": true,
                                                        "showDisplayName": true,
                                                        "tooltip": null,
                                                        "required": false,
                                                        "bindingMode": false,
                                                        "showCreateItem": false,
                                                        "__isConstValues": []
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "id": "90bad0e5-09cd-44d0-8ae2-345d85165024",
                                                "descriptor": "column",
                                                "values": {
                                                  "__isConstValues": [],
                                                  "__renderContentAsync": false
                                                },
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "593f283f-c150-463a-b94a-f392fb5dd76e",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "control": {
                                                          "path": [
                                                            "item",
                                                            "work_start"
                                                          ]
                                                        },
                                                        "tooltip": null,
                                                        "required": false,
                                                        "hideEmpty": true,
                                                        "__readOnly": true,
                                                        "bindingMode": false,
                                                        "__isConstValues": [],
                                                        "showDisplayName": true
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "id": "00ec227a-7662-442a-ab1a-acecd9f5f370",
                                    "descriptor": "groupbox",
                                    "values": {
                                      "__renderContentAsync": false,
                                      "title": "Сведения о занятости",
                                      "expanded": true,
                                      "styleEnum": [
                                        {
                                          "code": "default",
                                          "name": "Default"
                                        }
                                      ],
                                      "collapsible": true,
                                      "__isConstValues": []
                                    },
                                    "content": {
                                      "": [
                                        {
                                          "id": "ef8be76e-b0cd-4ec3-983d-898d063a041e",
                                          "descriptor": "row-layout",
                                          "values": {
                                            "__renderContentAsync": false,
                                            "__styles": "margin-bottom: 10px",
                                            "__isConstValues": [],
                                            "elementsAlignEnum": [
                                              {
                                                "code": "left",
                                                "name": "shared.common.row-layout@widget-elements-align-left"
                                              }
                                            ]
                                          },
                                          "content": {
                                            "": [
                                              {
                                                "id": "a33ee3be-5347-4307-87f4-43000e5dd698",
                                                "descriptor": "button",
                                                "values": {
                                                  "view": "link",
                                                  "action": null,
                                                  "__isConstValues": [],
                                                  "__renderContentOnDemand": false,
                                                  "onClick": {
                                                    "kind": "Function",
                                                    "name": "add_employment_row",
                                                    "type": "client"
                                                  },
                                                  "__baseURL": "",
                                                  "__relativeURL": "",
                                                  "label": "+ Строка занятости",
                                                  "__outlet": "",
                                                  "runInPopover": null,
                                                  "__onMouseEnter": {
                                                    "kind": "Function",
                                                    "name": {},
                                                    "type": "client"
                                                  },
                                                  "__styles": "",
                                                  "runActionEnum": [
                                                    {
                                                      "code": "undefined",
                                                      "name": "shared.common.button@widget-runAction-none",
                                                      "translate": true
                                                    }
                                                  ],
                                                  "processPopoverSize": [
                                                    {
                                                      "code": "default",
                                                      "name": "shared.common.button@widget-process-popover-size-default",
                                                      "translate": true
                                                    }
                                                  ],
                                                  "runProcessSettings": {
                                                    "kind": "",
                                                    "settings": {
                                                      "code": "",
                                                      "field": "",
                                                      "binding": null,
                                                      "namespace": ""
                                                    }
                                                  },
                                                  "createAppItemSettings": {
                                                    "kind": "",
                                                    "settings": {
                                                      "code": "",
                                                      "field": "",
                                                      "binding": null,
                                                      "namespace": ""
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "id": "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                          "descriptor": "dynamic-list",
                                          "values": {
                                            "iterable": {
                                              "path": [
                                                "item",
                                                "employment_table"
                                              ]
                                            },
                                            "__isConstValues": [],
                                            "__renderContentAsync": false
                                          },
                                          "content": {
                                            "": [
                                              {
                                                "id": "891f3b3f-1890-4055-abbd-76df2228d3a5",
                                                "descriptor": "kedo.staff@employment_line",
                                                "descriptorVersion": 2,
                                                "values": {
                                                  "type_employment": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "type_employment"
                                                    ]
                                                  },
                                                  "position_admission_date": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "admission_date_position"
                                                    ]
                                                  },
                                                  "rate": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "rate"
                                                    ]
                                                  },
                                                  "errors": {
                                                    "path": [
                                                      "employment_table_errors"
                                                    ]
                                                  },
                                                  "subdivision": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "subdivision"
                                                    ]
                                                  },
                                                  "cache_guid": {
                                                    "path": ["cache_guid"]
                                                  },
                                                  "organization": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "organization"
                                                    ]
                                                  },
                                                  "__relativeURL": "",
                                                  "work_schedules": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "work_schedules"
                                                    ]
                                                  },
                                                  "number_employment_contract": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "number_employment_contract"
                                                    ]
                                                  },
                                                  "id": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "id"
                                                    ]
                                                  },
                                                  "id_1c": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "id_1c"
                                                    ]
                                                  },
                                                  "position": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "position"
                                                    ]
                                                  },
                                                  "organization_admission_date": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "admission_date_organization"
                                                    ]
                                                  },
                                                  "date_employment_contract_as_date": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "date_employment_contract_as_date"
                                                    ]
                                                  },
                                                  "__renderContentOnDemand": false,
                                                  "date_by": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "date_by"
                                                    ]
                                                  },
                                                  "__baseURL": "",
                                                  "details_status": {
                                                    "path": ["details_status"]
                                                  },
                                                  "remote_work": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "remote_work"
                                                    ]
                                                  },
                                                  "__isConstValues": [],
                                                  "employment_relationship_type": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "employment_relationship_type"
                                                    ]
                                                  },
                                                  "__outlet": "",
                                                  "__styles": "margin-bottom: 10px",
                                                  "work_place": {
                                                    "path": [
                                                      "295bf14e-4dc0-4b4d-af0a-f5b39b9a5a49",
                                                      "work_place"
                                                    ]
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "id": "bcfda99c-2669-4c56-8ed9-890f0f5064e4",
                                          "descriptor": "button",
                                          "values": {
                                            "__isConstValues": [],
                                            "processPopoverSize": [
                                              {
                                                "code": "default",
                                                "name": "shared.common.button@widget-process-popover-size-default",
                                                "translate": true
                                              }
                                            ],
                                            "action": null,
                                            "__styles": "",
                                            "__classes": "update_button_trigger",
                                            "runInPopover": null,
                                            "runActionEnum": [
                                              {
                                                "code": "undefined",
                                                "name": "shared.common.button@widget-runAction-none",
                                                "translate": true
                                              }
                                            ],
                                            "runProcessSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "createAppItemSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "view": "default",
                                            "label": "update_button_hidden",
                                            "onClick": {
                                              "kind": "Function",
                                              "name": "update_line",
                                              "type": "client"
                                            },
                                            "__hidden": true
                                          }
                                        },
                                        {
                                          "id": "5d62c149-5f08-4ed5-bbe8-76135596ddfa",
                                          "descriptor": "button",
                                          "values": {
                                            "onClick": {
                                              "kind": "Function",
                                              "name": "delete_line",
                                              "type": "client"
                                            },
                                            "__hidden": true,
                                            "__classes": "delete_button_trigger",
                                            "runInPopover": null,
                                            "__isConstValues": [],
                                            "createAppItemSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "label": "delete_button_hidden",
                                            "action": null,
                                            "processPopoverSize": [
                                              {
                                                "code": "default",
                                                "name": "shared.common.button@widget-process-popover-size-default",
                                                "translate": true
                                              }
                                            ],
                                            "runProcessSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "view": "default",
                                            "runActionEnum": [
                                              {
                                                "code": "undefined",
                                                "name": "shared.common.button@widget-runAction-none",
                                                "translate": true
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "id": "d97830bb-e7d3-4428-842d-7836286ad19f",
                                    "descriptor": "dynamic-form-row",
                                    "values": {
                                      "required": false,
                                      "__baseURL": "",
                                      "hideEmpty": false,
                                      "__relativeURL": "",
                                      "onChangeValue": {
                                        "kind": "Function",
                                        "name": "employment_table_onchange",
                                        "type": "client"
                                      },
                                      "__outlet": "",
                                      "tooltip": null,
                                      "__hidden": true,
                                      "__readOnly": null,
                                      "bindingMode": false,
                                      "__isConstValues": [],
                                      "showDisplayName": true,
                                      "control": {
                                        "path": ["item", "employment_table"]
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "id": "4b2a8c9d-04c9-4ad0-a832-68e681742d73",
                        "descriptor": "tab",
                        "values": {
                          "__isConstValues": [],
                          "__renderContentAsync": false,
                          "__renderContentOnDemand": false,
                          "title": "Служебная информация",
                          "__hidden": {
                            "functionName": "currentUserInGroups",
                            "functionParams": {
                              "groupsNs": ["system@administrators"]
                            }
                          }
                        },
                        "content": {
                          "": [
                            {
                              "id": "9895407e-f0af-4357-9afb-7490f1161965",
                              "descriptor": "modal-body",
                              "content": {
                                "": [
                                  {
                                    "id": "ed321959-4c7c-4ce0-b649-0209420b9e38",
                                    "descriptor": "dynamic-form",
                                    "values": {
                                      "form": {
                                        "path": ["item"]
                                      },
                                      "fields": {
                                        "path": ["fields"]
                                      },
                                      "__isConstValues": []
                                    }
                                  },
                                  {
                                    "id": "f50b0d38-6559-43ef-abbe-e7d39fdd6404",
                                    "descriptor": "row-layout",
                                    "values": {
                                      "__isConstValues": [],
                                      "elementsAlignEnum": [
                                        {
                                          "code": "left",
                                          "name": "shared.common.row-layout@widget-elements-align-left"
                                        }
                                      ],
                                      "__renderContentAsync": false
                                    },
                                    "content": {
                                      "": [
                                        {
                                          "id": "62a7dfc7-0244-4b2d-adfe-6e8c53053201",
                                          "descriptor": "button",
                                          "values": {
                                            "runActionEnum": [
                                              {
                                                "code": "undefined",
                                                "name": "shared.common.button@widget-runAction-none",
                                                "translate": true
                                              }
                                            ],
                                            "processPopoverSize": [
                                              {
                                                "code": "default",
                                                "name": "shared.common.button@widget-process-popover-size-default",
                                                "translate": true
                                              }
                                            ],
                                            "runProcessSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "view": "default",
                                            "onClick": {
                                              "kind": "Function",
                                              "name": "log_table",
                                              "type": "client"
                                            },
                                            "runInPopover": null,
                                            "createAppItemSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "label": "Вывод таблицы занятости в консоль",
                                            "action": null,
                                            "__isConstValues": []
                                          }
                                        },
                                        {
                                          "id": "ea372c15-d334-4000-bad3-e44c3844cc17",
                                          "descriptor": "button",
                                          "values": {
                                            "__isConstValues": [],
                                            "processPopoverSize": [
                                              {
                                                "code": "default",
                                                "name": "shared.common.button@widget-process-popover-size-default",
                                                "translate": true
                                              }
                                            ],
                                            "createAppItemSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "runInPopover": null,
                                            "runActionEnum": [
                                              {
                                                "code": "undefined",
                                                "name": "shared.common.button@widget-runAction-none",
                                                "translate": true
                                              }
                                            ],
                                            "action": null,
                                            "onClick": {
                                              "kind": "Function",
                                              "name": "recalc_ids",
                                              "type": "client"
                                            },
                                            "runProcessSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "view": "default",
                                            "label": "Перерасчет идентификаторов (текущий сотрудник)"
                                          }
                                        },
                                        {
                                          "id": "b2e46751-750e-4314-a512-b94c846b4f6e",
                                          "descriptor": "button",
                                          "values": {
                                            "runInPopover": null,
                                            "__isConstValues": [],
                                            "processPopoverSize": [
                                              {
                                                "code": "default",
                                                "name": "shared.common.button@widget-process-popover-size-default",
                                                "translate": true
                                              }
                                            ],
                                            "createAppItemSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "view": "default",
                                            "action": null,
                                            "onClick": {
                                              "kind": "Function",
                                              "name": "recalc_ids_all",
                                              "type": "client"
                                            },
                                            "runActionEnum": [
                                              {
                                                "code": "undefined",
                                                "name": "shared.common.button@widget-runAction-none",
                                                "translate": true
                                              }
                                            ],
                                            "runProcessSettings": {
                                              "kind": "",
                                              "settings": {
                                                "code": "",
                                                "field": "",
                                                "binding": null,
                                                "namespace": ""
                                              }
                                            },
                                            "label": "Перерасчет идентификаторов (все сотрудники)"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "id": "30783a3a-1e13-4b35-870e-75013c1e9db5",
                  "descriptor": "extended-fields",
                  "values": {
                    "__outlet": "",
                    "__baseURL": "",
                    "__relativeURL": "",
                    "__isConstValues": [],
                    "form": {
                      "path": ["item"]
                    },
                    "fields": {
                      "path": ["fields"]
                    }
                  }
                }
              ]
            }
          }
        ],
        "[sidebar]": []
      }
    },
    "fields": [
      {
        "code": "ext_user_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "_user_profiles",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "_system_catalogs",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Внешний пользователь",
          "data": {}
        }
      },
      {
        "code": "user",
        "type": "SYS_USER",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          }
        },
        "view": {
          "name": "Пользователь (телефон)",
          "data": {}
        }
      },
      {
        "code": "user_email",
        "type": "SYS_USER",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          }
        },
        "view": {
          "name": "Пользователь (email)",
          "data": {}
        }
      },
      {
        "code": "staff",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "staff",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Сотрудник (телефон)",
          "data": {}
        }
      },
      {
        "code": "staff_email",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "staff",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Сотрудник (email)",
          "data": {}
        }
      },
      {
        "code": "staff_inn",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "staff",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Сотрудник (инн/снилс)",
          "data": {}
        }
      },
      {
        "code": "mail_uniqueness",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": true,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Уникальность почты",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "validation",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Валидация",
          "data": {
            "additionalType": "string"
          }
        }
      },
      {
        "code": "job_availability",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": true,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Доступность должности",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "group_compulsory",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Обязательность группы",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "hiding_a_group",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Скрытие группы",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "phone_uniqueness",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": true,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Уникальность телефона",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "view_pdn",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_pdn",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "view_skans",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_skans",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "view_docs",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_docs",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "view_region",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_region",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "edit",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "edit",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "user_exist",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "По сущ. пользователю",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "internal",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Внутренний пользователь",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "external",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Внешний пользователь",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "doublephone",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "doublePhone",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "doubleemail",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "doubleEmail",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "doubleuserphone",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "doubleUserPhone",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "doubleuseremail",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "doubleUserEmail",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "doubleinnsnils",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "doubleInnSnils",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "viewreplay",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "viewReplay",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "view_service",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_service",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "wrong_file_format",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Файл в неверном формате",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "details_status",
        "type": "JSON",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Details status",
          "data": {}
        }
      },
      {
        "code": "employment_table_errors",
        "type": "JSON",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "employment_table_errors",
          "data": {}
        }
      },
      {
        "code": "email_required",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Обязательность поля \"Email\"",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "wrong_inn_format",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "ИНН в неверном формате",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "wrong_snils_format",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Неверный формат СНИЛС",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_sms_provider_error",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Показать ошибку о SMS-провайдерах",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_phone_auth_error",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Показать ошибку о выключенной авторизации по номеру телефона",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "domen",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Адрес площадки",
          "data": {
            "additionalType": "string"
          }
        }
      },
      {
        "code": "doublestaff",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "doubleStaff",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "doubleuser",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "doubleUser",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "cache_guid",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "cache_guid",
          "data": {
            "additionalType": "string"
          }
        }
      },
      {
        "code": "supportive_snils",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "supportive_snils",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "supportive_pass_code",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "supportive_pass_code",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "supportive_inn",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "supportive_inn",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "leave_choice_to_staff",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Дать выбор способа подписания",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "user_error_email",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "user_error_email",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "staff_error_email",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "staff_error_email",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "check_ext_user",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "_user_profiles",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "_system_catalogs",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "check_ext_user",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "check_user",
        "type": "SYS_USER",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          }
        },
        "view": {
          "name": "check_user",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "error_validation_email",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "error_validation_email",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "error_validation_email_staff",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "error_validation_email_staff",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "user_error_phone",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "user_error_phone",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "staff_error_phone",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "staff_error_phone",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "error_validation_phone",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "error_validation_phone",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "error_validation_phone_staff",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "error_validation_phone_staff",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "is_reading_email",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "is_reading_email",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "settings_kedo",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "settings",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "namespace": "kedo"
        },
        "view": {
          "name": "Настройка КЭДО",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "name_notification",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Название на форме для уведомлений",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      }
    ],
    "fieldVisibilityConditions": {
      "edit": {
        "enabled": false,
        "conditions": []
      },
      "user": {
        "enabled": false,
        "conditions": []
      },
      "domen": {
        "enabled": false,
        "conditions": []
      },
      "staff": {
        "enabled": false,
        "conditions": []
      },
      "external": {
        "enabled": false,
        "conditions": []
      },
      "internal": {
        "enabled": false,
        "conditions": []
      },
      "view_pdn": {
        "enabled": false,
        "conditions": []
      },
      "staff_inn": {
        "enabled": false,
        "conditions": []
      },
      "view_docs": {
        "enabled": false,
        "conditions": []
      },
      "cache_guid": {
        "enabled": false,
        "conditions": []
      },
      "check_user": {
        "enabled": false,
        "conditions": []
      },
      "doubleuser": {
        "enabled": false,
        "conditions": []
      },
      "user_email": {
        "enabled": false,
        "conditions": []
      },
      "user_exist": {
        "enabled": false,
        "conditions": []
      },
      "validation": {
        "enabled": false,
        "conditions": []
      },
      "view_skans": {
        "enabled": false,
        "conditions": []
      },
      "viewreplay": {
        "enabled": false,
        "conditions": []
      },
      "doubleemail": {
        "enabled": false,
        "conditions": []
      },
      "doublephone": {
        "enabled": false,
        "conditions": []
      },
      "doublestaff": {
        "enabled": false,
        "conditions": []
      },
      "is_required": {
        "enabled": false,
        "conditions": []
      },
      "staff_email": {
        "enabled": false,
        "conditions": []
      },
      "view_region": {
        "enabled": false,
        "conditions": []
      },
      "ext_user_app": {
        "enabled": false,
        "conditions": []
      },
      "view_service": {
        "enabled": false,
        "conditions": []
      },
      "settings_kedo": {
        "enabled": false,
        "conditions": []
      },
      "check_ext_user": {
        "enabled": false,
        "conditions": []
      },
      "details_status": {
        "enabled": false,
        "conditions": []
      },
      "doubleinnsnils": {
        "enabled": false,
        "conditions": []
      },
      "email_required": {
        "enabled": false,
        "conditions": []
      },
      "hiding_a_group": {
        "enabled": false,
        "conditions": []
      },
      "supportive_inn": {
        "enabled": false,
        "conditions": []
      },
      "view_info_sign": {
        "enabled": false,
        "conditions": []
      },
      "doubleuseremail": {
        "enabled": false,
        "conditions": []
      },
      "doubleuserphone": {
        "enabled": false,
        "conditions": []
      },
      "mail_uniqueness": {
        "enabled": false,
        "conditions": []
      },
      "group_compulsory": {
        "enabled": false,
        "conditions": []
      },
      "is_reading_email": {
        "enabled": false,
        "conditions": []
      },
      "job_availability": {
        "enabled": false,
        "conditions": []
      },
      "phone_uniqueness": {
        "enabled": false,
        "conditions": []
      },
      "supportive_snils": {
        "enabled": false,
        "conditions": []
      },
      "user_error_email": {
        "enabled": false,
        "conditions": []
      },
      "user_error_phone": {
        "enabled": false,
        "conditions": []
      },
      "wrong_inn_format": {
        "enabled": false,
        "conditions": []
      },
      "name_notification": {
        "enabled": false,
        "conditions": []
      },
      "staff_error_email": {
        "enabled": false,
        "conditions": []
      },
      "staff_error_phone": {
        "enabled": false,
        "conditions": []
      },
      "wrong_file_format": {
        "enabled": false,
        "conditions": []
      },
      "wrong_snils_format": {
        "enabled": false,
        "conditions": []
      },
      "supportive_pass_code": {
        "enabled": false,
        "conditions": []
      },
      "leave_choice_to_staff": {
        "enabled": false,
        "conditions": []
      },
      "show_phone_auth_error": {
        "enabled": false,
        "conditions": []
      },
      "error_validation_email": {
        "enabled": false,
        "conditions": []
      },
      "error_validation_phone": {
        "enabled": false,
        "conditions": []
      },
      "employment_table_errors": {
        "enabled": false,
        "conditions": []
      },
      "show_sms_provider_error": {
        "enabled": false,
        "conditions": []
      },
      "error_validation_email_staff": {
        "enabled": false,
        "conditions": []
      },
      "error_validation_phone_staff": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {},
    "clientScripts": "declare const document: any;\ndeclare const window: any;\ndeclare const console: any;\n\nasync function get_settings_kedo(): Promise\u003cvoid\u003e {\n    const settings = await ViewContext.fields.settings_kedo.app.search()\n        .where(field =\u003e field.__deletedAt.eq(null))\n        .size(10000)\n        .all();\n\n    const notifications = settings.find(field =\u003e field.data.code == 'notification_staff');\n\n    if (notifications \u0026\u0026 notifications.data.category \u0026\u0026 notifications.data.status === true \u0026\u0026 !Context.data.notification) {\n        Context.data.notification = Context.fields.notification.data.variants.find(field =\u003e field.code == notifications.data.category!.code) as never;\n    }\n}\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    get_settings_kedo();\n\n    if (Context.data.snils) {\n        ViewContext.data.supportive_snils = Context.data.snils;\n        Context.data.snils = Context.data.snils;\n    }\n    if (Context.data.inn) {\n        ViewContext.data.supportive_inn = Context.data.inn;\n        Context.data.inn = Context.data.inn;\n    }\n    if (Context.data.passport_department_code) {\n        ViewContext.data.supportive_pass_code = Context.data.passport_department_code;\n        Context.data.passport_department_code = Context.data.passport_department_code;\n    }\n\n    const for_edit_form = await Application.search()\n        .where(f =\u003e\n            f.__id.eq(Context.data.__id)\n        )\n        .first();\n    if (for_edit_form) {\n        Context.data.is_required = false;\n        ViewContext.data.name_notification = 'Тип уведомлений';\n    } else {\n        Context.data.is_required = true;\n        ViewContext.data.name_notification = 'Способ получения приглашения';\n        Context.fields.notification.data.variants = Context.fields.notification.data.variants.filter(field =\u003e field.code !== 'without_notifications');\n    }\n\n    let findNullCompact = window.setInterval(() =\u003e {\n        let nullCompact = document.querySelectorAll(\".null-compact elma-form-row\");\n        if (!nullCompact || Array.from(nullCompact).length \u003c 2) {\n            console.log(\"loading\")\n            return;\n        };\n        window.clearInterval(findNullCompact);\n        console.log(nullCompact)\n        nullCompact.forEach((item: any) =\u003e item.classList.remove(\"@compact\"));\n    }, 100);\n    let user = await System.users.getCurrentUser();\n    let now = new TDate();\n    if (!Context.data.hr_user_set) {\n        Context.data.staff_member = user;\n        Context.data.hr_user_set = true;\n        console.log(\"setting hr\")\n    } else {\n        console.log(\"hr user set\")\n    }\n\n    const docs = await Namespace.app.types_documents_for_employment.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const names = ['Паспорт. Страница с регистрацией', 'Паспорт. Страница с фото и данными', 'СНИЛС', 'ИНН'];\n\n    //const myDocs = docs.filter(f =\u003e names.find(i =\u003e i == f.data.__name));\n    const myDocs = docs.filter(f =\u003e {\n        if (f.data.default) {\n            return f;\n        }\n    })\n    if (!Context.data.docs_table_full) {\n        for (const doc of myDocs) {\n            const row = Context.data.documents_for_employment!.insert();\n            row.doc = doc\n            row.required = doc.data.required!;\n        }\n        Context.data.docs_table_full = true;\n        console.log(Context.data.documents_for_employment)\n    }\n\n    Context.fields.structural_subdivision.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(\n        appFields.is_closed.eq(false)\n    ));\n    Context.fields.position.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(\n        appFields.is_closed.eq(false)\n    ));\n\n    Context.fields.date_of_birth.data.setFilter(f =\u003e f.lt(now));\n    Context.fields.date_of_issue.data.setFilter(f =\u003e f.lt(now));\n    Context.data.documents_for_employment = Context.data.documents_for_employment;\n\n    if (!Context.data.ext_user)\n        ViewContext.data.viewreplay = true\n    else\n        ViewContext.data.viewreplay = false\n\n    if (ViewContext.data.__formType \u0026\u0026 ViewContext.data.__formType.code == ViewContext.fields.__formType.variants.edit.code) {\n        ViewContext.data.edit = false;\n        ViewContext.data.view_pdn = true;\n        ViewContext.data.view_skans = false;\n        ViewContext.data.view_docs = false;\n    } else {\n        ViewContext.data.edit = true;\n        await setPDN();\n        await setDOCS()\n    }\n\n    console.log(user.data.groupIds);\n    console.log(ViewContext.data.__formType);\n\n    if (user.data.groupIds \u0026\u0026 user.data.groupIds.find(f =\u003e f.id == 'd6000da0-c9aa-55eb-9882-f118b432730b')\n        \u0026\u0026 ViewContext.data.__formType \u0026\u0026 ViewContext.data.__formType.code == ViewContext.fields.__formType.variants.edit.code) {\n        ViewContext.data.view_service = true;\n    } else {\n        ViewContext.data.view_service = false;\n    }\n    await viewUser();\n\n    ViewContext.data.details_status = [];\n    ViewContext.data.employment_table_errors = [];\n\n    await change_notification_type();\n\n    /** \n     * Генерация ID для занесения данных в кэш. \n     * Предотвращает коллизии при одновременном изменении строк в карточке сотрудника. \n    */\n    ViewContext.data.cache_guid = uuidv4();\n\n    if (Context.data.personal_data_employee == true) {\n        ViewContext.data.view_pdn = false;\n    }\n\n    if (Context.data.organization) {\n        const organization = await Context.data.organization.fetch();\n        ViewContext.data.leave_choice_to_staff = organization.data.leave_choice_to_staff;\n    };\n}\n\nasync function checkPassport(): Promise\u003cvoid\u003e {\n    const table = Context.data.documents_for_employment;\n    if (!table || table.length \u003c 1) {\n        return;\n    };\n    const lines = await Promise.all(table!.map(async (line) =\u003e await line.doc.fetch()));\n    if (!lines.find(line =\u003e line.data.__name.includes(\"Паспорт\"))) {\n        return;\n    };\n    let files = await Promise.all(table.map(async (line) =\u003e {\n        if (!line.file_doc) {\n            return;\n        };\n        return await line.file_doc.fetch();\n    }));\n    console.log(files)\n    if (files.some(file =\u003e {\n        if (!file) {\n            return false;\n        };\n        return !file.data.__name.includes(\"jpeg\") \u0026\u0026\n            !file.data.__name.includes(\"jpg\") \u0026\u0026\n            !file.data.__name.includes(\"png\") \u0026\u0026\n            !file.data.__name.includes(\"pdf\")\n    })) {\n        ViewContext.data.wrong_file_format = true;\n    } else {\n        ViewContext.data.wrong_file_format = false;\n    };\n};\n\nasync function setFIO(): Promise\u003cvoid\u003e {\n    Context.data.full_name = {\n        firstname: Context.data.name || '',\n        lastname: Context.data.surname || '',\n        middlename: Context.data.middlename || ''\n    }\n}\n\nasync function get_positions(): Promise\u003cvoid\u003e {\n    if (Context.data.position) {\n        const position = await Context.data.position.fetch();\n        const subdivision = await position.data.subdivision!.fetch();\n        const entity = await subdivision.data.organization!.fetch();\n        Context.data.structural_subdivision = position.data.subdivision;\n        Context.data.organization = entity;\n        Context.data.entity = entity.data.entity;\n    }\n}\n\nasync function setPDN(): Promise\u003cvoid\u003e {\n    if (Context.data.personal_data_employee === true) {\n        ViewContext.data.view_pdn = false;\n        ViewContext.data.view_skans = true;\n        //ViewContext.data.view_docs = false;\n        ViewContext.data.supportive_snils = Context.data.snils;\n        ViewContext.data.supportive_inn = Context.data.inn;\n        ViewContext.data.supportive_pass_code = Context.data.passport_department_code;\n        Context.data.snils = undefined;\n        Context.data.passport_department_code = undefined;\n        Context.data.inn = undefined;\n\n    } else {\n        ViewContext.data.view_pdn = true;\n        ViewContext.data.view_skans = false;\n        //ViewContext.data.view_docs = true;\n        Context.data.snils = ViewContext.data.supportive_snils;\n        Context.data.passport_department_code = ViewContext.data.supportive_pass_code;\n        Context.data.inn = ViewContext.data.supportive_inn;\n        Context.data.scans_personal_docs = false\n    }\n    await get_positions()\n}\n\nasync function setDOCS(): Promise\u003cvoid\u003e {\n    if (Context.data.scans_personal_docs === true) {\n        ViewContext.data.view_docs = false\n    } else {\n        ViewContext.data.view_docs = true\n    }\n}\n\nasync function checkFields(): Promise\u003cvoid\u003e {\n    let unepRequired = !!Context.data.unep_issue_required;\n    let employmentRequired = !!Context.data.is_employed;\n    if (!unepRequired \u0026\u0026 employmentRequired) {\n        Context.data.personal_data_employee = false;\n    };\n}\n\nasync function viewUser(): Promise\u003cvoid\u003e {\n    if (Context.data.user_already_exists === true) {\n        ViewContext.data.is_reading_email = true;\n        if (Context.data.staff_access == true) {\n            ViewContext.data.external = true;\n            ViewContext.data.internal = false\n        } else {\n            ViewContext.data.external = false;\n            ViewContext.data.internal = true\n        }\n        ViewContext.data.user = undefined;\n        ViewContext.data.doubleuserphone = false;\n        ViewContext.data.doubleuseremail = false;\n        if (Context.data.ext_user) {\n            ViewContext.data.check_user = Context.data.ext_user;\n        }\n        if (ViewContext.data.ext_user_app) {\n            ViewContext.data.check_ext_user = ViewContext.data.ext_user_app;\n        }\n    } else {\n        ViewContext.data.is_reading_email = false;\n        ViewContext.data.external = false;\n        ViewContext.data.internal = false;\n        ViewContext.data.doublestaff = false;\n        ViewContext.data.doubleuser = false;\n        ViewContext.data.check_user = undefined;\n        ViewContext.data.check_ext_user = undefined;\n        //ViewContext.data.ext_user_app = undefined;\n        //Context.data.ext_user = undefined;\n        //очистка полей фио, телелефона и почты\n        // Context.data.name = undefined;\n        // Context.data.surname = undefined;\n        // Context.data.middlename = undefined;\n        // Context.data.full_name = undefined;\n        // Context.data.email = undefined;\n        // Context.data.phone = undefined;\n    }\n\n    await checkEmail();\n    await checkPhone();\n}\n\nasync function getUserData(): Promise\u003cvoid\u003e {\n    if (Context.data.ext_user) {\n        ViewContext.data.check_user = Context.data.ext_user;\n        const user = await Context.data.ext_user.fetch();\n        const doubleUser = await Application.search().where(f =\u003e f.ext_user.eq(Context.data.ext_user!)).first();\n        if (doubleUser) {\n            ViewContext.data.doubleuser = true;\n        } else {\n            ViewContext.data.doubleuser = false;\n        }\n        Context.data.name = user.data.fullname ? user.data.fullname.firstname : '';\n        Context.data.surname = user.data.fullname ? user.data.fullname.lastname : '';\n        Context.data.middlename = user.data.fullname ? user.data.fullname.middlename : '';\n        Context.data.full_name = user.data.fullname;\n        Context.data.email = user.data.email ? Context.fields.email.create(user.data.email) : undefined;\n        Context.data.phone = user.data.workPhone\n    }\n\n    //актуализация групп\n    refreshStaffGroups();\n    await checkEmail();\n    await checkPhone();\n}\n\nasync function getExtUserData(): Promise\u003cvoid\u003e {\n    if (ViewContext.data.ext_user_app) {\n        ViewContext.data.check_ext_user = ViewContext.data.ext_user_app;\n        const user = await ViewContext.data.ext_user_app.fetch();\n        const doubleStaff = await Application.search().where(f =\u003e f.external_user.has(ViewContext.data.ext_user_app!)).first();\n        if (doubleStaff) {\n            ViewContext.data.doublestaff = true;\n        } else {\n            ViewContext.data.doublestaff = false;\n        }\n        Context.data.name = user.data.fullname ? user.data.fullname.firstname : '';\n        Context.data.surname = user.data.fullname ? user.data.fullname.lastname : '';\n        Context.data.middlename = user.data.fullname ? user.data.fullname.middlename : '';\n        Context.data.full_name = user.data.fullname;\n        Context.data.email = user.data.email ? Context.fields.email.create(user.data.email) : undefined;\n        Context.data.phone = user.data.phone \u0026\u0026 user.data.phone.length \u003e 0 ? Context.fields.phone.create(user.data.phone[0].tel) : undefined;\n        if (!Context.data.external_user) {\n            Context.data.external_user = [];\n            Context.data.external_user = Context.data.external_user.concat(user);\n        }\n    }\n\n    //актуализация групп\n    refreshStaffGroups();\n    await checkEmail();\n    await checkPhone();\n}\n\nasync function checkPhone(): Promise\u003cvoid\u003e {\n    if (Context.data.phone) {\n        const staff_check = await Application.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.phone.eq(Context.data.phone!),\n                f.__id.neq(Context.data.__id),\n            ))\n            .first();\n\n        if (ViewContext.data.check_user) {\n            const user_check = await System.users.search()\n                .where((field, group) =\u003e group.and(\n                    field.__deletedAt.eq(null),\n                    field.__status.eq(UserStatus.Active),\n                    group.or(\n                        field.workPhone.eq(Context.data.phone!),\n                        field.mobilePhone.eq(Context.data.phone!),\n                    ),\n                    field.__id.neq(ViewContext.data.check_user!.id),\n                ))\n                .first();\n            if (user_check \u0026\u0026 staff_check) {\n                ViewContext.data.doubleuserphone = true;\n                ViewContext.data.user_error_phone = `Пользователь и сотрудник с таким номером телефона уже существует (${user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                ViewContext.data.error_validation_phone = true;\n                ViewContext.data.doublephone = false;\n                ViewContext.data.staff_error_phone = '';\n                ViewContext.data.error_validation_phone_staff = false;\n                checkLabels();\n                return;\n            }\n            if (user_check \u0026\u0026 !staff_check) {\n                ViewContext.data.doubleuserphone = true;\n                ViewContext.data.user_error_phone = `Пользователь с таким номером телефона существует (${user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                ViewContext.data.error_validation_phone = true;\n                ViewContext.data.doublephone = false;\n                ViewContext.data.staff_error_phone = '';\n                ViewContext.data.error_validation_phone_staff = false;\n                checkLabels();\n                return;\n            }\n        }\n\n        if (ViewContext.data.check_ext_user) {\n            const ext_user_data = await ViewContext.data.check_ext_user.fetch();\n            const ext_user_check = await ViewContext.fields.check_ext_user.app.search()\n                .where((field, group) =\u003e group.and(\n                    field.__user_status.eq(ext_user_data.fields.__user_status.variants.active),\n                    field.__deletedAt.eq(null),\n                    group.or(\n                        field.phone.has(Context.data.phone!),\n                        field.phone.has(Context.data.phone!),\n                    ),\n                    field.__id.neq(ViewContext.data.check_ext_user!.id),\n                ))\n                .first();\n                \n            if (ext_user_check \u0026\u0026 staff_check) {\n                ViewContext.data.doubleuserphone = true;\n                ViewContext.data.user_error_phone = `Пользователь и сотрудник с таким номером телефона уже существует (${ext_user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                ViewContext.data.error_validation_phone = true;\n                ViewContext.data.doublephone = false;\n                ViewContext.data.staff_error_phone = '';\n                ViewContext.data.error_validation_phone_staff = false;\n                checkLabels();\n                return;\n            }\n            if (ext_user_check \u0026\u0026 !staff_check) {\n                ViewContext.data.doubleuserphone = true;\n                ViewContext.data.user_error_phone = `Пользователь с таким номером телефона существует (${ext_user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                ViewContext.data.error_validation_phone = true;\n                ViewContext.data.doublephone = false;\n                ViewContext.data.staff_error_phone = '';\n                ViewContext.data.error_validation_phone_staff = false;\n                checkLabels();\n                return;\n            }\n        }\n\n        if ((!ViewContext.data.check_user \u0026\u0026 !ViewContext.data.check_ext_user) \u0026\u0026 (!Context.data.ext_user \u0026\u0026 !ViewContext.data.ext_user_app)) {\n            const user_check = await System.users.search()\n                .where((field, group) =\u003e group.and(\n                    field.__deletedAt.eq(null),\n                    field.__status.eq(UserStatus.Active),\n                    group.or(\n                        field.workPhone.eq(Context.data.phone!),\n                        field.mobilePhone.eq(Context.data.phone!),\n                    ),\n                ))\n                .first();\n            if (user_check \u0026\u0026 staff_check) {\n                ViewContext.data.doubleuserphone = true;\n                ViewContext.data.user_error_phone = `Пользователь и сотрудник с таким номером телефона уже существует (${user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                ViewContext.data.error_validation_phone = true;\n                ViewContext.data.doublephone = false;\n                ViewContext.data.staff_error_phone = '';\n                ViewContext.data.error_validation_phone_staff = false;\n                checkLabels();\n                return;\n            }\n            if (user_check \u0026\u0026 !staff_check) {\n                ViewContext.data.doubleuserphone = true;\n                ViewContext.data.user_error_phone = `Пользователь с таким номером телефона существует (${user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                ViewContext.data.error_validation_phone = true;\n                ViewContext.data.doublephone = false;\n                ViewContext.data.staff_error_phone = '';\n                ViewContext.data.error_validation_phone_staff = false;\n                checkLabels();\n                return;\n            }\n        }\n\n        if (staff_check) {\n            ViewContext.data.doublephone = true;\n            ViewContext.data.staff_error_phone = `Сотрудник с таким номером телефона уже существует (${staff_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n            ViewContext.data.error_validation_phone_staff = true;\n            checkLabels();\n            return;\n        }\n        ViewContext.data.user = undefined;\n        ViewContext.data.doubleuserphone = false;\n        ViewContext.data.user_error_phone = '';\n        ViewContext.data.staff = undefined;\n        ViewContext.data.doublephone = false;\n        ViewContext.data.staff_error_phone = '';\n        ViewContext.data.error_validation_phone_staff = false;\n        ViewContext.data.error_validation_phone = false;\n        checkLabels();\n    }\n}\n\nasync function checkEmail(): Promise\u003cvoid\u003e {\n    if (Context.data.email) {\n        const staff_check = await Application.search()\n            .where((field, group) =\u003e group.and(\n                field.__deletedAt.eq(null),\n                field.email.eq(Context.data.email!.email),\n                field.__id.neq(Context.data.__id),\n            ))\n            .first();\n\n        if (ViewContext.data.check_user) {\n            const user_check = await System.users.search()\n                .where((field, group) =\u003e group.and(\n                    field.__status.eq(UserStatus.Active),\n                    field.__deletedAt.eq(null),\n                    field.email.eq(Context.data.email!.email),\n                    field.__id.neq(ViewContext.data.check_user!.id),\n                ))\n                .first();\n            if (user_check \u0026\u0026 staff_check) {\n                ViewContext.data.doubleuseremail = true;\n                ViewContext.data.user_error_email = `Пользователь и сотрудник с таким email уже существует (${user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                ViewContext.data.error_validation_email = true;\n                ViewContext.data.doubleemail = false;\n                ViewContext.data.staff_error_email = '';\n                ViewContext.data.error_validation_email_staff = false;\n                checkLabels();\n                return;\n            }\n            if (user_check \u0026\u0026 !staff_check) {\n                ViewContext.data.doubleuseremail = true;\n                ViewContext.data.user_error_email = `Пользователь с таким email существует (${user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                ViewContext.data.error_validation_email = true;\n                ViewContext.data.doubleemail = false;\n                ViewContext.data.staff_error_email = '';\n                ViewContext.data.error_validation_email_staff = false;\n                checkLabels();\n                return;\n            }\n        }\n\n        if (ViewContext.data.check_ext_user) {\n            const ext_user_data = await ViewContext.data.check_ext_user.fetch();\n            const ext_user_check = await ViewContext.fields.check_ext_user.app.search()\n                .where((field, group) =\u003e group.and(\n                    field.__user_status.eq(ext_user_data.fields.__user_status.variants.active),\n                    field.__deletedAt.eq(null),\n                    field.email.eq(Context.data.email!.email),\n                    field.__id.neq(ViewContext.data.check_ext_user!.id)\n                ))\n                .first();\n            \n            if (ext_user_check \u0026\u0026 staff_check) {\n                ViewContext.data.doubleuseremail = true;\n                ViewContext.data.user_error_email = `Пользователь и сотрудник с таким email уже существует (${ext_user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                ViewContext.data.error_validation_email = true;\n                ViewContext.data.doubleemail = false;\n                ViewContext.data.staff_error_email = '';\n                ViewContext.data.error_validation_email_staff = false;\n                checkLabels();\n                return;\n            }\n            if (ext_user_check \u0026\u0026 !staff_check) {\n                ViewContext.data.doubleuseremail = true;\n                ViewContext.data.user_error_email = `Пользователь с таким email существует (${ext_user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                ViewContext.data.error_validation_email = true;\n                ViewContext.data.doubleemail = false;\n                ViewContext.data.staff_error_email = '';\n                ViewContext.data.error_validation_email_staff = false;\n                checkLabels();\n                return;\n            }\n        }\n\n        if ((!ViewContext.data.check_user \u0026\u0026 !ViewContext.data.check_ext_user) \u0026\u0026 (!Context.data.ext_user \u0026\u0026 !ViewContext.data.ext_user_app)) {\n            const user_check = await System.users.search()\n                .where((field, group) =\u003e group.and(\n                    field.__status.eq(UserStatus.Active),\n                    field.__deletedAt.eq(null),\n                    field.email.eq(Context.data.email!.email),\n                ))\n                .first();\n\n            \n            if (user_check \u0026\u0026 staff_check) {\n                ViewContext.data.doubleuseremail = true;\n                ViewContext.data.user_error_email = `Пользователь и сотрудник с таким email уже существует (${user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                ViewContext.data.error_validation_email = true;\n                ViewContext.data.doubleemail = false;\n                ViewContext.data.staff_error_email = '';\n                ViewContext.data.error_validation_email_staff = false;\n                checkLabels();\n                return;\n            }\n            if (user_check \u0026\u0026 !staff_check) {\n                ViewContext.data.doubleuseremail = true;\n                ViewContext.data.user_error_email = `Пользователь с таким email существует (${user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                ViewContext.data.error_validation_email = true;\n                ViewContext.data.doubleemail = false;\n                ViewContext.data.staff_error_email = '';\n                ViewContext.data.error_validation_email_staff = false;\n                checkLabels();\n                return;\n            }\n        }\n\n        if (staff_check) {\n            ViewContext.data.doubleemail = true;\n            ViewContext.data.staff_error_email = `Сотрудник с таким email уже существует (${staff_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n            ViewContext.data.error_validation_email_staff = true;\n            checkLabels();\n            return;\n        }\n\n        ViewContext.data.user_email = undefined;\n        ViewContext.data.doubleuseremail = false;\n        ViewContext.data.user_error_email = '';\n        ViewContext.data.staff_email = undefined;\n        ViewContext.data.doubleemail = false;\n        ViewContext.data.staff_error_email = '';\n        ViewContext.data.error_validation_email = false;\n        ViewContext.data.error_validation_email_staff = false;\n        checkLabels();\n    }\n}\n\nfunction checkLabels() {\n    const button_save = document.querySelectorAll('.btn-primary');\n    for (let button of button_save) {\n        if (button.innerText.includes('Выслать приглашение')) {\n            if (ViewContext.data.error_validation_email === true || ViewContext.data.error_validation_email_staff === true || ViewContext.data.error_validation_phone === true || ViewContext.data.error_validation_phone_staff === true) {\n                button.disabled = true;\n            } else {\n                button.disabled = false;\n            }\n        }\n    }\n}\n\nasync function checkDouble(): Promise\u003cvoid\u003e {\n    if (Context.data.inn \u0026\u0026 Context.data.snils) {\n        const double = await Application.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.__id.neq(Context.data.__id),\n                g.or(\n                    f.inn.eq(Context.data.inn!),\n                    f.snils.eq(Context.data.snils!)\n                )\n            ))\n            .first()\n        if (double) {\n            ViewContext.data.doubleinnsnils = true;\n            ViewContext.data.staff_inn = double;\n            if (window.saveButton)\n                window.saveButton.disabled = true;\n        } else {\n            ViewContext.data.doubleinnsnils = false;\n            ViewContext.data.staff_inn = undefined;\n            if (window.saveButton)\n                window.saveButton.disabled = false;\n        }\n    } else {\n        ViewContext.data.doubleinnsnils = false;\n        ViewContext.data.staff_inn = undefined;\n        if (window.saveButton)\n            window.saveButton.disabled = false;\n    }\n\n    if (Context.data.snils) {\n        ViewContext.data.supportive_snils = Context.data.snils;\n        let split_str = Context.data.snils.match(/(\\d{1,3})/g);\n        if (split_str \u0026\u0026 split_str[0].length == 3 \u0026\u0026 (split_str[1])) {\n            Context.data.snils = split_str[0] + '-' + split_str[1];\n        }\n        if (split_str \u0026\u0026 split_str[1].length == 3 \u0026\u0026 (split_str[2])) {\n            Context.data.snils += '-' + split_str[2];\n        }\n\n        if (split_str \u0026\u0026 split_str[2].length == 3 \u0026\u0026 (split_str[3])) {\n            Context.data.snils += ' ' + split_str![3];\n        }\n    }\n\n    if (Context.data.inn) {\n        ViewContext.data.supportive_inn = Context.data.inn;\n        let split_str = Context.data.inn.match(/(\\d{1,12})/g);\n        if (split_str \u0026\u0026 split_str[0].length == 12 \u0026\u0026 (split_str[1])) {\n            Context.data.inn = split_str[0];\n        }\n    }\n\n    validateInn(Context.data.inn!);\n    validateSnils(Context.data.snils!);\n}\n\nasync function validate(): Promise\u003cValidationResult\u003e {\n    let result = new ValidationResult();\n\n    result.title = 'Ошибка!';\n\n    const validate_table = valide_employment_table();\n\n    if (!validate_table \u0026\u0026 Context.data.employment_table!.length \u003e 0) {\n        result.addMessage('Обнаружены ошибки в таблице занятости сотрудника. Проверьте таблицу и исправьте ошибки.');\n        result.addContextError('employment_table', '')\n    }\n    if (!validate_table \u0026\u0026 Context.data.employment_table!.length == 0) {\n        result.addMessage('Заполните \"Сведения занятости\" основным местом работы через \"+Строка занятости\"');\n        result.addContextError('employment_table', '')\n    }\n    if (ViewContext.data.doubleemail) {\n        result.addContextError(\"email\", \"Сотрудник с таким адресом электронной почты уже существует\");\n    }\n    if (ViewContext.data.doubleuserphone) {\n        result.addContextError(\"phone\", \"Пользователь с таким номером телефона уже существует\");\n    }\n    if (ViewContext.data.doubleuseremail) {\n        result.addContextError(\"email\", \"Пользователь с таким адресом электронной почты уже существует\");\n    }\n    if (ViewContext.data.doubleinnsnils) {\n        result.addContextError(\"inn\", \"Пользователь с таким ИНН/СНИЛС уже существует\");\n    }\n    /*if (ViewContext.data.show_sms_provider_error) {\n        result.addContextError('phone', 'Модуль SMS-провайдера выключен. Отправка SMS невозможна. Включите модуль.')\n    }*/\n    // if (Context.data.scans_personal_docs) {\n    //     if (Context.data.documents_for_employment \u0026\u0026 Context.data.documents_for_employment.length == 0) {\n    //         result.addContextError('documents_for_employment', 'Требуется заполнить таблицу документов для трудоустройства')\n    //     }\n    // }\n\n\n    return result;\n}\n\n// #region Работа с таблицей занятости.\n\ninterface ErrorsLine {\n    id: number,\n    error_text: string,\n}\n\ninterface LineDetail {\n    id: number,\n    position?: string,\n    organizatoin?: string,\n    subdivision?: string,\n    type_employment?: string,\n    work_place?: string,\n    work_schedules?: string,\n    employment_relationship_type?: string,\n    remote_work?: boolean,\n    rate?: number,\n    date_by?: string,\n    admission_date_position?: string,\n    admission_date_organization?: string,\n    id_1c?: string,\n}\n\n/** Генерация GUID */\nfunction uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n        .replace(/[xy]/g, function (c) {\n            const r = Math.random() * 16 | 0,\n                v = c == 'x' ? r : (r \u0026 0x3 | 0x8);\n            return v.toString(16);\n        });\n}\n\n/** Валидация таблицы занятости. */\nfunction valide_employment_table(): boolean {\n    Context.data.employment_table = Context.data.employment_table;\n    const employment_table = Context.data.employment_table!;\n\n    // Если таблица занятости не заполнена - false.\n    if (employment_table.length == 0) {\n        return false;\n    }\n\n    // Если в строках таблицы занятости есть ошибки - false.\n    if (ViewContext.data.employment_table_errors \u0026\u0026 ViewContext.data.employment_table_errors.length \u003e 0) {\n        return false;\n    }\n\n    return true;\n}\n\n/** Создание новой строки в таблице занятости. */\nasync function add_employment_row(): Promise\u003cvoid\u003e {\n    const id = calculate_line_number();\n\n    const row = Context.data.employment_table!.insert();\n\n    row.id = id;\n\n    Context.data.employment_table = Context.data.employment_table;\n}\n\n/** Получение ID строки для таблицы занятости. */\nfunction calculate_line_number(): number {\n    /**\n     * Если в таблице есть строки, то берем ID последней строки и прибавляем 1.\n     * Иначе возвращаем 0.\n     */\n    const ids = Context.data.employment_table!.map(f =\u003e f.id);\n\n    if (ids.length == 0) {\n        return 0;\n    }\n\n    return ids[ids.length - 1] + 1;\n}\n\n/** Проверка таблицы занятости и формирование списка ошибок по строкам. */\nfunction check_errors(): void {\n    const employment_table = Context.data.employment_table!;\n\n    const errors: ErrorsLine[] = [];\n\n    for (const row of employment_table) {\n        if (row.position) {\n            if (employment_table.filter(f =\u003e f.position?.id == row.position.id).length \u003e 1) {\n                errors.push({\n                    id: row.id,\n                    error_text: 'Данная позиция уже указана у сотрудника',\n                })\n            }\n\n            if (!row.organization) {\n                errors.push({\n                    id: row.id,\n                    error_text: 'У выбранной позиции не указана организация'\n                })\n            }\n\n            if (!row.subdivision) {\n                errors.push({\n                    id: row.id,\n                    error_text: 'У выбранной позиции не указано подразделение',\n                })\n            }\n\n            if (!row.type_employment) {\n                errors.push({\n                    id: row.id,\n                    error_text: 'Не выбран вид занятости'\n                })\n            }\n\n            if (row.type_employment \u0026\u0026 row.type_employment.code == 'main_workplace' \u0026\u0026 employment_table.filter(f =\u003e f.type_employment?.code == 'main_workplace').length \u003e 1) {\n                errors.push({\n                    id: row.id,\n                    error_text: 'Указано несколько строк с местом основной работы',\n                })\n            }\n\n            if (!row.admission_date_position) {\n                errors.push({\n                    id: row.id,\n                    error_text: 'Не указана дата приёма на позицию',\n                })\n            }\n\n            if (!row.admission_date_organization) {\n                errors.push({\n                    id: row.id,\n                    error_text: 'Не указана дата приёма в организацию'\n                })\n            }\n            if (row.admission_date_organization.after(row.admission_date_position)) {\n                errors.push({\n                    id: row.id,\n                    error_text: 'Дата приема на позицию раньше даты приема в организацию'\n                })\n            }\n        } else {\n            errors.push({\n                id: row.id,\n                error_text: 'Не указана позиция ШР'\n            })\n        }\n    }\n\n    ViewContext.data.employment_table_errors = errors;\n}\n\n/** Событие, вызываемое при изменении таблицы занятости. */\nasync function employment_table_onchange(): Promise\u003cvoid\u003e {\n    check_errors();\n\n    const employment_table = Context.data.employment_table;\n\n    /**\n     * В случае, если есть строка в которой указана основная позиция, \n     * то заполняем поля в карточке сотрудника,\n     * иначе очищаем все поля.\n     */\n\n    if (employment_table \u0026\u0026 employment_table.length \u003e 0) {\n        const main_position = employment_table.find(f =\u003e f.type_employment?.code == 'main_workplace');\n\n        if (main_position \u0026\u0026 main_position.position) {\n            Context.data.position = main_position.position;\n            Context.data.organization = main_position.organization;\n            Context.data.structural_subdivision = main_position.subdivision;\n            Context.data.work_start = main_position.admission_date_organization;\n            Context.data.admission_date_position = main_position.admission_date_position;\n            Context.data.employment_type = main_position.type_employment;\n        } else {\n            Context.data.position = undefined;\n            Context.data.organization = undefined;\n            Context.data.structural_subdivision = undefined;\n            Context.data.work_start = undefined;\n            Context.data.admission_date_position = undefined;\n            Context.data.employment_type = undefined\n        }\n    } else {\n        Context.data.position = undefined;\n        Context.data.organization = undefined;\n        Context.data.structural_subdivision = undefined;\n        Context.data.work_start = undefined;\n        Context.data.admission_date_position = undefined;\n        Context.data.employment_type = undefined;\n    }\n}\n\n/** Событие, которое вызывает при изменении строки занятости в динамическом списке. */\nasync function update_line(): Promise\u003cvoid\u003e {\n    /**\n     * Обмен данными между виджетом и основной формой происходит через кэш.\n     * При изменении данных в виджете, происходит триггер клика по кнопке на форме создания карточки сотрудника.\n     * В кэше по ключу \"update_line_$guid$\" хранится информация по строке. На основе этой информации заполняем таблицу занятости.\n     */\n\n    const cache = await System.cache.getItem(`update_line_${ViewContext.data.cache_guid}`);\n\n    if (cache) {\n        const line_details: LineDetail = JSON.parse(cache);\n        const line = Context.data.employment_table!.find(f =\u003e f.id == line_details.id)!;\n\n        const [position, organization, subdivision, work_schedules, employment_relationship_type, work_place] = await Promise.all([\n            Context.fields.position.app.search().where(f =\u003e f.__id.eq(line_details.position!)).first(),\n            Context.fields.organization.app.search().where(f =\u003e f.__id.eq(line_details.organizatoin!)).first(),\n            Context.fields.structural_subdivision.app.search().where(f =\u003e f.__id.eq(line_details.subdivision!)).first(),\n            Context.fields.work_schedules.app.search().where(f =\u003e f.__id.eq(line_details.work_schedules!)).first(),\n            Context.fields.type_employment_relationship.app.search().where(f =\u003e f.__id.eq(line_details.employment_relationship_type!)).first(),\n            Context.fields.work_place.app.search().where(f =\u003e f.__id.eq(line_details.work_place!)).first()\n        ]);\n\n        if (position) line.position = position;\n        if (organization) line.organization = organization;\n        if (subdivision) line.subdivision = subdivision;\n        if (work_schedules) line.work_schedules = work_schedules;\n        if (employment_relationship_type) line.employment_relationship_type = employment_relationship_type;\n        if (work_place) line.work_place = work_place;\n        if (line_details.date_by) { line.date_by = new Datetime(line_details.date_by).getDate(); } else { (line as any).date_by = undefined; }\n        if (line_details.admission_date_organization) line.admission_date_organization = new Datetime(line_details.admission_date_organization).getDate();\n        if (line_details.admission_date_position) line.admission_date_position = new Datetime(line_details.admission_date_position).getDate();\n        if (line_details.remote_work) line.remote_work = line_details.remote_work;\n        if (line_details.rate) line.rate = line_details.rate;\n        if (line_details.id_1c) line.id_1c = line_details.id_1c;\n        if (line_details.type_employment) line.type_employment = (Context.fields.employment_table.fields.type_employment.variants as any)[line_details.type_employment];\n\n        await employment_table_onchange();\n    }\n}\n\n/** Событие, вызываемое при удалении строки из динамического списка. */\nasync function delete_line(): Promise\u003cvoid\u003e {\n    /**\n     * Обмен данными между виджетом и основной формой происходит через кэш.\n     * При нажатии на кнопку удаления в виджете, происходит триггер клика по кнопке на форме создания карточки сотрудника.\n     * В кэше по ключу \"delete_line_$guid$\" хранится информация по строке, которую необходимо удалить.\n     */\n\n    const cache = await System.cache.getItem(`delete_line_${ViewContext.data.cache_guid}`);\n\n    if (cache) {\n        const line_details: LineDetail = JSON.parse(cache);\n        const line_index = Context.data.employment_table!.findIndex(f =\u003e f.id == line_details.id);\n\n        if (line_index != -1) {\n            const details_status_index = ViewContext.data.details_status.findIndex((f: any) =\u003e f.id == line_details.id);\n            ViewContext.data.details_status.splice(details_status_index, 1)\n            ViewContext.data.employment_table_errors = ViewContext.data.employment_table_errors.map((f: any) =\u003e f.id != line_details.id);\n            Context.data.employment_table!.delete(line_index);\n            Context.data.employment_table = Context.data.employment_table;\n        }\n    }\n}\n\n//#endregion Работа с таблицей занятости.\n\nasync function change_notification_type(): Promise\u003cvoid\u003e {\n    const notification_type = Context.fields.notification.variants;\n\n    ViewContext.data.email_required = false;\n    ViewContext.data.show_sms_provider_error = false;\n    ViewContext.data.show_phone_auth_error = false;\n\n    switch (Context.data.notification?.code) {\n        case notification_type.email.code:\n            ViewContext.data.email_required = true;\n            break;\n\n        case notification_type.email_and_sms.code:\n            ViewContext.data.email_required = true;\n            await sms_type();\n            break;\n\n        case notification_type.sms.code:\n            await sms_type();\n            break;\n\n        default:\n            break;\n    }\n}\n\nasync function sms_type(): Promise\u003cvoid\u003e {\n    const sms_provider_enabled = await check_sms_provider();\n    ViewContext.data.show_sms_provider_error = !sms_provider_enabled;\n\n    if (Context.data.notification?.code == \"sms\") {\n        const phone_auth_enabled = await check_phone_auth();\n        ViewContext.data.show_phone_auth_error = !phone_auth_enabled;\n    }\n}\n\n// Проверка на включенные модули SMS-провайдеров.\nasync function check_sms_provider(): Promise\u003cboolean\u003e {\n    // Получаем список включенных модулей, которые находятся в группе модулей SMS.\n    const response = await fetch(`${System.getBaseUrl()}/api/integrations/enabled?group=sms`, {\n        method: 'GET',\n    });\n\n    if (response.ok) {\n        const providers = await response.json();\n        // Если список пустой - включенных модулей нет.\n        return providers.length \u003e 0;\n    }\n\n    return false;\n}\n\n// Проверка на включенность авторизации по номеру телефона.\nasync function check_phone_auth(): Promise\u003cboolean\u003e {\n    // Получаем настройки для авторизации по номеру телефона.\n    const response = await fetch(`${System.getBaseUrl()}/api/settings/global/extendedAuth`, {\n        method: 'GET',\n    });\n\n    if (response.ok) {\n        const extendedAuth = await response.json();\n        return extendedAuth.authByPhone;\n    }\n\n    return false;\n}\n\nfunction validateInn(inn: string) {\n    if (Context.data.personal_data_employee == false) {\n        if (!inn || inn.length \u003c 12) {\n            console.log(\"inn is not full\")\n            ViewContext.data.wrong_inn_format = false;\n            return;\n        };\n        let result = false;\n        const checkDigit = function (inn: string, coefficients: number[]) {\n            let n = 0;\n            for (let i in coefficients) {\n                n += coefficients[i] * parseInt(inn[i]);\n            }\n            return n % 11 % 10;\n        };\n        switch (inn.length) {\n            case 10:\n                let n10 = checkDigit(inn, [2, 4, 10, 3, 5, 9, 4, 6, 8]);\n                if (n10 === parseInt(inn[9])) {\n                    result = true;\n                }\n                break;\n            case 12:\n                let n11 = checkDigit(inn, [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]);\n                let n12 = checkDigit(inn, [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]);\n                if ((n11 === parseInt(inn[10])) \u0026\u0026 (n12 === parseInt(inn[11]))) {\n                    result = true;\n                }\n                break;\n        }\n        if (!result) {\n            ViewContext.data.wrong_inn_format = true;\n            return;\n        }\n        ViewContext.data.wrong_inn_format = false;\n    }\n};\n\nfunction validateSnils(snils: string) {\n    if (Context.data.personal_data_employee == false) {\n        if (!snils || snils.length \u003c 14) {\n            ViewContext.data.wrong_snils_format = false;\n            console.log(\"snils not full\")\n            return;\n        };\n        snils = snils.replace(/[\\s-]/g, \"\");\n        console.log(snils)\n        let sum = 0;\n        for (let i = 0; i \u003c 9; i++) {\n            sum += parseInt(snils[i]) * (9 - i);\n        }\n        let checkDigit = 0;\n        if (sum \u003c 100) {\n            checkDigit = sum;\n        } else if (sum \u003e 101) {\n            checkDigit = sum % 101;\n            if (checkDigit === 100) {\n                checkDigit = 0;\n            }\n        }\n        if (checkDigit === parseInt(snils.slice(-2))) {\n            ViewContext.data.wrong_snils_format = false;\n            return;\n        };\n        ViewContext.data.wrong_snils_format = true;\n    }\n};\n\nasync function log_table(): Promise\u003cvoid\u003e {\n    console.log(Context.data.employment_table);\n}\n\nasync function recalc_ids(): Promise\u003cvoid\u003e {\n    let i = 0;\n\n    for (const row of Context.data.employment_table!) {\n        row.id = i;\n        i++;\n    }\n\n    Context.data.employment_table = Context.data.employment_table;\n}\n\nasync function no_middle_name_onchange(): Promise\u003cvoid\u003e {\n    if (Context.data.no_middle_name) {\n        if (Context.data.no_middle_name == true) {\n            Context.data.middlename = undefined;\n        }\n        // Обязательность поля \"Отчество\"\n    }\n}\nasync function recalc_ids_all(): Promise\u003cvoid\u003e {\n    console.log('Запуск перерасчета идентификаторов строк таблицы занятости');\n\n    const staffs = await Namespace.app.staff.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n\n    console.log(`Количество сотрудников: ${staffs.length}`);\n\n    let promises: Promise\u003cvoid\u003e[] = [];\n\n    for (const staff of staffs) {\n        console.log(staff.data.__name);\n\n        if (staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 0) {\n            let i = 0;\n\n            for (const row of Context.data.employment_table!) {\n                row.id = i; i++;\n            }\n\n            console.log('Перерасчет таблицы закончен');\n\n            promises.push(staff.save());\n\n            if (promises.length \u003e 80) {\n                await Promise.all(promises);\n                promises = [];\n            }\n        } else {\n            console.log('Таблица занятости не заполнена');\n        }\n    }\n\n    console.log('Перерасчет идентификаторов строк таблицы занятости закончен');\n}\n\nasync function refreshStaffGroups(): Promise\u003cvoid\u003e {\n    if (!Context.data.ext_user \u0026\u0026 !Context.data.organization) {\n        return;\n    };\n    const user = await Context.data.ext_user!.fetch();\n    const org = await Context.data.organization!.fetch();\n    if (!org.data.access_settings_organization) {\n        return;\n    };\n    const accessSettings = await org.data.access_settings_organization!.fetch();\n    if ((!accessSettings.data.inner_org_users || accessSettings.data.inner_org_users.length \u003c 1) || (!accessSettings.data.external_org_users || accessSettings.data.external_org_users.length \u003c 1)) {\n        return;\n    };\n    let groupToAddUser: UserGroupItem | undefined;\n    let groupToDeleteUser: UserGroupItem | undefined;\n    if (Context.data.staff_access == false) {\n        groupToAddUser = await System.userGroups.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__id.eq(accessSettings.data.inner_org_users![0].code)\n        )).first();\n        groupToDeleteUser = await System.userGroups.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__id.eq(accessSettings.data.external_org_users![0].code)\n        )).first();\n    } else {\n        groupToAddUser = await System.userGroups.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__id.eq(accessSettings.data.external_org_users![0].code)\n        )).first();\n        groupToDeleteUser = await System.userGroups.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__id.eq(accessSettings.data.inner_org_users![0].code)\n        )).first();\n    };\n    if (groupToAddUser) {\n        await groupToAddUser.addItem(user);\n        await groupToAddUser.save();\n        console.log(`user added to group ${groupToAddUser.data.__name}`)\n    };\n    if (!groupToDeleteUser || !groupToDeleteUser.data.subOrgunitIds || groupToDeleteUser.data.subOrgunitIds.length \u003c 1) {\n        return;\n    };\n    groupToDeleteUser.data.subOrgunitIds = groupToDeleteUser.data.subOrgunitIds.filter(id =\u003e user.id !== id);\n    await groupToDeleteUser.save();\n    console.log(`user deleted from group ${groupToDeleteUser.data.__name}`)\n};\n\nasync function changePassDepCode(): Promise\u003cvoid\u003e {\n    if (Context.data.passport_department_code) {\n        ViewContext.data.supportive_pass_code = Context.data.passport_department_code;\n        let split_str = Context.data.passport_department_code.match(/(\\d{1,3})/g);\n        if (split_str \u0026\u0026 split_str[0].length == 3 \u0026\u0026 (split_str[1])) {\n            Context.data.passport_department_code = split_str[0] + '-' + split_str[1];\n        }\n    }\n}\n\nasync function checkNumber(): Promise\u003cvoid\u003e {\n    if (Context.data.passport_number) {\n        let split_str = Context.data.passport_number.match(/(\\d{1,6})/g);\n        if (split_str \u0026\u0026 split_str[0].length == 6 \u0026\u0026 (split_str[1])) {\n            Context.data.passport_number = split_str[0];\n        }\n    }\n}\n\nasync function checkSeries(): Promise\u003cvoid\u003e {\n    if (Context.data.passport_series) {\n        let split_str = Context.data.passport_series.match(/(\\d{1,4})/g);\n        if (split_str \u0026\u0026 split_str[0].length == 4 \u0026\u0026 (split_str[1])) {\n            Context.data.passport_series = split_str[0];\n        }\n    }\n}\n",
    "clientScriptOptions": {
      "allowNamespace": true,
      "allowServer": true
    },
    "serverScripts": "/* Client scripts module */\n\ninterface StaffInfo {\n    LastName: string;\n    FirstName: string;\n    FatherName: string;\n    DateOfBirth: string;\n    YearsOld: number;\n    Phone: string;\n    Login: string;\n    Password: string;\n    Email: string;\n    Gender: string;\n    GenderCode: string;\n    PasportNum: string;\n    PasportSerial: string;\n    PasportNumber: number;\n    PasportCode: string;\n    PasportOtd: string;\n    PasportDate: string;\n    inn_fiz: string;\n    inn_ur: string;\n    snils: string;\n    oms: number;\n    ogrn: string;\n    kpp: number;\n    Address: string;\n    AddressReg: string;\n    Country: string;\n    Region: string;\n    City: string;\n    Street: string;\n    House: number;\n    Apartment: number;\n    bankBIK: number;\n    bankCorr: string;\n    bankINN: number;\n    bankKPP: number;\n    bankNum: string;\n    bankClient: string;\n    bankCard: string;\n    bankDate: string;\n    bankCVC: number;\n    EduSpecialty: string;\n    EduProgram: string;\n    EduName: string;\n    EduDocNum: string;\n    EduRegNumber: string;\n    EduYear: number;\n    CarBrand: string;\n    CarModel: string;\n    CarYear: number;\n    CarColor: string;\n    CarNumber: string;\n    CarVIN: string;\n    CarSTS: string;\n    CarSTSDate: string;\n    CarPTS: string;\n    CarPTSDate: string;\n}\n\nasync function random_fill(): Promise\u003cvoid\u003e {\n    const data = await get_data();\n\n    if (data) {\n        const user = await System.users.getCurrentUser();\n        await set_fields(data, user);\n    }\n}\n\nasync function set_fields(data: StaffInfo, user: UserItem): Promise\u003cvoid\u003e {\n    Context.data.name = data.FirstName;\n    Context.data.middlename = data.FatherName;\n    Context.data.surname = data.LastName;\n\n    Context.data.date_of_birth = new Datetime(data.DateOfBirth, \"DD.MM.YYYY\").getDate();\n    Context.data.phone = {\n        tel: \"+\" + data.Phone.replace(/\\D/g, ''),\n        type: PhoneType.Work\n    };\n\n    const email = user.data.email ?\n        `${user.data.email.split('@')[0]}+${new Datetime().format(\"DDMMYYYHHmm\")}@${user.data.email.split('@')[1]}` :\n        data.Email;\n\n    Context.data.email = {\n        email: email,\n        type: EmailType.Work\n    };\n    Context.data.sex = data.Gender == 'man' ? false : true;\n    Context.data.passport_series = data.PasportSerial;\n    Context.data.passport_number = String(data.PasportNumber);\n    Context.data.passport_department_code = data.PasportCode;\n    Context.data.russian_passport = true;\n    Context.data.issued_by = data.PasportOtd;\n    Context.data.date_of_issue = new Datetime(data.PasportDate, \"DD.MM.YYYY\").getDate();\n    Context.data.inn = data.inn_fiz;\n    const snils = String(data.snils);\n    Context.data.snils = `${snils.substring(0, 3)}-${snils.substring(3, 6)}-${snils.substring(6, 9)} ${snils.substring(9, 11)}`;\n\n    Context.data.city = data.City;\n    Context.data.street = data.Street;\n    Context.data.home = String(data.House);\n}\n\nasync function get_data(): Promise\u003cStaffInfo | undefined\u003e {\n    const response = await fetch('https://api.randomdatatools.ru', {\n        method: \"GET\",\n    });\n\n    if (response.ok) {\n        const data: StaffInfo = await response.json();\n        return data;\n    }\n\n    return undefined;\n}",
    "serverScriptOptions": {
      "allowNamespace": true
    },
    "widgetZones": [
      {
        "code": "[footer]"
      }
    ],
    "dataFieldCode": "item"
  },
  "dataNamespace": "kedo",
  "dataCode": "staff",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        async function get_settings_kedo() {\n            const settings = await ViewContext.fields.settings_kedo.app.search()\n                .where(field =\u003e field.__deletedAt.eq(null))\n                .size(10000)\n                .all();\n            const notifications = settings.find(field =\u003e field.data.code == 'notification_staff');\n            if (notifications \u0026\u0026 notifications.data.category \u0026\u0026 notifications.data.status === true \u0026\u0026 !Context.data.notification) {\n                Context.data.notification = Context.fields.notification.data.variants.find(field =\u003e field.code == notifications.data.category.code);\n            }\n        }\n        async function onInit() {\n            get_settings_kedo();\n            if (Context.data.snils) {\n                ViewContext.data.supportive_snils = Context.data.snils;\n                Context.data.snils = Context.data.snils;\n            }\n            if (Context.data.inn) {\n                ViewContext.data.supportive_inn = Context.data.inn;\n                Context.data.inn = Context.data.inn;\n            }\n            if (Context.data.passport_department_code) {\n                ViewContext.data.supportive_pass_code = Context.data.passport_department_code;\n                Context.data.passport_department_code = Context.data.passport_department_code;\n            }\n            const for_edit_form = await Application.search()\n                .where(f =\u003e f.__id.eq(Context.data.__id))\n                .first();\n            if (for_edit_form) {\n                Context.data.is_required = false;\n                ViewContext.data.name_notification = 'Тип уведомлений';\n            }\n            else {\n                Context.data.is_required = true;\n                ViewContext.data.name_notification = 'Способ получения приглашения';\n                Context.fields.notification.data.variants = Context.fields.notification.data.variants.filter(field =\u003e field.code !== 'without_notifications');\n            }\n            let findNullCompact = window.setInterval(() =\u003e {\n                let nullCompact = document.querySelectorAll(\".null-compact elma-form-row\");\n                if (!nullCompact || Array.from(nullCompact).length \u003c 2) {\n                    console.log(\"loading\");\n                    return;\n                }\n                ;\n                window.clearInterval(findNullCompact);\n                console.log(nullCompact);\n                nullCompact.forEach((item) =\u003e item.classList.remove(\"@compact\"));\n            }, 100);\n            let user = await System.users.getCurrentUser();\n            let now = new TDate();\n            if (!Context.data.hr_user_set) {\n                Context.data.staff_member = user;\n                Context.data.hr_user_set = true;\n                console.log(\"setting hr\");\n            }\n            else {\n                console.log(\"hr user set\");\n            }\n            const docs = await Namespace.app.types_documents_for_employment.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            const names = ['Паспорт. Страница с регистрацией', 'Паспорт. Страница с фото и данными', 'СНИЛС', 'ИНН'];\n            const myDocs = docs.filter(f =\u003e {\n                if (f.data.default) {\n                    return f;\n                }\n            });\n            if (!Context.data.docs_table_full) {\n                for (const doc of myDocs) {\n                    const row = Context.data.documents_for_employment.insert();\n                    row.doc = doc;\n                    row.required = doc.data.required;\n                }\n                Context.data.docs_table_full = true;\n                console.log(Context.data.documents_for_employment);\n            }\n            Context.fields.structural_subdivision.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(appFields.is_closed.eq(false)));\n            Context.fields.position.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(appFields.is_closed.eq(false)));\n            Context.fields.date_of_birth.data.setFilter(f =\u003e f.lt(now));\n            Context.fields.date_of_issue.data.setFilter(f =\u003e f.lt(now));\n            Context.data.documents_for_employment = Context.data.documents_for_employment;\n            if (!Context.data.ext_user)\n                ViewContext.data.viewreplay = true;\n            else\n                ViewContext.data.viewreplay = false;\n            if (ViewContext.data.__formType \u0026\u0026 ViewContext.data.__formType.code == ViewContext.fields.__formType.variants.edit.code) {\n                ViewContext.data.edit = false;\n                ViewContext.data.view_pdn = true;\n                ViewContext.data.view_skans = false;\n                ViewContext.data.view_docs = false;\n            }\n            else {\n                ViewContext.data.edit = true;\n                await setPDN();\n                await setDOCS();\n            }\n            console.log(user.data.groupIds);\n            console.log(ViewContext.data.__formType);\n            if (user.data.groupIds \u0026\u0026 user.data.groupIds.find(f =\u003e f.id == 'd6000da0-c9aa-55eb-9882-f118b432730b')\n                \u0026\u0026 ViewContext.data.__formType \u0026\u0026 ViewContext.data.__formType.code == ViewContext.fields.__formType.variants.edit.code) {\n                ViewContext.data.view_service = true;\n            }\n            else {\n                ViewContext.data.view_service = false;\n            }\n            await viewUser();\n            ViewContext.data.details_status = [];\n            ViewContext.data.employment_table_errors = [];\n            await change_notification_type();\n            ViewContext.data.cache_guid = uuidv4();\n            if (Context.data.personal_data_employee == true) {\n                ViewContext.data.view_pdn = false;\n            }\n            if (Context.data.organization) {\n                const organization = await Context.data.organization.fetch();\n                ViewContext.data.leave_choice_to_staff = organization.data.leave_choice_to_staff;\n            }\n            ;\n        }\n        async function checkPassport() {\n            const table = Context.data.documents_for_employment;\n            if (!table || table.length \u003c 1) {\n                return;\n            }\n            ;\n            const lines = await Promise.all(table.map(async (line) =\u003e await line.doc.fetch()));\n            if (!lines.find(line =\u003e line.data.__name.includes(\"Паспорт\"))) {\n                return;\n            }\n            ;\n            let files = await Promise.all(table.map(async (line) =\u003e {\n                if (!line.file_doc) {\n                    return;\n                }\n                ;\n                return await line.file_doc.fetch();\n            }));\n            console.log(files);\n            if (files.some(file =\u003e {\n                if (!file) {\n                    return false;\n                }\n                ;\n                return !file.data.__name.includes(\"jpeg\") \u0026\u0026\n                    !file.data.__name.includes(\"jpg\") \u0026\u0026\n                    !file.data.__name.includes(\"png\") \u0026\u0026\n                    !file.data.__name.includes(\"pdf\");\n            })) {\n                ViewContext.data.wrong_file_format = true;\n            }\n            else {\n                ViewContext.data.wrong_file_format = false;\n            }\n            ;\n        }\n        ;\n        async function setFIO() {\n            Context.data.full_name = {\n                firstname: Context.data.name || '',\n                lastname: Context.data.surname || '',\n                middlename: Context.data.middlename || ''\n            };\n        }\n        async function get_positions() {\n            if (Context.data.position) {\n                const position = await Context.data.position.fetch();\n                const subdivision = await position.data.subdivision.fetch();\n                const entity = await subdivision.data.organization.fetch();\n                Context.data.structural_subdivision = position.data.subdivision;\n                Context.data.organization = entity;\n                Context.data.entity = entity.data.entity;\n            }\n        }\n        async function setPDN() {\n            if (Context.data.personal_data_employee === true) {\n                ViewContext.data.view_pdn = false;\n                ViewContext.data.view_skans = true;\n                ViewContext.data.supportive_snils = Context.data.snils;\n                ViewContext.data.supportive_inn = Context.data.inn;\n                ViewContext.data.supportive_pass_code = Context.data.passport_department_code;\n                Context.data.snils = undefined;\n                Context.data.passport_department_code = undefined;\n                Context.data.inn = undefined;\n            }\n            else {\n                ViewContext.data.view_pdn = true;\n                ViewContext.data.view_skans = false;\n                Context.data.snils = ViewContext.data.supportive_snils;\n                Context.data.passport_department_code = ViewContext.data.supportive_pass_code;\n                Context.data.inn = ViewContext.data.supportive_inn;\n                Context.data.scans_personal_docs = false;\n            }\n            await get_positions();\n        }\n        async function setDOCS() {\n            if (Context.data.scans_personal_docs === true) {\n                ViewContext.data.view_docs = false;\n            }\n            else {\n                ViewContext.data.view_docs = true;\n            }\n        }\n        async function checkFields() {\n            let unepRequired = !!Context.data.unep_issue_required;\n            let employmentRequired = !!Context.data.is_employed;\n            if (!unepRequired \u0026\u0026 employmentRequired) {\n                Context.data.personal_data_employee = false;\n            }\n            ;\n        }\n        async function viewUser() {\n            if (Context.data.user_already_exists === true) {\n                ViewContext.data.is_reading_email = true;\n                if (Context.data.staff_access == true) {\n                    ViewContext.data.external = true;\n                    ViewContext.data.internal = false;\n                }\n                else {\n                    ViewContext.data.external = false;\n                    ViewContext.data.internal = true;\n                }\n                ViewContext.data.user = undefined;\n                ViewContext.data.doubleuserphone = false;\n                ViewContext.data.doubleuseremail = false;\n                if (Context.data.ext_user) {\n                    ViewContext.data.check_user = Context.data.ext_user;\n                }\n                if (ViewContext.data.ext_user_app) {\n                    ViewContext.data.check_ext_user = ViewContext.data.ext_user_app;\n                }\n            }\n            else {\n                ViewContext.data.is_reading_email = false;\n                ViewContext.data.external = false;\n                ViewContext.data.internal = false;\n                ViewContext.data.doublestaff = false;\n                ViewContext.data.doubleuser = false;\n                ViewContext.data.check_user = undefined;\n                ViewContext.data.check_ext_user = undefined;\n            }\n            await checkEmail();\n            await checkPhone();\n        }\n        async function getUserData() {\n            if (Context.data.ext_user) {\n                ViewContext.data.check_user = Context.data.ext_user;\n                const user = await Context.data.ext_user.fetch();\n                const doubleUser = await Application.search().where(f =\u003e f.ext_user.eq(Context.data.ext_user)).first();\n                if (doubleUser) {\n                    ViewContext.data.doubleuser = true;\n                }\n                else {\n                    ViewContext.data.doubleuser = false;\n                }\n                Context.data.name = user.data.fullname ? user.data.fullname.firstname : '';\n                Context.data.surname = user.data.fullname ? user.data.fullname.lastname : '';\n                Context.data.middlename = user.data.fullname ? user.data.fullname.middlename : '';\n                Context.data.full_name = user.data.fullname;\n                Context.data.email = user.data.email ? Context.fields.email.create(user.data.email) : undefined;\n                Context.data.phone = user.data.workPhone;\n            }\n            refreshStaffGroups();\n            await checkEmail();\n            await checkPhone();\n        }\n        async function getExtUserData() {\n            if (ViewContext.data.ext_user_app) {\n                ViewContext.data.check_ext_user = ViewContext.data.ext_user_app;\n                const user = await ViewContext.data.ext_user_app.fetch();\n                const doubleStaff = await Application.search().where(f =\u003e f.external_user.has(ViewContext.data.ext_user_app)).first();\n                if (doubleStaff) {\n                    ViewContext.data.doublestaff = true;\n                }\n                else {\n                    ViewContext.data.doublestaff = false;\n                }\n                Context.data.name = user.data.fullname ? user.data.fullname.firstname : '';\n                Context.data.surname = user.data.fullname ? user.data.fullname.lastname : '';\n                Context.data.middlename = user.data.fullname ? user.data.fullname.middlename : '';\n                Context.data.full_name = user.data.fullname;\n                Context.data.email = user.data.email ? Context.fields.email.create(user.data.email) : undefined;\n                Context.data.phone = user.data.phone \u0026\u0026 user.data.phone.length \u003e 0 ? Context.fields.phone.create(user.data.phone[0].tel) : undefined;\n                if (!Context.data.external_user) {\n                    Context.data.external_user = [];\n                    Context.data.external_user = Context.data.external_user.concat(user);\n                }\n            }\n            refreshStaffGroups();\n            await checkEmail();\n            await checkPhone();\n        }\n        async function checkPhone() {\n            if (Context.data.phone) {\n                const staff_check = await Application.search()\n                    .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.phone.eq(Context.data.phone), f.__id.neq(Context.data.__id)))\n                    .first();\n                if (ViewContext.data.check_user) {\n                    const user_check = await System.users.search()\n                        .where((field, group) =\u003e group.and(field.__deletedAt.eq(null), field.__status.eq(UserStatus.Active), group.or(field.workPhone.eq(Context.data.phone), field.mobilePhone.eq(Context.data.phone)), field.__id.neq(ViewContext.data.check_user.id)))\n                        .first();\n                    if (user_check \u0026\u0026 staff_check) {\n                        ViewContext.data.doubleuserphone = true;\n                        ViewContext.data.user_error_phone = `Пользователь и сотрудник с таким номером телефона уже существует (${user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                        ViewContext.data.error_validation_phone = true;\n                        ViewContext.data.doublephone = false;\n                        ViewContext.data.staff_error_phone = '';\n                        ViewContext.data.error_validation_phone_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                    if (user_check \u0026\u0026 !staff_check) {\n                        ViewContext.data.doubleuserphone = true;\n                        ViewContext.data.user_error_phone = `Пользователь с таким номером телефона существует (${user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                        ViewContext.data.error_validation_phone = true;\n                        ViewContext.data.doublephone = false;\n                        ViewContext.data.staff_error_phone = '';\n                        ViewContext.data.error_validation_phone_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                }\n                if (ViewContext.data.check_ext_user) {\n                    const ext_user_data = await ViewContext.data.check_ext_user.fetch();\n                    const ext_user_check = await ViewContext.fields.check_ext_user.app.search()\n                        .where((field, group) =\u003e group.and(field.__user_status.eq(ext_user_data.fields.__user_status.variants.active), field.__deletedAt.eq(null), group.or(field.phone.has(Context.data.phone), field.phone.has(Context.data.phone)), field.__id.neq(ViewContext.data.check_ext_user.id)))\n                        .first();\n                    if (ext_user_check \u0026\u0026 staff_check) {\n                        ViewContext.data.doubleuserphone = true;\n                        ViewContext.data.user_error_phone = `Пользователь и сотрудник с таким номером телефона уже существует (${ext_user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                        ViewContext.data.error_validation_phone = true;\n                        ViewContext.data.doublephone = false;\n                        ViewContext.data.staff_error_phone = '';\n                        ViewContext.data.error_validation_phone_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                    if (ext_user_check \u0026\u0026 !staff_check) {\n                        ViewContext.data.doubleuserphone = true;\n                        ViewContext.data.user_error_phone = `Пользователь с таким номером телефона существует (${ext_user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                        ViewContext.data.error_validation_phone = true;\n                        ViewContext.data.doublephone = false;\n                        ViewContext.data.staff_error_phone = '';\n                        ViewContext.data.error_validation_phone_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                }\n                if ((!ViewContext.data.check_user \u0026\u0026 !ViewContext.data.check_ext_user) \u0026\u0026 (!Context.data.ext_user \u0026\u0026 !ViewContext.data.ext_user_app)) {\n                    const user_check = await System.users.search()\n                        .where((field, group) =\u003e group.and(field.__deletedAt.eq(null), field.__status.eq(UserStatus.Active), group.or(field.workPhone.eq(Context.data.phone), field.mobilePhone.eq(Context.data.phone))))\n                        .first();\n                    if (user_check \u0026\u0026 staff_check) {\n                        ViewContext.data.doubleuserphone = true;\n                        ViewContext.data.user_error_phone = `Пользователь и сотрудник с таким номером телефона уже существует (${user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                        ViewContext.data.error_validation_phone = true;\n                        ViewContext.data.doublephone = false;\n                        ViewContext.data.staff_error_phone = '';\n                        ViewContext.data.error_validation_phone_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                    if (user_check \u0026\u0026 !staff_check) {\n                        ViewContext.data.doubleuserphone = true;\n                        ViewContext.data.user_error_phone = `Пользователь с таким номером телефона существует (${user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                        ViewContext.data.error_validation_phone = true;\n                        ViewContext.data.doublephone = false;\n                        ViewContext.data.staff_error_phone = '';\n                        ViewContext.data.error_validation_phone_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                }\n                if (staff_check) {\n                    ViewContext.data.doublephone = true;\n                    ViewContext.data.staff_error_phone = `Сотрудник с таким номером телефона уже существует (${staff_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                    ViewContext.data.error_validation_phone_staff = true;\n                    checkLabels();\n                    return;\n                }\n                ViewContext.data.user = undefined;\n                ViewContext.data.doubleuserphone = false;\n                ViewContext.data.user_error_phone = '';\n                ViewContext.data.staff = undefined;\n                ViewContext.data.doublephone = false;\n                ViewContext.data.staff_error_phone = '';\n                ViewContext.data.error_validation_phone_staff = false;\n                ViewContext.data.error_validation_phone = false;\n                checkLabels();\n            }\n        }\n        async function checkEmail() {\n            if (Context.data.email) {\n                const staff_check = await Application.search()\n                    .where((field, group) =\u003e group.and(field.__deletedAt.eq(null), field.email.eq(Context.data.email.email), field.__id.neq(Context.data.__id)))\n                    .first();\n                if (ViewContext.data.check_user) {\n                    const user_check = await System.users.search()\n                        .where((field, group) =\u003e group.and(field.__status.eq(UserStatus.Active), field.__deletedAt.eq(null), field.email.eq(Context.data.email.email), field.__id.neq(ViewContext.data.check_user.id)))\n                        .first();\n                    if (user_check \u0026\u0026 staff_check) {\n                        ViewContext.data.doubleuseremail = true;\n                        ViewContext.data.user_error_email = `Пользователь и сотрудник с таким email уже существует (${user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                        ViewContext.data.error_validation_email = true;\n                        ViewContext.data.doubleemail = false;\n                        ViewContext.data.staff_error_email = '';\n                        ViewContext.data.error_validation_email_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                    if (user_check \u0026\u0026 !staff_check) {\n                        ViewContext.data.doubleuseremail = true;\n                        ViewContext.data.user_error_email = `Пользователь с таким email существует (${user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                        ViewContext.data.error_validation_email = true;\n                        ViewContext.data.doubleemail = false;\n                        ViewContext.data.staff_error_email = '';\n                        ViewContext.data.error_validation_email_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                }\n                if (ViewContext.data.check_ext_user) {\n                    const ext_user_data = await ViewContext.data.check_ext_user.fetch();\n                    const ext_user_check = await ViewContext.fields.check_ext_user.app.search()\n                        .where((field, group) =\u003e group.and(field.__user_status.eq(ext_user_data.fields.__user_status.variants.active), field.__deletedAt.eq(null), field.email.eq(Context.data.email.email), field.__id.neq(ViewContext.data.check_ext_user.id)))\n                        .first();\n                    if (ext_user_check \u0026\u0026 staff_check) {\n                        ViewContext.data.doubleuseremail = true;\n                        ViewContext.data.user_error_email = `Пользователь и сотрудник с таким email уже существует (${ext_user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                        ViewContext.data.error_validation_email = true;\n                        ViewContext.data.doubleemail = false;\n                        ViewContext.data.staff_error_email = '';\n                        ViewContext.data.error_validation_email_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                    if (ext_user_check \u0026\u0026 !staff_check) {\n                        ViewContext.data.doubleuseremail = true;\n                        ViewContext.data.user_error_email = `Пользователь с таким email существует (${ext_user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                        ViewContext.data.error_validation_email = true;\n                        ViewContext.data.doubleemail = false;\n                        ViewContext.data.staff_error_email = '';\n                        ViewContext.data.error_validation_email_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                }\n                if ((!ViewContext.data.check_user \u0026\u0026 !ViewContext.data.check_ext_user) \u0026\u0026 (!Context.data.ext_user \u0026\u0026 !ViewContext.data.ext_user_app)) {\n                    const user_check = await System.users.search()\n                        .where((field, group) =\u003e group.and(field.__status.eq(UserStatus.Active), field.__deletedAt.eq(null), field.email.eq(Context.data.email.email)))\n                        .first();\n                    if (user_check \u0026\u0026 staff_check) {\n                        ViewContext.data.doubleuseremail = true;\n                        ViewContext.data.user_error_email = `Пользователь и сотрудник с таким email уже существует (${user_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                        ViewContext.data.error_validation_email = true;\n                        ViewContext.data.doubleemail = false;\n                        ViewContext.data.staff_error_email = '';\n                        ViewContext.data.error_validation_email_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                    if (user_check \u0026\u0026 !staff_check) {\n                        ViewContext.data.doubleuseremail = true;\n                        ViewContext.data.user_error_email = `Пользователь с таким email существует (${user_check.data.__name}), но сотрудник ещё не создан. Вы можете создать нового сотрудника, используя этого пользователя, установив значение переменной \"Пользователь существует\" в значение \"Да\".`;\n                        ViewContext.data.error_validation_email = true;\n                        ViewContext.data.doubleemail = false;\n                        ViewContext.data.staff_error_email = '';\n                        ViewContext.data.error_validation_email_staff = false;\n                        checkLabels();\n                        return;\n                    }\n                }\n                if (staff_check) {\n                    ViewContext.data.doubleemail = true;\n                    ViewContext.data.staff_error_email = `Сотрудник с таким email уже существует (${staff_check.data.__name}). При необходимости вы можете повторно его трудоустроить.`;\n                    ViewContext.data.error_validation_email_staff = true;\n                    checkLabels();\n                    return;\n                }\n                ViewContext.data.user_email = undefined;\n                ViewContext.data.doubleuseremail = false;\n                ViewContext.data.user_error_email = '';\n                ViewContext.data.staff_email = undefined;\n                ViewContext.data.doubleemail = false;\n                ViewContext.data.staff_error_email = '';\n                ViewContext.data.error_validation_email = false;\n                ViewContext.data.error_validation_email_staff = false;\n                checkLabels();\n            }\n        }\n        function checkLabels() {\n            const button_save = document.querySelectorAll('.btn-primary');\n            for (let button of button_save) {\n                if (button.innerText.includes('Выслать приглашение')) {\n                    if (ViewContext.data.error_validation_email === true || ViewContext.data.error_validation_email_staff === true || ViewContext.data.error_validation_phone === true || ViewContext.data.error_validation_phone_staff === true) {\n                        button.disabled = true;\n                    }\n                    else {\n                        button.disabled = false;\n                    }\n                }\n            }\n        }\n        async function checkDouble() {\n            if (Context.data.inn \u0026\u0026 Context.data.snils) {\n                const double = await Application.search()\n                    .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.neq(Context.data.__id), g.or(f.inn.eq(Context.data.inn), f.snils.eq(Context.data.snils))))\n                    .first();\n                if (double) {\n                    ViewContext.data.doubleinnsnils = true;\n                    ViewContext.data.staff_inn = double;\n                    if (window.saveButton)\n                        window.saveButton.disabled = true;\n                }\n                else {\n                    ViewContext.data.doubleinnsnils = false;\n                    ViewContext.data.staff_inn = undefined;\n                    if (window.saveButton)\n                        window.saveButton.disabled = false;\n                }\n            }\n            else {\n                ViewContext.data.doubleinnsnils = false;\n                ViewContext.data.staff_inn = undefined;\n                if (window.saveButton)\n                    window.saveButton.disabled = false;\n            }\n            if (Context.data.snils) {\n                ViewContext.data.supportive_snils = Context.data.snils;\n                let split_str = Context.data.snils.match(/(\\d{1,3})/g);\n                if (split_str \u0026\u0026 split_str[0].length == 3 \u0026\u0026 (split_str[1])) {\n                    Context.data.snils = split_str[0] + '-' + split_str[1];\n                }\n                if (split_str \u0026\u0026 split_str[1].length == 3 \u0026\u0026 (split_str[2])) {\n                    Context.data.snils += '-' + split_str[2];\n                }\n                if (split_str \u0026\u0026 split_str[2].length == 3 \u0026\u0026 (split_str[3])) {\n                    Context.data.snils += ' ' + split_str[3];\n                }\n            }\n            if (Context.data.inn) {\n                ViewContext.data.supportive_inn = Context.data.inn;\n                let split_str = Context.data.inn.match(/(\\d{1,12})/g);\n                if (split_str \u0026\u0026 split_str[0].length == 12 \u0026\u0026 (split_str[1])) {\n                    Context.data.inn = split_str[0];\n                }\n            }\n            validateInn(Context.data.inn);\n            validateSnils(Context.data.snils);\n        }\n        async function validate() {\n            let result = new ValidationResult();\n            result.title = 'Ошибка!';\n            const validate_table = valide_employment_table();\n            if (!validate_table \u0026\u0026 Context.data.employment_table.length \u003e 0) {\n                result.addMessage('Обнаружены ошибки в таблице занятости сотрудника. Проверьте таблицу и исправьте ошибки.');\n                result.addContextError('employment_table', '');\n            }\n            if (!validate_table \u0026\u0026 Context.data.employment_table.length == 0) {\n                result.addMessage('Заполните \"Сведения занятости\" основным местом работы через \"+Строка занятости\"');\n                result.addContextError('employment_table', '');\n            }\n            if (ViewContext.data.doubleemail) {\n                result.addContextError(\"email\", \"Сотрудник с таким адресом электронной почты уже существует\");\n            }\n            if (ViewContext.data.doubleuserphone) {\n                result.addContextError(\"phone\", \"Пользователь с таким номером телефона уже существует\");\n            }\n            if (ViewContext.data.doubleuseremail) {\n                result.addContextError(\"email\", \"Пользователь с таким адресом электронной почты уже существует\");\n            }\n            if (ViewContext.data.doubleinnsnils) {\n                result.addContextError(\"inn\", \"Пользователь с таким ИНН/СНИЛС уже существует\");\n            }\n            return result;\n        }\n        function uuidv4() {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n                .replace(/[xy]/g, function (c) {\n                const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r \u0026 0x3 | 0x8);\n                return v.toString(16);\n            });\n        }\n        function valide_employment_table() {\n            Context.data.employment_table = Context.data.employment_table;\n            const employment_table = Context.data.employment_table;\n            if (employment_table.length == 0) {\n                return false;\n            }\n            if (ViewContext.data.employment_table_errors \u0026\u0026 ViewContext.data.employment_table_errors.length \u003e 0) {\n                return false;\n            }\n            return true;\n        }\n        async function add_employment_row() {\n            const id = calculate_line_number();\n            const row = Context.data.employment_table.insert();\n            row.id = id;\n            Context.data.employment_table = Context.data.employment_table;\n        }\n        function calculate_line_number() {\n            const ids = Context.data.employment_table.map(f =\u003e f.id);\n            if (ids.length == 0) {\n                return 0;\n            }\n            return ids[ids.length - 1] + 1;\n        }\n        function check_errors() {\n            const employment_table = Context.data.employment_table;\n            const errors = [];\n            for (const row of employment_table) {\n                if (row.position) {\n                    if (employment_table.filter(f =\u003e { var _a; return ((_a = f.position) === null || _a === void 0 ? void 0 : _a.id) == row.position.id; }).length \u003e 1) {\n                        errors.push({\n                            id: row.id,\n                            error_text: 'Данная позиция уже указана у сотрудника',\n                        });\n                    }\n                    if (!row.organization) {\n                        errors.push({\n                            id: row.id,\n                            error_text: 'У выбранной позиции не указана организация'\n                        });\n                    }\n                    if (!row.subdivision) {\n                        errors.push({\n                            id: row.id,\n                            error_text: 'У выбранной позиции не указано подразделение',\n                        });\n                    }\n                    if (!row.type_employment) {\n                        errors.push({\n                            id: row.id,\n                            error_text: 'Не выбран вид занятости'\n                        });\n                    }\n                    if (row.type_employment \u0026\u0026 row.type_employment.code == 'main_workplace' \u0026\u0026 employment_table.filter(f =\u003e { var _a; return ((_a = f.type_employment) === null || _a === void 0 ? void 0 : _a.code) == 'main_workplace'; }).length \u003e 1) {\n                        errors.push({\n                            id: row.id,\n                            error_text: 'Указано несколько строк с местом основной работы',\n                        });\n                    }\n                    if (!row.admission_date_position) {\n                        errors.push({\n                            id: row.id,\n                            error_text: 'Не указана дата приёма на позицию',\n                        });\n                    }\n                    if (!row.admission_date_organization) {\n                        errors.push({\n                            id: row.id,\n                            error_text: 'Не указана дата приёма в организацию'\n                        });\n                    }\n                    if (row.admission_date_organization.after(row.admission_date_position)) {\n                        errors.push({\n                            id: row.id,\n                            error_text: 'Дата приема на позицию раньше даты приема в организацию'\n                        });\n                    }\n                }\n                else {\n                    errors.push({\n                        id: row.id,\n                        error_text: 'Не указана позиция ШР'\n                    });\n                }\n            }\n            ViewContext.data.employment_table_errors = errors;\n        }\n        async function employment_table_onchange() {\n            check_errors();\n            const employment_table = Context.data.employment_table;\n            if (employment_table \u0026\u0026 employment_table.length \u003e 0) {\n                const main_position = employment_table.find(f =\u003e { var _a; return ((_a = f.type_employment) === null || _a === void 0 ? void 0 : _a.code) == 'main_workplace'; });\n                if (main_position \u0026\u0026 main_position.position) {\n                    Context.data.position = main_position.position;\n                    Context.data.organization = main_position.organization;\n                    Context.data.structural_subdivision = main_position.subdivision;\n                    Context.data.work_start = main_position.admission_date_organization;\n                    Context.data.admission_date_position = main_position.admission_date_position;\n                    Context.data.employment_type = main_position.type_employment;\n                }\n                else {\n                    Context.data.position = undefined;\n                    Context.data.organization = undefined;\n                    Context.data.structural_subdivision = undefined;\n                    Context.data.work_start = undefined;\n                    Context.data.admission_date_position = undefined;\n                    Context.data.employment_type = undefined;\n                }\n            }\n            else {\n                Context.data.position = undefined;\n                Context.data.organization = undefined;\n                Context.data.structural_subdivision = undefined;\n                Context.data.work_start = undefined;\n                Context.data.admission_date_position = undefined;\n                Context.data.employment_type = undefined;\n            }\n        }\n        async function update_line() {\n            const cache = await System.cache.getItem(`update_line_${ViewContext.data.cache_guid}`);\n            if (cache) {\n                const line_details = JSON.parse(cache);\n                const line = Context.data.employment_table.find(f =\u003e f.id == line_details.id);\n                const [position, organization, subdivision, work_schedules, employment_relationship_type, work_place] = await Promise.all([\n                    Context.fields.position.app.search().where(f =\u003e f.__id.eq(line_details.position)).first(),\n                    Context.fields.organization.app.search().where(f =\u003e f.__id.eq(line_details.organizatoin)).first(),\n                    Context.fields.structural_subdivision.app.search().where(f =\u003e f.__id.eq(line_details.subdivision)).first(),\n                    Context.fields.work_schedules.app.search().where(f =\u003e f.__id.eq(line_details.work_schedules)).first(),\n                    Context.fields.type_employment_relationship.app.search().where(f =\u003e f.__id.eq(line_details.employment_relationship_type)).first(),\n                    Context.fields.work_place.app.search().where(f =\u003e f.__id.eq(line_details.work_place)).first()\n                ]);\n                if (position)\n                    line.position = position;\n                if (organization)\n                    line.organization = organization;\n                if (subdivision)\n                    line.subdivision = subdivision;\n                if (work_schedules)\n                    line.work_schedules = work_schedules;\n                if (employment_relationship_type)\n                    line.employment_relationship_type = employment_relationship_type;\n                if (work_place)\n                    line.work_place = work_place;\n                if (line_details.date_by) {\n                    line.date_by = new Datetime(line_details.date_by).getDate();\n                }\n                else {\n                    line.date_by = undefined;\n                }\n                if (line_details.admission_date_organization)\n                    line.admission_date_organization = new Datetime(line_details.admission_date_organization).getDate();\n                if (line_details.admission_date_position)\n                    line.admission_date_position = new Datetime(line_details.admission_date_position).getDate();\n                if (line_details.remote_work)\n                    line.remote_work = line_details.remote_work;\n                if (line_details.rate)\n                    line.rate = line_details.rate;\n                if (line_details.id_1c)\n                    line.id_1c = line_details.id_1c;\n                if (line_details.type_employment)\n                    line.type_employment = Context.fields.employment_table.fields.type_employment.variants[line_details.type_employment];\n                await employment_table_onchange();\n            }\n        }\n        async function delete_line() {\n            const cache = await System.cache.getItem(`delete_line_${ViewContext.data.cache_guid}`);\n            if (cache) {\n                const line_details = JSON.parse(cache);\n                const line_index = Context.data.employment_table.findIndex(f =\u003e f.id == line_details.id);\n                if (line_index != -1) {\n                    const details_status_index = ViewContext.data.details_status.findIndex((f) =\u003e f.id == line_details.id);\n                    ViewContext.data.details_status.splice(details_status_index, 1);\n                    ViewContext.data.employment_table_errors = ViewContext.data.employment_table_errors.map((f) =\u003e f.id != line_details.id);\n                    Context.data.employment_table.delete(line_index);\n                    Context.data.employment_table = Context.data.employment_table;\n                }\n            }\n        }\n        async function change_notification_type() {\n            var _a;\n            const notification_type = Context.fields.notification.variants;\n            ViewContext.data.email_required = false;\n            ViewContext.data.show_sms_provider_error = false;\n            ViewContext.data.show_phone_auth_error = false;\n            switch ((_a = Context.data.notification) === null || _a === void 0 ? void 0 : _a.code) {\n                case notification_type.email.code:\n                    ViewContext.data.email_required = true;\n                    break;\n                case notification_type.email_and_sms.code:\n                    ViewContext.data.email_required = true;\n                    await sms_type();\n                    break;\n                case notification_type.sms.code:\n                    await sms_type();\n                    break;\n                default:\n                    break;\n            }\n        }\n        async function sms_type() {\n            var _a;\n            const sms_provider_enabled = await check_sms_provider();\n            ViewContext.data.show_sms_provider_error = !sms_provider_enabled;\n            if (((_a = Context.data.notification) === null || _a === void 0 ? void 0 : _a.code) == \"sms\") {\n                const phone_auth_enabled = await check_phone_auth();\n                ViewContext.data.show_phone_auth_error = !phone_auth_enabled;\n            }\n        }\n        async function check_sms_provider() {\n            const response = await fetch(`${System.getBaseUrl()}/api/integrations/enabled?group=sms`, {\n                method: 'GET',\n            });\n            if (response.ok) {\n                const providers = await response.json();\n                return providers.length \u003e 0;\n            }\n            return false;\n        }\n        async function check_phone_auth() {\n            const response = await fetch(`${System.getBaseUrl()}/api/settings/global/extendedAuth`, {\n                method: 'GET',\n            });\n            if (response.ok) {\n                const extendedAuth = await response.json();\n                return extendedAuth.authByPhone;\n            }\n            return false;\n        }\n        function validateInn(inn) {\n            if (Context.data.personal_data_employee == false) {\n                if (!inn || inn.length \u003c 12) {\n                    console.log(\"inn is not full\");\n                    ViewContext.data.wrong_inn_format = false;\n                    return;\n                }\n                ;\n                let result = false;\n                const checkDigit = function (inn, coefficients) {\n                    let n = 0;\n                    for (let i in coefficients) {\n                        n += coefficients[i] * parseInt(inn[i]);\n                    }\n                    return n % 11 % 10;\n                };\n                switch (inn.length) {\n                    case 10:\n                        let n10 = checkDigit(inn, [2, 4, 10, 3, 5, 9, 4, 6, 8]);\n                        if (n10 === parseInt(inn[9])) {\n                            result = true;\n                        }\n                        break;\n                    case 12:\n                        let n11 = checkDigit(inn, [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]);\n                        let n12 = checkDigit(inn, [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]);\n                        if ((n11 === parseInt(inn[10])) \u0026\u0026 (n12 === parseInt(inn[11]))) {\n                            result = true;\n                        }\n                        break;\n                }\n                if (!result) {\n                    ViewContext.data.wrong_inn_format = true;\n                    return;\n                }\n                ViewContext.data.wrong_inn_format = false;\n            }\n        }\n        ;\n        function validateSnils(snils) {\n            if (Context.data.personal_data_employee == false) {\n                if (!snils || snils.length \u003c 14) {\n                    ViewContext.data.wrong_snils_format = false;\n                    console.log(\"snils not full\");\n                    return;\n                }\n                ;\n                snils = snils.replace(/[\\s-]/g, \"\");\n                console.log(snils);\n                let sum = 0;\n                for (let i = 0; i \u003c 9; i++) {\n                    sum += parseInt(snils[i]) * (9 - i);\n                }\n                let checkDigit = 0;\n                if (sum \u003c 100) {\n                    checkDigit = sum;\n                }\n                else if (sum \u003e 101) {\n                    checkDigit = sum % 101;\n                    if (checkDigit === 100) {\n                        checkDigit = 0;\n                    }\n                }\n                if (checkDigit === parseInt(snils.slice(-2))) {\n                    ViewContext.data.wrong_snils_format = false;\n                    return;\n                }\n                ;\n                ViewContext.data.wrong_snils_format = true;\n            }\n        }\n        ;\n        async function log_table() {\n            console.log(Context.data.employment_table);\n        }\n        async function recalc_ids() {\n            let i = 0;\n            for (const row of Context.data.employment_table) {\n                row.id = i;\n                i++;\n            }\n            Context.data.employment_table = Context.data.employment_table;\n        }\n        async function no_middle_name_onchange() {\n            if (Context.data.no_middle_name) {\n                if (Context.data.no_middle_name == true) {\n                    Context.data.middlename = undefined;\n                }\n            }\n        }\n        async function recalc_ids_all() {\n            console.log('Запуск перерасчета идентификаторов строк таблицы занятости');\n            const staffs = await Namespace.app.staff.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            console.log(`Количество сотрудников: ${staffs.length}`);\n            let promises = [];\n            for (const staff of staffs) {\n                console.log(staff.data.__name);\n                if (staff.data.employment_table \u0026\u0026 staff.data.employment_table.length \u003e 0) {\n                    let i = 0;\n                    for (const row of Context.data.employment_table) {\n                        row.id = i;\n                        i++;\n                    }\n                    console.log('Перерасчет таблицы закончен');\n                    promises.push(staff.save());\n                    if (promises.length \u003e 80) {\n                        await Promise.all(promises);\n                        promises = [];\n                    }\n                }\n                else {\n                    console.log('Таблица занятости не заполнена');\n                }\n            }\n            console.log('Перерасчет идентификаторов строк таблицы занятости закончен');\n        }\n        async function refreshStaffGroups() {\n            if (!Context.data.ext_user \u0026\u0026 !Context.data.organization) {\n                return;\n            }\n            ;\n            const user = await Context.data.ext_user.fetch();\n            const org = await Context.data.organization.fetch();\n            if (!org.data.access_settings_organization) {\n                return;\n            }\n            ;\n            const accessSettings = await org.data.access_settings_organization.fetch();\n            if ((!accessSettings.data.inner_org_users || accessSettings.data.inner_org_users.length \u003c 1) || (!accessSettings.data.external_org_users || accessSettings.data.external_org_users.length \u003c 1)) {\n                return;\n            }\n            ;\n            let groupToAddUser;\n            let groupToDeleteUser;\n            if (Context.data.staff_access == false) {\n                groupToAddUser = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(accessSettings.data.inner_org_users[0].code))).first();\n                groupToDeleteUser = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(accessSettings.data.external_org_users[0].code))).first();\n            }\n            else {\n                groupToAddUser = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(accessSettings.data.external_org_users[0].code))).first();\n                groupToDeleteUser = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(accessSettings.data.inner_org_users[0].code))).first();\n            }\n            ;\n            if (groupToAddUser) {\n                await groupToAddUser.addItem(user);\n                await groupToAddUser.save();\n                console.log(`user added to group ${groupToAddUser.data.__name}`);\n            }\n            ;\n            if (!groupToDeleteUser || !groupToDeleteUser.data.subOrgunitIds || groupToDeleteUser.data.subOrgunitIds.length \u003c 1) {\n                return;\n            }\n            ;\n            groupToDeleteUser.data.subOrgunitIds = groupToDeleteUser.data.subOrgunitIds.filter(id =\u003e user.id !== id);\n            await groupToDeleteUser.save();\n            console.log(`user deleted from group ${groupToDeleteUser.data.__name}`);\n        }\n        ;\n        async function changePassDepCode() {\n            if (Context.data.passport_department_code) {\n                ViewContext.data.supportive_pass_code = Context.data.passport_department_code;\n                let split_str = Context.data.passport_department_code.match(/(\\d{1,3})/g);\n                if (split_str \u0026\u0026 split_str[0].length == 3 \u0026\u0026 (split_str[1])) {\n                    Context.data.passport_department_code = split_str[0] + '-' + split_str[1];\n                }\n            }\n        }\n        async function checkNumber() {\n            if (Context.data.passport_number) {\n                let split_str = Context.data.passport_number.match(/(\\d{1,6})/g);\n                if (split_str \u0026\u0026 split_str[0].length == 6 \u0026\u0026 (split_str[1])) {\n                    Context.data.passport_number = split_str[0];\n                }\n            }\n        }\n        async function checkSeries() {\n            if (Context.data.passport_series) {\n                let split_str = Context.data.passport_series.match(/(\\d{1,4})/g);\n                if (split_str \u0026\u0026 split_str[0].length == 4 \u0026\u0026 (split_str[1])) {\n                    Context.data.passport_series = split_str[0];\n                }\n            }\n        }\n        return {\n            get_settings_kedo,\n            onInit,\n            checkPassport,\n            setFIO,\n            get_positions,\n            setPDN,\n            setDOCS,\n            checkFields,\n            viewUser,\n            getUserData,\n            getExtUserData,\n            checkPhone,\n            checkEmail,\n            checkLabels,\n            checkDouble,\n            validate,\n            uuidv4,\n            valide_employment_table,\n            add_employment_row,\n            calculate_line_number,\n            check_errors,\n            employment_table_onchange,\n            update_line,\n            delete_line,\n            change_notification_type,\n            sms_type,\n            check_sms_provider,\n            check_phone_auth,\n            validateInn,\n            validateSnils,\n            log_table,\n            recalc_ids,\n            no_middle_name_onchange,\n            recalc_ids_all,\n            refreshStaffGroups,\n            changePassDepCode,\n            checkNumber,\n            checkSeries\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "get_settings_kedo",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "onInit",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkPassport",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "setFIO",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "get_positions",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "setPDN",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "setDOCS",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkFields",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "viewUser",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "getUserData",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "getExtUserData",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkPhone",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkEmail",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkLabels",
        "parameters": [],
        "type": ""
      },
      {
        "name": "checkDouble",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "validate",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "uuidv4",
        "parameters": [],
        "type": ""
      },
      {
        "name": "valide_employment_table",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "add_employment_row",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "calculate_line_number",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "check_errors",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "employment_table_onchange",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "update_line",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "delete_line",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "change_notification_type",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "sms_type",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "check_sms_provider",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "check_phone_auth",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "validateInn",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "validateSnils",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "log_table",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "recalc_ids",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "no_middle_name_onchange",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "recalc_ids_all",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "refreshStaffGroups",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "changePassDepCode",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkNumber",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkSeries",
        "parameters": [],
        "type": "[object Object]"
      }
    ],
    "serverScripts": "async function random_fill() {\n    const data = await get_data();\n    if (data) {\n        const user = await System.users.getCurrentUser();\n        await set_fields(data, user);\n    }\n}\nasync function set_fields(data, user) {\n    Context.data.name = data.FirstName;\n    Context.data.middlename = data.FatherName;\n    Context.data.surname = data.LastName;\n    Context.data.date_of_birth = new Datetime(data.DateOfBirth, \"DD.MM.YYYY\").getDate();\n    Context.data.phone = {\n        tel: \"+\" + data.Phone.replace(/\\D/g, ''),\n        type: PhoneType.Work\n    };\n    const email = user.data.email ?\n        `${user.data.email.split('@')[0]}+${new Datetime().format(\"DDMMYYYHHmm\")}@${user.data.email.split('@')[1]}` :\n        data.Email;\n    Context.data.email = {\n        email: email,\n        type: EmailType.Work\n    };\n    Context.data.sex = data.Gender == 'man' ? false : true;\n    Context.data.passport_series = data.PasportSerial;\n    Context.data.passport_number = String(data.PasportNumber);\n    Context.data.passport_department_code = data.PasportCode;\n    Context.data.russian_passport = true;\n    Context.data.issued_by = data.PasportOtd;\n    Context.data.date_of_issue = new Datetime(data.PasportDate, \"DD.MM.YYYY\").getDate();\n    Context.data.inn = data.inn_fiz;\n    const snils = String(data.snils);\n    Context.data.snils = `${snils.substring(0, 3)}-${snils.substring(3, 6)}-${snils.substring(6, 9)} ${snils.substring(9, 11)}`;\n    Context.data.city = data.City;\n    Context.data.street = data.Street;\n    Context.data.home = String(data.House);\n}\nasync function get_data() {\n    const response = await fetch('https://api.randomdatatools.ru', {\n        method: \"GET\",\n    });\n    if (response.ok) {\n        const data = await response.json();\n        return data;\n    }\n    return undefined;\n}\n",
    "serverFnDeclarations": [
      {
        "name": "random_fill",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "set_fields",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "get_data",
        "parameters": [],
        "type": "[object Object]"
      }
    ],
    "clientDependencies": {
      "applications": [],
      "collections": [
        {
          "namespace": "kedo",
          "code": "settings"
        },
        {
          "namespace": "kedo",
          "code": "staff"
        },
        {
          "namespace": "kedo",
          "code": "types_documents_for_employment"
        },
        {
          "namespace": "kedo",
          "code": "organization"
        },
        {
          "namespace": "kedo",
          "code": "position"
        },
        {
          "namespace": "_system_catalogs",
          "code": "_user_profiles"
        },
        {
          "namespace": "system",
          "code": "users"
        },
        {
          "namespace": "kedo",
          "code": "structural_subdivision"
        },
        {
          "namespace": "kedo",
          "code": "work_schedules"
        },
        {
          "namespace": "kedo",
          "code": "type_employment_relationship"
        },
        {
          "namespace": "personnel_documents",
          "code": "workplace"
        },
        {
          "namespace": "system",
          "code": "groups"
        }
      ],
      "pages": [
        {
          "namespace": "global",
          "code": "kedo"
        }
      ]
    }
  },
  "__createdAt": "2024-06-04T11:37:19.545590058Z",
  "__createdBy": "5bf763d9-22f0-483e-90ee-9db5fa6105d7",
  "__updatedAt": "2024-06-04T12:17:50.190903692Z",
  "__updatedBy": "5bf763d9-22f0-483e-90ee-9db5fa6105d7",
  "__deletedAt": null
}
