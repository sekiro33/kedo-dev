{"__id":"018fb8c3-4489-7472-8904-a86c400345fd","namespace":"kedo.staff","code":"_view","__name":"Форма просмотра","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":5,"hidden":false,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"9e421a39-b5f5-42be-9f31-5b7f265c801c","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"systemFunctions":{},"formGroup":{"path":["item"]}},"content":{"[headerCustomization]":[],"[footer]":[{"id":"e48f4062-621a-475e-8b94-9499fd6087e2","descriptor":"zone-content","values":{"zoneCode":"[footer]"}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"89e87010-99af-45d5-a0a0-c64c40a12941","descriptor":"tabset","values":{"__renderContentAsync":false},"content":{"":[{"id":"dc67b37f-fc70-4181-94a6-a7546271df94","descriptor":"tab","values":{"__renderContentAsync":false,"__renderContentOnDemand":false,"title":"Основная информация"},"content":{"":[{"id":"abf16824-976e-455f-9013-3caafea131d3","descriptor":"modal-body","content":{"":[{"id":"3c4de75b-ed20-49d9-8496-0eb7540c0779","descriptor":"dynamic-form","values":{"form":{"path":["item"]},"fields":{"path":["fields"]}}},{"id":"86f011ff-7bc6-4b19-b01d-56c9f5a91eea","descriptor":"extended-fields","values":{"__relativeURL":"","__isConstValues":[],"form":{"path":["item"]},"fields":{"path":["fields"]},"__outlet":"","__baseURL":""}}]}}]}},{"id":"f21de953-60ba-4a38-8b72-b09556b71ba6","descriptor":"tab","values":{"__renderContentOnDemand":false,"title":"Мед.осмотр","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"72103e1a-df1f-4e73-9186-3ded0f921c3e","descriptor":"modal-body","content":{"":[{"id":"65cb666c-c51d-4f77-9d1c-8c9f6db60877","descriptor":"linked-list","values":{"item":{"path":["itemModel"]},"linkedFieldCode":"staff","linkedApplication":{"code":"medical_examination","kind":"CollectionLink","namespace":"kedo"},"displayFieldsCodes":["__name","type_of_medical_examination","results","satisfactory_results","valid_up_to"]}},{"id":"204957fe-cc90-4639-a42d-8b9043b2a715","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    app-page-header {\n        display: none !important;\n    }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"css"}}]}}]}},{"id":"a3b5368f-8b85-4c2f-bfab-ec051413c1a9","descriptor":"tab","values":{"title":"Остатки отпусков","__styles":"","__baseURL":"","__classes":"vacation-rest","__outlet":"","__relativeURL":"","__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false},"content":{"":[{"id":"ad3d7ca5-b6ec-47c1-991f-b6ddcd4840c5","descriptor":"modal-body","content":{"":[{"id":"788d6965-8c99-47af-8c36-2980534afac0","descriptor":"kedo.staff@vacation_leftovers_widget","descriptorVersion":4,"values":{"staff":{"path":["staff"]},"__outlet":"","__styles":"width: 100%;","__baseURL":"","__relativeURL":"","__isConstValues":[],"__renderContentOnDemand":false}}]}}]}},{"id":"ee32a9e5-145a-474d-8c70-d45bc1edb7e8","descriptor":"tab","values":{"title":"Личные документы","__hidden":{"path":["view_tab_personal_documents"],"modifier":"not"},"__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false},"content":{"":[{"id":"98db9ec2-3c84-4166-80fe-2d6f37c02490","descriptor":"button","values":{"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"system_checklist","view":"default","runInPopover":null,"__isConstValues":[],"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"label":"Скачать отчёт по ознакомлению с ЛНА","action":null,"onClick":{"kind":"Function","name":"getUserLnaDocs","type":"client"},"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}},{"id":"d5ad0404-44db-4103-82d6-6cf453f84a6c","descriptor":"row","values":{"__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"6cdf9e88-37d6-4c9f-8189-97033757b0e7","descriptor":"column","content":{"":[{"id":"346fb3da-2195-4682-a8fb-f782b80eee49","descriptor":"groupbox","values":{"styleEnum":[{"code":"default","name":"Default"}],"collapsible":true,"__renderContentAsync":false,"title":"Паспорт","expanded":true},"content":{"":[{"id":"fb757cb8-87d4-4b1a-8d38-ddcaf79f23d2","descriptor":"dynamic-form-row","values":{"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","russian_passport"]},"tooltip":null,"required":false}},{"id":"17785659-241f-48e3-a3c5-c602139597c5","descriptor":"dynamic-form-row","values":{"bindingMode":false,"showDisplayName":true,"control":{"path":["item","passport_series"]},"tooltip":null,"required":false,"__readOnly":null}},{"id":"44ca41d0-8e7f-49b2-ab11-be37222f4cbe","descriptor":"dynamic-form-row","values":{"control":{"path":["item","passport_number"]},"tooltip":null,"required":false,"__readOnly":null,"bindingMode":false,"showDisplayName":true}},{"id":"180ff083-0feb-4c52-97ad-7d44811feeaa","descriptor":"dynamic-form-row","values":{"control":{"path":["item","passport_department_code"]},"tooltip":null,"required":false,"__readOnly":null,"bindingMode":false,"showDisplayName":true}},{"id":"ab6a5621-6827-4198-804d-bfe68d6fb462","descriptor":"dynamic-form-row","values":{"__readOnly":null,"bindingMode":false,"showDisplayName":true,"control":{"path":["item","issued_by"]},"tooltip":null,"required":false}},{"id":"cfe1cd34-8a1d-4f12-a34e-20086c8e20de","descriptor":"dynamic-form-row","values":{"tooltip":null,"required":false,"__readOnly":null,"bindingMode":false,"showDisplayName":true,"control":{"path":["item","date_of_issue"]}}},{"id":"5241a1ff-2677-4be5-977c-1c9e6b9ed2d8","descriptor":"dynamic-form-row","values":{"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","address"]},"tooltip":null,"required":false}},{"id":"9799aa36-b95b-4710-9b20-ecd3e941b6d9","descriptor":"dynamic-form-row","values":{"showDisplayName":true,"control":{"path":["item","actual_address"]},"tooltip":null,"required":false,"hideEmpty":true,"__readOnly":true,"bindingMode":false,"__isConstValues":[]}}]}},{"id":"ed3a2887-7e1b-4dc7-b02e-a9ec848178ff","descriptor":"groupbox","values":{"title":"ИНН","expanded":true,"styleEnum":[{"code":"default","name":"Default"}],"collapsible":true,"__renderContentAsync":false},"content":{"":[{"id":"c3f1459b-c3d1-4a95-8f73-1d8064e22153","descriptor":"dynamic-form-row","values":{"control":{"path":["item","inn"]},"tooltip":null,"required":false,"__readOnly":null,"bindingMode":false,"showDisplayName":true}}]}},{"id":"36061fd8-9e3c-4892-8851-edab37f675c0","descriptor":"groupbox","values":{"styleEnum":[{"code":"default","name":"Default"}],"collapsible":true,"__renderContentAsync":false,"title":"СНИЛС","expanded":true},"content":{"":[{"id":"c1122569-e54a-4be7-a82e-f41d4693ce8c","descriptor":"dynamic-form-row","values":{"control":{"path":["item","snils"]},"tooltip":null,"required":false,"__readOnly":null,"bindingMode":false,"showDisplayName":true}}]}}]}},{"id":"02a8c91a-2999-4ecf-a5d2-5534da87f338","descriptor":"column","content":{"":[{"id":"c1861592-b53a-4094-8737-5ef54e62e9ba","descriptor":"dynamic-form-row","values":{"hideEmpty":false,"bindingMode":false,"showDisplayName":false,"widgetCustomSettings":{"kind":"BlobObject","settings":{"columnsView":{"doc":{"key":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":false,"compression":false,"verticalAlign":"middle","backgroundColor":""},"file_doc":{"key":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":false,"compression":false,"verticalAlign":"middle","backgroundColor":""},"required":{"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":true,"tensile":false,"readonly":false,"required":false,"compression":false,"verticalAlign":"middle"}},"allowDeleteRows":false}},"control":{"path":["item","documents_for_employment"]},"tooltip":null,"required":false,"__readOnly":null,"__isConstValues":[]}}]}}]}}]}},{"id":"a85007fb-3656-464b-9e86-5c5272a4d5c4","descriptor":"tab","values":{"__renderContentAsync":false,"__renderContentOnDemand":false,"title":"Перемещения","__hidden":true,"__outlet":"","__baseURL":"","__relativeURL":"","__isConstValues":[]},"content":{"":[{"id":"a50c0fa8-7e2d-44f8-8762-ca6e013027af","descriptor":"modal-body","content":{"":[{"id":"20e5fdf2-ddea-4998-9e9a-f73ae5f158e4","descriptor":"row","values":{"__renderContentAsync":false},"content":{"":[{"id":"6d238f9b-af34-4061-88ce-3e0a2c2bdc60","descriptor":"column","values":{"__styles":"flex-grow: 0;","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"d31a338b-bbf1-4dfc-a7b6-fdb0eebc7104","descriptor":"button","values":{"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"view":"primary","runInPopover":null,"__isConstValues":[],"onClick":{"kind":"Function","name":"download_move_files","type":"client"},"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"icon":"system_shuffle","label":"Скачать перемещения архивом","action":null}}]}},{"id":"50e136b2-9e21-477d-9343-13cbc3ce014c","descriptor":"column","content":{"":[{"id":"34ad8e7a-32f4-4840-8f82-fc9d8c025d83","descriptor":"button","values":{"runInPopover":null,"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"__isConstValues":[],"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"system_file_many","view":"primary","onClick":{"kind":"Function","name":"download_all_files","type":"client"},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"label":"Скачать все файлы","action":null}}]}},{"id":"dd59d8d4-4e4f-49dd-b861-d0d6a7734bec","descriptor":"column","values":{"__isConstValues":[],"__renderContentAsync":false},"content":{"":[]}}]}},{"id":"cb3c7d08-24ac-44a9-8b81-fdea64a7b090","descriptor":"linked-list","values":{"item":{"path":["itemModel"]},"linkedFieldCode":"staff","showReloadButton":false,"linkedApplication":{"code":"documents_for_employment","kind":"CollectionLink","namespace":"kedo"},"displayFieldsCodes":["__name","responsible_user","__createdAt"]}}]}}]}},{"id":"73571e54-459b-4e82-9a2b-d62b15e1b9c0","descriptor":"tab","values":{"__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":true,"title":"Документы","__outlet":"","__baseURL":"","__relativeURL":""},"content":{"":[{"id":"321664df-9f38-4013-be11-d5dbdddbd803","descriptor":"modal-body","content":{"":[{"id":"34afe2a2-6c49-43fb-9080-e6834adce1ee","descriptor":"row-layout","values":{"__relativeURL":"","__isConstValues":[],"elementsAlignEnum":[{"code":"right","name":"По правому краю"}],"__renderContentAsync":false,"__hidden":true,"__outlet":"","__styles":"margin-bottom: 10px;","__baseURL":""},"content":{"":[{"id":"dbe43497-6bf6-4023-8233-d2e86304fd77","descriptor":"button","values":{"__relativeURL":"","processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"__baseURL":"","label":"Заявления и приказы скачать архивом ","runInPopover":null,"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"__isConstValues":[],"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"gesture_hover","action":null,"onClick":{"kind":"Function","name":"download_personnel_documents_files","type":"client"},"__outlet":"","runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"view":"primary"}},{"id":"140835ca-3863-4e2b-aa11-d857bbcab05c","descriptor":"button","values":{"onClick":{"kind":"Function","name":"download_all_files","type":"client"},"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"gesture_hover","view":"primary","label":"Скачать все файлы","action":null,"runInPopover":null,"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}}]}},{"id":"ddc11629-0a07-491d-adf4-e39ed85420bc","descriptor":"linked-list","values":{"linkedApplication":{"code":"personnel_documents","kind":"CollectionLink","namespace":"personnel_documents"},"displayFieldsCodes":["__name","__createdAt","kedo_status"],"item":{"path":["itemModel"]},"linkedFieldCode":"staff","filterFieldsCodes":["__createdAt","kedo_status"]}}]}}]}},{"id":"89cd1ddb-756c-48e9-bc2c-e51838aae6ef","descriptor":"tab","values":{"__renderContentOnDemand":false,"title":"Категории","__renderContentAsync":false},"content":{"":[{"id":"73206cba-d1cf-4b9e-a324-7a3960622b0f","descriptor":"modal-body","content":{"":[{"id":"c21fbd35-498b-48ee-98e5-395b7fdee9ed","descriptor":"dynamic-form-row","values":{"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","categories_table"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":null}}]}}]}},{"id":"5304f52e-b84d-4a72-b916-92bf5e12b90a","descriptor":"tab","values":{"title":"Состав семьи","__hidden":{"path":["view_tab_family"],"modifier":"not"},"__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false},"content":{"":[{"id":"eba0975c-b66c-4abc-9206-cfc885960b83","descriptor":"modal-body","content":{"":[{"id":"138bb83e-d6ce-4a35-a677-cc155ae661ab","descriptor":"dynamic-form-row","values":{"__readOnly":true,"bindingMode":false,"showDisplayName":true,"widgetCustomSettings":{"kind":"BlobObject","settings":{"columnsView":{"status":{"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":false,"compression":false,"verticalAlign":"middle"},"birth_date":{"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":false,"compression":false,"verticalAlign":"middle"},"relation_degree":{"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":false,"compression":false,"verticalAlign":"middle"},"family_composition":{"font":{"bold":false,"color":"","italic":false,"underline":false},"align":"left","width":175,"hidden":false,"tensile":false,"readonly":false,"required":false,"compression":false,"verticalAlign":"middle"}},"allowDeleteRows":false}},"control":{"path":["current_family_info"]},"tooltip":null,"required":false,"hideEmpty":false}}]}}]}},{"id":"32e3984f-ca48-464a-a188-30b44312fea2","descriptor":"tab","values":{"title":"Инф. из учетной системы","__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false},"content":{"":[{"id":"ff6eb3f3-d5c2-4871-9e08-11890416814f","descriptor":"modal-body","content":{"":[{"id":"f0ddf26f-bfb7-40bd-aa60-00e15006839b","descriptor":"dynamic-form-row","values":{"control":{"path":["item","id_1c"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":true,"bindingMode":false,"__isConstValues":[],"showDisplayName":true}},{"id":"14d8c117-3ac8-4ecf-8e00-edac4dec8823","descriptor":"dynamic-form-row","values":{"control":{"path":["item","individual_id_1c"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":true,"bindingMode":false,"__isConstValues":[],"showDisplayName":true}},{"id":"89685014-cb3d-4585-856b-d4d7a38268f3","descriptor":"dynamic-form-row","values":{"__outlet":"","__baseURL":"","hideEmpty":true,"showDisplayName":true,"control":{"path":["item","ref_eq_table"]},"tooltip":null,"required":false,"__readOnly":true,"bindingMode":false,"__relativeURL":"","__isConstValues":[]}}]}}]}},{"id":"589b91c6-b058-4fa5-bdd6-0e0d772ea885","descriptor":"tab","values":{"title":"Занятость","__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false},"content":{"":[{"id":"ad2be975-8d6f-4b07-83df-faa14ae6867d","descriptor":"modal-body","content":{"":[{"id":"9b44fec5-02ce-4530-b863-df9dede4656c","descriptor":"groupbox","values":{"__styles":"margin-bottom: 10px","expanded":true,"styleEnum":[{"code":"default","name":"Default"}],"__readOnly":true,"collapsible":true,"__isConstValues":[],"__renderContentAsync":false,"title":"Основная позиция"},"content":{"":[{"id":"881319ac-e586-4cbb-86be-4e025b6caaaf","descriptor":"dynamic-form-row","values":{"tooltip":null,"hideEmpty":false,"showCreateItem":false,"showDisplayName":true,"__isConstValues":[],"control":{"path":["item","position"]},"required":false,"__readOnly":null,"bindingMode":false}},{"id":"5fcb48cd-29bd-4708-8909-90e08665dffa","descriptor":"dynamic-form-row","values":{"tooltip":null,"required":false,"hideEmpty":false,"showCreateItem":false,"showDisplayName":true,"control":{"path":["item","organization"]},"__readOnly":null,"bindingMode":false,"__isConstValues":[]}},{"id":"2d7efae1-a81c-4333-a97f-258c7789cb80","descriptor":"dynamic-form-row","values":{"control":{"path":["item","structural_subdivision"]},"tooltip":null,"hideEmpty":false,"__readOnly":null,"showCreateItem":false,"__isConstValues":[],"required":false,"bindingMode":false,"showDisplayName":true}},{"id":"26888d6f-e9c3-4626-af6a-59a55f72249b","descriptor":"dynamic-form-row","values":{"required":false,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","work_start"]},"tooltip":null}},{"id":"21532748-241f-48b2-9dd7-e5860a87a558","descriptor":"dynamic-form-row","values":{"control":{"path":["item","beginning_of_the_working_year"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true}}]}},{"id":"fc784a3c-8675-4c8d-8645-3a69c7d3cfea","descriptor":"groupbox","values":{"title":"Сведения о занимаемых позициях","expanded":true,"styleEnum":[{"code":"default","name":"Default"}],"collapsible":true,"__isConstValues":[],"__renderContentAsync":true},"content":{"":[{"id":"9faa271e-bfcc-4ab8-afdb-4807fad443ed","descriptor":"dynamic-list","values":{"__renderContentAsync":false,"iterable":{"path":["item","employment_table"]},"__isConstValues":[]},"content":{"":[{"id":"c6a9ecb2-91df-4247-8e6b-b42e16575e77","descriptor":"kedo.staff@employment_line_view","descriptorVersion":4,"values":{"details_status":{"path":["details_status"]},"employment_place":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","employment_placement_app"]},"organization_admission_date":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","admission_date_organization"]},"employment_relationship_type":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","employment_relationship_type"]},"position":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","position"]},"work_schedules":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","work_schedules"]},"__isConstValues":[],"employment_line":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","type_employment"]},"position_admission_date":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","admission_date_position"]},"date_employment_contract":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","date_employment_contract"]},"number_employment_contract":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","number_employment_contract"]},"rate":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","rate"]},"__styles":"margin-bottom: 10px","__baseURL":"","work_place":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","work_place"]},"subdivision":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","subdivision"]},"date_employment_contract_as_date":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","date_employment_contract_as_date"]},"__outlet":"","id_1c":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","id_1c"]},"date_by":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","date_by"]},"remote_work":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","remote_work"]},"organization":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","organization"]},"__relativeURL":"","id":{"path":["9faa271e-bfcc-4ab8-afdb-4807fad443ed","id"]}}}]}}]}}]}}]}},{"id":"7476e79e-d8ac-4fc4-a8fb-9a25f64f22ac","descriptor":"tab","values":{"title":"Дополнительная информация","__hidden":{"path":["view_tab_personal_documents"],"modifier":"not"},"__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false},"content":{"":[{"id":"ef5c60e0-9d32-4565-bbd6-255810baf5cd","descriptor":"modal-body","content":{"":[{"id":"65ef0260-8e2d-4c2a-a29f-6ebed8105c4d","descriptor":"row","values":{"__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"182bb612-f10f-473d-ad4b-467f552b502d","descriptor":"column","content":{"":[{"id":"3df50c56-b7c7-4271-be6e-8fdc1693c331","descriptor":"dynamic-form-row","values":{"control":{"path":["item","foreign_language"]},"tooltip":null,"required":false,"hideEmpty":true,"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true}}]}},{"id":"c7f3ecdf-300d-4eec-b2e0-bd0e982fdc36","descriptor":"column","content":{"":[{"id":"c3d7356c-2d86-45bc-97f5-fe00b1b07e9d","descriptor":"dynamic-form-row","values":{"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","proficiency_level"]},"tooltip":null,"required":false,"hideEmpty":true}}]}}]}}]}}]}},{"id":"90e574ac-4dbe-4d4c-ab50-3925e50c89c7","descriptor":"tab","values":{"__hidden":{"path":["user_is_admin"],"modifier":"not"},"__outlet":"","__baseURL":"","__relativeURL":"","__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false,"title":"Служебная информация"},"content":{"":[{"id":"577b6dcd-5eb2-4735-a592-da0afe8c1059","descriptor":"modal-body","content":{"":[{"id":"4cc338b7-087b-42ed-905e-7fc8c72dbe6a","descriptor":"dynamic-form-row","values":{"tooltip":null,"required":false,"__baseURL":"","hideEmpty":false,"bindingMode":false,"__relativeURL":"","__isConstValues":[],"control":{"path":["staff_groups"]},"__outlet":"","__readOnly":true,"showDisplayName":true}},{"id":"b0fd158a-1771-4b69-8733-a6839cfada65","descriptor":"dynamic-form-row","values":{"__readOnly":null,"__baseURL":"","hideEmpty":false,"__outlet":"","required":false,"bindingMode":false,"__relativeURL":"","__isConstValues":[],"showDisplayName":true,"control":{"path":["item","docs_signing_type"]},"tooltip":null,"__renderContentOnDemand":false}}]}}]}}]}}]}}],"[sidebar]":[{"id":"32a2c1e4-d376-4aea-8808-09ff7d74034b","descriptor":"sidebar-widget","content":{"":[{"id":"484d74f7-e2f0-413b-83fd-42416ffc4c9f","descriptor":"portal-user-profile-status","values":{"formGroup":{"path":["item"]}}}]}},{"id":"1c6ef61f-6d0e-41d1-8a1f-211bc70f3d92","descriptor":"sidebar-widget","content":{"":[{"id":"3a3d29c6-7fca-42eb-95f8-74789b8b7f22","descriptor":"docflow-approval-lists","values":{"item":{"path":["itemModel"]}}}]}},{"id":"8326be58-15ff-4903-8ab0-e20b08b8306b","descriptor":"sidebar-widget","content":{"":[{"id":"3a3d29c6-7fca-42eb-95f8-74789b8b7f22","descriptor":"docflow-inform-lists","values":{"item":{"path":["itemModel"]}}}]}},{"id":"a3c6e12f-c346-4519-932b-7ab965384039","descriptor":"sidebar-widget","content":{"":[{"id":"4cc755bb-f919-4ff7-8e47-5c59047dad62","descriptor":"item-status","values":{"item":{"path":["itemModel"]},"application":{"path":["application"]}}}]}},{"id":"ff81ce95-4e79-44b7-9084-d7b0e0f764c3","descriptor":"sidebar-widget","content":{"":[{"id":"d23366cd-07b0-4ae4-bb2c-73a203ec7786","descriptor":"item-tasks","descriptorVersion":4,"values":{"formGroup":{"path":["item"]},"itemModel":{"path":["itemModel"]}}}]}},{"id":"3ab3e301-da8a-4030-ba48-4e02c136b812","descriptor":"sidebar-widget","content":{"":[{"id":"5c77c4f0-b9f3-4d77-ac9c-5aaadde543dd","descriptor":"messages-target","values":{"target":{"path":["target"]}}}]}}],"[headerControls]":[{"id":"d8e970da-6c0b-49fb-963c-d2515788b7b1","descriptor":"item-subscribe","values":{"item":{"path":["itemModel"]},"application":{"path":["application"]}}},{"id":"5a72dd17-31f2-4412-a056-a474e01ac17c","descriptor":"button","values":{"icon":"send_approve","view":"icon","action":{"path":["docflowSendAction"]},"tooltip":"Отправить","runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}},{"id":"b0237e26-4b99-4ce8-9d6f-a78b44c9263b","descriptor":"button","values":{"action":{"path":["accessSettings"]},"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"lock","view":"icon","label":"Права доступа"}},{"id":"17a52e8f-7486-4031-bd01-5838fcfc8f70","descriptor":"extension-zone-toolbar-widget","values":{"item":{"path":["__itemRef"]}}}],"[headerUpperTitle]":[{"id":"7fe87b6f-803f-40af-ae04-2c46f1919291","descriptor":"app-navigation-crumbs-tree-widget","values":{"item":{"path":["itemModel"]},"application":{"path":["application"]}}}]}},"fields":[{"code":"archiev_file","type":"FILE","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Архив файла","data":{}}},{"code":"current_family_info","type":"TABLE","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"fields":[{"code":"__count","data":null,"type":"FLOAT","view":{"data":{"additionalType":"integer"},"name":"Количество элементов","system":true},"array":false,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"__index","data":{},"type":"FLOAT","view":{"data":{"additionalType":"integer"},"name":"№","disabled":true},"array":false,"single":true,"deleted":false,"formula":"","indexed":true,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"family_composition","data":{"code":"family_composition_app","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"type":"SYS_COLLECTION","view":{"data":{"showCreateItem":false},"name":"Состав семьи"},"array":true,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"relation_degree","data":{"enumItems":[{"code":"husband_wife","name":"Муж/Жена","checked":false},{"code":"child","name":"Ребенок","checked":false},{"code":"mother","name":"Мать","checked":false},{"code":"father","name":"Отец","checked":false},{"code":"brother","name":"Брат","checked":false},{"code":"sister","name":"Сестра","checked":false},{"code":"other_degree","name":"Другая степень родства","checked":false}]},"type":"ENUM","view":{"data":{},"name":"Степень родства"},"array":true,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"birth_date","data":{},"type":"DATETIME","view":{"data":{"timeOptional":false,"additionalType":"date","defaultTimeType":"startOfDay"},"name":"Дата рождения"},"array":false,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false},{"code":"status","data":{},"type":"STRING","view":{"data":{"additionalType":"string"},"name":"Статус"},"array":false,"single":true,"deleted":false,"formula":"","indexed":false,"required":false,"searchable":false,"defaultValue":null,"calcByFormula":false}],"result":{"status":{"kind":"none","label":"","formula":"sum"},"__count":{"kind":"none","label":"","formula":"sum"},"__index":{"kind":"none","label":"","formula":"sum"},"birth_date":{"kind":"none","label":"","formula":"sum"},"relation_degree":{"kind":"none","label":"","formula":"sum"},"family_composition":{"kind":"none","label":"","formula":"sum"}}},"view":{"name":"Текущие сведения о семье","data":{"allowDeleteRows":false,"collapseNestedHeaders":false,"columnsView":{"birth_date":{"align":"left","backgroundColor":"","compression":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"hidden":false,"key":false,"readonly":false,"required":false,"tensile":false,"verticalAlign":"middle","width":175},"family_composition":{"align":"left","backgroundColor":"","compression":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"hidden":false,"key":false,"readonly":false,"required":false,"tensile":false,"verticalAlign":"middle","width":175},"relation_degree":{"align":"left","backgroundColor":"","compression":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"hidden":false,"key":false,"readonly":false,"required":false,"tensile":false,"verticalAlign":"middle","width":175},"status":{"align":"left","backgroundColor":"","compression":false,"font":{"bold":false,"color":"","italic":false,"underline":false},"hidden":false,"key":false,"readonly":false,"required":false,"tensile":false,"verticalAlign":"middle","width":175}},"footerHidden":false,"groupingSettings":{"code":"","kind":"None","sort":"asc"},"headerHidden":false,"maxRowCount":0,"relativeWidth":false,"showOrderNumbers":false,"viewTemplate":"Элементов: {$__count}","viewVariant":"table"}}},{"code":"family_composition","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"family_composition_app","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Состав семьи","data":{}}},{"code":"staff","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"staff","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"staff","data":{}}},{"code":"categories_assignment","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"category_assignment","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Заявка на присвоение категории","data":{}}},{"code":"details_status","type":"JSON","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Details status","data":{}}},{"code":"view_tab_personal_documents","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Видимость вкладки личные документы","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"hidden_dismissal","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Скрыть кнопку увольнения","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"view_tab_family","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Видимость вкладки состав семьи","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"user_is_admin","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Пользователь-администратор","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"staff_groups","type":"ROLE","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Группы сотрудника","data":{}}}],"fieldVisibilityConditions":{"staff":{"enabled":false,"conditions":[]},"archiev_file":{"enabled":false,"conditions":[]},"staff_groups":{"enabled":false,"conditions":[]},"user_is_admin":{"enabled":false,"conditions":[]},"details_status":{"enabled":false,"conditions":[]},"view_tab_family":{"enabled":false,"conditions":[]},"hidden_dismissal":{"enabled":false,"conditions":[]},"trudovoi_dogovor":{"enabled":false,"conditions":[]},"family_composition":{"enabled":false,"conditions":[]},"current_family_info":{"enabled":false,"conditions":[]},"categories_assignment":{"enabled":false,"conditions":[]},"view_tab_personal_documents":{"enabled":false,"conditions":[]}},"scriptOptions":{"allowNamespace":true},"clientScripts":"import JSZip from \"jszip.js\"\nimport XLSX from \"xlsx.full.min.js\";\ndeclare const console: any;\ndeclare const window: any;\ndeclare const document: any;\n\nlet currentModal: any;\n\nclass MyRole {\n    group: UserGroupItem | UserItem[] | OrganisationStructureItem\n    type: 'group' | 'user' | 'orgstruct'\n    code: string\n    constructor(group: UserGroupItem | UserItem[] | OrganisationStructureItem, type: 'group' | 'user' | 'orgstruct', code: string) {\n        this.code = code;\n        this.group = group;\n        this.type = type;\n    };\n    getUsers(): Promise\u003cUserItem[]\u003e {\n        if (this.type == \"group\") {\n            return (\u003cUserGroupItem\u003ethis.group).users();\n        }\n        else if (this.type == \"orgstruct\") {\n            return System.users.search().where(i =\u003e i.osIds.has((\u003cOrganisationStructureItem\u003ethis.group))).size(10000).all()\n        }\n        else return new Promise\u003cUserItem[]\u003e(() =\u003e \u003cUserItem[]\u003ethis.group)\n    }\n    json(): any {\n        return {\n            code: this.code,\n            type: this.type\n        }\n    }\n};\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    console.log(Context.data.external_user)\n    console.log(Context.data.employment_table)\n    const groups = await System.userGroups.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    if (Context.data.employment_table) {\n        console.log(Context.data.employment_table.length)\n    }\n    let waitForModal = window.setInterval(async () =\u003e {\n        currentModal = document.querySelector(\".complex-popup__content\");\n        if (!currentModal) {\n            return\n        };\n        window.clearInterval(waitForModal);\n        await checkUserAndLocation()\n    }, 500)\n    ViewContext.data.staff = await ViewContext.fields.staff.app.search().where(f =\u003e f.__id.eq(Context.data.__id)).first();\n    console.log('staff: ', ViewContext.data.staff);\n    let family_members = await ViewContext.fields.family_composition.app.search().where(f =\u003e f.staff.link(ViewContext.data.staff!)).size(10000).all();\n    console.log(family_members);\n    if (family_members \u0026\u0026 family_members.length \u003e 0) {\n        for (let member of family_members) {\n\n            let row = ViewContext.data.current_family_info!.insert();\n            row.family_composition = member;\n            row.birth_date = member.data.birth_date!;\n            row.relation_degree = member.data.relation_degree!;\n            row.status = member.data.__status!.name\n        }\n    }\n    ViewContext.data.current_family_info = ViewContext.data.current_family_info;\n\n    ViewContext.data.details_status = [];\n\n    if (Context.data.ext_user) {\n        const staffUser = await Context.data.ext_user.fetch();\n        const userGroups = await System.userGroups.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.subOrgunitIds.has(staffUser.id)\n        )).size(10000).all();\n        ViewContext.data.staff_groups = userGroups.map(group =\u003e {\n            return new MyRole(group, \"group\", group.id) as Role\n        });\n    }\n\n    let current_user = await System.users.getCurrentUser();\n    let staff = await Application.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(current_user))).first();\n    let user = await current_user.fetch();\n    if (user.data.groupIds \u0026\u0026 user.data.groupIds.length \u003e 0) {\n        let user_gropusId = groups.filter(group =\u003e user.data.groupIds!.map(g =\u003e g.id).indexOf(group.id) != -1).map(group =\u003e group.data.code)\n        console.log(user_gropusId);\n        if ((~(user_gropusId.indexOf('abdecf4b-b6ba-419f-bac7-c1455d2a6159'))) || (~(user_gropusId.indexOf('administrators'))) || (~(user_gropusId.indexOf('supervisor')))) {\n            ViewContext.data.view_tab_personal_documents = true;\n            ViewContext.data.view_tab_family = true;\n            ViewContext.data.user_is_admin = true;\n        }\n        else if ((~(user_gropusId.indexOf('dfede5be-5011-4ec9-b535-8c9ca3fc4d19')))) {\n            ViewContext.data.view_tab_personal_documents = true;\n            ViewContext.data.view_tab_family = false;\n        }\n        else if (staff \u0026\u0026 ViewContext.data.staff \u0026\u0026 staff.id == ViewContext.data.staff.id) {\n            ViewContext.data.view_tab_personal_documents = true;\n            ViewContext.data.view_tab_family = true;\n        }\n        else {\n            ViewContext.data.view_tab_personal_documents = false;\n            ViewContext.data.view_tab_family = false;\n        }\n    }\n\n    const docs = await Namespace.app.types_documents_for_employment.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    //const names = ['Паспорт. Страница с регистрацией', 'Паспорт. Страница с фото и данными', 'СНИЛС', 'ИНН'];\n\n    //const myDocs = docs.filter(f =\u003e names.find(i =\u003e i == f.data.__name));\n    const myDocs = docs.filter(f =\u003e {\n        if (f.data.default) {\n            return f;\n        }\n    })\n    if (!Context.data.docs_table_full) {\n        for (const doc of myDocs) {\n            const row = Context.data.documents_for_employment!.insert();\n            row.doc = doc\n            row.required = doc.data.required!;\n        }\n        Context.data.docs_table_full = true;\n        console.log(Context.data.documents_for_employment)\n    }\n\n    Context.data.documents_for_employment = Context.data.documents_for_employment;\n}\n\nasync function checkUserAndLocation(): Promise\u003cvoid\u003e {\n    const user = await System.users.getCurrentUser();\n    console.log(user);\n    //@ts-ignore\n    if ((user.originalData.profiles || window.location.href.includes(\"_portal\")) \u0026\u0026 Context.data.ext_user?.id != user.id) {\n        currentModal.innerHTML = \"\";\n        const divBlocker = document.createElement(\"div\");\n        const blockerText = document.createElement(\"div\");\n        divBlocker.style.width = \"100%\";\n        divBlocker.style.height = \"100%\";\n        divBlocker.style.position = \"absolute\";\n        divBlocker.style.display = \"flex\";\n        divBlocker.style.justifyContent = \"center\";\n        divBlocker.style.alignItems = \"center\";\n        divBlocker.style.fontSize = \"24px\";\n        blockerText.textContent = \"Нет доступа к данному элементу с внешнего портала.\";\n        divBlocker.append(blockerText);\n        currentModal.append(divBlocker);\n    }\n}\n\nasync function download_move_files(): Promise\u003cvoid\u003e {\n    if (!Context.data.documents_employment)\n        return\n    let files: any[] = [];\n    // await download_files(Context.data.documents_employment);\n}\n\nasync function download_personnel_documents_files(): Promise\u003cvoid\u003e {\n    if (!Context.data.personnel_documents)\n        return\n    let files: any[] = [];\n    await download_files(Context.data.personnel_documents);\n}\n\n\nasync function download_all_files(): Promise\u003cvoid\u003e {\n    let files: any[] = [];\n    files = files.concat(Context.data.personnel_documents);\n    files = files.concat(Context.data.documents_employment);\n    await download_files(files)\n}\n\n\n\nasync function download_files(files: TApplication\u003cApplication$personnel_documents$personnel_documents$Data, any, Application$personnel_documents$personnel_documents$Processes\u003e[] | undefined): Promise\u003cvoid\u003e {\n    var jszip = new JSZip;\n    console.log(jszip);\n    if (!files)\n        return\n    await Promise.all(files.map(async f =\u003e {\n        let f_fetched = await f.fetch();\n        let f_file = (await f_fetched.data.__sourceRef!.fetch()).data.__file\n        const res = await fetch(await f_file.getDownloadUrl())\n        const content = await res.arrayBuffer()\n        let file_name = ''\n        if (f_fetched.data.__name.includes('.pdf') || f_fetched.data.__name.includes('.docx')) {\n            file_name = f_fetched.data.__name;\n        }\n        else {\n\n            file_name = f_fetched.data.__name + f_fetched.data.line_file_name!.substring(f_fetched.data.line_file_name!.lastIndexOf('.'), f_fetched.data.line_file_name!.length);\n        }\n        jszip.file(file_name, content);\n    }))\n\n    jszip.generateAsync({ type: \"uint8array\" })\n        .then(async function (content: any) {\n            const file = await ViewContext.fields.archiev_file.create(`${Context.data.__name}  ${new Datetime(new Date()).getDate().format('DD.MM.YYYY')}.zip`, content);\n            ViewContext.data.archiev_file = file\n            window.location.href = await ViewContext.data.archiev_file.getDownloadUrl();\n        });\n}\nasync function getUserLnaDocs(): Promise\u003cvoid\u003e {\n    if (Context.data.ext_user) {\n        let promises: Promise\u003cvoid\u003e[] = [];\n        const lnaDocs = await Context.fields.list_sign_lna.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n        const user = await Context.data.ext_user.fetch();\n        let jsonData: { \"Перечень ЛНА\": string, \"Подразделение\": string, \"Должность\": string, \"ФИО\": string, \"Статус ознакомления\": string, \"Комментарий\": string }[] = [];\n        for (let doc of lnaDocs) {\n            const informLists = await doc.docflow().getInformLists();\n            if (!informLists || informLists.length \u003c 1) {\n                continue;\n            };\n            if (informLists.some(list =\u003e list.respondents.map(u =\u003e u.id).indexOf(user.id) !== -1)) {\n                const positionName = Context.data.position ? await Context.data.position.fetch().then(p =\u003e p.data.__name) : \"\";\n                const subdivisionName = Context.data.structural_subdivision ? await Context.data.structural_subdivision.fetch().then(s =\u003e s.data.__name) : \"\";\n                const docName = doc.data.__name;\n                const name = Context.data.__name;\n                const informList = await doc.docflow().getInformLists().then(list =\u003e list.find(list =\u003e list.respondents.map(u =\u003e u.id).indexOf(user.id) != -1)!);\n                const currentList = informList.respondents.find(u =\u003e u.id === user.id)!\n                const status = currentList.status;\n                let statustext = status === \"done\" ? \"Ознакомлен\" : status === \"in_progress\" ? \"На ознакомлении\" : \"Отказ от ознакомления\";\n                const taskDate = `${currentList.ts.format(\"DD.MM.YYYY\")} г.`;\n                statustext += `\\n ${taskDate}`\n                const comment = currentList.comment;\n                jsonData.push({\n                    \"Перечень ЛНА\": docName,\n                    \"Подразделение\": subdivisionName,\n                    \"Должность\": positionName,\n                    \"ФИО\": name,\n                    \"Статус ознакомления\": statustext,\n                    \"Комментарий\": comment || \"\"\n                })\n            };\n        };\n\n        if (!jsonData || jsonData.length \u003c 1) {\n            return;\n        };\n        const maxDocNameLength = Math.max(...jsonData.map(item =\u003e item[\"Перечень ЛНА\"].length)) + 1;\n        const maxSubdivisonLength = Math.max(...jsonData.map(item =\u003e item[\"Подразделение\"].length)) + 1;\n        const maxPositionLength = Math.max(...jsonData.map(item =\u003e item[\"Должность\"].length)) + 1;\n        const maxNameLength = Math.max(...jsonData.map(item =\u003e item[\"ФИО\"].length)) + 1;\n        const maxStatusLength = Math.max(...jsonData.map(item =\u003e item[\"Статус ознакомления\"].length)) + 1;\n        const maxCommentLength = Math.max(...jsonData.map(item =\u003e item[\"Комментарий\"].length)) || 15;\n\n        const workbook = XLSX.utils.book_new();\n        const worksheet = XLSX.utils.json_to_sheet(jsonData);\n        worksheet[\"!cols\"] = [\n            { wch: maxDocNameLength },\n            { wch: maxSubdivisonLength },\n            { wch: maxPositionLength },\n            { wch: maxNameLength },\n            { wch: maxStatusLength },\n            { wch: maxCommentLength },\n        ]\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Ознакомление с ЛНА\")\n        const fileName = `Отчёт по ознакомлению с документами ЛНА сотрудника ${Context.data.__name}.xlsx`\n        XLSX.writeFile(workbook, fileName)\n    };\n};\n\ninterface IVacationLeftover {\n    position?: string,\n    remainder: number,\n}\n\ninterface IVacationLeftoverData {\n    position?: string,\n    leftovers: IVacationLeftover[],\n    sum: number,\n}\n\nasync function getActualLeftovers(): Promise\u003cvoid\u003e {\n    if (!ViewContext.data.staff) {\n        throw new Error(\"ViewContext.data.staff is undefined\");\n    }\n\n    if (!Context.data.employment_table || Context.data.employment_table.length == 0) {\n        throw new Error(\"У сотрудника не указаны места занятости\");\n    }\n\n    const staff = ViewContext.data.staff;\n\n    const vacation_leftovers = await Namespace.app.vacation_leftovers.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.staff.link(staff)\n        ))\n        .size(10000)\n        .all();\n\n    const employment_placement_ids = [...new Set(vacation_leftovers\n        .filter(f =\u003e f.data.position != undefined)\n        .map(f =\u003e f.data.position!.id)\n    )];\n\n    const employment_placements = await Namespace.app.employment_directory.search()\n        .where(f =\u003e f.__id.in(employment_placement_ids))\n        .size(employment_placement_ids.length)\n        .all();\n\n    const leftovers_data : IVacationLeftoverData[] = [];\n\n    for (const employment_placement of employment_placements) {\n        if (!employment_placement.data.position) continue;\n\n        const leftovers = vacation_leftovers.filter(f =\u003e f.data.position?.id == employment_placement.data.position?.id);\n\n        if (leftovers.length == 0) continue;\n\n        const leftover_data: IVacationLeftoverData = {\n            position: employment_placement.data.__name,\n            leftovers: leftovers.map(l =\u003e {\n                return {\n                    remainder: l.data.remainder ?? 0,\n                    position: l.data.position?.id,\n                }\n            }),\n            sum : leftovers.reduce((prVal, curVal) =\u003e prVal += curVal.data.remainder ?? 0, 0)\n        }\n\n        leftovers_data.push(leftover_data);\n    }\n\n    ViewContext.data.leftovers_data = leftovers_data;\n}\n","clientScriptOptions":{"allowNamespace":true,"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{"allowNamespace":true},"widgetZones":[{"code":"[footer]"}],"dataFieldCode":"item"},"dataNamespace":"kedo","dataCode":"staff","runtime":{"version":1,"clientScripts":"System.register([\"jszip.js\", \"xlsx.full.min.js\"], function (exports_1, context_1) {\n    \"use strict\";\n    var jszip_js_1, xlsx_full_min_js_1;\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        let currentModal;\n        class MyRole {\n            constructor(group, type, code) {\n                this.code = code;\n                this.group = group;\n                this.type = type;\n            }\n            ;\n            getUsers() {\n                if (this.type == \"group\") {\n                    return this.group.users();\n                }\n                else if (this.type == \"orgstruct\") {\n                    return System.users.search().where(i =\u003e i.osIds.has(this.group)).size(10000).all();\n                }\n                else\n                    return new Promise(() =\u003e this.group);\n            }\n            json() {\n                return {\n                    code: this.code,\n                    type: this.type\n                };\n            }\n        }\n        ;\n        async function onInit() {\n            console.log(Context.data.external_user);\n            console.log(Context.data.employment_table);\n            const groups = await System.userGroups.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            if (Context.data.employment_table) {\n                console.log(Context.data.employment_table.length);\n            }\n            let waitForModal = window.setInterval(async () =\u003e {\n                currentModal = document.querySelector(\".complex-popup__content\");\n                if (!currentModal) {\n                    return;\n                }\n                ;\n                window.clearInterval(waitForModal);\n                await checkUserAndLocation();\n            }, 500);\n            ViewContext.data.staff = await ViewContext.fields.staff.app.search().where(f =\u003e f.__id.eq(Context.data.__id)).first();\n            console.log('staff: ', ViewContext.data.staff);\n            let family_members = await ViewContext.fields.family_composition.app.search().where(f =\u003e f.staff.link(ViewContext.data.staff)).size(10000).all();\n            console.log(family_members);\n            if (family_members \u0026\u0026 family_members.length \u003e 0) {\n                for (let member of family_members) {\n                    let row = ViewContext.data.current_family_info.insert();\n                    row.family_composition = member;\n                    row.birth_date = member.data.birth_date;\n                    row.relation_degree = member.data.relation_degree;\n                    row.status = member.data.__status.name;\n                }\n            }\n            ViewContext.data.current_family_info = ViewContext.data.current_family_info;\n            ViewContext.data.details_status = [];\n            if (Context.data.ext_user) {\n                const staffUser = await Context.data.ext_user.fetch();\n                const userGroups = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.subOrgunitIds.has(staffUser.id))).size(10000).all();\n                ViewContext.data.staff_groups = userGroups.map(group =\u003e {\n                    return new MyRole(group, \"group\", group.id);\n                });\n            }\n            let current_user = await System.users.getCurrentUser();\n            let staff = await Application.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(current_user))).first();\n            let user = await current_user.fetch();\n            if (user.data.groupIds \u0026\u0026 user.data.groupIds.length \u003e 0) {\n                let user_gropusId = groups.filter(group =\u003e user.data.groupIds.map(g =\u003e g.id).indexOf(group.id) != -1).map(group =\u003e group.data.code);\n                console.log(user_gropusId);\n                if ((~(user_gropusId.indexOf('abdecf4b-b6ba-419f-bac7-c1455d2a6159'))) || (~(user_gropusId.indexOf('administrators'))) || (~(user_gropusId.indexOf('supervisor')))) {\n                    ViewContext.data.view_tab_personal_documents = true;\n                    ViewContext.data.view_tab_family = true;\n                    ViewContext.data.user_is_admin = true;\n                }\n                else if ((~(user_gropusId.indexOf('dfede5be-5011-4ec9-b535-8c9ca3fc4d19')))) {\n                    ViewContext.data.view_tab_personal_documents = true;\n                    ViewContext.data.view_tab_family = false;\n                }\n                else if (staff \u0026\u0026 ViewContext.data.staff \u0026\u0026 staff.id == ViewContext.data.staff.id) {\n                    ViewContext.data.view_tab_personal_documents = true;\n                    ViewContext.data.view_tab_family = true;\n                }\n                else {\n                    ViewContext.data.view_tab_personal_documents = false;\n                    ViewContext.data.view_tab_family = false;\n                }\n            }\n            const docs = await Namespace.app.types_documents_for_employment.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            const myDocs = docs.filter(f =\u003e {\n                if (f.data.default) {\n                    return f;\n                }\n            });\n            if (!Context.data.docs_table_full) {\n                for (const doc of myDocs) {\n                    const row = Context.data.documents_for_employment.insert();\n                    row.doc = doc;\n                    row.required = doc.data.required;\n                }\n                Context.data.docs_table_full = true;\n                console.log(Context.data.documents_for_employment);\n            }\n            Context.data.documents_for_employment = Context.data.documents_for_employment;\n        }\n        async function checkUserAndLocation() {\n            var _a;\n            const user = await System.users.getCurrentUser();\n            console.log(user);\n            if ((user.originalData.profiles || window.location.href.includes(\"_portal\")) \u0026\u0026 ((_a = Context.data.ext_user) === null || _a === void 0 ? void 0 : _a.id) != user.id) {\n                currentModal.innerHTML = \"\";\n                const divBlocker = document.createElement(\"div\");\n                const blockerText = document.createElement(\"div\");\n                divBlocker.style.width = \"100%\";\n                divBlocker.style.height = \"100%\";\n                divBlocker.style.position = \"absolute\";\n                divBlocker.style.display = \"flex\";\n                divBlocker.style.justifyContent = \"center\";\n                divBlocker.style.alignItems = \"center\";\n                divBlocker.style.fontSize = \"24px\";\n                blockerText.textContent = \"Нет доступа к данному элементу с внешнего портала.\";\n                divBlocker.append(blockerText);\n                currentModal.append(divBlocker);\n            }\n        }\n        async function download_move_files() {\n            if (!Context.data.documents_employment)\n                return;\n            let files = [];\n        }\n        async function download_personnel_documents_files() {\n            if (!Context.data.personnel_documents)\n                return;\n            let files = [];\n            await download_files(Context.data.personnel_documents);\n        }\n        async function download_all_files() {\n            let files = [];\n            files = files.concat(Context.data.personnel_documents);\n            files = files.concat(Context.data.documents_employment);\n            await download_files(files);\n        }\n        async function download_files(files) {\n            var jszip = new jszip_js_1.default;\n            console.log(jszip);\n            if (!files)\n                return;\n            await Promise.all(files.map(async (f) =\u003e {\n                let f_fetched = await f.fetch();\n                let f_file = (await f_fetched.data.__sourceRef.fetch()).data.__file;\n                const res = await fetch(await f_file.getDownloadUrl());\n                const content = await res.arrayBuffer();\n                let file_name = '';\n                if (f_fetched.data.__name.includes('.pdf') || f_fetched.data.__name.includes('.docx')) {\n                    file_name = f_fetched.data.__name;\n                }\n                else {\n                    file_name = f_fetched.data.__name + f_fetched.data.line_file_name.substring(f_fetched.data.line_file_name.lastIndexOf('.'), f_fetched.data.line_file_name.length);\n                }\n                jszip.file(file_name, content);\n            }));\n            jszip.generateAsync({ type: \"uint8array\" })\n                .then(async function (content) {\n                const file = await ViewContext.fields.archiev_file.create(`${Context.data.__name}  ${new Datetime(new Date()).getDate().format('DD.MM.YYYY')}.zip`, content);\n                ViewContext.data.archiev_file = file;\n                window.location.href = await ViewContext.data.archiev_file.getDownloadUrl();\n            });\n        }\n        async function getUserLnaDocs() {\n            if (Context.data.ext_user) {\n                let promises = [];\n                const lnaDocs = await Context.fields.list_sign_lna.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n                const user = await Context.data.ext_user.fetch();\n                let jsonData = [];\n                for (let doc of lnaDocs) {\n                    const informLists = await doc.docflow().getInformLists();\n                    if (!informLists || informLists.length \u003c 1) {\n                        continue;\n                    }\n                    ;\n                    if (informLists.some(list =\u003e list.respondents.map(u =\u003e u.id).indexOf(user.id) !== -1)) {\n                        const positionName = Context.data.position ? await Context.data.position.fetch().then(p =\u003e p.data.__name) : \"\";\n                        const subdivisionName = Context.data.structural_subdivision ? await Context.data.structural_subdivision.fetch().then(s =\u003e s.data.__name) : \"\";\n                        const docName = doc.data.__name;\n                        const name = Context.data.__name;\n                        const informList = await doc.docflow().getInformLists().then(list =\u003e list.find(list =\u003e list.respondents.map(u =\u003e u.id).indexOf(user.id) != -1));\n                        const currentList = informList.respondents.find(u =\u003e u.id === user.id);\n                        const status = currentList.status;\n                        let statustext = status === \"done\" ? \"Ознакомлен\" : status === \"in_progress\" ? \"На ознакомлении\" : \"Отказ от ознакомления\";\n                        const taskDate = `${currentList.ts.format(\"DD.MM.YYYY\")} г.`;\n                        statustext += `\\n ${taskDate}`;\n                        const comment = currentList.comment;\n                        jsonData.push({\n                            \"Перечень ЛНА\": docName,\n                            \"Подразделение\": subdivisionName,\n                            \"Должность\": positionName,\n                            \"ФИО\": name,\n                            \"Статус ознакомления\": statustext,\n                            \"Комментарий\": comment || \"\"\n                        });\n                    }\n                    ;\n                }\n                ;\n                if (!jsonData || jsonData.length \u003c 1) {\n                    return;\n                }\n                ;\n                const maxDocNameLength = Math.max(...jsonData.map(item =\u003e item[\"Перечень ЛНА\"].length)) + 1;\n                const maxSubdivisonLength = Math.max(...jsonData.map(item =\u003e item[\"Подразделение\"].length)) + 1;\n                const maxPositionLength = Math.max(...jsonData.map(item =\u003e item[\"Должность\"].length)) + 1;\n                const maxNameLength = Math.max(...jsonData.map(item =\u003e item[\"ФИО\"].length)) + 1;\n                const maxStatusLength = Math.max(...jsonData.map(item =\u003e item[\"Статус ознакомления\"].length)) + 1;\n                const maxCommentLength = Math.max(...jsonData.map(item =\u003e item[\"Комментарий\"].length)) || 15;\n                const workbook = xlsx_full_min_js_1.default.utils.book_new();\n                const worksheet = xlsx_full_min_js_1.default.utils.json_to_sheet(jsonData);\n                worksheet[\"!cols\"] = [\n                    { wch: maxDocNameLength },\n                    { wch: maxSubdivisonLength },\n                    { wch: maxPositionLength },\n                    { wch: maxNameLength },\n                    { wch: maxStatusLength },\n                    { wch: maxCommentLength },\n                ];\n                xlsx_full_min_js_1.default.utils.book_append_sheet(workbook, worksheet, \"Ознакомление с ЛНА\");\n                const fileName = `Отчёт по ознакомлению с документами ЛНА сотрудника ${Context.data.__name}.xlsx`;\n                xlsx_full_min_js_1.default.writeFile(workbook, fileName);\n            }\n            ;\n        }\n        ;\n        async function getActualLeftovers() {\n            if (!ViewContext.data.staff) {\n                throw new Error(\"ViewContext.data.staff is undefined\");\n            }\n            if (!Context.data.employment_table || Context.data.employment_table.length == 0) {\n                throw new Error(\"У сотрудника не указаны места занятости\");\n            }\n            const staff = ViewContext.data.staff;\n            const vacation_leftovers = await Namespace.app.vacation_leftovers.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff.link(staff)))\n                .size(10000)\n                .all();\n            const employment_placement_ids = [...new Set(vacation_leftovers\n                    .filter(f =\u003e f.data.position != undefined)\n                    .map(f =\u003e f.data.position.id))];\n            const employment_placements = await Namespace.app.employment_directory.search()\n                .where(f =\u003e f.__id.in(employment_placement_ids))\n                .size(employment_placement_ids.length)\n                .all();\n            const leftovers_data = [];\n            for (const employment_placement of employment_placements) {\n                if (!employment_placement.data.position)\n                    continue;\n                const leftovers = vacation_leftovers.filter(f =\u003e { var _a, _b; return ((_a = f.data.position) === null || _a === void 0 ? void 0 : _a.id) == ((_b = employment_placement.data.position) === null || _b === void 0 ? void 0 : _b.id); });\n                if (leftovers.length == 0)\n                    continue;\n                const leftover_data = {\n                    position: employment_placement.data.__name,\n                    leftovers: leftovers.map(l =\u003e {\n                        var _a, _b;\n                        return {\n                            remainder: (_a = l.data.remainder) !== null \u0026\u0026 _a !== void 0 ? _a : 0,\n                            position: (_b = l.data.position) === null || _b === void 0 ? void 0 : _b.id,\n                        };\n                    }),\n                    sum: leftovers.reduce((prVal, curVal) =\u003e { var _a; return prVal += (_a = curVal.data.remainder) !== null \u0026\u0026 _a !== void 0 ? _a : 0; }, 0)\n                };\n                leftovers_data.push(leftover_data);\n            }\n            ViewContext.data.leftovers_data = leftovers_data;\n        }\n        return {\n            onInit,\n            checkUserAndLocation,\n            download_move_files,\n            download_personnel_documents_files,\n            download_all_files,\n            download_files,\n            getUserLnaDocs,\n            getActualLeftovers\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [\n            function (jszip_js_1_1) {\n                jszip_js_1 = jszip_js_1_1;\n            },\n            function (xlsx_full_min_js_1_1) {\n                xlsx_full_min_js_1 = xlsx_full_min_js_1_1;\n            }\n        ],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"checkUserAndLocation","parameters":[],"type":"[object Object]"},{"name":"download_move_files","parameters":[],"type":"[object Object]"},{"name":"download_personnel_documents_files","parameters":[],"type":"[object Object]"},{"name":"download_all_files","parameters":[],"type":"[object Object]"},{"name":"download_files","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getUserLnaDocs","parameters":[],"type":"[object Object]"},{"name":"getActualLeftovers","parameters":[],"type":"[object Object]"}]},"__createdAt":"2024-05-27T06:35:55.905461419Z","__createdBy":"59e0911f-230a-4b6d-becf-6b302a91977a","__updatedAt":"2024-05-30T13:08:05.926360758Z","__updatedBy":"59e0911f-230a-4b6d-becf-6b302a91977a","__deletedAt":null}
