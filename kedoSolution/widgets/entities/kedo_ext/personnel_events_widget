{
  "__id": "018fe325-bbb4-7a51-ae44-903964e7f316",
  "namespace": "kedo_ext",
  "code": "personnel_events_widget",
  "__name": "Виджет Кадровые события",
  "description": "",
  "extensionZoneCode": "",
  "sort": 0,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 7,
  "hidden": false,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "icon": "business_portfolio_type_1",
    "template": {
      "id": "d8ef1fc2-d953-4d86-bab3-9f1dc7df2d57",
      "descriptor": "component",
      "content": {
        "": [
          {
            "id": "6481e9e5-d801-4f67-8321-d79fbcefb50b",
            "descriptor": "code",
            "values": {
              "hideContent": true,
              "contentPlaceholder": "imports",
              "html": "\u003clink rel=\"stylesheet\" href=\"\u003c%= UI.widget.filePath %\u003e/lib/vanilla-calendar/dark.min.css\"\u003e\u003c/link\u003e\n\u003clink rel=\"stylesheet\" href=\"\u003c%= UI.widget.filePath %\u003e/lib/vanilla-calendar/light.min.css\"\u003e\u003c/link\u003e\n\u003clink rel=\"stylesheet\" href=\"\u003c%= UI.widget.filePath %\u003e/lib/vanilla-calendar/vanilla-calendar.min.css\"\u003e\u003c/link\u003e\n\u003cscript type=\"text/javascript\" src=\"\u003c%= UI.widget.filePath %\u003e/lib/vanilla-calendar/vanilla-calendar.min.js\"\u003e\u003c/script\u003e"
            }
          },
          {
            "id": "b9b2167f-7bf5-4635-9a83-2c4d6906c7c9",
            "descriptor": "code",
            "values": {
              "contentPlaceholder": "",
              "html": "\u003cstyle\u003e\n\t.documents.documents-page_main-content {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: 'SF Pro Display';\n\t\tmargin-top: 0;\n\t\tmargin-bottom: 0;\n\t\tpadding-top: 0;\n\t\tpadding-bottom: 0;\n\t\tfont-size: 16px\n\t}\n\n\t.documents h3 {\n\t\tfont-size: 2rem\n\t}\n\n\t.documents svg {\n\t\tfill: none\n\t}\n\n\t.search-choice-items.expanded {\n\t\ttransform: rotateX(0);\n\t}\n\n\t.title-search {\n\t\t/* width: 100%; */\n\t\tpadding: 0.5rem 1rem;\n\t\tborder-radius: 4px;\n\t\tbackground: #FFF;\n\t\tborder: none;\n\t\tbox-sizing: border-box;\n\t\tposition: relative;\n\t\ttransition: all .3s;\n\t}\n\n\t.common-content_title_search-extend_item-value_calendar .vanilla-calendar-header {\n\t\tmargin-bottom: 0;\n\t\tborder-top-right-radius: 8px;\n\t\tborder-top-left-radius: 8px;\n\t\tborder-top: 1px solid #D9D9D9;\n\t\tborder-right: 1px solid #D9D9D9;\n\t\tborder-left: 1px solid #D9D9D9;\n\t}\n\n\t.common-content_title_search-extend.expanded {\n\t\ttransform: rotateX(0);\n\t\tz-index: 10;\n\t}\n\n\t.vanilla-calendar.common-content_title_search-extend_item-value_calendar {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #fff;\n\t\tz-index: 2;\n\t\tpadding: 0;\n\t\ttop: 4rem;\n\t\tright: -20%\n\t}\n\n\t.common-content_title_search-extend_item-value_calendar .vanilla-calendar-wrapper {\n\t\tbackground-color: #fff;\n\t\tpadding: 1rem;\n\t\tborder-bottom-left-radius: 8px;\n\t\tborder-bottom-right-radius: 8px;\n\t\tborder-bottom: 1px solid #d9d9d9;\n\t\tborder-left: 1px solid #d9d9d9;\n\t\tborder-right: 1px solid #d9d9d9\n\t}\n\n\t.vanilla-calendar.hidden {\n\t\tdisplay: none\n\t}\n\n\t.vanilla-calendar.tasks-page_main-content_title_search-extend_item-value_calendar {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #fff;\n\t\tz-index: 2;\n\t\tpadding: 0;\n\t\ttop: 4rem;\n\t\tright: -20%\n\t}\n\n\t.vanilla-calendar.common-content_title_search-extend_item-value_calendar {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #fff;\n\t\tz-index: 2;\n\t\tpadding: 0;\n\t\ttop: 4rem;\n\t\tright: -20%\n\t}\n\n\t.mobile .vanilla-calendar.tasks-page_main-content_title_search-extend_item-value_calendar {\n\t\tright: auto;\n\t\ttop: 4rem\n\t}\n\n\t.documents.common-content_mobile_footer.hidden {\n\t\ttransform: translateY(100%)\n\t}\n\n\t.documents.common-table-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t\tpadding: .5rem 0\n\t}\n\n\t.documents.common-table-content .common-content_table-item {\n\t\tpadding: 1rem 1.5rem;\n\t\tmargin: 0 .5rem;\n\t\tborder-radius: 8px;\n\t\tmin-height: 5.75rem\n\t}\n\n\t.documents.common-table-content .common-content_table-item:hover {\n\t\tbackground-color: #f3f6ff;\n\t\tcursor: pointer\n\t}\n\n\t.common-content_title_search-extend {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 1rem 1.5rem;\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\tbox-sizing: border-box;\n\t\theight: fit-content;\n\t\tbackground-color: #fff;\n\t\tbox-shadow: 0 6px 28px 0 rgba(37, 41, 65, .16);\n\t\ttop: 3.5rem;\n\t\tgap: 1rem;\n\t\tfont-size: 15px;\n\t\ttransform: rotateX(90deg);\n\t\ttransform-origin: top\n\t}\n\n\t.common-content_title_search-extend_item {\n\t\tbackground-color: #fff\n\t}\n\n\t.common-content_title_search-extend_item .title-search {\n\t\tborder: 1px solid #d9d9d9\n\t}\n\n\t.common-content_title_search-extend_footer {\n\t\tdisplay: flex;\n\t\tgap: 1rem\n\t}\n\n\t.documents.common-content_mobile_footer {\n\t\tposition: fixed;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem;\n\t\tborder-top-right-radius: 20px;\n\t\tborder-top-left-radius: 20px;\n\t\tbackground-color: #fff;\n\t\twidth: 100%;\n\t\ttransition: all .3s;\n\t\ttransform: translateY(0);\n\t\tz-index: 3;\n\t\tmax-height: 80%;\n\t\toverflow-y: auto\n\t}\n\n\t.documents.common-content_mobile_footer.hidden {\n\t\ttransform: translateY(100%)\n\t}\n\n\t.documents.common-content_mobile_footer-item {\n\t\tdisplay: flex;\n\t\tpadding: 1rem;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tborder-bottom: 1px solid #f0f0f0\n\t}\n\n\t.documents.common-content_mobile_footer-item:first-child,\n\t.documents.common-content_mobile_footer-item:last-child {\n\t\tborder: none\n\t}\n\n\t.documents.common-content_title_tab {\n\t\tborder-radius: 8px;\n\t\tbackground-color: transparent;\n\t\tborder: 1px solid #05f;\n\t\tpadding: .35rem 1rem;\n\t\tcolor: #05f;\n\t\tuser-select: none;\n\t\ttransition: all .3s;\n\t\tcursor: pointer\n\t}\n\n\t.documents.common-content_title_tab.active {\n\t\tbackground-color: #05f;\n\t\tcolor: #fff\n\t}\n\n\t.documents.common-content_title_tab:hover {\n\t\tbackground-color: #05f;\n\t\tcolor: #fff\n\t}\n\n\ta.common-content_table-item {\n\t\tcolor: #000;\n\t\ttext-decoration: none\n\t}\n\n\t.common-content_mobile_container-item_status {\n\t\tfont-size: 12px;\n\t\tfont-weight: 500;\n\t\tpadding: .6rem .9rem;\n\t\tborder-radius: 8px;\n\t\tbackground-color: #bcbcbc;\n\t\tmax-width: fit-content\n\t}\n\n\t.documents.common-widget-title {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tgap: 1rem\n\t}\n\n\t.documents.common-content_title_text {\n\t\tpointer-events: none\n\t}\n\n\t.documents.common-content_table {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t\tborder-radius: 8px;\n\t\tbackground-color: #fff;\n\t\tfont-size: 15px;\n\t\tfont-weight: 400\n\t}\n\n\t.documents.common-content_table.hidden {\n\t\tdisplay: none\n\t}\n\n\t.documents.common-content_table-item {\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t\tpadding: 1rem 2rem;\n\t\tgap: 1rem;\n\t\talign-items: center\n\t}\n\n\t.documents.common-table-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t\tpadding: .5rem 0\n\t}\n\n\t.documents.common-table-content .common-content_table-item {\n\t\tpadding: 1rem 1.5rem;\n\t\tmargin: 0 .5rem;\n\t\tborder-radius: 8px;\n\t\tmin-height: 5.75rem\n\t}\n\n\t.documents.common-table-content .common-content_table-item:hover {\n\t\tbackground-color: #f3f6ff;\n\t\tcursor: pointer\n\t}\n\n\t.documents.main-page {\n\t\tdisplay: flex;\n\t\tflex: 2 1 30%;\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tflex-direction: column;\n\t\tbackground-color: #f5f6fa;\n\t\tmin-height: 100dvh\n\t}\n\n\t.documents.main-page_main-content {\n\t\tbackground-color: #f5f6fa;\n\t\tpadding: 30px 20px 44px;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\toverflow: hidden;\n\t\tgap: 2.25rem\n\t}\n\n\t.documents.kedo-loader-wrapper {\n\t\tbackground-color: #fff;\n\t\topacity: 1;\n\t\tz-index: 999;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\ttransition: all .5s\n\t}\n\n\t.documents.kedo-loader-wrapper.hidden {\n\t\tz-index: -1;\n\t\topacity: 0\n\t}\n\n\t.kedo-loader {\n\t\twidth: 50px;\n\t\t--b: 8px;\n\t\taspect-ratio: 1;\n\t\tborder-radius: 50%;\n\t\tbackground: #514b82;\n\t\t-webkit-mask: repeating-conic-gradient(#0000 0deg, #000 1deg 70deg, #0000 71deg 90deg), radial-gradient(farthest-side, #0000 calc(100% - var(--b) - 1px), #000 calc(100% - var(--b)));\n\t\t-webkit-mask-composite: destination-in;\n\t\tmask-composite: intersect;\n\t\tanimation: kedo-loader-rotate 1s infinite\n\t}\n\n\t.kedo-spinner {\n\t\tanimation: kedo-spinner-rotate .6s linear infinite;\n\t\theight: 24px;\n\t\twidth: 24px;\n\t\tfill: #000\n\t}\n\n\t@keyframes kedo-loader-rotate {\n\t\tto {\n\t\t\ttransform: rotate(.5turn)\n\t\t}\n\t}\n\n\t@keyframes kedo-spinner-rotate {\n\t\t0% {\n\t\t\ttransform: rotate(0)\n\t\t}\n\n\t\t100% {\n\t\t\ttransform: rotate(360deg)\n\t\t}\n\t}\n\n\t.st0 {\n\t\topacity: .6\n\t}\n\n\t.st1 {\n\t\topacity: .5\n\t}\n\n\t.st2 {\n\t\topacity: .4\n\t}\n\n\t.st3 {\n\t\topacity: .3\n\t}\n\n\t.st4 {\n\t\topacity: .8\n\t}\n\n\t.st5 {\n\t\topacity: .9\n\t}\n\n\t.st6 {\n\t\topacity: .1\n\t}\n\n\t.st7 {\n\t\topacity: .2\n\t}\n\n\t.documents.active-page-item {\n\t\tbackground-color: #f5f6fa;\n\t\tpadding: 30px 20px 44px;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\toverflow: hidden;\n\t\tgap: 2.5rem;\n\t\tposition: relative;\n\t\tmin-height: 100dvh\n\t}\n\n\t.hidden {\n\t\tdisplay: none\n\t}\n\n\t.documents.active-page-item.hidden {\n\t\tdisplay: none\n\t}\n\n\t.search-choice-items {\n\t\tdisplay: flex;\n\t\tposition: absolute;\n\t\ttransform: rotateX(90deg);\n\t\ttransform-origin: top;\n\t\tflex-direction: column;\n\t\ttop: 3rem;\n\t\tgap: .5rem;\n\t\twidth: 100%;\n\t\tbox-sizing: border-box;\n\t\theight: fit-content;\n\t\tz-index: 2;\n\t\tbackground-color: #fff;\n\t\tborder-bottom: 1px solid #d9d9d9;\n\t\tborder-left: 1px solid #d9d9d9;\n\t\tborder-right: 1px solid #d9d9d9;\n\t\tborder-bottom-left-radius: 8px;\n\t\tborder-bottom-right-radius: 8px;\n\t\ttransition: all .1s;\n\t\tmax-height: 15rem;\n\t\toverflow: auto\n\t}\n\n\t.content_paginator {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tfont-size: 18px;\n\t\tfont-weight: 600;\n\t\tfont-style: normal;\n\t\tline-height: 22px;\n\t\tpadding: 0 .5rem;\n\t\tmax-height: 2rem\n\t}\n\n\t.paginator_item {\n\t\tcolor: #05f;\n\t\tpadding: .75rem 1rem;\n\t\ttransition: all .3s;\n\t\tborder-radius: 4px\n\t}\n\n\t.paginator_item:hover {\n\t\tcursor: pointer;\n\t\tbackground-color: #e3ebfc\n\t}\n\n\t.paginator_item.active {\n\t\tcolor: #fff;\n\t\tbackground-color: #5082e6\n\t}\n\n\t.paginator-button {\n\t\tcolor: #05f\n\t}\n\n\t.paginator-button:hover {\n\t\tcursor: pointer\n\t}\n\n\t.search-item {\n\t\tpadding: .5rem 1rem;\n\t\tcursor: pointer\n\t}\n\n\t.search-item:hover {\n\t\tbackground-color: #f3f6ff\n\t}\n\n\t.tasks-page_main-content_title_search-extend_item .title-search {\n\t\tborder: 1px solid #d9d9d9\n\t}\n\n\t.documents.common-widget-title {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tgap: 1rem\n\t}\n\n\t.documents.common-content_title_text {\n\t\tpointer-events: none\n\t}\n\n\t.documents.common-content_table {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t\tborder-radius: 8px;\n\t\tbackground-color: #fff;\n\t\tfont-size: 15px;\n\t\tfont-weight: 400\n\t}\n\n\t.documents.common-content_table.hidden {\n\t\tdisplay: none\n\t}\n\n\t.documents.common-content_table-item {\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t\tpadding: 1rem 2rem;\n\t\tgap: 1rem;\n\t\talign-items: center\n\t}\n\n\t.documents.common-table-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t\tpadding: .5rem 0\n\t}\n\n\t.documents.common-table-content .common-content_table-item {\n\t\tpadding: 1rem 1.5rem;\n\t\tmargin: 0 .5rem;\n\t\tborder-radius: 8px;\n\t\tmin-height: 5.75rem\n\t}\n\n\t.documents.common-table-content .common-content_table-item:hover {\n\t\tbackground-color: #f3f6ff;\n\t\tcursor: pointer\n\t}\n\n\t.vanilla-calendar.common-content_title_search-extend_item-value_calendar {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #fff;\n\t\tz-index: 2;\n\t\tpadding: 0;\n\t\ttop: 4rem;\n\t\tright: -20%\n\t}\n\n\t.common-content_title_search-extend_item-value_calendar .vanilla-calendar-wrapper {\n\t\tbackground-color: #fff;\n\t\tpadding: 1rem;\n\t\tborder-bottom-left-radius: 8px;\n\t\tborder-bottom-right-radius: 8px;\n\t\tborder-bottom: 1px solid #d9d9d9;\n\t\tborder-left: 1px solid #d9d9d9;\n\t\tborder-right: 1px solid #d9d9d9\n\t}\n\n\t.vanilla-calendar.hidden {\n\t\tdisplay: none\n\t}\n\n\t.common-content_title_search-extend {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 1rem 1.5rem;\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\tbox-sizing: border-box;\n\t\theight: fit-content;\n\t\tbackground-color: #fff;\n\t\tbox-shadow: 0 6px 28px 0 rgba(37, 41, 65, .16);\n\t\ttop: 3.5rem;\n\t\tgap: 1rem;\n\t\tfont-size: 15px;\n\t\ttransform: rotateX(90deg);\n\t\ttransform-origin: top\n\t}\n\n\t.common-content_title_search-extend_item {\n\t\tbackground-color: #fff\n\t}\n\n\t.common-content_title_search-extend_item .title-search {\n\t\tborder: 1px solid #d9d9d9\n\t}\n\n\t.common-content_title_search-extend_footer {\n\t\tdisplay: flex;\n\t\tgap: 1rem\n\t}\n\n\t.documents.common-content_title_tab {\n\t\tborder-radius: 8px;\n\t\tbackground-color: transparent;\n\t\tborder: 1px solid #05f;\n\t\tpadding: .35rem 1rem;\n\t\tcolor: #05f;\n\t\tuser-select: none;\n\t\ttransition: all .3s;\n\t\tcursor: pointer\n\t}\n\n\t.documents.common-content_title_tab.active {\n\t\tbackground-color: #05f;\n\t\tcolor: #fff\n\t}\n\n\t.documents.common-content_title_tab:hover {\n\t\tbackground-color: #05f;\n\t\tcolor: #fff\n\t}\n\n\t.common_search-date {\n\t\tflex-grow: 0;\n\t\tflex-basis: 30%;\n\t\tdisplay: flex;\n\t\tposition: relative\n\t}\n\n\t.title-search:focus {\n\t\toutline: 1px solid #84adff\n\t}\n\n\t.documents.active h3 {\n\t\tcolor: #05f\n\t}\n\n\t.active .status-name {\n\t\tcolor: #b1cbff\n\t}\n\n\t.active path {\n\t\tstroke: #05f\n\t}\n\n\t.documents.tasks-page_main-content_title_tab.active {\n\t\tcolor: #fff;\n\t\tbackground-color: #05f\n\t}\n\n\t.documents.main-widget {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1.25rem\n\t}\n\n\t.documents.widget-title {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between\n\t}\n\n\t.documents.widget-item {\n\t\tpadding: 1.5rem;\n\t\tbox-sizing: border-box;\n\t\tborder-radius: 8px;\n\t\tbackground-color: #fff;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tflex-basis: 25%;\n\t\ttransition: all .3s\n\t}\n\n\t.item-status {\n\t\tdisplay: flex;\n\t\tjustify-content: start;\n\t\talign-items: center;\n\t\tgap: .5rem\n\t}\n\n\t.status-name {\n\t\tcolor: #bcbcbc;\n\t\tfont-size: 16px;\n\t\tfont-weight: 400\n\t}\n\n\t.documents.document-name {\n\t\tflex-basis: 50%\n\t}\n\n\t.documents.document-created {\n\t\tflex-basis: 30%\n\t}\n\n\t.document-status {\n\t\tflex-basis: 20%\n\t}\n\n\t.documents.document-page_main-content_title_text {\n\t\tmargin-bottom: 0\n\t}\n\n\t.common-content_title_tab.documents-search.active {\n\t\tpointer-events: all\n\t}\n\n\t.documents.main-page_left-menu {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 0 10px;\n\t\tjustify-content: space-between;\n\t\tz-index: 100\n\t}\n\n\t.documents.main-page_left-menu-wrapper {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: .6rem;\n\t\tflex-basis: 30rem;\n\t\tposition: sticky;\n\t\ttop: 70px;\n\t\tpadding-top: 1.35rem\n\t}\n\n\t.documents.left-menu_item {\n\t\tdisplay: flex;\n\t\tgap: 1rem;\n\t\tfont-size: 16px;\n\t\tfont-weight: 400;\n\t\tpadding: 14px 10px;\n\t\tborder-radius: 8px;\n\t\tcursor: pointer;\n\t\tuser-select: none;\n\t\tmax-width: 30rem;\n\t\tposition: relative\n\t}\n\n\t.documents.left-menu_item:nth-last-child(3)::after {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\tborder-bottom: 1px solid #e2e5e7;\n\t\tbottom: -.5rem\n\t}\n\n\t.documents.left-menu_item.active {\n\t\tfont-weight: 600;\n\t\tbackground-color: #f5f6fa;\n\t\tpointer-events: none\n\t}\n\n\t.documents.task-item-title {\n\t\tfont-weight: 600\n\t}\n\n\t.documents g {\n\t\tfill: transparent\n\t}\n\n\t.documents.mock-left-menu {\n\t\twidth: 400px;\n\t\tbackground-color: #f2f8fc\n\t}\n\n\t.documents.title-text {\n\t\tfont-size: 2.4rem;\n\t\tmargin-bottom: 0\n\t}\n\n\t.loader-spinner {\n\t\twidth: 2.5rem;\n\t\theight: 2.5rem;\n\t\tanimation: spinner-rotation .7s linear infinite\n\t}\n\n\t@keyframes spinner-rotation {\n\t\tfrom {\n\t\t\ttransform: rotate(0)\n\t\t}\n\n\t\tto {\n\t\t\ttransform: rotate(360deg)\n\t\t}\n\t}\n\n\t.documents.tasks-page_main-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem\n\t}\n\n\t.documents.tasks-page_main-content.hidden {\n\t\tdisplay: none\n\t}\n\n\t.documents.tasks-page_main-content_title {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tgap: 1rem\n\t}\n\n\t.documents.tasks-page_main-content_title-left {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: left;\n\t\tflex-basis: 45%;\n\t\tgap: .6rem;\n\t\tflex-wrap: wrap\n\t}\n\n\t.documents.common-widget-title_left {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: left;\n\t\tflex-basis: 45%;\n\t\tgap: .6rem;\n\t\tflex-wrap: wrap\n\t}\n\n\t.documents.right-arrow {\n\t\tcolor: #05f\n\t}\n\n\t.documents.tasks-page_main-content_title-right {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: right;\n\t\tflex-grow: 1\n\t}\n\n\t.documents.common-widget-title_right {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: right;\n\t\tflex-grow: 1\n\t}\n\n\t.tasks-page_main-content_title_search {\n\t\twidth: 100%;\n\t\tposition: relative\n\t}\n\n\t.common-content_title_search {\n\t\twidth: 100%;\n\t\tposition: relative\n\t}\n\n\t.tasks-page_main-content_title_search-extend {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 1rem 1.5rem;\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\tbox-sizing: border-box;\n\t\theight: fit-content;\n\t\tbackground-color: #fff;\n\t\tbox-shadow: 0 6px 28px 0 rgba(37, 41, 65, .16);\n\t\ttop: 3.5rem;\n\t\tgap: 1rem;\n\t\tfont-size: 15px;\n\t\ttransform: rotateX(90deg);\n\t\ttransform-origin: top\n\t}\n\n\t.tasks-page_main-content_title_search-extend_title-img {\n\t\tcursor: pointer\n\t}\n\n\t.common-content_title_search-extend_title-img {\n\t\tcursor: pointer\n\t}\n\n\t.common-content_title_search-extend_title-img path {\n\t\ttransition: all .3s\n\t}\n\n\t.common-content_title_search-extend_title-img:hover path {\n\t\tfill: #739af0\n\t}\n\n\t.tasks-page_main-content_title_search-extend_title-img path {\n\t\ttransition: all .3s\n\t}\n\n\t.tasks-page_main-content_title_search-extend_title-img:hover path {\n\t\tfill: #739af0\n\t}\n\n\t.tasks-page_main-content_title_search-extend_title {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between\n\t}\n\n\t.common-content_title_search-extend_title {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between\n\t}\n\n\t.tasks-page_main-content_title_search-extend_content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 1rem 0;\n\t\tgap: 3rem;\n\t\toverflow-y: visible;\n\t\tflex: 2\n\t}\n\n\t.common-content_title_search-extend_content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 1rem 0;\n\t\tgap: 3rem;\n\t\toverflow-y: visible;\n\t\tflex: 2\n\t}\n\n\t.tasks-page_main-content_title_search-extend_item {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tgap: 1rem\n\t}\n\n\t.common-content_title_search-extend_item {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tgap: 1rem\n\t}\n\n\t.tasks-page_main-content_title_search-extend_item-label {\n\t\tflex-basis: 30%\n\t}\n\n\t.common-content_title_search-extend_item-label {\n\t\tflex-basis: 30%\n\t}\n\n\t.tasks-page_main-content_title_search-extend_item-value {\n\t\tflex-grow: 1;\n\t\tposition: relative\n\t}\n\n\t.common-content_title_search-extend_item-value {\n\t\tflex-grow: 1;\n\t\tposition: relative\n\t}\n\n\t.common-content_title_search-extend_item-value {\n\t\tflex-grow: 1;\n\t\tposition: relative\n\t}\n\n\t.tasks-page_main-content_title_search-extend_item-value.task-search-date {\n\t\tflex-grow: 0;\n\t\tflex-basis: 30%;\n\t\tdisplay: flex;\n\t\tposition: relative\n\t}\n\n\t.common-content_title_search-extend_item-value.task-search-date {\n\t\tflex-grow: 0;\n\t\tflex-basis: 30%;\n\t\tdisplay: flex;\n\t\tposition: relative\n\t}\n\n\t.vanilla-calendar.tasks-page_main-content_title_search-extend_item-value_calendar {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #fff;\n\t\tz-index: 2;\n\t\tpadding: 0;\n\t\ttop: 4rem;\n\t\tright: -20%\n\t}\n\n\t.vanilla-calendar.common-content_title_search-extend_item-value_calendar {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #fff;\n\t\tz-index: 2;\n\t\tpadding: 0;\n\t\ttop: 4rem;\n\t\tright: -20%\n\t}\n\n\t.tasks-page_main-content_title_search-extend_item-value_calendar .vanilla-calendar-wrapper {\n\t\tbackground-color: #fff;\n\t\tpadding: 1rem;\n\t\tborder-bottom-left-radius: 8px;\n\t\tborder-bottom-right-radius: 8px;\n\t\tborder-bottom: 1px solid #d9d9d9;\n\t\tborder-left: 1px solid #d9d9d9;\n\t\tborder-right: 1px solid #d9d9d9\n\t}\n\n\t.vanilla-calendar.hidden {\n\t\tdisplay: none\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-date-label {\n\t\tmax-width: 10rem;\n\t\toutline: 0;\n\t\tborder: none;\n\t\ttext-align: center;\n\t\tfont-weight: 100\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-date-label::placeholder {\n\t\tcolor: #d4d4d4\n\t}\n\n\t.common-content_title_search-extend_input-date-label {\n\t\tmax-width: 10rem;\n\t\toutline: 0;\n\t\tborder: none;\n\t\ttext-align: center\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-date:has(.tasks-page_main-content_title_search-extend_input-date-label:invalid) {\n\t\tborder: 1px solid red\n\t}\n\n\t.common-content_title_search-extend_input-date:has(.common-content_title_search-extend_input-date-label:invalid) {\n\t\tborder: 1px solid red\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-date {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start\n\t}\n\n\t.common-content_title_search-extend_input-date {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-date-img {\n\t\tdisplay: flex\n\t}\n\n\t.common-content_title_search-extend_input-date-img {\n\t\tdisplay: flex\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-date-arrow {\n\t\tdisplay: flex;\n\t\ttransition: all .3s;\n\t\tcursor: pointer;\n\t\tmargin-left: .8rem\n\t}\n\n\t.common-content_title_search-extend_input-date-arrow {\n\t\tdisplay: flex;\n\t\ttransition: all .3s;\n\t\tcursor: pointer\n\t}\n\n\t.tasks-page_main-content_title_search-input_img {\n\t\tposition: absolute;\n\t\ttop: 15%;\n\t\tright: 1rem;\n\t\tcursor: pointer\n\t}\n\n\t.common-content_title_search-input_img {\n\t\tposition: absolute;\n\t\ttop: 15%;\n\t\tright: 1rem;\n\t\tcursor: pointer\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-status {\n\t\tposition: relative\n\t}\n\n\t.common-content_title_search-extend_input-status {\n\t\tposition: relative\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-status-arrow {\n\t\tposition: absolute;\n\t\ttop: 25%;\n\t\tright: .7rem;\n\t\ttransition: all .3s;\n\t\ttransform-origin: center;\n\t\tdisplay: flex;\n\t\tcursor: pointer\n\t}\n\n\t.common-content_title_search-extend_input-status-arrow {\n\t\tposition: absolute;\n\t\ttop: 25%;\n\t\tright: .7rem;\n\t\ttransition: all .3s;\n\t\ttransform-origin: center;\n\t\tdisplay: flex;\n\t\tcursor: pointer\n\t}\n\n\t.common-content_title_search-extend_input-status-arrow {\n\t\tposition: absolute;\n\t\ttop: 25%;\n\t\tright: .7rem;\n\t\ttransition: all .3s;\n\t\ttransform-origin: center;\n\t\tdisplay: flex;\n\t\tcursor: pointer\n\t}\n\n\t.tasks-page_main-content_title_search-extend_input-status-values {\n\t\tdisplay: flex;\n\t\tposition: absolute;\n\t\ttransform: rotateX(90deg);\n\t\ttransform-origin: top;\n\t\tflex-direction: column;\n\t\ttop: 2rem;\n\t\tgap: .5rem;\n\t\twidth: 100%;\n\t\tbox-sizing: border-box;\n\t\theight: fit-content;\n\t\tz-index: 2;\n\t\tbackground-color: #fff;\n\t\tborder-bottom: 1px solid #d9d9d9;\n\t\tborder-left: 1px solid #d9d9d9;\n\t\tborder-right: 1px solid #d9d9d9;\n\t\tborder-bottom-left-radius: 8px;\n\t\tborder-bottom-right-radius: 8px;\n\t\ttransition: all .1s\n\t}\n\n\t.common-content_title_search-extend_input-status-values {\n\t\tdisplay: flex;\n\t\tposition: absolute;\n\t\ttransform: rotateX(90deg);\n\t\ttransform-origin: top;\n\t\tflex-direction: column;\n\t\ttop: 2rem;\n\t\tgap: .5rem;\n\t\twidth: 100%;\n\t\tbox-sizing: border-box;\n\t\theight: fit-content;\n\t\tz-index: 2;\n\t\tbackground-color: #fff;\n\t\tborder-bottom: 1px solid #d9d9d9;\n\t\tborder-left: 1px solid #d9d9d9;\n\t\tborder-right: 1px solid #d9d9d9;\n\t\tborder-bottom-left-radius: 8px;\n\t\tborder-bottom-right-radius: 8px;\n\t\ttransition: all .1s\n\t}\n\n\t.input-status-values_item {\n\t\tpadding: .5rem 1rem;\n\t\tcursor: pointer\n\t}\n\n\t.input-status-values_item:hover {\n\t\tbackground-color: #f3f6ff\n\t}\n\n\t.tasks-page_main-content_title_search-extend_footer {\n\t\tdisplay: flex;\n\t\tgap: 1rem\n\t}\n\n\t.tasks-page_main-content_title_tab.tasks-search.active {\n\t\tpointer-events: all\n\t}\n\n\t.tasks-page_main-content_title_search-extend .tasks-page_main-content_title_tab {\n\t\tflex-grow: 0\n\t}\n\n\t.documents.tasks-page_main-content_title_tab {\n\t\tborder-radius: 8px;\n\t\tbackground-color: transparent;\n\t\tborder: 1px solid #05f;\n\t\tpadding: .35rem 1rem;\n\t\tcolor: #05f;\n\t\tuser-select: none;\n\t\ttransition: all .3s;\n\t\tcursor: pointer;\n\t\tdisplay: flex\n\t}\n\n\t.documents.tasks-page_main-content_title_tab.hidden {\n\t\tdisplay: none\n\t}\n\n\t.documents.tasks-page_main-content_table {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t\tborder-radius: 8px;\n\t\tbackground-color: #fff;\n\t\tfont-size: 15px;\n\t\tfont-weight: 400\n\t}\n\n\t.documents.tasks-page_main-content_table.hidden {\n\t\tdisplay: none\n\t}\n\n\t.documents.table-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t\tborder-radius: 8px;\n\t\tbackground-color: #fff;\n\t\tfont-size: 15px;\n\t\tfont-weight: 400\n\t}\n\n\t.documents.table-content.hidden {\n\t\tdisplay: none\n\t}\n\n\t.documents.tasks-page_main-content_table-title {\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t\tborder-bottom: 1px solid #d9d9d9;\n\t\tcolor: #c4c4c4\n\t}\n\n\t.documents.common-content_table-title {\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t\tborder-bottom: 1px solid #d9d9d9;\n\t\tcolor: #c4c4c4\n\t}\n\n\t.documents.tasks-page_main-content_table-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%\n\t}\n\n\t.documents.tasks-page_main-content_table-item {\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t\tpadding: 2.2rem 2rem;\n\t\tgap: 1rem;\n\t\talign-items: center\n\t}\n\n\t.documents.tasks-page_main-content_table-item.hidden {\n\t\tdisplay: none\n\t}\n\n\t.documents.tasks-page_main-content_table-content .tasks-page_main-content_table-item {\n\t\tpadding: 1rem 1.5rem;\n\t\tmargin: 0 .5rem;\n\t\tborder-radius: 8px;\n\t\tmin-height: 5.75rem\n\t}\n\n\t.documents.tasks-page_main-content_table-content .tasks-page_main-content_table-item:hover {\n\t\tbackground-color: #f3f6ff;\n\t\tcursor: pointer\n\t}\n\n\t.documents.tasks-page_main-content_title_tab.active {\n\t\tcolor: #fff;\n\t\tbackground-color: #05f;\n\t\tpointer-events: none\n\t}\n\n\t.documents.tasks-name {\n\t\tflex-basis: 40%\n\t}\n\n\t.documents.task-type {\n\t\tflex-basis: 10%\n\t}\n\n\t.documents.task-created {\n\t\tflex-basis: 17%\n\t}\n\n\t.task-status {\n\t\tflex-basis: 20%;\n\t\tmax-width: 15rem\n\t}\n\n\t.tasks-page_main-content_table-item-section_status {\n\t\tpadding: .5rem .75rem;\n\t\tborder-radius: 8px;\n\t\tbackground-color: #c4c4c4;\n\t\tfont-size: 12px;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\tflex-grow: 0\n\t}\n\n\t.common-content_table-item-section_status {\n\t\tpadding: .5rem .75rem;\n\t\tborder-radius: 8px;\n\t\tbackground-color: #c4c4c4;\n\t\tfont-size: 12px;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\tflex-grow: 0\n\t}\n\n\t.documents.tasks-page_main-content_table-empty {\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t\tpadding: 2rem;\n\t\talign-items: center;\n\t\tjustify-content: center\n\t}\n\n\t.documents.common-content_table-empty {\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t\tpadding: 4rem;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tborder-radius: 8px\n\t}\n\n\t.documents.common-content_table-empty.hidden {\n\t\tdisplay: none\n\t}\n\n\t.tasks-page_main-content_paginator {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tfont-size: 18px;\n\t\tfont-weight: 600;\n\t\tfont-style: normal;\n\t\tline-height: 22px;\n\t\tpadding: 0 .5rem;\n\t\tmax-height: 2rem\n\t}\n\n\t.tasks-page_main-content_paginator_item {\n\t\tcolor: #05f;\n\t\tpadding: .75rem 1.4rem;\n\t\ttransition: all .3s;\n\t\tborder-radius: 4px\n\t}\n\n\t.paginator-item {\n\t\tcolor: #05f;\n\t\tpadding: .75rem 1.4rem;\n\t\ttransition: all .3s;\n\t\tborder-radius: 4px\n\t}\n\n\t.paginator-item:hover {\n\t\tcursor: pointer;\n\t\tbackground-color: #e3ebfc\n\t}\n\n\t.paginator-item.active {\n\t\tcolor: #fff;\n\t\tbackground-color: #5082e6\n\t}\n\n\t.tasks-page_main-content_paginator_item:hover {\n\t\tcursor: pointer;\n\t\tbackground-color: #e3ebfc\n\t}\n\n\t.tasks-page_main-content_paginator_item.active {\n\t\tcolor: #fff;\n\t\tbackground-color: #5082e6\n\t}\n\n\t@media (max-width:1100px) {\n\t\t.documents.tasks-page_main-content_title {\n\t\t\tflex-direction: column\n\t\t}\n\n\t\t.tasks-page_main-content_title_search-extend_item {\n\t\t\talign-items: start;\n\t\t\tflex-direction: column;\n\t\t\tgap: .5rem\n\t\t}\n\n\t\t.documents.tasks-page_main-content_table {\n\t\t\tfont-size: 13px\n\t\t}\n\n\t\t.documents.task-type {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.documents.task-name {\n\t\t\tflex-basis: 40%\n\t\t}\n\n\t\t.task-status {\n\t\t\tflex-basis: 20%\n\t\t}\n\n\t\t.documents.task-created {\n\t\t\tflex-basis: 15%\n\t\t}\n\t}\n\n\t@media (max-width:900px) {\n\t\t.documents.task-created {\n\t\t\tdisplay: none\n\t\t}\n\t}\n\n\t@media (max-width:720px) {\n\t\t.documents.tasks-page_main-content_table {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.tasks-page_main-content_title_search-extend_input-status input::placeholder {\n\t\t\tcolor: transparent !important\n\t\t}\n\t}\n\n\t@media (max-width:450px) {\n\t\t.documents.main-page {\n\t\t\tmargin-top: 4rem\n\t\t}\n\n\t\t.documents.active-page-item {\n\t\t\tbackground-color: #f5f6fa;\n\t\t\tgap: 0;\n\t\t\tpadding: 0;\n\t\t\theight: 100%;\n\t\t\toverflow-y: auto\n\t\t}\n\n\t\t.documents.main-page_left-menu {\n\t\t\tmin-height: calc(100dvh - 30px)\n\t\t}\n\n\t\t.documents.main-page_main-content {\n\t\t\tpadding: 20px 16px 24px;\n\t\t\tmargin-bottom: 4rem\n\t\t}\n\n\t\t.documents.main-page_left-menu {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.documents.common-widget-title {\n\t\t\tborder-bottom: 1px solid #d9d9d9;\n\t\t\tbackground-color: #fff;\n\t\t\tpadding: .5rem .8rem\n\t\t}\n\n\t\t.documents.common-content_title_text:not(.business_trips-page_main-content_title_text):not(.services-page_main-content_title_text):not(.vacations-page_main-content_title_text):after {\n\t\t\tposition: absolute;\n\t\t\tcontent: url(\"data:image/svg+xml,%3Csvg width='9' height='6' viewBox='0 0 9 6' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M4.12969 5.09184C4.32812 5.31056 4.67188 5.31056 4.87031 5.09184L8.5047 1.08597C8.7962 0.764662 8.56822 0.25 8.13439 0.25H0.86561C0.431776 0.25 0.203796 0.764663 0.495303 1.08597L4.12969 5.09184Z' fill='black'/%3E%3C/svg%3E\");\n\t\t\tright: -1.5rem;\n\t\t\ttop: -.1rem;\n\t\t\tcursor: pointer;\n\t\t\tpointer-events: all\n\t\t}\n\n\t\t.common-content_title_search-extend {\n\t\t\twidth: 100%;\n\t\t\tposition: fixed;\n\t\t\ttop: 0;\n\t\t\tleft: 0\n\t\t}\n\n\t\t.common-content_title_search-extend_item {\n\t\t\talign-items: start;\n\t\t\tflex-direction: column;\n\t\t\tgap: .5rem\n\t\t}\n\n\t\t.vanilla-calendar.common-content_title_search-extend_item-value_calendar {\n\t\t\tleft: 0\n\t\t}\n\n\t\t.documents.common-content_table {\n\t\t\tmargin: 1rem 0\n\t\t}\n\n\t\t.documents.common-content_title_text {\n\t\t\tfont-size: 16px;\n\t\t\tfont-weight: 600;\n\t\t\tposition: relative\n\t\t}\n\n\t\t.documents.common-content_table-title {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.documents.common-content_table-item {\n\t\t\tpadding: 1rem;\n\t\t\tmargin: 0;\n\t\t\tborder-radius: 0;\n\t\t\tflex-direction: column-reverse;\n\t\t\talign-items: flex-start\n\t\t}\n\n\t\t.documents.tasks-page_main-content {\n\t\t\tmargin-top: 3.5rem;\n\t\t\tgap: 0\n\t\t}\n\n\t\t.documents.tasks-page_main-content_title {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.documents.tasks-page_main-content_table {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.documents.active-page-item.tasks-page_main-content {\n\t\t\tpadding: 0\n\t\t}\n\n\t\t.content_paginator {\n\t\t\tmargin-bottom: 7rem\n\t\t}\n\n\t\t.documents.widget-item {\n\t\t\tflex-basis: auto;\n\t\t\tflex-grow: 1;\n\t\t\tmax-width: auto\n\t\t}\n\n\t\t.documents.page-widget {\n\t\t\tbackground-color: #f5f6fa;\n\t\t\tgap: 0\n\t\t}\n\n\t\t.documents.documents-page_main-content_table-title {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.documents.document-page_main-content_title_text {\n\t\t\tfont-size: 16px;\n\t\t\tfont-weight: 600;\n\t\t\tposition: relative\n\t\t}\n\n\t\t.documents.common-widget-title_left {\n\t\t\tflex-grow: 1\n\t\t}\n\n\t\t.documents.common-widget-title_left .common-content_title_tab {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.documents-page_main-content_title_search-input.title-search {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.common-content_title_search-input_img {\n\t\t\tposition: relative;\n\t\t\ttop: 0\n\t\t}\n\n\t\t.documents.common-widget-title_right {\n\t\t\tflex-grow: 0\n\t\t}\n\n\t\t.documents.document-created {\n\t\t\tdisplay: none\n\t\t}\n\n\t\t.documents.common-table-content {\n\t\t\tbackground-color: #f5f6fa;\n\t\t\tgap: 1rem\n\t\t}\n\n\t\t.documents.common-content_table-item {\n\t\t\tbackground-color: #fff\n\t\t}\n\t}\n\u003c/style\u003e\n\n\u003cdiv data-menu-item=\"documents\" class=\"documents documents-page_main-content active-page-item page-widget\"\u003e\n\t\u003cdiv class=\"documents kedo-loader-wrapper hidden\" data-loader=\"documents\"\u003e\n\t\t\u003c!-- \u003cdiv class=\"kedo-loader\"\u003e\n                            \u003c/div\u003e --\u003e\n\n\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 26 26\" data-test=\"spinner\" class=\"kedo-spinner\"\u003e\n\t\t\t\u003cpath d=\"M13 3v-2c-2.7 0-5.4.9-7.7 2.8l-.8.7 1.4 1.4c2-1.9 4.5-2.9 7.1-2.9z\" class=\"st0\"\u003e\u003c/path\u003e\n\t\t\t\u003cpath d=\"M5.9 5.9l-1.4-1.4c-2.3 2.3-3.5 5.4-3.5 8.5h2c0-2.6 1-5.1 2.9-7.1z\" class=\"st1\"\u003e\n\t\t\t\u003c/path\u003e\n\t\t\t\u003cpath d=\"M3 13h-2c0 2.7.9 5.4 2.8 7.7l.7.8 1.4-1.4c-1.9-2-2.9-4.5-2.9-7.1z\" class=\"st2\"\u003e\n\t\t\t\u003c/path\u003e\n\t\t\t\u003cpath d=\"M5.9 20.1l-1.4 1.4c2.3 2.3 5.4 3.5 8.5 3.5v-2c-2.6 0-5.1-1-7.1-2.9z\" class=\"st3\"\u003e\u003c/path\u003e\n\t\t\t\u003cpath d=\"M20.1 5.9l1.4-1.4c-2.3-2.3-5.4-3.5-8.5-3.5v2c2.6 0 5.1 1 7.1 2.9z\" class=\"st4\"\u003e\n\t\t\t\u003c/path\u003e\n\t\t\t\u003cpath d=\"M23 13h2c0-2.7-.9-5.4-2.8-7.7l-.7-.8-1.4 1.4c1.9 2 2.9 4.5 2.9 7.1z\" class=\"st5\"\u003e\u003c/path\u003e\n\t\t\t\u003cpath d=\"M20.1 20.1l1.4 1.4c2.3-2.3 3.5-5.4 3.5-8.5h-2c0 2.6-1 5.1-2.9 7.1z\" class=\"st6\"\u003e\u003c/path\u003e\n\t\t\t\u003cpath d=\"M20.7 22.2l.8-.7-1.4-1.4c-2 2-4.5 2.9-7.1 2.9v2c2.7 0 5.4-.9 7.7-2.8z\" class=\"st7\"\u003e\u003c/path\u003e\n\t\t\u003c/svg\u003e\n\t\u003c/div\u003e\n\t\u003cdiv class=\"documents common-widget-title documents-page_main-content_title\"\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_title-left common-widget-title_left\"\u003e\n\t\t\t\u003ch3 class=\"documents document-page_main-content_title_text common-content_title_text\"\u003e\n\t\t\t\tМои заявки\n\t\t\t\u003c/h3\u003e\n\t\t\t\u003cdiv class=\"documents common-content_title_tab documents-page_main-content_title_tab active hidden\"\n\t\t\t\tdata-data-type=\"personnelDocumentsChunks\"\u003e\n\t\t\t\tВсе\n\t\t\t\u003c/div\u003e\n\t\t\t\u003cdiv class=\"documents common-content_title_tab documents-page_main-content_title_tab hidden\"\n\t\t\t\tdata-data-type=\"personalDocsChunks\"\u003e\n\t\t\t\tЛичные\n\t\t\t\u003c/div\u003e\n\t\t\t\u003cdiv class=\"documents common-content_title_tab documents-page_main-content_title_tab hidden\"\n\t\t\t\tdata-data-type=\"lnaDocumentsChunks\"\u003e\n\t\t\t\tЛНА\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_title-right common-widget-title_right\"\u003e\n\t\t\t\u003cdiv class=\"documents documents-page_main-content_title_search common-content_title_search\"\u003e\n\t\t\t\t\u003cinput type=\"text\" placeholder=\"Поиск\" class=\"documents documents-page_main-content_title_search-input title-search\"\u003e\n\t\t\t\t\u003cdiv class=\"documents common-content_title_search-input_img documents-page_main-content_title_search-input_img\"\n\t\t\t\t\tonclick=\"\u003c%= Scripts %\u003e.expandSearch(this)\"\u003e\n\t\t\t\t\t\u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\t\t\t\t\t\t\u003cpath\n\t\t\t\t\t\t\td=\"M14.4985 0H1.50178C0.169343 0 -0.502939 1.61659 0.441124 2.56065L5.5 7.62131V13C5.5 13.4721 5.72228 13.9167 6.1 14.25L8.1 15.7208C9.07728 16.4038 10.5 15.7689 10.5 14.5208V7.62131L15.5592 2.56065C16.5013 1.6185 15.8336 0 14.4985 0ZM9 7V14.5L7 13V7L1.5 1.5H14.5L9 7Z\"\n\t\t\t\t\t\t\tfill=\"#5082E6\"\u003e\u003c/path\u003e\n\t\t\t\t\t\u003c/svg\u003e\n\t\t\t\t\u003c/div\u003e\n\t\t\t\t\u003cdiv\n\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend common-content_title_search-extend\"\u003e\n\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\tclass=\"documents common-content_title_search-extend_title documents-page_main-content_title_search-extend_title\"\u003e\n\t\t\t\t\t\t\u003ch3 class=\"documents documents-page_main-content_title_search-extend_title-text\"\u003e\n\t\t\t\t\t\t\tРасширенный поиск\n\t\t\t\t\t\t\u003c/h3\u003e\n\t\t\t\t\t\t\u003cdiv class=\"documents documents-page_main-content_title_search-extend_title-img common-content_title_search-extend_title-img\"\n\t\t\t\t\t\t\tonclick=\"\u003c%= Scripts %\u003e.expandSearch(this)\"\u003e\n\t\t\t\t\t\t\t\u003csvg width=\"24\" height=\"24\" viewbox=\"0 0 24 24\" fill=\"none\"\n\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\u003e\n\t\t\t\t\t\t\t\t\u003cpath\n\t\t\t\t\t\t\t\t\td=\"M14.0823 12L18.7951 7.28732C19.0677 7.01477 19.0677 6.57246 18.7951 6.29946L17.7001 5.20442C17.4275 4.93186 16.9852 4.93186 16.7122 5.20442L11.9998 9.91753L7.28696 5.20486C7.01439 4.9323 6.57207 4.9323 6.29907 5.20486L5.20443 6.29946C4.93186 6.57202 4.93186 7.01433 5.20443 7.28732L9.91725 12L5.20443 16.7127C4.93186 16.9852 4.93186 17.4275 5.20443 17.7005L6.2995 18.7956C6.57207 19.0681 7.01439 19.0681 7.2874 18.7956L11.9998 14.0825L16.7126 18.7951C16.9852 19.0677 17.4275 19.0677 17.7005 18.7951L18.7956 17.7001C19.0681 17.4275 19.0681 16.9852 18.7956 16.7122L14.0823 12Z\"\n\t\t\t\t\t\t\t\t\tfill=\"#BFBFBF\"\u003e\u003c/path\u003e\n\t\t\t\t\t\t\t\u003c/svg\u003e\n\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_content common-content_title_search-extend_content\"\u003e\n\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\tclass=\"documents common-content_title_search-extend_item tasks-page_main-content_title_search-extend_item\"\u003e\n\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_item-label common-content_title_search-extend_item-label\"\u003e\n\t\t\t\t\t\t\t\tНаименование\n\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_item-value common-content_title_search-extend_item-value\"\u003e\n\t\t\t\t\t\t\t\t\u003cinput oninput=\"\u003c%= Scripts %\u003e.setFilterField(this.dataset.filter, this.value)\" type=\"text\" class=\"documents-page_main-content_title_search-extend_input title-search documents-filter\" data-filter=\"name\"\u003e\n\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\tclass=\"documents common-content_title_search-extend_item documents-page_main-content_title_search-extend_item\"\u003e\n\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_item-label common-content_title_search-extend_item-label\"\u003e\n\t\t\t\t\t\t\t\tДата создания\n\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_item-value task-search-date common-content_title_search-extend_item-value documents-search-date common_search-date\"\u003e\n\t\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_input-date common-content_title_search-extend_input-date task-search-date title-search\"\u003e\n\t\t\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_input-date-img common-content_title_search-extend_input-date-img\"\u003e\n\t\t\t\t\t\t\t\t\t\t\u003csvg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\"\n\t\t\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\u003e\n\t\t\t\t\t\t\t\t\t\t\t\u003cg clip-path=\"url(#clip0_2574_1093)\"\u003e\n\t\t\t\t\t\t\t\t\t\t\t\t\u003cpath\n\t\t\t\t\t\t\t\t\t\t\t\t\td=\"M14.9952 2H13.2809V0.375C13.2809 0.167906 13.089 0 12.8523 0H12.5666C12.3299 0 12.138 0.167906 12.138 0.375V2H5.2809V0.375C5.2809 0.167906 5.08901 0 4.85233 0H4.56662C4.32994 0 4.13804 0.167906 4.13804 0.375V2H2.42376C1.47697 2 0.709473 2.67156 0.709473 3.5V14.5C0.709473 15.3284 1.47697 16 2.42376 16H14.9952C15.942 16 16.7095 15.3284 16.7095 14.5V3.5C16.7095 2.67156 15.942 2 14.9952 2ZM2.42376 3H14.9952C15.3103 3 15.5666 3.22431 15.5666 3.5V5H1.85233V3.5C1.85233 3.22431 2.10869 3 2.42376 3ZM14.9952 15H2.42376C2.10869 15 1.85233 14.7757 1.85233 14.5V6H15.5666V14.5C15.5666 14.7757 15.3103 15 14.9952 15Z\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"#8C8C8C\"\u003e\u003c/path\u003e\n\t\t\t\t\t\t\t\t\t\t\t\u003c/g\u003e\n\t\t\t\t\t\t\t\t\t\t\t\u003cdefs\u003e\n\t\t\t\t\t\t\t\t\t\t\t\t\u003cclipPath id=\"clip0_2574_1093\"\u003e\n\t\t\t\t\t\t\t\t\t\t\t\t\t\u003crect width=\"16\" height=\"16\" fill=\"white\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransform=\"translate(0.709473)\"\u003e\u003c/rect\u003e\n\t\t\t\t\t\t\t\t\t\t\t\t\u003c/clipPath\u003e\n\t\t\t\t\t\t\t\t\t\t\t\u003c/defs\u003e\n\t\t\t\t\t\t\t\t\t\t\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\t\t\u003cinput class=\"documents documents-page_main-content_title_search-extend_input-date-label common-content_title_search-extend_input-date-label documents-input documents-filter\" placeholder=\"дд.мм.гггг\" maxlength=\"10\" pattern=\"^([120]{1}[0-9]{1}|3[01]{1,2}|0[1-9])\\.(1[0-2]|0[1-9])\\.\\d{4}\" oninput=\"\u003c%= Scripts %\u003e.checkAndSetDate(this)\" data-filter=\"createdAt\"\u003e\n\t\t\t\t\t\t\t\t\t\u003cdiv class=\"documents documents-page_main-content_title_search-extend_input-date-arrow common-content_title_search-extend_input-date-arrow\"\n\t\t\t\t\t\t\t\t\t\tonclick=\"\u003c%= Scripts %\u003e.expandCalendar(this)\"\u003e\n\t\t\t\t\t\t\t\t\t\t\u003csvg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\"\n\t\t\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\u003e\n\t\t\t\t\t\t\t\t\t\t\t\u003cpath\n\t\t\t\t\t\t\t\t\t\t\t\td=\"M8.44414 10.2156L4.81914 6.53439C4.67227 6.38751 4.67227 6.15001 4.81914 6.00314L5.04102 5.78126C5.18789 5.63439 5.42539 5.63439 5.57227 5.78126L8.70977 8.97814L11.8473 5.78439C11.9941 5.63751 12.2316 5.63751 12.3785 5.78439L12.6004 6.00626C12.7473 6.15314 12.7473 6.39064 12.6004 6.53751L8.97539 10.2188C8.82852 10.3625 8.59102 10.3625 8.44414 10.2156Z\"\n\t\t\t\t\t\t\t\t\t\t\t\tfill=\"#8C8C8C\"\u003e\u003c/path\u003e\n\t\t\t\t\t\t\t\t\t\t\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_item-value_calendar common-content_title_search-extend_item-value_calendar documents-calendar hidden vanilla-calendar vanilla-calendar_default\"\u003e\n\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\tclass=\"documents common-content_title_search-extend_item tasks-page_main-content_title_search-extend_item\"\u003e\n\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\tclass=\"documents tasks-page_main-content_title_search-extend_item-label common-content_title_search-extend_item-label\"\u003e\n\t\t\t\t\t\t\t\tСтатус\n\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\tclass=\"documents tasks-page_main-content_title_search-extend_item-value common-content_title_search-extend_item-value\"\u003e\n\t\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_input-status expand-trigger\"\u003e\n\t\t\t\t\t\t\t\t\t\u003cinput placeholder=\"Начните вводить текст для поиска\" type=\"text\" class=\"documents-page_main-content_title_search-extend_input-status_value title-search documents-filter\" data-filter=\"statusCode\" oninput=\"\u003c%= Scripts %\u003e.handleStatusSearch(this)\"\u003e\n\t\t\t\t\t\t\t\t\t\u003cdiv class=\"documents common-content_title_search-extend_input-status-arrow documents-page_main-content_title_search-extend_input-status-arrow\"\n\t\t\t\t\t\t\t\t\t\tonclick=\"\u003c%= Scripts %\u003e.searchStatusExpand(this)\"\u003e\n\t\t\t\t\t\t\t\t\t\t\u003csvg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\"\n\t\t\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\u003e\n\t\t\t\t\t\t\t\t\t\t\t\u003cpath\n\t\t\t\t\t\t\t\t\t\t\t\td=\"M8.44414 10.2156L4.81914 6.53439C4.67227 6.38751 4.67227 6.15001 4.81914 6.00314L5.04102 5.78126C5.18789 5.63439 5.42539 5.63439 5.57227 5.78126L8.70977 8.97814L11.8473 5.78439C11.9941 5.63751 12.2316 5.63751 12.3785 5.78439L12.6004 6.00626C12.7473 6.15314 12.7473 6.39064 12.6004 6.53751L8.97539 10.2188C8.82852 10.3625 8.59102 10.3625 8.44414 10.2156Z\"\n\t\t\t\t\t\t\t\t\t\t\t\tfill=\"#8C8C8C\"\u003e\u003c/path\u003e\n\t\t\t\t\t\t\t\t\t\t\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_input-status-values documents-page_main-content_title_search-extend_input-status-values search-choice-items expandable\"\u003e\n\t\t\t\t\t\t\t\t\t\u003c!-- mock --\u003e\n\t\t\t\t\t\t\t\t\t\u003c!-- mock end --\u003e\n\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_footer common-content_title_search-extend_footer\"\u003e\n\t\t\t\t\t\t\u003cdiv\n\t\t\t\t\t\t\tclass=\"documents documents-page_main-content_title_search-extend_footer-item common-content_title_tab documents-search active\"\u003e\n\t\t\t\t\t\t\tПоиск\n\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\u003cdiv class=\"documents documents-page_main-content_title_search-extend_footer-item common-content_title_tab documents-reset\"\n\t\t\t\t\t\t\tdata-reset=\"documentsFilter\"\u003e\n\t\t\t\t\t\t\tСбросить фильтры\n\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\u003c/div\u003e\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\t\u003cdiv class=\"documents documents-page_main-content_table common-content_table\"\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_table-title common-content_table-title\"\u003e\n\t\t\t\u003cdiv class=\"documents documents-page_main-content_table-item common-content_table-item\"\u003e\n\t\t\t\t\u003cdiv class=\"documents documents-page_main-content_table-item-section document-name\"\u003e\n\t\t\t\t\tНаименования события\n\t\t\t\t\u003c/div\u003e\n\t\t\t\t\u003cdiv class=\"documents documents-page_main-content_table-item-section document-created\"\u003e\n\t\t\t\t\tДата создания\n\t\t\t\t\u003c/div\u003e\n\t\t\t\t\u003cdiv class=\"documents documents-page_main-content_table-item-section document-status\"\u003e\n\t\t\t\t\tСтатус\n\t\t\t\t\u003c/div\u003e\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_table-content common-table-content\"\u003e\n\t\t\t\u003c!-- mock --\u003e\n\n\t\t\t\u003c!-- mock end --\u003e\n\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\t\u003cdiv class=\"documents documents-page_main-content_table-empty common-content_table-empty hidden\"\u003e\n\t\t\u003ch3 class=\"documents documents-page_main-content_table-empty_title\"\u003e\n\t\t\tУ Вас пока нет кадровых документов\n\t\t\u003c/h3\u003e\n\t\u003c/div\u003e\n\t\u003cdiv class=\"documents documents-page_main-content_paginator content_paginator hidden\"\n\t\tdata-data-type=\"documents personnelDocumentsChunks\"\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_paginator-prev prev-button paginator-button\"\u003e\n\t\t\t‹\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_paginator_item paginator-item\" data-index=\"0\" active=\"true\"\u003e1\n\t\t\u003c/div\u003e\n\n\t\t\u003cdiv class=\"documents documents-page_main-content_paginator-next next-button paginator-button\"\u003e\n\t\t\t›\n\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\n\t\u003cdiv class=\"documents documents-page_main-content_mobile_footer common-content_mobile_footer hidden\"\u003e\n\t\t\u003cdiv\n\t\t\tclass=\"documents documents-page_main-content_mobile_footer-item common-content_mobile_footer-item mobile-docs-expand\"\u003e\n\t\t\t\u003csvg width=\"26\" height=\"6\" viewbox=\"0 0 26 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\t\t\t\t\u003cpath d=\"M0.817383 1C1.30469 1 8.73616 3.84264 12.391 5.26396L25.1829 1\" stroke=\"#E2E3E5\"\n\t\t\t\t\tstroke-width=\"1.21827\" stroke-linecap=\"round\" stroke-linejoin=\"round\" /\u003e\n\t\t\t\u003c/svg\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_mobile_footer-item common-content_mobile_footer-item task-item-title\"\n\t\t\tdata-data-type=\"personnelDocumentsChunks\"\u003e\n\t\t\tВсе\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_mobile_footer-item common-content_mobile_footer-item task-item-title\"\n\t\t\tdata-data-type=\"personalDocsChunks\"\u003e\n\t\t\tЛичные\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_mobile_footer-item common-content_mobile_footer-item task-item-title\"\n\t\t\tdata-data-type=\"lnaDocumentsChunks\"\u003e\n\t\t\tЛНА\n\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ctemplate class=\"documents tasks-page_main-content_table-item_template\"\u003e\n\t\u003ca class=\"documents tasks-page_main-content_table-item\"\u003e\n\t\t\u003cdiv class=\"documents tasks-page_main-content_table-item-section tasks-name\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents tasks-page_main-content_table-item-section task-author\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003c!-- \u003cdiv class=\"tasks-page_main-content_table-item-section task-type\"\u003e\n            \n        \u003c/div\u003e --\u003e\n\t\t\u003cdiv class=\"documents tasks-page_main-content_table-item-section task-created\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents tasks-page_main-content_table-item-section task-status\"\u003e\n\t\t\t\u003cdiv\n\t\t\t\tclass=\"documents tasks-page_main-content_table-item-section_status common-content_table-item-section_status\"\u003e\n\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\u003c/a\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"documents tasks-page_main-content_mobile_container-item_template\"\u003e\n\t\u003ca class=\"documents tasks-page_main-content_mobile_container-item\"\u003e\n\t\t\u003cdiv\n\t\t\tclass=\"documents tasks-page_main-content_mobile_container-item_status task-status tasks-page_main-content_table-item-section_status\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents tasks-page_main-content_mobile_container-item_name tasks-name\"\u003e\n\n\t\t\u003c/div\u003e\n\t\u003c/a\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"documents documents-page_main-content_table-item_template\"\u003e\n\t\u003ca href=\"\" class=\"documents documents-page_main-content_table-item common-content_table-item\"\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_table-item-section document-name\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_table-item-section document-created\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents documents-page_main-content_table-item-section document-status\"\u003e\n\t\t\t\u003cdiv\n\t\t\t\tclass=\"documents documents-page_main-content_table-item-section_status common-content_mobile_container-item_status\"\u003e\n\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\u003c/a\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"documents business_trips-page_main-content_table-item_template\"\u003e\n\t\u003ca href=\"\" class=\"documents business_trips-page_main-content_table-item common-content_table-item\"\u003e\n\t\t\u003cdiv class=\"documents business_trips-page_main-content_table-item-section business_trips-name\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents business_trips-page_main-content_table-item-section business_trips-start\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents business_trips-page_main-content_table-item-section business_trips-end\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents business_trips-page_main-content_table-item-section business_trips-status\"\u003e\n\t\t\t\u003cdiv\n\t\t\t\tclass=\"documents business_trips-page_main-content_table-item-section_status common-content_mobile_container-item_status\"\u003e\n\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\u003c/a\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"documents vacations-page_main-content_table-item_template\"\u003e\n\t\u003ca href=\"\" class=\"documents vacations-page_main-content_table-item common-content_table-item\"\u003e\n\t\t\u003cdiv class=\"documents vacations-page_main-content_table-item-section vacations-name\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents vacations-page_main-content_table-item-section vacations-start\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents vacations-page_main-content_table-item-section vacations-end\"\u003e\n\n\t\t\u003c/div\u003e\n\t\t\u003cdiv class=\"documents vacations-page_main-content_table-item-section vacations-status\"\u003e\n\t\t\t\u003cdiv\n\t\t\t\tclass=\"documents vacations-page_main-content_table-item-section_status common-content_mobile_container-item_status\"\u003e\n\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\u003c/a\u003e\n\u003c/template\u003e",
              "hideContent": false
            }
          }
        ]
      }
    },
    "fields": [
      {
        "code": "vacations_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "holidays",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Отпуска",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "business_trips_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "business_trips",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Командировки",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "medical_request_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "medical_request",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявка на медосмотр",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "transfer_application_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "transfer_application",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявка на перевод",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "execution_duties_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "execution_duties",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявка на ИО",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "dismissal_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "dismissal_app",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявка на увольнение",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "employment_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "employment_app",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявка на трудоустройство",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "benefit_application_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "benefit_application",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "personnel_documents",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявления на выплату пособия",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "order_financial_assistance_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "application_for_financial_assistance",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "personnel_documents",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявление на материальную помошь",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "certificate_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "certificate",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "personnel_documents",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Справки",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "category_assignment_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "category_assignment",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявка на присвоение категории",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "employees_personal_data_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "employees_personal_data",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявки на изменение ПДн",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "free_from_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "free_from",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "personnel_documents",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Заявки в свободной форме",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "application_for_the_transfer_of_salary_to_the_current_account_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "application_for_the_transfer_of_salary_to_the_current_account",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "personnel_documents",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Перечисление ЗП на расчетный счет",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "setlement_sheet_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "setlement_sheet",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "personnel_documents",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Расчетный листок",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "lna_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "docs_lna",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение ЛНА",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "staff_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "staff",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Сотрудники",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "statuses_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "statuses",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Статусы",
          "data": {},
          "input": false,
          "output": true
        }
      },
      {
        "code": "event_listeners_set",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Обработчики событий установлены",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      }
    ],
    "fieldVisibilityConditions": {
      "lna_app": {
        "enabled": false,
        "conditions": []
      },
      "staff_app": {
        "enabled": false,
        "conditions": []
      },
      "statuses_app": {
        "enabled": false,
        "conditions": []
      },
      "dismissal_app": {
        "enabled": false,
        "conditions": []
      },
      "free_from_app": {
        "enabled": false,
        "conditions": []
      },
      "vacations_app": {
        "enabled": false,
        "conditions": []
      },
      "employment_app": {
        "enabled": false,
        "conditions": []
      },
      "certificate_app": {
        "enabled": false,
        "conditions": []
      },
      "business_trips_app": {
        "enabled": false,
        "conditions": []
      },
      "event_listeners_set": {
        "enabled": false,
        "conditions": []
      },
      "medical_request_app": {
        "enabled": false,
        "conditions": []
      },
      "setlement_sheet_app": {
        "enabled": false,
        "conditions": []
      },
      "execution_duties_app": {
        "enabled": false,
        "conditions": []
      },
      "benefit_application_app": {
        "enabled": false,
        "conditions": []
      },
      "category_assignment_app": {
        "enabled": false,
        "conditions": []
      },
      "transfer_application_app": {
        "enabled": false,
        "conditions": []
      },
      "employees_personal_data_app": {
        "enabled": false,
        "conditions": []
      },
      "order_financial_assistance_app": {
        "enabled": false,
        "conditions": []
      },
      "prilozhenie_zayavka_na_medosmotr": {
        "enabled": false,
        "conditions": []
      },
      "application_for_the_transfer_of_salary_to_the_current_account_app": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {},
    "clientScripts": "declare const console: any;\ndeclare const window: any;\ndeclare const document: any;\ndeclare const DOMParser: any;\ndeclare const VanillaCalendar: any;\ndeclare const filePath: any;\n\nenum FilterType {\n    START_DATE = \"start_date\",\n    END_DATE = \"end_date\",\n    STATUS_CODE = \"status_code\",\n    NAME = \"name\"\n};\n\nenum LoaderType {\n    COMMON = \"common\",\n    MAIN = \"main\",\n    TASKS = \"tasks\",\n    DOCUMENTS = \"documents\",\n    SERVICES = \"services\",\n    BUSINESS_TRIPS = \"business_trips\",\n    VACATIONS = \"vacations\",\n    PROFILE = \"profile\",\n    DOCUMENTS_WIDGET = \"personnel_documents_widget\",\n    ISSUES_WIDGET = \"issues_widget\",\n    VACATION_WIDGET = \"vacation_widget\",\n};\n\nenum TaskType {\n    PERSONAL = \"personal\",\n    OUTGOING = \"outgoing\"\n};\n\nenum DocType {\n    PERSONAL = \"personal_data\",\n    ISSUE = \"issue\",\n    VACATION = \"vacation\",\n    BUSINESS_TRIP = \"business_trip\"\n};\n\nenum chunkType {\n    PERSONAL = \"personnelDocumentsChunks\",\n    LNA_DOCS = \"lnaDocumentsChunks\",\n    PERSONAL_DOCS = \"personalDocsChunks\",\n    BUSINESS_TRIPS = \"businessTripsChunks\",\n    VACATIONS = \"vacationsChunks\",\n    OUTGOING_TASKS = \"outgoingTasksChunks\",\n    ACTUAL_TASKS = \"actualTasksChunks\",\n    SUB_TASKS = \"subordinateTasksChunks\",\n    ALL = \"allTasksChunks\",\n    DOCS_TASKS = \"docsTasksChunks\",\n    IN_PROGRESS = \"inProgressTasksChunks\",\n    LNA = \"lnaTasksChunks\",\n    NULL = \"undefined\"\n};\n\nenum FilterType {\n    TASKS = \"tasksFilter\",\n    DOCUMENTS = \"documentsFilter\",\n    BUSINESS_TRIPS = \"businessTripsFilter\",\n    VACATIONS = \"vacationsFilter\"\n};\n\nenum TaskFilterType {\n    NAME = \"taskName\",\n    CREATED_AT = \"createdAt\",\n    DUE_DATE = \"dueDate\",\n    STATUS = \"statusCode\",\n    USER_ID = \"userId\"\n};\n\nenum NotifyType {\n    ERROR,\n    WARNING,\n    SUCCESS,\n}\n\ntype domKey = keyof typeof DomManager.prototype;\ntype pageKey = keyof typeof Paginator.prototype;\n\ntype userSettings = {\n    notifications: string,\n    provider: string,\n    default_page: string\n};\n\ntype serviceLinkConstructor = {\n    name: string,\n    ns: string,\n    code: string,\n    fieldToChange?: string,\n    fieldValue?: any\n};\n\ntype service = {\n    name: string,\n    code: string,\n    link: string,\n};\n\ntype componentObj = {\n    cls: string,\n    component: any;\n};\n\ntype taskData = {\n    id: string,\n    created_by_id: string,\n    name: string,\n    author: string,\n    created_at: string,\n    created_at_obj: TDatetime,\n    due_date: string,\n    due_date_obj: TDatetime | undefined,\n    doc_type: string,\n    status: string,\n    is_personal: boolean,\n    state: string,\n    task_type: TaskType\n    doc_code?: string\n};\n\ntype objData = {\n    id: string,\n    code: string,\n    ns: string,\n    name: string,\n    status: string,\n    status_code: string,\n    business_type: string,\n    render_zone: string,\n    created_at: TDatetime,\n    item_type: string,\n    link: string,\n    start_date?: string,\n    end_date?: string,\n    start_date_obj: TDate | TDatetime,\n    end_date_obj: TDate | TDatetime,\n    vacation_type?: string,\n    vacation_code?: string,\n    duration?: number,\n    cityId?: string,\n    cityName?: string,\n    staffId: string,\n    work_type?: string,\n    type_employment?: string,\n};\n\ntype blockConstructor = {\n    titleClass: string,\n    titleContent: string,\n    iconClass?: string,\n    iconContent?: string,\n    extraContentClass?: string,\n    extraContent?: string,\n    status?: string,\n    link?: string\n};\n\ntype newIssueConstructor = {\n    name: string,\n    code?: string,\n    expandable: boolean,\n    issue_type?: string,\n    issues?: newIssueConstructor[]\n    link?: string\n};\n\ntype favoriteService = {\n    name: string,\n    services?: favoriteService[]\n    code?: string,\n};\n\ntype menuItem = {\n    name: string,\n    type: string,\n    widget_name: string,\n    svg?: string\n};\n\ntype subordinateUserTasks = {\n    userData: userTaskData,\n    tasks: paginatorItem\n};\n\ntype documentData = {\n    docName: string,\n    docId: string,\n\n}\n\ntype userTaskData = {\n    userName: string,\n    userId: string,\n    avatar: string,\n    subdivision: string,\n    tasksCount: number,\n    status: string,\n    statusCode: string,\n};\n\ntype paginatorItem = {\n    globalIndex: number,\n    globalData: paginatorChunk[],\n    elementType: string,\n    rootToRender: any\n};\n\ntype paginatorChunk = {\n    index: number;\n    data: dataUnion[];\n};\n\ntype tasksFilter = {\n    taskName?: string,\n    createdAt?: TDatetime | string,\n    dueDate?: TDatetime | string,\n    statusCode?: string,\n    userId?: string\n};\n\ntype documentsFilter = {\n    name?: string,\n    createdAt?: TDatetime | string,\n    statusCode?: string\n};\n\ntype businessTripsFilter = {\n    business_trip_name?: string,\n    business_trips_start?: TDatetime | undefined,\n    business_trips_end?: TDatetime | undefined,\n    statusCode?: string,\n    staffId?: string,\n    cityId?: string\n};\n\ntype vacationsFilter = {\n    vacation_name?: string,\n    vacations_start?: TDatetime | undefined,\n    vacations_end?: TDatetime | undefined,\n    typeId?: string,\n    staffId?: string,\n};\n\ntype category = {\n    name: string,\n    assignment_date: string,\n    expiration_date: string\n};\n\ntype notificationOption = {\n    notify_type: NotifyType,\n    duration: number\n}\n\ntype dataUnion = objData | taskData;\n\ntype staff = ApplicationItem\u003cApplication$kedo$staff$Data, any\u003e;\ntype organization = ApplicationItem\u003cApplication$kedo$organization$Data, any\u003e;\ntype family = ApplicationItem\u003cApplication$kedo$family_composition_app$Data, any\u003e;\ntype subdivision = ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, any\u003e;\ntype position = ApplicationItem\u003cApplication$kedo$position$Data, any\u003e;\ntype vacation = ApplicationItem\u003cApplication$kedo$holidays$Data, any\u003e;\ntype businessTrip = ApplicationItem\u003cApplication$kedo$business_trips$Data, any\u003e;\ntype status = ApplicationItem\u003cApplication$kedo$statuses$Data, any\u003e;\n\n//константы и типы\nconst taskTypeReference = {\n    \"in_progress\": \"В процессе\",\n    \"assignment\": \"На распределении\",\n    \"cancel\": \"Отменена\",\n    \"closed\": \"Закрыта\"\n};\n\nconst issuesWidgetCodes = [\n    \"employees_personal_data\",\n    \"category_assignment\",\n    \"application_for_financial_assistance\",\n    \"benefit_application\",\n    \"free_from\",\n    \"certificate\",\n    \"medical_request\",\n    \"order_financial_assistance\",\n    \"employment_app\",\n    \"execution_duties\",\n    \"application_for_the_transfer_of_salary_to_the_current_account\"\n];\n\nconst monthReference = {\n    \"1\": \"Января\",\n    \"2\": \"Февраля\",\n    \"3\": \"Марта\",\n    \"4\": \"Апреля\",\n    \"5\": \"Мая\",\n    \"6\": \"Июня\",\n    \"7\": \"Июля\",\n    \"8\": \"Августа\",\n    \"9\": \"Сентября\",\n    \"10\": \"Октября\",\n    \"11\": \"Ноября\",\n    \"12\": \"Декабря\"\n};\n\nconst calendarObject = {\n    options: {\n        actions: {\n            clickDay(event: any, self: any) {\n                setDate(event)\n            }\n        },\n        settings: {\n            lang: \"ru-RU\"\n        }\n    },\n    checkComponents() {\n        return !!(\n            document.querySelector(\".documents-page_main-content_title_search-extend_item-value_calendar\")\n        )\n    },\n    setCalendars() {\n        const waitForComponents = window.setInterval(() =\u003e {\n            if (!this.checkComponents()) {\n                console.log(\"waiting for calendar components\")\n                return;\n            };\n            window.clearInterval(waitForComponents);\n            console.log(\"calendars found\")\n            const docsCalendar = new VanillaCalendar(\".documents-page_main-content_title_search-extend_item-value_calendar\", this.options);\n            [\n                docsCalendar,\n            ].forEach(calendar =\u003e calendar.init());\n        }, 100)\n    }\n}\n\nfunction expandSearch() {\n\n    let expandSearchContainer = document.querySelector(\".documents-page_main-content_title_search-extend\");\n    let expandModal = document.querySelector(\".dropdown-modal\");\n\n    expandSearchContainer.classList.toggle(\"expanded\");\n    expandModal.classList.toggle(\"hidden\");\n};\n\nfunction clearFilters() {\n    window.localStorage.removeItem(\"business_trips_filters\");\n    const allInputs = document.querySelectorAll(\".business_trips-page_main-content_title_search-extend input\");\n    allInputs.forEach((input: any) =\u003e {\n        input.value = \"\";\n    });\n};\n\nfunction expandCalendar(target: any) {\n    target.style.transform = target.style.transform\n        ? \"\"\n        : \"rotateZ(180deg)\"\n    const calendar = target.parentElement.nextElementSibling;\n    calendar.classList.toggle(\"hidden\");\n};\n\nfunction checkAndSetDate(target: any) {\n    if (!target.value || target.value.length \u003c 1) {\n        return;\n    };\n    const dateRegex = /^([120]{1}[0-9]{1}|3[01]{1,2}|0[1-9])\\.(1[0-2]|0[1-9])\\.\\d{4}/;\n    if (target.value.match(dateRegex)) {\n        const filterType: FilterType = target.dataset.filter;\n        setFilterField(filterType, target.value);\n    };\n};\n\nfunction searchStatusExpand(target: any) {\n    let expandContainer: any;\n    if (!target.classList.contains(\"input-status-values_item\")) {\n        expandContainer = target.parentElement.nextElementSibling;\n        if (expandContainer.classList.contains(\"expanded\")) {\n            target.style.transform = \"rotateZ(0)\"\n        } else {\n            target.style.transform = \"rotateZ(180deg)\"\n        };\n    } else {\n        expandContainer = target.parentElement;\n        const arrow = expandContainer.parentElement.querySelector(\".common-content_title_search-extend_input-status-arrow\");\n        arrow.style.transform = 'rotateZ(0)';\n    };\n\n    expandContainer.classList.toggle(\"expanded\");\n};\n\nfunction handleStatusChoice(target: any) {\n    const statusInput = target.parentElement.previousElementSibling.querySelector(\"input\");\n    statusInput.value = target.textContent.trim();\n    statusInput.dataset.statusCode = target.dataset.statusCode;\n    searchStatusExpand(target);\n}\n\n/**\n * Класс, хранящий в себе все данные, относящиеся к текущему пользователю/сотруднику\n */\nclass UserDataManager {\n    constructor() {\n        this.vacations = [];\n        this.businessTrips = [];\n        this.issues = [];\n        this.personnelDocuments = [];\n        this.allDocsLoaded = false;\n        this.lastDocsForRender = [];\n        this.allUserDocs = [];\n        this.businessTripsRefs = [];\n    };\n\n    user: CurrentUserItem;\n    staff: staff;\n    organization: organization | undefined;\n    subdivision: subdivision | undefined;\n    position: position | undefined;\n    categories: category[];\n    family: { name: string, relation: string }[];\n    avatarLink: string | undefined;\n    vacations: objData[]\n    businessTrips: objData[];\n    issues: objData[];\n    personnelDocuments: objData[];\n    lastDocsForRender: objData[];\n    allUserDocs: objData[];\n    allStaff: staff[];\n    businessTripsRefs: { cityId: string, objId: string }[];\n    allDocsLoaded: boolean;\n};\n\n/**\n * Класс, хранящий в себе глобальные объекты, прямо или косвенно связанные с пользователем/сотрудником, необходимые для отрисовки компонентов\n */\nclass SystemDataManager {\n    statuses: status[];\n    users: UserItem[];\n    allEmploymentPlacements: ApplicationItem\u003cApplication$kedo$employment_directory$Data, any\u003e[];\n    allOrgs: ApplicationItem\u003cApplication$kedo$organization$Data, any\u003e[];\n    allStructuralSubdivisions: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, any\u003e[];\n    allStaff: staff[];\n    allCities: { id: string, name: string }[];\n    menuItems: menuItem[];\n};\n\n/**\n * Класс для хранения и парсинга информации о избранных сервисах пользователя и фильтров для объектов\n * @property baseUrl адрес площадки\n * @property tasksFilter объект типа tasksFilter\n * @property documentsFilter объект типа documentsFilter\n * @property businessTripsFilter объект типа businessTripsFilter\n * @property vacationsFilter объект типа vacationsFilter\n * @property servicesCount количество избранных сервисов пользователя\n * @property favoriteServices массиво объектов типа service\n */\nclass UserStorageManager {\n    constructor() {\n        this.baseUrl = System.getBaseUrl();\n    };\n\n    baseUrl: string;\n    documentsFilter: documentsFilter | undefined;\n    businessTripsFilter: businessTripsFilter | undefined;\n    vacationsFilter: vacationsFilter | undefined;\n\n    /**\n     * Очищает фильтры страницы\n     * @param filterType тип фильтра\n     */\n    clearFilters(filterType: FilterType) {\n\n        let filterNodes: any\n\n        filterNodes = document.querySelectorAll(\".documents-filter\");        \n\n        console.log(` length ${filterNodes.length} `);\n        console.log(filterNodes);\n\n        filterNodes.forEach((node: any) =\u003e {\n            node.value = \"\";\n        });\n\n        const search = document.querySelector(\".title-search\");\n        if (search) {\n            search.value = \"\";\n        }\n\n        this.documentsFilter = undefined;\n\n        paginator.setPaginator(paginator.paginator, paginator.dataType);\n    };\n\n    serializeFilters(filterType: FilterType) {\n        let filterValue: any;\n        let filterNodes: any;\n        let node: any;\n\n        switch (filterType) {\n            case FilterType.DOCUMENTS:\n                filterNodes = document.querySelectorAll(\".documents-filter\");\n\n                for (node of filterNodes) {\n                    const key = node.dataset.filter;\n                    const value = node.value;\n\n                    if (!key || !value) {\n                        continue;\n                    };\n\n                    switch (key) {\n                        case \"createdAt\":\n                            const [day, month, year] = (value as string).split(\".\");\n\n                            if (![day, month, year].every(item =\u003e item) || year.length \u003c 4) {\n                                break;\n                            };\n\n                            filterValue = new Datetime(`${day}.${month}.${year}`, \"DD.MM.YYYY\");\n                            break;\n                        case \"statusCode\":\n                            filterValue = node.dataset.statusCode;\n                            break;\n                        default:\n                            filterValue = node.value;\n                            break;\n                    };\n\n                    if (filterValue) {\n                        if (!this.documentsFilter) {\n                            this.documentsFilter = \u003cdocumentsFilter\u003e{};\n                        };\n                        this.documentsFilter[key as keyof documentsFilter] = filterValue;\n                    } else if (!filterValue \u0026\u0026 this.documentsFilter \u0026\u0026 this.documentsFilter![key as keyof documentsFilter]) {\n                        delete this.documentsFilter![key as keyof documentsFilter];\n                    };\n                };\n            case FilterType.BUSINESS_TRIPS:\n                filterNodes = document.querySelectorAll(\".business_trips-filter\");\n\n                for (node of filterNodes) {\n                    const key = node.dataset.filter;\n                    const value = node.value;\n\n                    if (!key || !value) {\n                        continue;\n                    };\n\n                    switch (key) {\n                        case \"business_trips_start\":\n                        case \"business_trips_end\":\n                            const [day, month, year] = (value as string).split(\".\");\n\n                            if (![day, month, year].every(item =\u003e item) || year.length \u003c 4) {\n                                break;\n                            };\n\n                            filterValue = new Datetime(`${day}.${month}.${year}`, \"DD.MM.YYYY\");\n                            break;\n                        case \"statusCode\":\n                            filterValue = node.dataset.statusCode;\n                            break;\n                        case \"staffId\":\n                            filterValue = node.dataset.staffId;\n                            break;\n                        case \"cityId\":\n                            filterValue = node.dataset.cityId;\n                            break;\n                        default:\n                            filterValue = node.value;\n                            break;\n                    };\n\n                    if (filterValue) {\n                        if (!this.businessTripsFilter) {\n                            this.businessTripsFilter = \u003cbusinessTripsFilter\u003e{};\n                        };\n                        this.businessTripsFilter[key as keyof businessTripsFilter] = filterValue;\n                    } else if (!filterValue \u0026\u0026 this.businessTripsFilter \u0026\u0026 this.businessTripsFilter![key as keyof businessTripsFilter]) {\n                        delete this.businessTripsFilter![key as keyof businessTripsFilter];\n                    };\n                };\n            case FilterType.VACATIONS:\n                filterNodes = document.querySelectorAll(\".vacations-filter\");\n\n                for (node of filterNodes) {\n                    const key = node.dataset.filter;\n                    const value = node.value;\n\n                    if (!key || !value) {\n                        continue;\n                    };\n\n                    switch (key) {\n                        case \"vacations_start\":\n                            const [startDay, startMonth, startYear] = (value as string).split(\".\");\n\n                            if (![startDay, startMonth, startYear].every(item =\u003e item) || startYear.length \u003c 4) {\n                                break;\n                            };\n\n                            const [startDayNum, startMonthNum, startYearNum] = [startDay, startMonth, startYear].map(Number)\n                            filterValue = new TDate(startDayNum, startMonthNum, startYearNum);\n                            break;\n                        case \"vacations_end\":\n                            const [day, month, year] = (value as string).split(\".\");\n\n                            if (![day, month, year].every(item =\u003e item) || year.length \u003c 4) {\n                                break;\n                            };\n\n                            const [dayNum, monthNum, yearNum] = [day, month, year].map(Number)\n                            filterValue = new TDate(yearNum, monthNum, dayNum);\n                            break;\n                        case \"statusCode\":\n                            filterValue = node.dataset.statusCode;\n                            break;\n                        case \"staffId\":\n                            filterValue = node.dataset.staffId;\n                            break;\n                        case \"typeId\":\n                            filterValue = node.dataset.vacation_code;\n                            break;\n                        default:\n                            filterValue = node.value;\n                            break;\n                    };\n\n                    if (filterValue) {\n                        if (!this.vacationsFilter) {\n                            this.vacationsFilter = \u003cvacationsFilter\u003e{};\n                        };\n                        this.vacationsFilter[key as keyof vacationsFilter] = filterValue;\n                    } else if (!filterValue \u0026\u0026 this.vacationsFilter \u0026\u0026 this.vacationsFilter![key as keyof vacationsFilter]) {\n                        delete this.vacationsFilter![key as keyof vacationsFilter];\n                    };\n                };\n        };\n    };\n\n    /**\n     * Генерирует ссылку для сервиса\n     */\n    parseLink(service: serviceLinkConstructor): string {\n        const linkObj = encodeURIComponent(`${service.fieldToChange ? `{${`\"data\":{\"${service.fieldToChange}\":[${JSON.stringify(service.fieldValue)}]}}`}` : \"\"}`).replace(/:/g, \"%3A\").replace(/,/g, \"%2C\");\n        const fullUrl = `(p:item/${service.ns}/${service.code}${linkObj ? `;values=${linkObj}` : \"\"})`;\n        return fullUrl;\n    };\n};\n\n/**\n * Класс, который управляет логикой пагинации элементов на странице\n*/\nclass Paginator {\n    constructor() {\n        this.subordinateTasksChunks = [];\n    };\n\n    elementsToRender: dataUnion;\n    allTasksChunks: paginatorItem;\n    actualTasksChunks: paginatorItem;\n    outgoingTasksChunks: paginatorItem;\n    lnaTasksChunks: paginatorItem;\n    docsTasksChunks: paginatorItem;\n    subordinateTasksChunks: subordinateUserTasks[];\n    personnelDocumentsChunks: paginatorItem;\n    lnaDocumentsChunks: paginatorItem;\n    personalDocsChunks: paginatorItem;\n    vacationsChunks: paginatorItem;\n    businessTripsChunks: paginatorItem;\n    tasksTableContent: any;\n    tasksTable: any;\n    mobileTasksTableContent: any;\n    mobileTasksTable: any;\n    emptyTasksTemplate: any;\n    emptyDocumentsTemplate: any;\n    emptyBusinessTripsTemplate: any;\n    emptyVacationsTemplate: any;\n    subordinateTasksTable: any;\n    subordinateTasksTableContent: any;\n    subordinateStructureName: any;\n    subordinateStructureNameMobile: any;\n    subordinateUserName: any;\n    subordinateUserNameMobile: any;\n    subordinatePath: any;\n    subordinatePathMobile: any;\n    subordinateTableMobile: any;\n    personnelDocumentsTable: any;\n    personnelDocumentsTableContent: any;\n    businessTripsTable: any;\n    businessTripsTableContent: any;\n    vacationsTable: any;\n    vacationsTableContent: any;\n    paginator: any;\n    dataType: chunkType;\n\n    currentState: chunkType;\n\n    /**\n     * Метод, разделяющий массив на чанки для пагинации\n     * @param arr массив с элементами для разделения\n     * @param n количество элементов в чанке\n     * @param rootToRender ссылка на DOM-элемент, в котором будут отрисовываться элементы\n     * @param elementType тип элемента\n     */\n    private sliceToChunks(arr: any[], n: number, rootToRender: any, elementType?: string): paginatorItem {\n        let index = 1;\n        const chunks: paginatorChunk[] = []\n\n        for (let i = 0; i \u003c arr.length; i += n) {\n            const chunk = arr.slice(i, i + n);\n            const newChunkObj: paginatorChunk = {\n                index: index++,\n                data: chunk\n            };\n            chunks.push(newChunkObj);\n        };\n\n        return \u003cpaginatorItem\u003e{ globalIndex: 0, globalData: chunks, elementType, rootToRender };\n    };\n\n    /**\n     * Метод-проверка, что все DOM-элементы для класса подгружены\n     */\n    checkProps() {\n        return this.tasksTable\n            \u0026\u0026 this.tasksTableContent\n            \u0026\u0026 this.mobileTasksTable\n            \u0026\u0026 this.mobileTasksTableContent\n            \u0026\u0026 this.emptyTasksTemplate\n            \u0026\u0026 this.subordinateTasksTable\n            \u0026\u0026 this.subordinateTasksTableContent\n            \u0026\u0026 this.subordinateStructureName\n            \u0026\u0026 this.subordinateUserName\n            \u0026\u0026 this.subordinatePath\n            \u0026\u0026 this.subordinatePathMobile\n            \u0026\u0026 this.subordinateTableMobile\n            \u0026\u0026 this.subordinateStructureNameMobile\n            \u0026\u0026 this.subordinateUserNameMobile\n            \u0026\u0026 this.personnelDocumentsTable\n            \u0026\u0026 this.personnelDocumentsTableContent\n            \u0026\u0026 this.emptyDocumentsTemplate\n            \u0026\u0026 this.emptyBusinessTripsTemplate\n            \u0026\u0026 this.businessTripsTable\n            \u0026\u0026 this.businessTripsTableContent\n            \u0026\u0026 this.vacationsTable\n            \u0026\u0026 this.vacationsTableContent\n            \u0026\u0026 this.emptyVacationsTemplate\n    };\n\n    /**\n     * Метод для управления отображением пути к сотруднику в разделе Задачи -\u003e Отдел\n     * @param target DOM-элемент для отрисовки пути к сотруднику\n     */\n    handleSubordinatePath(target?: any) {\n        if (target) {\n            const user = this.subordinateTasksChunks.find(obj =\u003e obj.userData.userId === target.dataset.userId);\n\n            if (user) {\n                this.subordinateUserName.textContent = user.userData.userName;\n                this.subordinateUserNameMobile.textContent = user.userData.userName;\n                this.subordinateStructureName.textContent = user.userData.subdivision;\n                this.subordinateStructureNameMobile.textContent = user.userData.subdivision;\n            };\n        };\n\n        this.subordinatePath.classList.toggle(\"hidden\");\n        this.subordinatePathMobile.classList.toggle(\"hidden\");\n    };\n\n    /**\n     * Метод для возврата из раздела Задачи -\u003e Отдел\n     */\n    handleReturn() {\n        [\n            this.subordinatePath,\n            this.subordinatePathMobile,\n            this.tasksTableContent,\n            this.mobileTasksTable,\n            this.subordinateTasksTableContent,\n            this.paginator\n        ].forEach((node: any) =\u003e node.classList.toggle(\"hidden\"));\n    };\n\n    /**\n     * Метод для управления отображением различных кнопок (добавление и удаление класса .active)\n     * @param element DOM-элемент, на котором срабатывает событие\n     * @param restElements DOM-элементы, для которых необходимо удалить класс\n     */\n    handlePageChange(element: any, restElements?: any) {\n        if (restElements) {\n            for (let element of restElements) {\n                if (element.classList.contains(\"active\")) {\n                    element.classList.remove(\"active\");\n                };\n            };\n        };\n        element.classList.toggle(\"active\");\n    };\n\n    /**\n     * Метод для применения фильтров к командировкам\n     * @param item элемент типа paginatorItem\n     */\n    private filterBusinessTrips(item: paginatorItem) {\n        if (!userStorageManager.businessTripsFilter) {\n            return item;\n        };\n\n        let allBusinessTrips = \u003cobjData[]\u003e[].concat.apply([], ...item.globalData.map(obj =\u003e obj.data));\n\n        if (userStorageManager.businessTripsFilter.business_trip_name) {\n            allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.name.toLowerCase().includes(userStorageManager.businessTripsFilter!.business_trip_name!.toLowerCase()));\n        };\n\n        if (userStorageManager.businessTripsFilter.business_trips_start) {\n            allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.start_date_obj.after(userStorageManager.businessTripsFilter!.business_trips_start!));\n        };\n\n        if (userStorageManager.businessTripsFilter.business_trips_end) {\n            allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.end_date_obj.after(userStorageManager.businessTripsFilter!.business_trips_end!));\n        };\n\n        if (userStorageManager.businessTripsFilter.statusCode) {\n            allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.status_code === userStorageManager.businessTripsFilter!.statusCode);\n        };\n\n        if (userStorageManager.businessTripsFilter.cityId) {\n            allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.cityId \u0026\u0026 doc.cityId === userStorageManager.businessTripsFilter!.cityId);\n        };\n\n        if (userStorageManager.businessTripsFilter.staffId) {\n            allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.staffId \u0026\u0026 doc.staffId === userStorageManager.businessTripsFilter!.staffId);\n        };\n\n        const newItem = this.sliceToChunks(allBusinessTrips, 10, this.businessTripsTable, item.elementType);\n        return newItem;\n    };\n\n    /**\n     * Метод для применения фильтров к документам\n     * @param item объект типа paginatorItem\n     */\n    private filterDocs(item: paginatorItem): paginatorItem {\n\n        console.log(userStorageManager.documentsFilter);\n\n        if (!userStorageManager.documentsFilter) {\n            return item;\n        };\n\n        let allDocs = \u003cobjData[]\u003e[].concat.apply([], ...item.globalData.map(obj =\u003e obj.data));\n\n        if (userStorageManager.documentsFilter.name) {\n            allDocs = allDocs.filter(doc =\u003e doc.name.toLowerCase().includes(userStorageManager.documentsFilter!.name!.toLowerCase()));\n        };\n\n        if (userStorageManager.documentsFilter.createdAt) {\n            allDocs = allDocs.filter(doc =\u003e doc.created_at.after(userStorageManager.documentsFilter!.createdAt! as TDatetime));\n        };\n\n        if (userStorageManager.documentsFilter.statusCode) {\n            allDocs = allDocs.filter(doc =\u003e doc.status_code === userStorageManager.documentsFilter!.statusCode);\n        };\n\n        const newItem = this.sliceToChunks(allDocs, 10, this.personnelDocumentsTable, item.elementType);\n\n        console.log(newItem);\n\n        return newItem;\n    };\n\n    /**\n     * Метод для применения фильтров к отпускам\n     * @param item объект типа paginatorItem\n     */\n    private filterVacations(item: paginatorItem): paginatorItem {\n        if (!userStorageManager.vacationsFilter) {\n            return item;\n        };\n\n        let allVacations = \u003cobjData[]\u003e[].concat.apply([], ...item.globalData.map(obj =\u003e obj.data));\n\n        if (userStorageManager.vacationsFilter.vacation_name) {\n            allVacations = allVacations.filter(doc =\u003e doc.name.toLowerCase().includes(userStorageManager.vacationsFilter!.vacation_name!.toLowerCase()));\n        };\n\n        if (userStorageManager.vacationsFilter.vacations_start) {\n            allVacations = allVacations.filter(doc =\u003e doc.start_date_obj.after(userStorageManager.vacationsFilter!.vacations_start!));\n        };\n\n        if (userStorageManager.vacationsFilter.vacations_end) {\n            allVacations = allVacations.filter(doc =\u003e doc.end_date_obj.before(userStorageManager.vacationsFilter!.vacations_end!));\n        };\n\n\n        if (userStorageManager.vacationsFilter.staffId) {\n            allVacations = allVacations.filter(doc =\u003e doc.staffId \u0026\u0026 doc.staffId === userStorageManager.vacationsFilter!.staffId);\n        };\n\n        if (userStorageManager.vacationsFilter.typeId) {\n            allVacations = allVacations.filter(doc =\u003e doc.vacation_code \u0026\u0026 doc.vacation_code === userStorageManager.vacationsFilter!.typeId);\n        };\n\n        const newItem = this.sliceToChunks(allVacations, 10, this.vacationsTable, item.elementType);\n        return newItem;\n    };\n\n    /**\n     * Метод для управления видимостью заглушки с информацией о том, что объект для отрисовки пустой\n     * @param paginator ссылка на DOM-элемент, в котором необходимо отобразить заглушку\n     * @param dataType тип данных\n     */\n    handleEmptyPaginator(paginator: any, dataType: chunkType) {\n        if (!paginator.classList.contains(\"hidden\")) {\n            paginator.classList.add(\"hidden\");\n        };\n        switch (dataType) {\n            case chunkType.ACTUAL_TASKS:\n            case chunkType.ALL:\n            case chunkType.IN_PROGRESS:\n            case chunkType.DOCS_TASKS:\n            case chunkType.LNA:\n            case chunkType.OUTGOING_TASKS:\n            case chunkType.SUB_TASKS:\n                if (this.emptyTasksTemplate.classList.contains(\"hidden\")) {\n                    this.emptyTasksTemplate.classList.remove(\"hidden\");\n                };\n                if (!this.tasksTableContent.classList.contains(\"hidden\")) {\n                    this.tasksTableContent.classList.toggle(\"hidden\");\n                };\n                if (!this.mobileTasksTableContent.classList.contains(\"hidden\")) {\n                    this.mobileTasksTableContent.classList.toggle(\"hidden\");\n                };\n                break;\n            case chunkType.LNA_DOCS:\n            case chunkType.PERSONAL:\n            case chunkType.PERSONAL_DOCS:\n                if (!this.personnelDocumentsTableContent.classList.contains(\"hidden\")) {\n                    this.personnelDocumentsTableContent.classList.toggle(\"hidden\");\n                };\n                if (this.emptyDocumentsTemplate.classList.contains(\"hidden\")) {\n                    this.emptyDocumentsTemplate.classList.remove(\"hidden\");\n                };\n                break;\n            case chunkType.BUSINESS_TRIPS:\n                if (!this.businessTripsTableContent.classList.contains(\"hidden\")) {\n                    this.businessTripsTableContent.classList.toggle(\"hidden\");\n                };\n                if (this.emptyBusinessTripsTemplate.classList.contains(\"hidden\")) {\n                    this.emptyBusinessTripsTemplate.classList.remove(\"hidden\");\n                };\n                break;\n            case chunkType.VACATIONS:\n                if (!this.vacationsTableContent.classList.contains(\"hidden\")) {\n                    this.vacationsTableContent.classList.toggle(\"hidden\");\n                };\n                if (this.emptyVacationsTemplate.classList.contains(\"hidden\")) {\n                    this.emptyVacationsTemplate.classList.remove(\"hidden\");\n                };\n                break;\n        };\n    };\n\n    /**\n    * Метод для навешивания логики на стрелки в пагинаторе \n    * @param prevButton стрелка влево\n    * @param nextButton стрелка вправо\n    * @param firstClassWord название элемента класса (чтобы динамически подставить в поиск по классу) (tasks и т.д.)\n    * @param actualData нужно для обновления данных в таблице\n    * @param dataType тип данных\n    * @param itemIsTask элемент является заданием\n    */\n    initArrowButtons(prevButton: any, nextButton: any, firstClassWord: string, actualData: paginatorItem, dataType: chunkType, itemIsTask: boolean) {\n\n        //ивент лисенеры на стрелки пагинатора стрелкам\n        prevButton.addEventListener(\"click\", () =\u003e {\n            let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n            let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n            //ищем активную страницу\n            if (activePage) {\n                //получаем её индекс\n                let activeIndex = Number(activePage.dataset[\"index\"]);\n\n                let outOfBounds = false;\n\n                //если мы уже дошли до конца, то переходим на последнюю страницу\n                if ((activeIndex - 1) \u003c 0) {\n                    outOfBounds = true;\n                }\n                //иначе убираем у страницы активность\n                if (activePage.classList.contains(\"active\")) {\n                    activePage.classList.remove(\"active\");\n                }\n                //ищем следующую страницу\n                let newPage = document.querySelector(`div.${firstClassWord}-page_main-content_paginator div[data-index=\"${outOfBounds ? pages.length - 1 : activeIndex - 1}\"]`);\n                //делаем её активной\n                if (!newPage.classList.contains(\"active\")) {\n                    newPage.classList.add(\"active\");\n                }\n                //обновляем данные в таблице\n                this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n            }\n        });\n\n        //то же самое, только для стрелки вправо\n        nextButton.addEventListener(\"click\", () =\u003e {\n            let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n            let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n            if (activePage) {\n                let activeIndex = Number(activePage.dataset[\"index\"]);\n                let outOfBounds = false;\n                if ((activeIndex + 1) \u003e pages.length - 1) {\n                    outOfBounds = true;\n                }\n                if (activePage.classList.contains(\"active\")) {\n                    activePage.classList.remove(\"active\");\n                }\n                let newPage = document.querySelector(`div.${firstClassWord}-page_main-content_paginator div[data-index=\"${outOfBounds ? 0 : activeIndex + 1}\"]`);\n                if (!newPage.classList.contains(\"active\")) {\n                    newPage.classList.add(\"active\");\n                }\n                this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n            }\n        });\n    }\n\n    /**\n     * Метод для навешивания логики на троеточия в пагинаторе \n     * @param prevButton стрелка влево\n     * @param nextButton стрелка вправо\n     * @param firstClassWord название элемента класса (чтобы динамически подставить в поиск по классу) (tasks и т.д.)\n     * @param actualData нужно для обновления данных в таблице\n     * @param dataType тип данных\n     * @param itemIsTask элемент является заданием\n     */\n    initDotsButtons(prevDots: any, nextDots: any, firstClassWord: string, actualData: paginatorItem, dataType: chunkType, itemIsTask: boolean) {\n\n        //ивент лисенер на перемещение на 5 страниц влево\n        prevDots.addEventListener(\"click\", () =\u003e {\n            let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n            let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n            if (activePage) {\n                let activeIndex = Number(activePage.dataset[\"index\"]);\n\n                let outOfBounds = false;\n\n                //чтобы не выйти за границы страниц, проверяем\n                if ((activeIndex - 5) \u003c 0) {\n                    outOfBounds = true;\n                }\n\n                if (activePage.classList.contains(\"active\")) {\n                    activePage.classList.remove(\"active\");\n                }\n\n                //ищем либо страницу по индексу -5 от текущей, либо первую (если вышли за границы)\n                let newPage = document.querySelector(`div.${firstClassWord}-page_main-content_paginator div[data-index=\"${outOfBounds ? 0 : activeIndex - 5}\"]`);\n                if (!newPage.classList.contains(\"active\")) {\n                    newPage.classList.add(\"active\");\n                }\n                this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n            }\n        });\n\n        //то же самое, только для стрелки вправо\n        nextDots.addEventListener(\"click\", () =\u003e {\n            let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n            let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n            if (activePage) {\n                let activeIndex = Number(activePage.dataset[\"index\"]);\n\n                let outOfBounds = false;\n\n                //чтобы не выйти за границы страниц, проверяем\n                if ((activeIndex + 5) \u003e pages.length - 1) {\n                    outOfBounds = true;\n                }\n\n                if (activePage.classList.contains(\"active\")) {\n                    activePage.classList.remove(\"active\");\n                }\n\n                //ищем либо страницу по индексу +5 от текущей, либо последнюю (если вышли за границы)\n                let newPage = document.querySelector(`div.${firstClassWord}-page_main-content_paginator div[data-index=\"${outOfBounds ? pages.length - 1 : activeIndex + 5}\"]`);\n                if (!newPage.classList.contains(\"active\")) {\n                    newPage.classList.add(\"active\");\n                }\n                this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n            }\n        });\n    }\n\n    /**\n     * Метод для фильтрации и отрисовки элементов пагинатора\n     * @param paginator ссылка на DOM-элемент, в котором происходит отрисовка\n     * @param dataType тип данных\n     * @param userId в случае указания будет происходить отрисовка задач определенного сотрудника из раздела Задачи -\u003e Отдел\n     */\n    setPaginator(paginator: any, dataType: chunkType, userId?: string) {\n\n        console.log(dataType);\n\n        const itemIsTask = [chunkType.ACTUAL_TASKS, chunkType.ALL, chunkType.IN_PROGRESS, chunkType.DOCS_TASKS, chunkType.OUTGOING_TASKS, chunkType.NULL].indexOf(dataType) !== -1;\n        const itemIsDocument = [chunkType.LNA_DOCS, chunkType.PERSONAL_DOCS, chunkType.PERSONAL].indexOf(dataType) !== -1;\n        if (itemIsTask) {\n            userStorageManager.serializeFilters(FilterType.TASKS);\n        } else if (itemIsDocument) {\n            userStorageManager.serializeFilters(FilterType.DOCUMENTS);\n        } else if (dataType === chunkType.BUSINESS_TRIPS) {\n            userStorageManager.serializeFilters(FilterType.BUSINESS_TRIPS);\n        } else if (dataType === chunkType.VACATIONS) {\n            userStorageManager.serializeFilters(FilterType.VACATIONS);\n        };\n\n        this.paginator = paginator;\n        paginator.dataset.dataType = dataType;\n        this.dataType = dataType;\n        const paginatorClass = Array.from(paginator.classList)[0];\n        const oldPages = paginator.querySelectorAll(`.${paginatorClass} .paginator-item`);\n        //кнопка листания влево\n        const prevButton = paginator.querySelector(\".prev-button\");\n        //кнопка листания вправо\n        const nextButton = paginator.querySelector(\".next-button\");\n        const objToRender = \u003cpaginatorItem\u003ethis[dataType as pageKey] || undefined;\n\n        if (!objToRender || !objToRender.globalData || objToRender.globalData.length \u003c 1) {\n            console.log(\"no paginator obj\")\n            this.handleEmptyPaginator(paginator, dataType);\n            return;\n        };\n\n        let actualData = objToRender;\n\n        switch (dataType) {\n            case chunkType.PERSONAL:\n                actualData = this.filterDocs(objToRender);\n                break;\n            case chunkType.PERSONAL_DOCS:\n                actualData = this.filterDocs(objToRender);\n                break;\n            case chunkType.LNA_DOCS:\n                actualData = this.filterDocs(objToRender);\n                break;\n            case chunkType.BUSINESS_TRIPS:\n                actualData = this.filterBusinessTrips(objToRender);\n                break;\n            case chunkType.VACATIONS:\n                actualData = this.filterVacations(objToRender);\n                break;\n        };\n\n        if (!actualData || !actualData.globalData || actualData.globalData.length \u003c 1) {\n            this.handleEmptyPaginator(paginator, dataType);\n            return;\n        };\n\n        const pagesCount = actualData.globalData.length;\n        let i = 0;\n\n        oldPages.forEach((page: any) =\u003e page.remove());\n\n        let firstClassWord = this.getFirstClassWord(dataType, itemIsTask);\n\n        //инициализируем ивент лисенеры для стрелок в пагинаторе\n        this.initArrowButtons(prevButton, nextButton, firstClassWord, actualData, dataType, itemIsTask);\n\n        //добавляем первую страницу\n        const firstPage = domManager.createComponent(\"div\", `${firstClassWord}-page_main-content_paginator_item paginator-item`);\n        //записываем индекс\n        firstPage.dataset[\"index\"] = i++;\n        //делаем первую страницу активной\n        firstPage.classList.add(\"active\");\n        //заполняем текст\n        firstPage.textContent = i;\n        //добавляем ивент лисенер на смену страницы\n        firstPage.addEventListener(\"click\", () =\u003e {\n            //меняем статус страницы на выбранную\n            let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n            for (let page of pages) {\n                if (page.classList.contains(\"active\")) {\n                    page.classList.remove(\"active\");\n                }\n            }\n            firstPage.dataset[\"active\"] = true;\n            firstPage.classList.add(\"active\");\n            //обновляем данные в таблице\n            this.updatePaginator(actualData.globalData[0].data, actualData.rootToRender, dataType, itemIsTask);\n        });\n        //вставляем элемент в dom\n        prevButton.after(firstPage);\n\n        let prevElement = firstPage;\n\n        //элемент точек для быстрого перехода по страницам (точки слева)\n        const prevDots = domManager.createComponent(\"div\", `${firstClassWord}-page_main-content_paginator_dots_prev paginator-item hidden`);\n        prevDots.textContent = \"...\";\n        firstPage.after(prevDots);\n        prevElement = prevDots;\n\n        //элемент точек для быстрого перехода по страницам (точки справа)\n        const nextDots = domManager.createComponent(\"div\", `${firstClassWord}-page_main-content_paginator_dots_next paginator-item hidden`);\n        nextDots.textContent = \"...\";\n\n        //инициализируем ивент лисенеры для стрелок в пагинаторе\n        this.initDotsButtons(prevDots, nextDots, firstClassWord, actualData, dataType, itemIsTask);\n\n        //создаём остальные страницы пагинатора\n        for (i; i \u003c pagesCount; i++) {\n            const newPage = domManager.createComponent(\"div\", `${firstClassWord}-page_main-content_paginator_item paginator-item`);\n            newPage.dataset[\"index\"] = i;\n            newPage.textContent = i + 1;\n            newPage.addEventListener(\"click\", () =\u003e {\n                //меняем статус страницы на выбранную\n                let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                for (let page of pages) {\n                    if (page.classList.contains(\"active\")) {\n                        page.classList.remove(\"active\");\n                    }\n                }\n                newPage.classList.add(\"active\");\n\n                //обновляем данные в таблице\n                this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n            });\n            prevElement.after(newPage);\n            prevElement = newPage;\n        };\n\n        prevElement.before(nextDots);\n\n        paginator.dataset.dataType = dataType;\n\n        //скрываем пагинатор, если страница всего одна (для этого условие на количество страниц)\n        if (pagesCount \u003e 1) {\n            if (paginator.classList.contains(\"hidden\")) {\n                paginator.classList.remove(\"hidden\");\n            };\n        }\n\n        //скрываем лишние страницы, если их больше 6 (показываем только первые 5 и последнюю)\n        if (pagesCount \u003e 6) {\n            let allPages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n            let i = 0;\n            for (let page of allPages) {\n                i++;\n                if (i \u003e 5 \u0026\u0026 i !== pagesCount) {\n                    if (!page.classList.contains(\"hidden\")) {\n                        page.classList.add(\"hidden\");\n                    }\n                }\n            }\n            nextDots.classList.remove(\"hidden\");\n        }\n\n        if (this.personnelDocumentsTableContent.classList.contains(\"hidden\") \u0026\u0026 itemIsDocument) {\n            this.personnelDocumentsTableContent.classList.remove(\"hidden\");\n        }\n\n        if (!this.emptyDocumentsTemplate.classList.contains(\"hidden\") \u0026\u0026 itemIsDocument) {\n            this.emptyDocumentsTemplate.classList.add(\"hidden\");\n        };\n\n        this.currentState = dataType;\n        this.updatePaginator(actualData.globalData[0].data, actualData.rootToRender, dataType, itemIsTask);\n    };\n\n    /**\n     * Метод для проверки состояния задачи при её открытии\n     * @param taskId идентификатор задачи\n     */\n    async checkTask(taskId: string): Promise\u003cboolean\u003e {\n        const currentTask = await System.processes._searchTasks().where(f =\u003e f.__id.eq(taskId)).first();\n\n        return !currentTask || [ProcessTaskState.closed, ProcessTaskState.cancel].indexOf(currentTask.data.state!) !== -1;\n    };\n\n    /**\n     * Метод для вывода имени класса объекта (чтобы искать данные по классу)\n     * @param elementType тип объекта\n     * @param itemIsTask объект является задачей\n     */\n    getFirstClassWord(elementType: chunkType, itemIsTask: boolean) {\n        let firstClassWord = \"\";\n        if (itemIsTask) {\n            firstClassWord = \"tasks\";\n        };\n\n        if (!itemIsTask) {\n            switch (elementType) {\n                case chunkType.PERSONAL:\n                case chunkType.PERSONAL_DOCS:\n                case chunkType.LNA_DOCS:\n                    firstClassWord = \"documents\";\n                    break;\n                case chunkType.BUSINESS_TRIPS:\n                    firstClassWord = \"business_trips\";\n                    break;\n                case chunkType.VACATIONS:\n                    firstClassWord = \"vacations\";\n                    break;\n            };\n        };\n\n        return firstClassWord;\n    }\n\n    /**\n     * Метод для обновления вывода страниц пагинатора. Если страниц более 6, то выводим только первую, последнюю и по 2 слева и справа от активной\n     * @param firstClassWord название общего класса css. Например tasks \n     */\n    changePaginatorPages(firstClassWord: string) {\n        //обновляем пагинатор. Если страниц более 6, то выводим только первую, последнюю и по 2 слева и справа от активной\n        let paginatorPages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n        if (paginatorPages) {\n            //активная страница\n            let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n            //если страниц больше 6\n            if (activePage \u0026\u0026 paginatorPages.length \u003e 6) {\n                //индекс активной страницы\n                let activeIndex = Number(activePage.dataset[\"index\"]);\n                //массив допустимых к выводу индексов\n                let acceptedIndexes: number[] = [\n                    0,\n                    paginatorPages.length - 1,\n                    activeIndex,\n                    activeIndex - 2 \u003e= 0 ? activeIndex - 2 : activeIndex + 4,\n                    activeIndex - 1 \u003e= 0 ? activeIndex - 1 : activeIndex + 3,\n                    activeIndex + 2 \u003c= paginatorPages.length - 1 ? activeIndex + 2 : activeIndex - 4,\n                    activeIndex + 1 \u003c= paginatorPages.length - 1 ? activeIndex + 1 : activeIndex - 3,\n                ];\n\n                //скрываем или открываем страницы\n                for (let page of paginatorPages) {\n                    //@ts-ignore\n                    if (acceptedIndexes.includes(Number(page.dataset[\"index\"]))) {\n                        if (page.classList.contains(\"hidden\")) {\n                            page.classList.remove(\"hidden\");\n                        }\n                    } else {\n                        if (!page.classList.contains(\"hidden\")) {\n                            page.classList.add(\"hidden\");\n                        }\n                    }\n                }\n\n                //выбираем, показывать ли три точки\n                if (paginatorPages.length \u003e 6) {\n                    let prevDots = document.querySelector(`.${firstClassWord}-page_main-content_paginator_dots_prev`);\n                    let nextDots = document.querySelector(`.${firstClassWord}-page_main-content_paginator_dots_next`);\n\n                    //если не видим вторую страницу, значит выводим три точки\n                    //@ts-ignore\n                    if (!acceptedIndexes.includes(1)) {\n                        if (prevDots \u0026\u0026 prevDots.classList.contains(\"hidden\")) {\n                            prevDots.classList.remove(\"hidden\");\n                        }\n                    } else {\n                        if (prevDots \u0026\u0026 !prevDots.classList.contains(\"hidden\")) {\n                            prevDots.classList.add(\"hidden\");\n                        }\n                    }\n\n                    //если не видим предпоследнюю страницу, значит выводим три точки\n                    //@ts-ignore\n                    if (!acceptedIndexes.includes(paginatorPages.length - 2)) {\n                        if (nextDots \u0026\u0026 nextDots.classList.contains(\"hidden\")) {\n                            nextDots.classList.remove(\"hidden\");\n                        }\n                    } else {\n                        if (nextDots \u0026\u0026 !nextDots.classList.contains(\"hidden\")) {\n                            nextDots.classList.add(\"hidden\");\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Метод для отрисовки объектов в пагинаторе\n     * @param elementsToRender массив с элементами для отрисовки\n     * @param rootToRender сслыка на DOM-элемент, в котором происходит отрисовка\n     * @param elementType тип элементов\n     * @param itemIsTask признак, что тип элементов - задачи (отличается логика отрисовки)\n     */\n    updatePaginator(elementsToRender: dataUnion[], rootToRender: any, elementType: chunkType, itemIsTask: boolean) {\n        let templateToRender: any;\n        console.log('update');\n        rootToRender.innerHTML = \"\";\n\n        let firstClassWord = this.getFirstClassWord(elementType, itemIsTask);\n\n        //обновляем пагинатор. Если страниц более 6, то выводим только первую, последнюю и по 2 слева и справа от активной\n        this.changePaginatorPages(firstClassWord);\n\n        if (itemIsTask) {\n            templateToRender = document.querySelector(\".tasks-page_main-content_table-item_template\");\n            const mobileTemplateToRender = document.querySelector(\".tasks-page_main-content_mobile_container-item_template\");\n            this.mobileTasksTableContent.innerHTML = \"\";\n\n            for (let item of elementsToRender) {\n                const newRow = this.getElementRow(\u003ctaskData\u003eitem, templateToRender, elementType, itemIsTask);\n                const newMobileRow = this.getElementRow(\u003ctaskData\u003eitem, mobileTemplateToRender, elementType, itemIsTask, true);\n                domManager.renderComponent(rootToRender, newRow);\n                domManager.renderComponent(this.mobileTasksTableContent, newMobileRow);\n                newRow.addEventListener(\"click\", () =\u003e {\n                    let i = 0\n\n                    const handleTask = window.setInterval(async () =\u003e {\n                        const taskClosed = await this.checkTask(item.id);\n\n                        if (i \u003e= 60) {\n                            window.clearInterval(handleTask);\n                        };\n\n                        if (taskClosed) {\n                            window.clearInterval(handleTask)\n                            await getOrRefreshData(true, true);\n                            this.setPaginator(this.paginator, elementType);\n                            const tasksCounter = document.querySelector(\".left-menu_item[data-menu-item='tasks'] .left-menu_item-counter\");\n                            const tasksCount = [].concat.apply([], [...this.actualTasksChunks.globalData].map(item =\u003e [...item.data])).length;\n                            tasksCounter.textContent = tasksCount;\n                        };\n\n                        i++;\n                    }, 1000)\n                });\n            };\n        } else {\n            switch (elementType) {\n                case chunkType.PERSONAL:\n                case chunkType.PERSONAL_DOCS:\n                case chunkType.LNA_DOCS:\n                    templateToRender = document.querySelector(\".documents-page_main-content_table-item_template\");\n                    this.personnelDocumentsTable.innerHTML = \"\";\n                    for (let item of elementsToRender) {\n                        const newRow = this.getElementRow(item, templateToRender, elementType, itemIsTask);\n                        domManager.renderComponent(rootToRender, newRow);\n                    };\n                    break;\n                case chunkType.BUSINESS_TRIPS:\n                    templateToRender = document.querySelector(\".business_trips-page_main-content_table-item_template\");\n                    this.businessTripsTable.innerHTML = \"\";\n\n                    for (let item of elementsToRender) {\n                        const newRow = this.getElementRow(item, templateToRender, elementType, itemIsTask);\n                        domManager.renderComponent(rootToRender, newRow);\n                    };\n\n                    break;\n                case chunkType.VACATIONS:\n                    templateToRender = document.querySelector(\".vacations-page_main-content_table-item_template\");\n                    this.vacationsTable.innerHTML = \"\";\n\n                    for (let item of elementsToRender) {\n                        const newRow = this.getElementRow(item, templateToRender, elementType, itemIsTask);\n                        domManager.renderComponent(rootToRender, newRow);\n                    };\n                    break;\n            };\n        };\n    };\n\n    /**\n     * Создаёт и возвращает элемент в пагинаторе\n     * @param item объект с данными\n     * @param template шаблон DOM-элемента\n     * @param itemType тип элемента\n     * @param isTask признак, что элемент является задачей\n     * @param isMobile признак, что отрисовка происходит для мобильной версии\n     * @return DOM-элемент\n     */\n    getElementRow(item: dataUnion, template: any, itemType: chunkType, isTask = false, isMobile = false): any {\n        let itemContent: any;\n        let itemRow: any;\n        let itemName: any;\n        let itemStatus: any;\n        let itemStart: any;\n        let itemEnd: any;\n        let itemTypeEmployment: any;\n\n        if (isTask) {\n            item = \u003ctaskData\u003eitem;\n            const taskElementContent = template.content.cloneNode(true);\n            const taskItemName = taskElementContent.querySelector(\".tasks-name\");\n            const taskItemStatus = taskElementContent.querySelector(\".tasks-page_main-content_table-item-section_status\");\n            const taskElementItem = taskElementContent.querySelector(\".tasks-page_main-content_table-item\") || taskElementContent.querySelector(\".tasks-page_main-content_mobile_container-item\");\n\n            taskItemName.textContent = item.name;\n            taskItemStatus.textContent = item.status;\n            taskElementItem.href = `${userStorageManager.baseUrl}/_portal/kedo_ext/my_profile(p:task/${item.id})`;\n            taskElementItem.dataset.taskType = item.task_type;\n\n            if (isMobile) {\n                return taskElementItem;\n            } else {\n                const taskItemAuthor = taskElementContent.querySelector(\".task-author\");\n                const taskItemCreatedAt = taskElementContent.querySelector(\".task-created\");\n\n                taskItemAuthor.textContent = item.author;\n                taskItemCreatedAt.textContent = item.due_date;\n\n                return taskElementItem;\n            };\n        } else {\n            item = \u003cobjData\u003eitem;\n            let [startDay, endDay, startMonth, endMonth, startYear, endYear]: any[] = [];\n            switch (itemType) {\n                case chunkType.PERSONAL:\n                case chunkType.LNA_DOCS:\n                case chunkType.PERSONAL_DOCS:\n                    itemContent = template.content.cloneNode(true);\n                    itemRow = itemContent.querySelector(\".documents-page_main-content_table-item\");\n                    itemName = itemRow.querySelector(\".document-name\");\n                    const itemCreated = itemRow.querySelector(\".document-created\");\n                    itemStatus = itemRow.querySelector(\".documents-page_main-content_table-item-section_status\");\n\n                    itemName.textContent = item.name;\n                    try {\n                        //@ts-ignore\n                        itemCreated.textContent = `${item.created_at.day} ${monthReference[item.created_at.month.toString()].toLowerCase()}, ${item.created_at.year}г., ${item.created_at.hours}:${item.created_at.minutes.toString().length \u003c 2 ? \"0\" + item.created_at.minutes.toString() : item.created_at.minutes.toString()} `\n                    } catch (e) {\n                        //@ts-ignore\n                        itemCreated.textContent = `${item.created_at.day} ${monthReference[item.created_at.month.toString()]}, ${item.created_at.year}г., ${item.created_at.hours}:${item.created_at.minutes.toString().length \u003c 2 ? \"0\" + item.created_at.minutes.toString() : item.created_at.minutes.toString()} `\n                    }\n                    itemStatus.textContent = item.status;\n\n                    itemRow.href = item.link;\n                    return itemRow;\n                case chunkType.BUSINESS_TRIPS:\n                    itemContent = template.content.cloneNode(true);\n                    itemRow = itemContent.querySelector(\".business_trips-page_main-content_table-item\");\n                    itemName = itemRow.querySelector(\".business_trips-name\");\n                    itemStatus = itemRow.querySelector(\".business_trips-page_main-content_table-item-section_status\");\n                    itemStart = itemRow.querySelector(\".business_trips-start\");\n                    itemEnd = itemRow.querySelector(\".business_trips-end\");\n\n                    itemName.textContent = item.name;\n                    itemStatus.textContent = item.status;\n                    [startDay, startMonth, startYear] = item.start_date ? item.start_date.split(\".\") : [\"\", \"\", \"\"];\n                    [endDay, endMonth, endYear] = item.end_date ? item.end_date.split(\".\") : [\"\", \"\", \"\"];\n                    try {\n                        //@ts-ignore\n                        itemStart.textContent = `${startDay} ${monthReference[startMonth.replace(\"0\", \"\")].toLowerCase()}, ${startYear}г., ${(item.start_date_obj as TDatetime).hours}:${(item.start_date_obj as TDatetime).minutes.toString().length \u003c 2 ? \"0\" + (item.start_date_obj as TDatetime).minutes.toString() : (item.start_date_obj as TDatetime).minutes.toString()} `\n                        //@ts-ignore\n                        itemEnd.textContent = `${endDay} ${monthReference[endMonth.replace(\"0\", \"\")].toLowerCase()}, ${endYear}г., ${(item.end_date_obj as TDatetime).hours}:${(item.end_date_obj as TDatetime).minutes.toString().length \u003c 2 ? \"0\" + (item.end_date_obj as TDatetime).minutes.toString() : (item.end_date_obj as TDatetime).minutes.toString()} `\n                    } catch (e) {\n                        //@ts-ignore\n                        itemStart.textContent = `${startDay} ${monthReference[startMonth.replace(\"0\", \"\")]}, ${startYear}г., ${(item.start_date_obj as TDatetime).hours}:${(item.start_date_obj as TDatetime).minutes.toString().length \u003c 2 ? \"0\" + (item.start_date_obj as TDatetime).minutes.toString() : (item.start_date_obj as TDatetime).minutes.toString()} `\n                        //@ts-ignore\n                        itemEnd.textContent = `${endDay} ${monthReference[endMonth.replace(\"0\", \"\")]}, ${endYear}г., ${(item.end_date_obj as TDatetime).hours}:${(item.end_date_obj as TDatetime).minutes.toString().length \u003c 2 ? \"0\" + (item.end_date_obj as TDatetime).minutes.toString() : (item.end_date_obj as TDatetime).minutes.toString()} `\n                    }\n                    itemRow.href = item.link;\n                    return itemRow;\n                case chunkType.VACATIONS:\n                    itemContent = template.content.cloneNode(true);\n                    itemRow = itemContent.querySelector(\".vacations-page_main-content_table-item\");\n                    itemName = itemRow.querySelector(\".vacations-name\");\n                    itemStatus = itemRow.querySelector(\".vacations-page_main-content_table-item-section_status\");\n                    itemStart = itemRow.querySelector(\".vacations-start\");\n                    itemEnd = itemRow.querySelector(\".vacations-end\");\n                    itemTypeEmployment = itemRow.querySelector(\".vacations-type-employment\");\n\n                    itemName.textContent = item.name;\n                    itemStatus.textContent = item.status;\n                    itemTypeEmployment.textContent = item.type_employment;\n                    [startDay, startMonth, startYear] = item.start_date ? item.start_date.split(\".\") : [\"\", \"\", \"\"];\n                    [endDay, endMonth, endYear] = item.end_date ? item.end_date.split(\".\") : [\"\", \"\", \"\"];\n                    //@ts-ignore\n                    itemStart.textContent = `${startDay} ${monthReference[startMonth.replace(\"0\", \"\")].toLowerCase()}, ${startYear}г., ${(item.start_date_obj as TDatetime).hours}:${(item.start_date_obj as TDatetime).minutes.toString().length \u003c 2 ? \"0\" + (item.start_date_obj as TDatetime).minutes.toString() : (item.start_date_obj as TDatetime).minutes.toString()} `\n                    //@ts-ignore\n                    itemEnd.textContent = `${endDay} ${monthReference[endMonth.replace(\"0\", \"\")].toLowerCase()}, ${endYear}г., ${(item.end_date_obj as TDatetime).hours}:${(item.end_date_obj as TDatetime).minutes.toString().length \u003c 2 ? \"0\" + (item.end_date_obj as TDatetime).minutes.toString() : (item.end_date_obj as TDatetime).minutes.toString()} `\n\n                    itemRow.href = item.link;\n                    return itemRow;\n            };\n        }\n    };\n\n    /**\n     * Временно не используется\n     */\n    updateChunks(elements: dataUnion[], pageChunkType: chunkType, userId?: string) {\n        let propToUpdate: paginatorItem | undefined;\n\n        if (pageChunkType === chunkType.SUB_TASKS) {\n            propToUpdate = this.subordinateTasksChunks.find(obj =\u003e obj.userData.userId === userId)?.tasks;\n        } else {\n            //@ts-ignore\n            propToUpdate = this[pageChunkType as pageKey];\n        };\n\n        let rootToRender: any;\n\n        switch (pageChunkType) {\n            case chunkType.ACTUAL_TASKS:\n            case chunkType.ALL:\n            case chunkType.IN_PROGRESS:\n            case chunkType.DOCS_TASKS:\n            case chunkType.LNA:\n            case chunkType.OUTGOING_TASKS:\n            case chunkType.SUB_TASKS:\n                rootToRender = this.tasksTable;\n                break;\n            case chunkType.PERSONAL:\n            case chunkType.LNA_DOCS:\n            case chunkType.PERSONAL_DOCS:\n                rootToRender = this.personnelDocumentsTable;\n                break;\n        };\n\n        if (propToUpdate) {\n            const oldItems = propToUpdate.globalData;\n            propToUpdate = this.sliceToChunks([...oldItems, ...elements], 10, rootToRender, pageChunkType);\n        };\n    };\n\n    /**\n     * Метод для заполнения свойств экземепляра класса\n     * @param elements массив с данными\n     * @param pageChunkType тип данных\n     * @param userData при передаче параметра данные заполняются в сотруднике отдела в разделе Задачи -\u003e Отдел\n     */\n    setChunks(elements: dataUnion[], pageChunkType: chunkType, userData?: userTaskData) {\n        if (userData) {\n            const userTasks = this.subordinateTasksChunks.find(obj =\u003e obj.userData.userId === userData.userId);\n\n            if (userTasks) {\n                userTasks.tasks = this.sliceToChunks(elements, 10, this.tasksTable, pageChunkType);\n            } else {\n                const newUserObj: subordinateUserTasks = {\n                    userData,\n                    tasks: this.sliceToChunks(elements, 10, this.tasksTable, pageChunkType)\n                };\n                this.subordinateTasksChunks.push(newUserObj);\n            };\n        } else {\n            let rootToRender: any;\n\n            switch (pageChunkType) {\n                case chunkType.ACTUAL_TASKS:\n                case chunkType.ALL:\n                case chunkType.IN_PROGRESS:\n                case chunkType.DOCS_TASKS:\n                case chunkType.LNA:\n                case chunkType.OUTGOING_TASKS:\n                case chunkType.SUB_TASKS:\n                    rootToRender = this.tasksTable;\n                    break;\n                case chunkType.PERSONAL:\n                case chunkType.PERSONAL_DOCS:\n                case chunkType.LNA_DOCS:\n                    rootToRender = this.personnelDocumentsTable;\n                    break;\n                case chunkType.BUSINESS_TRIPS:\n                    rootToRender = this.businessTripsTable;\n                    break;\n                case chunkType.VACATIONS:\n                    rootToRender = this.vacationsTable;\n                    break;\n            };\n            //@ts-ignore\n            this[pageChunkType as pageKey] = this.sliceToChunks(elements, 10, rootToRender, pageChunkType);\n        };\n    };\n};\n\n/**\n * Класс, методы которого используются для сериализации данных\n * @property userDataManager экземпляр класса UserDataManager\n * @property systemDataManager экземпляр класса SystemDataManager\n */\nclass Serializer {\n    userDataManager: UserDataManager;\n    systemDataManager: SystemDataManager;\n\n    setManagers(dataManager: UserDataManager, systemDataManager: SystemDataManager) {\n        this.userDataManager = dataManager;\n        this.systemDataManager = systemDataManager;\n    };\n\n    /**\n     * Приводит ФИО к строчному формату Фамилия И.О.\n     * @param user пользователь\n     */\n    serializeName(user: UserItem): string {\n        return user.data.fullname \u0026\u0026 user.data.fullname.lastname \u0026\u0026 user.data.fullname.middlename\n            ? `${user.data.fullname.lastname} ${user.data.fullname.firstname[0]}. ${user.data.fullname.middlename[0]}.`\n            : user.data.fullname \u0026\u0026 user.data.fullname.lastname ? `${user.data.fullname.lastname} ${user.data.fullname.firstname[0]}.` : user.data.__name;\n    };\n\n    /**\n     * Преобразует объект к типу objData\n     * @param item объект приложения, унаследованный от BaseItem\n     */\n    serializeObjData(item: any): objData {\n        const linkCode = item.code === \"holidays\" ? \"vacations\"\n            : item.code === \"business_trips\" ? \"businesstrip_requests\" : item.code;\n        const linkNs = item.code === \"holidays\" ? \"absences\"\n            : item.code === \"business_trips\" ? \"business_trips\" : item.namespace;\n        const itemStatus = item.data.kedo_status ? this.systemDataManager.statuses.find(s =\u003e s.id === item.data.kedo_status.id) : undefined;\n        const referenceCity = userDataManager.businessTripsRefs.find(city =\u003e city.objId === item.id);\n        const dateArray = item.code === \"overtime_work\" ? item.data.start_date ? new Datetime(item.data.start_date).format(\"DD.MM.YYYY\").split(\".\").map(Number) : item.data.date ? new Datetime(item.data.date).format(\"DD.MM.YYYY\").split(\".\").map(Number) : undefined : undefined;\n        const employmentPlacement = item.data.employment_placement || item.data.employment_place || item.data.employment_directory;\n\n        return \u003cobjData\u003e{\n            id: item.id,\n            name: item.data.__name,\n            code: item.code === \"business_trips\" ? \"businesstrip_requests\" : item.code === \"holidays\" ? \"vacations\" : item.code,\n            ns: item.code === \"business_trips\" ? item.code : item.code === \"holidays\" ? \"absences\" : item.namespace,\n            status: itemStatus ? itemStatus.data.name : item.data.__status \u0026\u0026 item.data.__status.status ? item.data.__status.status.name : \"Не определён\",\n            status_code: itemStatus ? itemStatus.data.code : item.data.__status \u0026\u0026 item.data.__status.status ? item.data.__status.status.code : \"not implemented\",\n            business_type: issuesWidgetCodes.indexOf(item.code) === -1 ? \"personnel_document\" : \"issue\",\n            item_type: item.code === \"business_trips\" ? DocType.BUSINESS_TRIP\n                : item.code === \"holidays\" ? DocType.VACATION\n                    : issuesWidgetCodes.indexOf(item.code) === -1 ? DocType.PERSONAL : DocType.ISSUE,\n            render_zone: issuesWidgetCodes.indexOf(item.code) === -1 ? \"main-page_personnel-events-widget_container\" : \"main-page_issues-widget_container\",\n            created_at: item.code === \"overtime_work\" ? new Datetime(item.data.__createdAt) : item.data.__createdAt,\n            link: `${window.location.href}(p:item/${linkNs}/${linkCode}/${item.id})`,\n            start_date: item.code === \"business_trips\" ? item.data.start_date_string : item.code === \"holidays\" ? item.data.start_string || item.data.rest_day_first \u0026\u0026 item.data.rest_day_first.format(\"DD.MM.YYYY\") : item.code === \"overtime_work\" \u0026\u0026 item.data.start_date_string ? item.data.start_date_string.split(\",\").length \u003e 1 ? item.data.start_date_string.split(\",\")[0] : item.data.start_date_string : item.data.date_start ? item.data.date_start.format(\"DD.MM.YYYY\") : item.data.__createdAt.format ? item.data.__createdAt.format(\"DD.MM.YYYY\") : undefined,\n            end_date: item.code === \"business_trips\" ? item.data.end_date_string : item.code === \"holidays\" ? item.data.end_string || item.data.rest_day_second \u0026\u0026 item.data.rest_day_second.format(\"DD.MM.YYYY\") || item.data.rest_day_first \u0026\u0026 item.data.rest_day_first.format(\"DD.MM.YYYY\") : item.data.date_end ? item.data.date_end.format(\"DD.MM.YYYY\") : item.data.date_start ? item.data.date_start.format(\"DD.MM.YYYY\") : item.data.__createdAt.format ? item.data.__createdAt.format(\"DD.MM.YYYY\") : undefined,\n            start_date_obj: item.code === \"business_trips\" ? item.data.start_date : item.code === \"holidays\" ? item.data.start ?? item.data.rest_day_first : item.code === \"overtime_work\" \u0026\u0026 dateArray ? new TDate(dateArray[2], dateArray[1], dateArray[0]) : item.code === \"dismissal_app\" ? item.data.date_of_dismissal : item.data.date_start ?? item.data.__createdAt,\n            end_date_obj: item.code === \"business_trips\" ? item.data.end_date : item.code === \"holidays\" ? item.data.end ?? item.data.rest_day_second ?? item.data.rest_day_first : item.data.date_end ?? item.data.date_end ?? item.data.__createdAt,\n            vacation_type: item.code === \"holidays\" \u0026\u0026 item.data.type_of ? item.data.type_of.name : undefined,\n            vacation_code: item.code === \"holidays\" \u0026\u0026 item.data.type_of ? item.data.type_of.code : undefined,\n            duration: item.code === \"holidays\" ? item.data.amount_of_days : item.code === \"business_trips\" ? item.data.duration : undefined,\n            cityId: referenceCity ? referenceCity.cityId : undefined,\n            cityName: (referenceCity \u0026\u0026 systemDataManager.allCities) \u0026\u0026 systemDataManager.allCities.find(city =\u003e city.id === referenceCity.cityId) ? systemDataManager.allCities.find(city =\u003e city.id === referenceCity.cityId)!.name : undefined,\n            staffId: item.data.kedo_staff ? item.data.kedo_staff.id : undefined,\n            work_type: item.data.work_type || \"\",\n            type_employment: employmentPlacement ? this.systemDataManager.allEmploymentPlacements.find(employment =\u003e employment.id === employmentPlacement.id)?.data.__name : undefined,\n        };\n    };\n};\n\nclass DomManager {\n    constructor(userManager: UserStorageManager) {\n        this.userManager = userManager;\n        this.documentTemplate = undefined;\n        this.loader = undefined;\n        this.uploadableComponents = [];\n        this.parser = new DOMParser();\n        this.domLoaded = false;\n    };\n\n    parser: typeof DOMParser;\n    root: componentObj | undefined;\n    loader: componentObj | undefined;\n    userManager: UserStorageManager;\n    paginator: Paginator;\n    uploadableComponents: componentObj[];\n    headerPortalButton: componentObj;\n    documentTemplate: any | undefined;\n    domLoaded: boolean;\n\n    /**\n   * Надстройка на метдом document.createElement\n   *\n   * @param tag тип компонента\n   * @param cls класс компонента (можно передавать несколько, разделив пробелом)\n   * @param id идентификатор компонента\n   * @return созданный элемент\n   */\n    createComponent(tag: string, cls: string, id?: string): any {\n        const newElement = document.createElement(tag);\n\n        if (newElement.className.split(\" \").length \u003e 1) {\n            newElement.classlist = cls.split(\" \").map(c =\u003e {\n                return `.${c} `;\n            }).join(\" \").trim();\n        } else {\n            newElement.className = cls;\n        };\n\n        if (id) {\n            newElement.id = id;\n        };\n\n        return newElement;\n    };\n\n    /**\n     * Добавляет класс active к элементу\n     * @param element DOM-элемент\n     */\n    setActive(element: any) {\n        element.classList.add(\"active\");\n    };\n\n    /**\n     * Метод для изменения элемента (используется как конструктор для блоков класса .widget-item)\n     * @param element DOM-элемент\n     * @param elementData объект с данными для вставки в элемент\n     * @param setActive признак, что элементу нужно присвоить класс .active\n     */\n    processComponent(element: any, elementData: blockConstructor, setActive = false) {\n        const title = element.querySelector(`.${elementData.titleClass}`);\n        title.textContent = elementData.titleContent;\n        if (elementData.iconClass) {\n            const iconContainer = element.querySelector(`.${elementData.iconClass}`)\n            const svg = this.parser.parseFromString(elementData.iconContent, \"text/html\").body.firstChild;\n            iconContainer.append(svg);\n        };\n        if (elementData.extraContentClass) {\n            const extraContentContainer = element.querySelector(`.${elementData.extraContentClass}`);\n            extraContentContainer.textContent = elementData.extraContent;\n        };\n        if (elementData.status) {\n            const statusContainer = element.querySelector(\".status-name\");\n            statusContainer.textContent = elementData.status;\n        };\n        if (setActive) {\n            this.setActive(element);\n        };\n        if (elementData.link) {\n            element.href = elementData.link;\n        };\n    };\n\n    /**\n     * Метод для рендера элемента в определенной области DOM\n     * @param domElement контейнер, в который нужно вставить элемент\n     * @param elementToAppend элемент для вставки (может быть массивом с DOM-элементами)\n     * @param prepend признак, что вставка элементов должна происходить перед всеми остальными в контейнере\n     * @param elementData объект, который используется для отрисовки данных в методе this.processComponent\n     * @param setActive признак, что элементу нужно присвоить класс .active\n     * @param onclick функция без параметров, которую можно навесить на событиее click для вставляемого элемента\n     */\n    renderComponent(domElement: any, elementToAppend: any, prepend = false, elementData?: blockConstructor, setActive = false, onclick?: Function) {\n\n        if (elementData) {\n            this.processComponent(elementToAppend, elementData, setActive);\n        };\n        if (onclick) {\n            elementToAppend.addEventListener(\"click\", onclick);\n        };\n        if (prepend) {\n            if (Array.isArray(elementToAppend)) {\n                domElement.prepend(...elementToAppend);\n                return;\n            };\n            domElement.prepend(elementToAppend);\n        } else {\n            if (Array.isArray(elementToAppend)) {\n                domElement.append(...elementToAppend);\n                return;\n            };\n            domElement.appendChild(elementToAppend);\n        };\n    };\n\n    renderDocumentSection(refresh = false) {\n\n        this.paginator.personnelDocumentsTable = document.querySelector(\".documents-page_main-content_table-content\");\n        this.paginator.personnelDocumentsTableContent = document.querySelector(\".documents-page_main-content_table\");\n        this.paginator.emptyDocumentsTemplate = document.querySelector(\".documents-page_main-content_table-empty\");\n\n        this.paginator.setChunks(userDataManager.allUserDocs, chunkType.PERSONAL);\n        //this.paginator.setChunks(userDataManager.allUserDocs.filter(doc =\u003e doc.code == \"docs_lna\"), chunkType.LNA_DOCS);\n        //this.paginator.setChunks(userDataManager.allUserDocs.filter(doc =\u003e doc.code !== \"docs_lna\"), chunkType.PERSONAL_DOCS);\n\n        function expandMobileDocuments() {\n            const mobileFooterDocumentsTypes = document.querySelector(\".documents-page_main-content_mobile_footer\")\n            mobileFooterDocumentsTypes.classList.toggle(\"hidden\");\n        }\n\n        const docsStatusContainer = document.querySelector(\".documents-page_main-content_title_search-extend_input-status-values\");\n        const documentsSearchButton = document.querySelector(\".documents-search\");\n        const documentsFilterClearButton = document.querySelector(\".documents-reset\");\n        const documentsPaginator = document.querySelector(\".documents-page_main-content_paginator\");\n        const docsFilterButtons = document.querySelectorAll(\".documents-page_main-content_title-left .documents-page_main-content_title_tab\");\n        const docsFilterButtonsMobile = document.querySelectorAll(\".documents-page_main-content_mobile_footer-item:not(.mobile-docs-expand)\");\n        const restElements = document.querySelectorAll(\".documents-page_main-content_title_tab\");\n        const mobileExpandButton = document.querySelector(\".document-page_main-content_title_text\");\n        const mobileCloseExpandButton = document.querySelector(\".documents-page_main-content_mobile_footer-item\");\n\n        docsFilterButtons.forEach((node: any) =\u003e {\n            node.addEventListener(\"click\", () =\u003e {\n                this.paginator.handlePageChange(node, restElements);\n                this.paginator.setPaginator(documentsPaginator, node.dataset.dataType);\n            });\n        });\n        docsFilterButtonsMobile.forEach((node: any) =\u003e {\n            node.addEventListener(\"click\", () =\u003e {\n                this.paginator.setPaginator(documentsPaginator, node.dataset.dataType);\n                expandMobileDocuments();\n            });\n        });\n\n        refresh \u0026\u0026 refreshContainers([docsStatusContainer]) //statusContainer, statusContainerMobile \n\n        for (let status of systemDataManager.statuses) {\n            const newStatusItem = this.createComponent(\"div\", \"input-status-values_item search-item\");\n            newStatusItem.dataset.statusCode = status.data.code;\n            newStatusItem.textContent = status.data.name;\n\n            newStatusItem.addEventListener(\"click\", () =\u003e {\n                handleStatusChoice(newStatusItem)\n            });\n            this.renderComponent(docsStatusContainer, newStatusItem);\n        };\n\n        if (!Context.data.event_listeners_set) {\n            documentsSearchButton.addEventListener(\"click\", () =\u003e {\n                this.paginator.setPaginator(documentsPaginator, documentsPaginator.dataset.dataType);\n                const closeFiltersButton = documentsSearchButton.closest(\".common-content_title_search-extend\").querySelector(\".common-content_title_search-extend_title-img\");\n                closeFiltersButton.click();\n            });\n\n            documentsFilterClearButton.addEventListener(\"click\", () =\u003e {\n                userStorageManager.clearFilters(documentsFilterClearButton.dataset.reset);\n                const closeFiltersButton = documentsFilterClearButton.closest(\".common-content_title_search-extend\").querySelector(\".common-content_title_search-extend_title-img\");\n                closeFiltersButton.click();\n            });\n\n            [mobileExpandButton, mobileCloseExpandButton].forEach((button: any) =\u003e button.addEventListener(\"click\", expandMobileDocuments));\n\n            this.handleSearch(\"documents\");\n        };\n\n        if (this.paginator.personnelDocumentsChunks \u0026\u0026 this.paginator.personnelDocumentsChunks.globalData.length \u003e 0) {\n            this.paginator.setPaginator(documentsPaginator, chunkType.PERSONAL);\n        };\n\n        //!refresh \u0026\u0026 this.handleLoader(LoaderType.DOCUMENTS);\n    };\n\n    handleSearch(firstClassWord: string) {\n\n        let search = document.querySelector(`.${firstClassWord}-page_main-content_title_search-input`);\n        let searchExtend = document.querySelector(`.${firstClassWord}-page_main-content_title_search-extend_input`);\n\n        if (search \u0026\u0026 searchExtend) {\n            search.addEventListener(\"keyup\", () =\u003e {\n                let mainSearch = document.querySelector(`.${firstClassWord}-page_main-content_title_search-input`);\n                let searchExtend = document.querySelector(`.${firstClassWord}-page_main-content_title_search-extend_input`);\n                searchExtend.value = mainSearch.value;\n                const paginator = document.querySelector(`.${firstClassWord}-page_main-content_paginator`);\n                this.paginator.setPaginator(paginator, paginator.dataset.dataType);\n\n                if (searchExtend.value === \"\") {\n                    let resetButton = document.querySelector(`.${firstClassWord}-reset`);\n                    userStorageManager.clearFilters(resetButton.dataset.reset);\n                }\n            })\n        }\n    }\n\n    /**\n  * Включает/выключает анимацию загрузки страницы\n  * @param loader тип загрузчика, выборка по атрибуту data-loader\n  */\n    handleLoader(loaderType: LoaderType) {\n        const waitForLoader = window.setInterval(() =\u003e {\n            const loader = document.querySelector(`.kedo-loader-wrapper[data-loader=${loaderType}]`);\n            if (!loader) {\n                return\n            };\n            window.clearInterval(waitForLoader)\n            loader.classList.toggle(\"hidden\");\n\n        }, 100)\n        // console.log(`${loaderType} loading end`)\n    };\n}\n\n/**\n * Функция для сброса компонентов внутри контейнеров при обновлении данных страницы\n * @param containers массив с DOM-элементами\n * @param classToDelete при указании класса - удаляет элементы с подходящим классом внутри контейнера\n */\nfunction refreshContainers(containers: any[], classToDelete?: string): void {\n    if (classToDelete) {\n        Array.from(containers).forEach((container: any) =\u003e {\n            const nodesToDelete = container.querySelectorAll(`.${classToDelete}`);\n            nodesToDelete.forEach((node: any) =\u003e {\n                node.remove();\n            });\n        });\n\n        return;\n    };\n\n    containers.forEach((container: any) =\u003e {\n        container.innerHTML = \"\";\n    });\n};\n\n/**\n * Функция используется для получения всех динамических данных, связанных с пользователем (документы, задачи)\n * @param refresh признак того, что идет обновление данных\n * @param refreshTasks признак того, что нужно только обновление задач\n */\nasync function getOrRefreshData(refresh = false, refreshTasks = false): Promise\u003cvoid\u003e {\n    let userTasksObj: taskData[];\n\n    async function setOrRefreshTasks(): Promise\u003cvoid\u003e {\n\n        paginator.setChunks(userTasksObj.filter(task =\u003e task.task_type === TaskType.PERSONAL), chunkType.ALL);\n        paginator.setChunks(userTasksObj.filter(task =\u003e task.task_type === TaskType.OUTGOING), chunkType.OUTGOING_TASKS);\n        paginator.setChunks(userTasksObj.filter(task =\u003e task.is_personal \u0026\u0026 task.task_type === TaskType.PERSONAL), chunkType.DOCS_TASKS);\n        paginator.setChunks(userTasksObj.filter(task =\u003e (task.state === \"in_progress\" || task.state === \"assignment\") \u0026\u0026 task.task_type === TaskType.PERSONAL), chunkType.ACTUAL_TASKS);\n\n        if (refreshTasks) {\n            const taskTypeButtons = document.querySelectorAll(\".tasks-page_main-content_title-left .tasks-page_main-content_title_tab\");\n            let activeType = \u003cany\u003eArray.from(taskTypeButtons).find((button: any) =\u003e button.classList.contains(\"active\"));\n\n            if (activeType.dataset.dataType === \"actualTasksChunks\") {\n                activeType = \u003cany\u003eArray.from(document.querySelectorAll(\".tasks-page_main-content_task-types .task-list-type\")).find((button: any) =\u003e button.classList.contains(\"active\"));\n            }\n        };\n    };\n\n    domManager.paginator = paginator;\n\n    const defaultFilter: FilterClosure\u003cItemData\u003e = (f, g) =\u003e {\n        return g.and(\n            //@ts-ignore\n            f.__deletedAt.eq(null),\n            //@ts-ignore\n            f.staff.link(userDataManager.staff)\n        );\n    };\n\n    //!refresh \u0026\u0026 domManager.handleLoader(LoaderType.COMMON);\n\n    const allVacations = await Context.fields.vacations_app.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.kedo_staff.link(userDataManager.staff)\n    )).size(1000).all().then(res =\u003e res.map(item =\u003e serializer.serializeObjData(item))).then(res =\u003e res.sort((a, b) =\u003e {\n        if (!a.start_date_obj \u0026\u0026 !b.start_date_obj) {\n            return 0;\n        }\n\n        if (!a.start_date_obj) {\n            return 1;\n        }\n\n        if (!b.start_date_obj) {\n            return -1;\n        }\n\n        //@ts-ignore\n        if (a.start_date_obj.before(b.start_date_obj)) {\n            return -1;\n        }\n        //@ts-ignore\n        if (a.start_date_obj.after(b.start_date_obj)) {\n            return 1;\n        };\n        return 0;\n    }));\n\n    const allBusinessTripsObj = await Context.fields.business_trips_app.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.kedo_staff.link(userDataManager.staff)\n    )).size(1000).all();\n\n    const businessTripsRefs = await Promise.all(allBusinessTripsObj.map(obj =\u003e {\n        return obj.data.__sourceRef ? obj.data.__sourceRef.fetch() : undefined;\n    })).then(res =\u003e res.filter(obj =\u003e obj)).then(res =\u003e res.map(obj =\u003e {\n        return {\n            cityId: obj.data.destination_city ? obj.data.destination_city.id : undefined,\n            objId: obj.id\n        };\n    }));\n\n    userDataManager.businessTripsRefs = businessTripsRefs;\n\n    const allBusinessTrips = allBusinessTripsObj.map(item =\u003e serializer.serializeObjData(item)).sort((a, b) =\u003e {\n        //@ts-ignore\n        if (a.start_date_obj.before(b.start_date_obj)) {\n            return -1;\n        };\n        //@ts-ignore\n        if (a.start_date_obj.after(b.start_date_obj)) {\n            return 1;\n        };\n        return 0;\n    });\n\n    const [allMedicalRequests, allTransferApplications, allExecutionDuties, allDismissalApp, allEmployments] = await Promise.all([\n        Context.fields.medical_request_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n        Context.fields.transfer_application_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n        Context.fields.execution_duties_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n        Context.fields.dismissal_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n        Context.fields.employment_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n    ])\n\n    userDataManager.position = userDataManager.staff.data.position ? await userDataManager.staff.data.position.fetch() : undefined;\n\n    const allIssues = await Promise.all([\n        Context.fields.benefit_application_app.app.search().where(defaultFilter).size(1000).all(),\n        Context.fields.order_financial_assistance_app.app.search().where(defaultFilter).size(1000).all(),\n        Context.fields.certificate_app.app.search().where(defaultFilter).size(1000).all(),\n        Context.fields.category_assignment_app.app.search().where(defaultFilter).size(1000).all(),\n        Context.fields.employees_personal_data_app.app.search().where(defaultFilter).size(1000).all(),\n        Context.fields.free_from_app.app.search().where(defaultFilter).size(1000).all(),\n        Context.fields.application_for_the_transfer_of_salary_to_the_current_account_app.app.search().where(defaultFilter).size(1000).all(),\n        Context.fields.setlement_sheet_app.app.search().where(defaultFilter).size(1000).all()\n    ]);\n\n    const allIssuesObj: objData[] = [].concat.apply([], allIssues).map((item: any) =\u003e serializer.serializeObjData(item)).sort((a: objData, b: objData) =\u003e {\n        if (a.created_at.before(b.created_at)) {\n            return -1;\n        };\n        if (a.created_at.after(b.created_at)) {\n            return 1;\n        };\n        return 0;\n    });\n\n    //const personnelDocuments = [...allBusinessTrips, ...allVacations, ...allOvertimeWork, ...allDismissalApp, ...allExecutionDuties, ...allMedicalRequests, ...allTransferApplications, ...allEmployments].sort((a, b) =\u003e {\n    const personnelDocuments = [...allBusinessTrips, ...allVacations, ...allDismissalApp, ...allExecutionDuties, ...allMedicalRequests, ...allTransferApplications, ...allEmployments].sort((a, b) =\u003e {\n        let startObjA: TDatetime;\n        let startObjB: TDatetime;\n\n        if (!a.start_date_obj || !b.start_date_obj) {\n            return 0;\n        };\n        if (a.code === \"holidays\" || a.code === \"overtime_work\" || a.code === \"dismissal_app\") {\n            //@ts-ignore\n            startObjA = a.start_date_obj.asDatetime(new TTime());\n        } else {\n            //@ts-ignore\n            startObjA = a.start_date_obj;\n        };\n\n        if (b.code === \"holidays\" || b.code === \"overtime_work\" || b.code === \"dismissal_app\") {\n            //@ts-ignore\n            startObjB = b.start_date_obj.asDatetime(new TTime());\n        } else {\n            //@ts-ignore\n            startObjB = b.start_date_obj\n        };\n\n\n        if (startObjA.before(startObjB)) {\n            return -1;\n        };\n        if (startObjA.after(startObjB)) {\n            return 1;\n        };\n        return 0;\n    });\n\n    userDataManager.personnelDocuments = personnelDocuments;\n    //userDataManager.issues = allIssuesObj;\n    userDataManager.lastDocsForRender = [...userDataManager.personnelDocuments.filter(item =\u003e item.start_date_obj \u0026\u0026 item.start_date_obj.after(today.asDatetime(new TTime())) \u0026\u0026 item.status_code !== \"completed\").slice(0, 4), ...userDataManager.issues.slice(0, 4)];\n    userDataManager.vacations = allVacations;\n    userDataManager.businessTrips = allBusinessTrips;\n\n\n    // userDataManager.allUserDocs = [...allIssuesObj, ...personnelDocuments, ...userLna].sort((a: objData, b: objData) =\u003e {\n    //     if (a.created_at.before(b.created_at)) {\n    //         return 1;\n    //     };\n    //     if (a.created_at.after(b.created_at)) {\n    //         return -1;\n    //     };\n    //     return 0;\n    // });\n\n    userDataManager.allUserDocs = [...allIssuesObj, ...personnelDocuments].sort((a: objData, b: objData) =\u003e {\n        if (a.created_at.before(b.created_at)) {\n            return 1;\n        };\n        if (a.created_at.after(b.created_at)) {\n            return -1;\n        };\n        return 0;\n    });\n};\n\n/**\n * Функция используется для отрисовки и обновления компонентов после того, как все данные загрузились (userDataManager.allDocsLoaded = true)\n * @param refresh признако того, что идёт обновление данных\n */\nfunction renderOrRefreshComponents(refresh = false) {\n\n    if (!Context.data.event_listeners_set) {\n        window.setInterval(() =\u003e {\n            getOrRefreshData(true).then(_ =\u003e {\n                renderOrRefreshComponents(true);\n            });\n        }, 60000);\n    };\n\n    Context.data.event_listeners_set = true;\n};\n\nfunction setDate(event: any) {\n    const [year, month, day] = [...event.target.dataset.calendarDay.split(\"-\")];\n    const dateString = `${day}.${month}.${year}`;\n    const calendarInput = event.target.closest(\".task-search-date\").querySelector(\"input\");\n    const calendarArrow = event.target.closest(\".task-search-date\").querySelector(\".documents-page_main-content_title_search-extend_input-date-arrow\");\n    const closestCalendar = event.target.closest(\".vanilla-calendar\");\n    const filterType: FilterType = calendarInput.dataset.filter;\n\n    calendarArrow.style.transform = \"\";\n    calendarInput.value = dateString;\n    closestCalendar.classList.toggle(\"hidden\");\n\n    setFilterField(filterType, dateString);\n};\n\nfunction setFilterField(filterType: FilterType, filterValue: string) {\n    const filterObject = window.localStorage.getItem(\"documents_filters\") ? JSON.parse(window.localStorage.getItem(\"documents_filters\")) : {};\n    filterObject[filterType] = filterValue;\n    window.localStorage.setItem(\"documents_filters\", JSON.stringify(filterObject));\n};\n\n/**\n * Функция используется для получения константных данных, после чего вызывается getOrRefreshData для получения данных, которые динамически меняются\n */\nasync function getAllData(): Promise\u003cvoid\u003e {\n\n    const [currentUser, allStaff] = await Promise.all([System.users.getCurrentUser(), Context.fields.staff_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()])\n    const currentStaff = allStaff.find(staff =\u003e staff.data.ext_user \u0026\u0026 staff.data.ext_user.id === currentUser.id);\n\n    systemDataManager.allStaff = allStaff;\n    userDataManager.staff = currentStaff as staff;\n    Context.data.staff_app = currentStaff;\n    userDataManager.user = \u003cCurrentUserItem\u003ecurrentUser;\n\n    const allStatuses = await Context.fields.statuses_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(100).all();\n    const allEmploymentDirectory = await Context.fields.staff_app.app.fields.employment_table.fields.employment_placement_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n\n    systemDataManager.statuses = allStatuses;\n    systemDataManager.allEmploymentPlacements = allEmploymentDirectory;\n    serializer.setManagers(userDataManager, systemDataManager);\n\n    await getOrRefreshData().then(_ =\u003e {\n        userDataManager.allDocsLoaded = true;\n    });\n};\n\nconst userDataManager = new UserDataManager();\nconst systemDataManager = new SystemDataManager();\nconst userStorageManager = new UserStorageManager();\nconst serializer = new Serializer();\nconst paginator = new Paginator();\nconst today = new TDate();\nconst domManager = new DomManager(userStorageManager);\n\nasync function onInit() {\n    await getAllData();\n}\n\nasync function onLoad() {\n    domManager.renderDocumentSection(false);\n    calendarObject.setCalendars();\n}",
    "clientScriptOptions": {
      "allowServer": true
    },
    "serverScripts": "// /* Server scripts module */\n\n// async function getItemsFromApi(ns: string, code: string, staffFilter = false): Promise\u003c{id: string, name: string}[] | any[] |undefined\u003e {\n\n//     const baseUrl = System.getBaseUrl();\n//     const token = Context.data.token\n\n//     if (!token) {\n//         Context.data.error = \"no token\";\n//         return;\n//     };\n\n//     const testResponse = await fetch(`${baseUrl}/pub/v1/app/${ns}/${code}/list`, {\n//         method: \"POST\",\n//         headers: {\n//             \"Authorization\": `Bearer ${token}`\n//         },\n//         body: JSON.stringify({\n//                 active: true\n//         })\n//     });\n\n//     if (!testResponse.ok) {\n//         Context.data.error = \"error at check: \" + await testResponse.text();\n//         return;\n//     };\n\n//     const allItems: {id: string, name: string}[] | any[] = [];\n\n//     let searchFulfilled = false;\n//     let itemsCount = 0;\n\n//     while (!searchFulfilled) {\n//         let body: Record\u003cstring, any\u003e = {\n//             active: true,\n//             from: itemsCount,\n//             size: 100\n//         };\n\n//         if (staffFilter) {\n//             body.filter = {\n//                 link: [\n//                     {field: \"kedo_staff\"},\n//                     {list: [Context.data.staff_app!.id]}\n//                 ]\n//             }\n//         }\n//         const response = await fetch(`${baseUrl}/pub/v1/app/${ns}/${code}/list`, {\n//             method: \"POST\",\n//             headers: {\n//                 Authorization: `Bearer ${token}`\n//             },\n//             body: JSON.stringify(body)\n//         });\n\n//         if (!response.ok) {\n//             Context.data.error = \"error at cycle: \" + await response.text();\n//             break;\n//         };\n\n//         const respJson = await response.json();\n//         const result = respJson.result.result;\n//         if (result.length \u003c 1) {\n//             searchFulfilled = true;\n//             break;\n//         };\n//         if (itemsCount \u003c respJson.result.total) {\n//             itemsCount += result.length;\n//         } else {\n//             searchFulfilled = true;\n//             break;\n//         };\n\n//         if (staffFilter) {\n//             allItems.push(result);\n//         } else {\n//             allItems.push(result.map((item: any) =\u003e {\n//                 return {\n//                     id: item.__id,\n//                     name: item.__name\n//                 };\n//             }));\n//         }\n//     };\n\n//     return allItems;\n// };\n\n// async function getCities(): Promise\u003cvoid\u003e {\n//     const allCities = await getItemsFromApi(\"business_trips\", \"goroda\");\n\n//     if (allCities) {\n//         Context.data.cities_json = JSON.stringify([].concat.apply([], allCities));\n//     };\n// };\n\n// async function getOvertimeWork(): Promise\u003cvoid\u003e {\n//     const allItems = await getItemsFromApi(\"time_tracking\", \"overtime_work\", true);\n\n//     if (allItems) {\n//         Context.data.debug = JSON.stringify([].concat.apply([], allItems))\n//         Context.data.overtime_work_json = JSON.stringify([].concat.apply([], allItems).map((item: any) =\u003e {\n//             return {\n//                 id: item.__id,\n//                 code: \"overtime_work\",\n//                 namespace: \"time_tracking\",\n//                 data: {\n//                     kedo_status: item.kedo_status ? {\n//                         id: item.kedo_status[0]\n//                     } : undefined,\n//                     __name: item.__name,\n//                     __createdAt: item.__createdAt,\n//                     start_date: item.start_date,\n//                     date: item.date,\n//                     start_date_string: item.start_date_string ?? undefined,\n//                     kedo_staff: item.kedo_staff ? {\n//                         id: item.kedo_staff[0]\n//                     } : undefined,\n//                     work_type: item.overtime_type ? item.overtime_type[0].name : \"Работа в нерабочее время\"\n//                 }\n//             }\n//         }));\n//     };\n// };",
    "serverScriptOptions": {}
  },
  "dataNamespace": "",
  "dataCode": "",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        let FilterType;\n        (function (FilterType) {\n            FilterType[\"START_DATE\"] = \"start_date\";\n            FilterType[\"END_DATE\"] = \"end_date\";\n            FilterType[\"STATUS_CODE\"] = \"status_code\";\n            FilterType[\"NAME\"] = \"name\";\n        })(FilterType || (FilterType = {}));\n        ;\n        let LoaderType;\n        (function (LoaderType) {\n            LoaderType[\"COMMON\"] = \"common\";\n            LoaderType[\"MAIN\"] = \"main\";\n            LoaderType[\"TASKS\"] = \"tasks\";\n            LoaderType[\"DOCUMENTS\"] = \"documents\";\n            LoaderType[\"SERVICES\"] = \"services\";\n            LoaderType[\"BUSINESS_TRIPS\"] = \"business_trips\";\n            LoaderType[\"VACATIONS\"] = \"vacations\";\n            LoaderType[\"PROFILE\"] = \"profile\";\n            LoaderType[\"DOCUMENTS_WIDGET\"] = \"personnel_documents_widget\";\n            LoaderType[\"ISSUES_WIDGET\"] = \"issues_widget\";\n            LoaderType[\"VACATION_WIDGET\"] = \"vacation_widget\";\n        })(LoaderType || (LoaderType = {}));\n        ;\n        let TaskType;\n        (function (TaskType) {\n            TaskType[\"PERSONAL\"] = \"personal\";\n            TaskType[\"OUTGOING\"] = \"outgoing\";\n        })(TaskType || (TaskType = {}));\n        ;\n        let DocType;\n        (function (DocType) {\n            DocType[\"PERSONAL\"] = \"personal_data\";\n            DocType[\"ISSUE\"] = \"issue\";\n            DocType[\"VACATION\"] = \"vacation\";\n            DocType[\"BUSINESS_TRIP\"] = \"business_trip\";\n        })(DocType || (DocType = {}));\n        ;\n        let chunkType;\n        (function (chunkType) {\n            chunkType[\"PERSONAL\"] = \"personnelDocumentsChunks\";\n            chunkType[\"LNA_DOCS\"] = \"lnaDocumentsChunks\";\n            chunkType[\"PERSONAL_DOCS\"] = \"personalDocsChunks\";\n            chunkType[\"BUSINESS_TRIPS\"] = \"businessTripsChunks\";\n            chunkType[\"VACATIONS\"] = \"vacationsChunks\";\n            chunkType[\"OUTGOING_TASKS\"] = \"outgoingTasksChunks\";\n            chunkType[\"ACTUAL_TASKS\"] = \"actualTasksChunks\";\n            chunkType[\"SUB_TASKS\"] = \"subordinateTasksChunks\";\n            chunkType[\"ALL\"] = \"allTasksChunks\";\n            chunkType[\"DOCS_TASKS\"] = \"docsTasksChunks\";\n            chunkType[\"IN_PROGRESS\"] = \"inProgressTasksChunks\";\n            chunkType[\"LNA\"] = \"lnaTasksChunks\";\n            chunkType[\"NULL\"] = \"undefined\";\n        })(chunkType || (chunkType = {}));\n        ;\n        (function (FilterType) {\n            FilterType[\"TASKS\"] = \"tasksFilter\";\n            FilterType[\"DOCUMENTS\"] = \"documentsFilter\";\n            FilterType[\"BUSINESS_TRIPS\"] = \"businessTripsFilter\";\n            FilterType[\"VACATIONS\"] = \"vacationsFilter\";\n        })(FilterType || (FilterType = {}));\n        ;\n        let TaskFilterType;\n        (function (TaskFilterType) {\n            TaskFilterType[\"NAME\"] = \"taskName\";\n            TaskFilterType[\"CREATED_AT\"] = \"createdAt\";\n            TaskFilterType[\"DUE_DATE\"] = \"dueDate\";\n            TaskFilterType[\"STATUS\"] = \"statusCode\";\n            TaskFilterType[\"USER_ID\"] = \"userId\";\n        })(TaskFilterType || (TaskFilterType = {}));\n        ;\n        let NotifyType;\n        (function (NotifyType) {\n            NotifyType[NotifyType[\"ERROR\"] = 0] = \"ERROR\";\n            NotifyType[NotifyType[\"WARNING\"] = 1] = \"WARNING\";\n            NotifyType[NotifyType[\"SUCCESS\"] = 2] = \"SUCCESS\";\n        })(NotifyType || (NotifyType = {}));\n        const taskTypeReference = {\n            \"in_progress\": \"В процессе\",\n            \"assignment\": \"На распределении\",\n            \"cancel\": \"Отменена\",\n            \"closed\": \"Закрыта\"\n        };\n        const issuesWidgetCodes = [\n            \"employees_personal_data\",\n            \"category_assignment\",\n            \"application_for_financial_assistance\",\n            \"benefit_application\",\n            \"free_from\",\n            \"certificate\",\n            \"medical_request\",\n            \"order_financial_assistance\",\n            \"employment_app\",\n            \"execution_duties\",\n            \"application_for_the_transfer_of_salary_to_the_current_account\"\n        ];\n        const monthReference = {\n            \"1\": \"Января\",\n            \"2\": \"Февраля\",\n            \"3\": \"Марта\",\n            \"4\": \"Апреля\",\n            \"5\": \"Мая\",\n            \"6\": \"Июня\",\n            \"7\": \"Июля\",\n            \"8\": \"Августа\",\n            \"9\": \"Сентября\",\n            \"10\": \"Октября\",\n            \"11\": \"Ноября\",\n            \"12\": \"Декабря\"\n        };\n        const calendarObject = {\n            options: {\n                actions: {\n                    clickDay(event, self) {\n                        setDate(event);\n                    }\n                },\n                settings: {\n                    lang: \"ru-RU\"\n                }\n            },\n            checkComponents() {\n                return !!(document.querySelector(\".documents-page_main-content_title_search-extend_item-value_calendar\"));\n            },\n            setCalendars() {\n                const waitForComponents = window.setInterval(() =\u003e {\n                    if (!this.checkComponents()) {\n                        console.log(\"waiting for calendar components\");\n                        return;\n                    }\n                    ;\n                    window.clearInterval(waitForComponents);\n                    console.log(\"calendars found\");\n                    const docsCalendar = new VanillaCalendar(\".documents-page_main-content_title_search-extend_item-value_calendar\", this.options);\n                    [\n                        docsCalendar,\n                    ].forEach(calendar =\u003e calendar.init());\n                }, 100);\n            }\n        };\n        function expandSearch() {\n            let expandSearchContainer = document.querySelector(\".documents-page_main-content_title_search-extend\");\n            let expandModal = document.querySelector(\".dropdown-modal\");\n            expandSearchContainer.classList.toggle(\"expanded\");\n            expandModal.classList.toggle(\"hidden\");\n        }\n        ;\n        function clearFilters() {\n            window.localStorage.removeItem(\"business_trips_filters\");\n            const allInputs = document.querySelectorAll(\".business_trips-page_main-content_title_search-extend input\");\n            allInputs.forEach((input) =\u003e {\n                input.value = \"\";\n            });\n        }\n        ;\n        function expandCalendar(target) {\n            target.style.transform = target.style.transform\n                ? \"\"\n                : \"rotateZ(180deg)\";\n            const calendar = target.parentElement.nextElementSibling;\n            calendar.classList.toggle(\"hidden\");\n        }\n        ;\n        function checkAndSetDate(target) {\n            if (!target.value || target.value.length \u003c 1) {\n                return;\n            }\n            ;\n            const dateRegex = /^([120]{1}[0-9]{1}|3[01]{1,2}|0[1-9])\\.(1[0-2]|0[1-9])\\.\\d{4}/;\n            if (target.value.match(dateRegex)) {\n                const filterType = target.dataset.filter;\n                setFilterField(filterType, target.value);\n            }\n            ;\n        }\n        ;\n        function searchStatusExpand(target) {\n            let expandContainer;\n            if (!target.classList.contains(\"input-status-values_item\")) {\n                expandContainer = target.parentElement.nextElementSibling;\n                if (expandContainer.classList.contains(\"expanded\")) {\n                    target.style.transform = \"rotateZ(0)\";\n                }\n                else {\n                    target.style.transform = \"rotateZ(180deg)\";\n                }\n                ;\n            }\n            else {\n                expandContainer = target.parentElement;\n                const arrow = expandContainer.parentElement.querySelector(\".common-content_title_search-extend_input-status-arrow\");\n                arrow.style.transform = 'rotateZ(0)';\n            }\n            ;\n            expandContainer.classList.toggle(\"expanded\");\n        }\n        ;\n        function handleStatusChoice(target) {\n            const statusInput = target.parentElement.previousElementSibling.querySelector(\"input\");\n            statusInput.value = target.textContent.trim();\n            statusInput.dataset.statusCode = target.dataset.statusCode;\n            searchStatusExpand(target);\n        }\n        class UserDataManager {\n            constructor() {\n                this.vacations = [];\n                this.businessTrips = [];\n                this.issues = [];\n                this.personnelDocuments = [];\n                this.allDocsLoaded = false;\n                this.lastDocsForRender = [];\n                this.allUserDocs = [];\n                this.businessTripsRefs = [];\n            }\n            ;\n        }\n        ;\n        class SystemDataManager {\n        }\n        ;\n        class UserStorageManager {\n            constructor() {\n                this.baseUrl = System.getBaseUrl();\n            }\n            ;\n            clearFilters(filterType) {\n                let filterNodes;\n                filterNodes = document.querySelectorAll(\".documents-filter\");\n                console.log(` length ${filterNodes.length} `);\n                console.log(filterNodes);\n                filterNodes.forEach((node) =\u003e {\n                    node.value = \"\";\n                });\n                const search = document.querySelector(\".title-search\");\n                if (search) {\n                    search.value = \"\";\n                }\n                this.documentsFilter = undefined;\n                paginator.setPaginator(paginator.paginator, paginator.dataType);\n            }\n            ;\n            serializeFilters(filterType) {\n                let filterValue;\n                let filterNodes;\n                let node;\n                switch (filterType) {\n                    case FilterType.DOCUMENTS:\n                        filterNodes = document.querySelectorAll(\".documents-filter\");\n                        for (node of filterNodes) {\n                            const key = node.dataset.filter;\n                            const value = node.value;\n                            if (!key || !value) {\n                                continue;\n                            }\n                            ;\n                            switch (key) {\n                                case \"createdAt\":\n                                    const [day, month, year] = value.split(\".\");\n                                    if (![day, month, year].every(item =\u003e item) || year.length \u003c 4) {\n                                        break;\n                                    }\n                                    ;\n                                    filterValue = new Datetime(`${day}.${month}.${year}`, \"DD.MM.YYYY\");\n                                    break;\n                                case \"statusCode\":\n                                    filterValue = node.dataset.statusCode;\n                                    break;\n                                default:\n                                    filterValue = node.value;\n                                    break;\n                            }\n                            ;\n                            if (filterValue) {\n                                if (!this.documentsFilter) {\n                                    this.documentsFilter = {};\n                                }\n                                ;\n                                this.documentsFilter[key] = filterValue;\n                            }\n                            else if (!filterValue \u0026\u0026 this.documentsFilter \u0026\u0026 this.documentsFilter[key]) {\n                                delete this.documentsFilter[key];\n                            }\n                            ;\n                        }\n                        ;\n                    case FilterType.BUSINESS_TRIPS:\n                        filterNodes = document.querySelectorAll(\".business_trips-filter\");\n                        for (node of filterNodes) {\n                            const key = node.dataset.filter;\n                            const value = node.value;\n                            if (!key || !value) {\n                                continue;\n                            }\n                            ;\n                            switch (key) {\n                                case \"business_trips_start\":\n                                case \"business_trips_end\":\n                                    const [day, month, year] = value.split(\".\");\n                                    if (![day, month, year].every(item =\u003e item) || year.length \u003c 4) {\n                                        break;\n                                    }\n                                    ;\n                                    filterValue = new Datetime(`${day}.${month}.${year}`, \"DD.MM.YYYY\");\n                                    break;\n                                case \"statusCode\":\n                                    filterValue = node.dataset.statusCode;\n                                    break;\n                                case \"staffId\":\n                                    filterValue = node.dataset.staffId;\n                                    break;\n                                case \"cityId\":\n                                    filterValue = node.dataset.cityId;\n                                    break;\n                                default:\n                                    filterValue = node.value;\n                                    break;\n                            }\n                            ;\n                            if (filterValue) {\n                                if (!this.businessTripsFilter) {\n                                    this.businessTripsFilter = {};\n                                }\n                                ;\n                                this.businessTripsFilter[key] = filterValue;\n                            }\n                            else if (!filterValue \u0026\u0026 this.businessTripsFilter \u0026\u0026 this.businessTripsFilter[key]) {\n                                delete this.businessTripsFilter[key];\n                            }\n                            ;\n                        }\n                        ;\n                    case FilterType.VACATIONS:\n                        filterNodes = document.querySelectorAll(\".vacations-filter\");\n                        for (node of filterNodes) {\n                            const key = node.dataset.filter;\n                            const value = node.value;\n                            if (!key || !value) {\n                                continue;\n                            }\n                            ;\n                            switch (key) {\n                                case \"vacations_start\":\n                                    const [startDay, startMonth, startYear] = value.split(\".\");\n                                    if (![startDay, startMonth, startYear].every(item =\u003e item) || startYear.length \u003c 4) {\n                                        break;\n                                    }\n                                    ;\n                                    const [startDayNum, startMonthNum, startYearNum] = [startDay, startMonth, startYear].map(Number);\n                                    filterValue = new TDate(startDayNum, startMonthNum, startYearNum);\n                                    break;\n                                case \"vacations_end\":\n                                    const [day, month, year] = value.split(\".\");\n                                    if (![day, month, year].every(item =\u003e item) || year.length \u003c 4) {\n                                        break;\n                                    }\n                                    ;\n                                    const [dayNum, monthNum, yearNum] = [day, month, year].map(Number);\n                                    filterValue = new TDate(yearNum, monthNum, dayNum);\n                                    break;\n                                case \"statusCode\":\n                                    filterValue = node.dataset.statusCode;\n                                    break;\n                                case \"staffId\":\n                                    filterValue = node.dataset.staffId;\n                                    break;\n                                case \"typeId\":\n                                    filterValue = node.dataset.vacation_code;\n                                    break;\n                                default:\n                                    filterValue = node.value;\n                                    break;\n                            }\n                            ;\n                            if (filterValue) {\n                                if (!this.vacationsFilter) {\n                                    this.vacationsFilter = {};\n                                }\n                                ;\n                                this.vacationsFilter[key] = filterValue;\n                            }\n                            else if (!filterValue \u0026\u0026 this.vacationsFilter \u0026\u0026 this.vacationsFilter[key]) {\n                                delete this.vacationsFilter[key];\n                            }\n                            ;\n                        }\n                        ;\n                }\n                ;\n            }\n            ;\n            parseLink(service) {\n                const linkObj = encodeURIComponent(`${service.fieldToChange ? `{${`\"data\":{\"${service.fieldToChange}\":[${JSON.stringify(service.fieldValue)}]}}`}` : \"\"}`).replace(/:/g, \"%3A\").replace(/,/g, \"%2C\");\n                const fullUrl = `(p:item/${service.ns}/${service.code}${linkObj ? `;values=${linkObj}` : \"\"})`;\n                return fullUrl;\n            }\n            ;\n        }\n        ;\n        class Paginator {\n            constructor() {\n                this.subordinateTasksChunks = [];\n            }\n            ;\n            sliceToChunks(arr, n, rootToRender, elementType) {\n                let index = 1;\n                const chunks = [];\n                for (let i = 0; i \u003c arr.length; i += n) {\n                    const chunk = arr.slice(i, i + n);\n                    const newChunkObj = {\n                        index: index++,\n                        data: chunk\n                    };\n                    chunks.push(newChunkObj);\n                }\n                ;\n                return { globalIndex: 0, globalData: chunks, elementType, rootToRender };\n            }\n            ;\n            checkProps() {\n                return this.tasksTable\n                    \u0026\u0026 this.tasksTableContent\n                    \u0026\u0026 this.mobileTasksTable\n                    \u0026\u0026 this.mobileTasksTableContent\n                    \u0026\u0026 this.emptyTasksTemplate\n                    \u0026\u0026 this.subordinateTasksTable\n                    \u0026\u0026 this.subordinateTasksTableContent\n                    \u0026\u0026 this.subordinateStructureName\n                    \u0026\u0026 this.subordinateUserName\n                    \u0026\u0026 this.subordinatePath\n                    \u0026\u0026 this.subordinatePathMobile\n                    \u0026\u0026 this.subordinateTableMobile\n                    \u0026\u0026 this.subordinateStructureNameMobile\n                    \u0026\u0026 this.subordinateUserNameMobile\n                    \u0026\u0026 this.personnelDocumentsTable\n                    \u0026\u0026 this.personnelDocumentsTableContent\n                    \u0026\u0026 this.emptyDocumentsTemplate\n                    \u0026\u0026 this.emptyBusinessTripsTemplate\n                    \u0026\u0026 this.businessTripsTable\n                    \u0026\u0026 this.businessTripsTableContent\n                    \u0026\u0026 this.vacationsTable\n                    \u0026\u0026 this.vacationsTableContent\n                    \u0026\u0026 this.emptyVacationsTemplate;\n            }\n            ;\n            handleSubordinatePath(target) {\n                if (target) {\n                    const user = this.subordinateTasksChunks.find(obj =\u003e obj.userData.userId === target.dataset.userId);\n                    if (user) {\n                        this.subordinateUserName.textContent = user.userData.userName;\n                        this.subordinateUserNameMobile.textContent = user.userData.userName;\n                        this.subordinateStructureName.textContent = user.userData.subdivision;\n                        this.subordinateStructureNameMobile.textContent = user.userData.subdivision;\n                    }\n                    ;\n                }\n                ;\n                this.subordinatePath.classList.toggle(\"hidden\");\n                this.subordinatePathMobile.classList.toggle(\"hidden\");\n            }\n            ;\n            handleReturn() {\n                [\n                    this.subordinatePath,\n                    this.subordinatePathMobile,\n                    this.tasksTableContent,\n                    this.mobileTasksTable,\n                    this.subordinateTasksTableContent,\n                    this.paginator\n                ].forEach((node) =\u003e node.classList.toggle(\"hidden\"));\n            }\n            ;\n            handlePageChange(element, restElements) {\n                if (restElements) {\n                    for (let element of restElements) {\n                        if (element.classList.contains(\"active\")) {\n                            element.classList.remove(\"active\");\n                        }\n                        ;\n                    }\n                    ;\n                }\n                ;\n                element.classList.toggle(\"active\");\n            }\n            ;\n            filterBusinessTrips(item) {\n                if (!userStorageManager.businessTripsFilter) {\n                    return item;\n                }\n                ;\n                let allBusinessTrips = [].concat.apply([], ...item.globalData.map(obj =\u003e obj.data));\n                if (userStorageManager.businessTripsFilter.business_trip_name) {\n                    allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.name.toLowerCase().includes(userStorageManager.businessTripsFilter.business_trip_name.toLowerCase()));\n                }\n                ;\n                if (userStorageManager.businessTripsFilter.business_trips_start) {\n                    allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.start_date_obj.after(userStorageManager.businessTripsFilter.business_trips_start));\n                }\n                ;\n                if (userStorageManager.businessTripsFilter.business_trips_end) {\n                    allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.end_date_obj.after(userStorageManager.businessTripsFilter.business_trips_end));\n                }\n                ;\n                if (userStorageManager.businessTripsFilter.statusCode) {\n                    allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.status_code === userStorageManager.businessTripsFilter.statusCode);\n                }\n                ;\n                if (userStorageManager.businessTripsFilter.cityId) {\n                    allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.cityId \u0026\u0026 doc.cityId === userStorageManager.businessTripsFilter.cityId);\n                }\n                ;\n                if (userStorageManager.businessTripsFilter.staffId) {\n                    allBusinessTrips = allBusinessTrips.filter(doc =\u003e doc.staffId \u0026\u0026 doc.staffId === userStorageManager.businessTripsFilter.staffId);\n                }\n                ;\n                const newItem = this.sliceToChunks(allBusinessTrips, 10, this.businessTripsTable, item.elementType);\n                return newItem;\n            }\n            ;\n            filterDocs(item) {\n                console.log(userStorageManager.documentsFilter);\n                if (!userStorageManager.documentsFilter) {\n                    return item;\n                }\n                ;\n                let allDocs = [].concat.apply([], ...item.globalData.map(obj =\u003e obj.data));\n                if (userStorageManager.documentsFilter.name) {\n                    allDocs = allDocs.filter(doc =\u003e doc.name.toLowerCase().includes(userStorageManager.documentsFilter.name.toLowerCase()));\n                }\n                ;\n                if (userStorageManager.documentsFilter.createdAt) {\n                    allDocs = allDocs.filter(doc =\u003e doc.created_at.after(userStorageManager.documentsFilter.createdAt));\n                }\n                ;\n                if (userStorageManager.documentsFilter.statusCode) {\n                    allDocs = allDocs.filter(doc =\u003e doc.status_code === userStorageManager.documentsFilter.statusCode);\n                }\n                ;\n                const newItem = this.sliceToChunks(allDocs, 10, this.personnelDocumentsTable, item.elementType);\n                console.log(newItem);\n                return newItem;\n            }\n            ;\n            filterVacations(item) {\n                if (!userStorageManager.vacationsFilter) {\n                    return item;\n                }\n                ;\n                let allVacations = [].concat.apply([], ...item.globalData.map(obj =\u003e obj.data));\n                if (userStorageManager.vacationsFilter.vacation_name) {\n                    allVacations = allVacations.filter(doc =\u003e doc.name.toLowerCase().includes(userStorageManager.vacationsFilter.vacation_name.toLowerCase()));\n                }\n                ;\n                if (userStorageManager.vacationsFilter.vacations_start) {\n                    allVacations = allVacations.filter(doc =\u003e doc.start_date_obj.after(userStorageManager.vacationsFilter.vacations_start));\n                }\n                ;\n                if (userStorageManager.vacationsFilter.vacations_end) {\n                    allVacations = allVacations.filter(doc =\u003e doc.end_date_obj.before(userStorageManager.vacationsFilter.vacations_end));\n                }\n                ;\n                if (userStorageManager.vacationsFilter.staffId) {\n                    allVacations = allVacations.filter(doc =\u003e doc.staffId \u0026\u0026 doc.staffId === userStorageManager.vacationsFilter.staffId);\n                }\n                ;\n                if (userStorageManager.vacationsFilter.typeId) {\n                    allVacations = allVacations.filter(doc =\u003e doc.vacation_code \u0026\u0026 doc.vacation_code === userStorageManager.vacationsFilter.typeId);\n                }\n                ;\n                const newItem = this.sliceToChunks(allVacations, 10, this.vacationsTable, item.elementType);\n                return newItem;\n            }\n            ;\n            handleEmptyPaginator(paginator, dataType) {\n                if (!paginator.classList.contains(\"hidden\")) {\n                    paginator.classList.add(\"hidden\");\n                }\n                ;\n                switch (dataType) {\n                    case chunkType.ACTUAL_TASKS:\n                    case chunkType.ALL:\n                    case chunkType.IN_PROGRESS:\n                    case chunkType.DOCS_TASKS:\n                    case chunkType.LNA:\n                    case chunkType.OUTGOING_TASKS:\n                    case chunkType.SUB_TASKS:\n                        if (this.emptyTasksTemplate.classList.contains(\"hidden\")) {\n                            this.emptyTasksTemplate.classList.remove(\"hidden\");\n                        }\n                        ;\n                        if (!this.tasksTableContent.classList.contains(\"hidden\")) {\n                            this.tasksTableContent.classList.toggle(\"hidden\");\n                        }\n                        ;\n                        if (!this.mobileTasksTableContent.classList.contains(\"hidden\")) {\n                            this.mobileTasksTableContent.classList.toggle(\"hidden\");\n                        }\n                        ;\n                        break;\n                    case chunkType.LNA_DOCS:\n                    case chunkType.PERSONAL:\n                    case chunkType.PERSONAL_DOCS:\n                        if (!this.personnelDocumentsTableContent.classList.contains(\"hidden\")) {\n                            this.personnelDocumentsTableContent.classList.toggle(\"hidden\");\n                        }\n                        ;\n                        if (this.emptyDocumentsTemplate.classList.contains(\"hidden\")) {\n                            this.emptyDocumentsTemplate.classList.remove(\"hidden\");\n                        }\n                        ;\n                        break;\n                    case chunkType.BUSINESS_TRIPS:\n                        if (!this.businessTripsTableContent.classList.contains(\"hidden\")) {\n                            this.businessTripsTableContent.classList.toggle(\"hidden\");\n                        }\n                        ;\n                        if (this.emptyBusinessTripsTemplate.classList.contains(\"hidden\")) {\n                            this.emptyBusinessTripsTemplate.classList.remove(\"hidden\");\n                        }\n                        ;\n                        break;\n                    case chunkType.VACATIONS:\n                        if (!this.vacationsTableContent.classList.contains(\"hidden\")) {\n                            this.vacationsTableContent.classList.toggle(\"hidden\");\n                        }\n                        ;\n                        if (this.emptyVacationsTemplate.classList.contains(\"hidden\")) {\n                            this.emptyVacationsTemplate.classList.remove(\"hidden\");\n                        }\n                        ;\n                        break;\n                }\n                ;\n            }\n            ;\n            initArrowButtons(prevButton, nextButton, firstClassWord, actualData, dataType, itemIsTask) {\n                prevButton.addEventListener(\"click\", () =\u003e {\n                    let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                    let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n                    if (activePage) {\n                        let activeIndex = Number(activePage.dataset[\"index\"]);\n                        let outOfBounds = false;\n                        if ((activeIndex - 1) \u003c 0) {\n                            outOfBounds = true;\n                        }\n                        if (activePage.classList.contains(\"active\")) {\n                            activePage.classList.remove(\"active\");\n                        }\n                        let newPage = document.querySelector(`div.${firstClassWord}-page_main-content_paginator div[data-index=\"${outOfBounds ? pages.length - 1 : activeIndex - 1}\"]`);\n                        if (!newPage.classList.contains(\"active\")) {\n                            newPage.classList.add(\"active\");\n                        }\n                        this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n                    }\n                });\n                nextButton.addEventListener(\"click\", () =\u003e {\n                    let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                    let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n                    if (activePage) {\n                        let activeIndex = Number(activePage.dataset[\"index\"]);\n                        let outOfBounds = false;\n                        if ((activeIndex + 1) \u003e pages.length - 1) {\n                            outOfBounds = true;\n                        }\n                        if (activePage.classList.contains(\"active\")) {\n                            activePage.classList.remove(\"active\");\n                        }\n                        let newPage = document.querySelector(`div.${firstClassWord}-page_main-content_paginator div[data-index=\"${outOfBounds ? 0 : activeIndex + 1}\"]`);\n                        if (!newPage.classList.contains(\"active\")) {\n                            newPage.classList.add(\"active\");\n                        }\n                        this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n                    }\n                });\n            }\n            initDotsButtons(prevDots, nextDots, firstClassWord, actualData, dataType, itemIsTask) {\n                prevDots.addEventListener(\"click\", () =\u003e {\n                    let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                    let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n                    if (activePage) {\n                        let activeIndex = Number(activePage.dataset[\"index\"]);\n                        let outOfBounds = false;\n                        if ((activeIndex - 5) \u003c 0) {\n                            outOfBounds = true;\n                        }\n                        if (activePage.classList.contains(\"active\")) {\n                            activePage.classList.remove(\"active\");\n                        }\n                        let newPage = document.querySelector(`div.${firstClassWord}-page_main-content_paginator div[data-index=\"${outOfBounds ? 0 : activeIndex - 5}\"]`);\n                        if (!newPage.classList.contains(\"active\")) {\n                            newPage.classList.add(\"active\");\n                        }\n                        this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n                    }\n                });\n                nextDots.addEventListener(\"click\", () =\u003e {\n                    let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                    let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n                    if (activePage) {\n                        let activeIndex = Number(activePage.dataset[\"index\"]);\n                        let outOfBounds = false;\n                        if ((activeIndex + 5) \u003e pages.length - 1) {\n                            outOfBounds = true;\n                        }\n                        if (activePage.classList.contains(\"active\")) {\n                            activePage.classList.remove(\"active\");\n                        }\n                        let newPage = document.querySelector(`div.${firstClassWord}-page_main-content_paginator div[data-index=\"${outOfBounds ? pages.length - 1 : activeIndex + 5}\"]`);\n                        if (!newPage.classList.contains(\"active\")) {\n                            newPage.classList.add(\"active\");\n                        }\n                        this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n                    }\n                });\n            }\n            setPaginator(paginator, dataType, userId) {\n                console.log(dataType);\n                const itemIsTask = [chunkType.ACTUAL_TASKS, chunkType.ALL, chunkType.IN_PROGRESS, chunkType.DOCS_TASKS, chunkType.OUTGOING_TASKS, chunkType.NULL].indexOf(dataType) !== -1;\n                const itemIsDocument = [chunkType.LNA_DOCS, chunkType.PERSONAL_DOCS, chunkType.PERSONAL].indexOf(dataType) !== -1;\n                if (itemIsTask) {\n                    userStorageManager.serializeFilters(FilterType.TASKS);\n                }\n                else if (itemIsDocument) {\n                    userStorageManager.serializeFilters(FilterType.DOCUMENTS);\n                }\n                else if (dataType === chunkType.BUSINESS_TRIPS) {\n                    userStorageManager.serializeFilters(FilterType.BUSINESS_TRIPS);\n                }\n                else if (dataType === chunkType.VACATIONS) {\n                    userStorageManager.serializeFilters(FilterType.VACATIONS);\n                }\n                ;\n                this.paginator = paginator;\n                paginator.dataset.dataType = dataType;\n                this.dataType = dataType;\n                const paginatorClass = Array.from(paginator.classList)[0];\n                const oldPages = paginator.querySelectorAll(`.${paginatorClass} .paginator-item`);\n                const prevButton = paginator.querySelector(\".prev-button\");\n                const nextButton = paginator.querySelector(\".next-button\");\n                const objToRender = this[dataType] || undefined;\n                if (!objToRender || !objToRender.globalData || objToRender.globalData.length \u003c 1) {\n                    console.log(\"no paginator obj\");\n                    this.handleEmptyPaginator(paginator, dataType);\n                    return;\n                }\n                ;\n                let actualData = objToRender;\n                switch (dataType) {\n                    case chunkType.PERSONAL:\n                        actualData = this.filterDocs(objToRender);\n                        break;\n                    case chunkType.PERSONAL_DOCS:\n                        actualData = this.filterDocs(objToRender);\n                        break;\n                    case chunkType.LNA_DOCS:\n                        actualData = this.filterDocs(objToRender);\n                        break;\n                    case chunkType.BUSINESS_TRIPS:\n                        actualData = this.filterBusinessTrips(objToRender);\n                        break;\n                    case chunkType.VACATIONS:\n                        actualData = this.filterVacations(objToRender);\n                        break;\n                }\n                ;\n                if (!actualData || !actualData.globalData || actualData.globalData.length \u003c 1) {\n                    this.handleEmptyPaginator(paginator, dataType);\n                    return;\n                }\n                ;\n                const pagesCount = actualData.globalData.length;\n                let i = 0;\n                oldPages.forEach((page) =\u003e page.remove());\n                let firstClassWord = this.getFirstClassWord(dataType, itemIsTask);\n                this.initArrowButtons(prevButton, nextButton, firstClassWord, actualData, dataType, itemIsTask);\n                const firstPage = domManager.createComponent(\"div\", `${firstClassWord}-page_main-content_paginator_item paginator-item`);\n                firstPage.dataset[\"index\"] = i++;\n                firstPage.classList.add(\"active\");\n                firstPage.textContent = i;\n                firstPage.addEventListener(\"click\", () =\u003e {\n                    let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                    for (let page of pages) {\n                        if (page.classList.contains(\"active\")) {\n                            page.classList.remove(\"active\");\n                        }\n                    }\n                    firstPage.dataset[\"active\"] = true;\n                    firstPage.classList.add(\"active\");\n                    this.updatePaginator(actualData.globalData[0].data, actualData.rootToRender, dataType, itemIsTask);\n                });\n                prevButton.after(firstPage);\n                let prevElement = firstPage;\n                const prevDots = domManager.createComponent(\"div\", `${firstClassWord}-page_main-content_paginator_dots_prev paginator-item hidden`);\n                prevDots.textContent = \"...\";\n                firstPage.after(prevDots);\n                prevElement = prevDots;\n                const nextDots = domManager.createComponent(\"div\", `${firstClassWord}-page_main-content_paginator_dots_next paginator-item hidden`);\n                nextDots.textContent = \"...\";\n                this.initDotsButtons(prevDots, nextDots, firstClassWord, actualData, dataType, itemIsTask);\n                for (i; i \u003c pagesCount; i++) {\n                    const newPage = domManager.createComponent(\"div\", `${firstClassWord}-page_main-content_paginator_item paginator-item`);\n                    newPage.dataset[\"index\"] = i;\n                    newPage.textContent = i + 1;\n                    newPage.addEventListener(\"click\", () =\u003e {\n                        let pages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                        for (let page of pages) {\n                            if (page.classList.contains(\"active\")) {\n                                page.classList.remove(\"active\");\n                            }\n                        }\n                        newPage.classList.add(\"active\");\n                        this.updatePaginator(actualData.globalData[Number(newPage.dataset[\"index\"])].data, actualData.rootToRender, dataType, itemIsTask);\n                    });\n                    prevElement.after(newPage);\n                    prevElement = newPage;\n                }\n                ;\n                prevElement.before(nextDots);\n                paginator.dataset.dataType = dataType;\n                if (pagesCount \u003e 1) {\n                    if (paginator.classList.contains(\"hidden\")) {\n                        paginator.classList.remove(\"hidden\");\n                    }\n                    ;\n                }\n                if (pagesCount \u003e 6) {\n                    let allPages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                    let i = 0;\n                    for (let page of allPages) {\n                        i++;\n                        if (i \u003e 5 \u0026\u0026 i !== pagesCount) {\n                            if (!page.classList.contains(\"hidden\")) {\n                                page.classList.add(\"hidden\");\n                            }\n                        }\n                    }\n                    nextDots.classList.remove(\"hidden\");\n                }\n                if (this.personnelDocumentsTableContent.classList.contains(\"hidden\") \u0026\u0026 itemIsDocument) {\n                    this.personnelDocumentsTableContent.classList.remove(\"hidden\");\n                }\n                if (!this.emptyDocumentsTemplate.classList.contains(\"hidden\") \u0026\u0026 itemIsDocument) {\n                    this.emptyDocumentsTemplate.classList.add(\"hidden\");\n                }\n                ;\n                this.currentState = dataType;\n                this.updatePaginator(actualData.globalData[0].data, actualData.rootToRender, dataType, itemIsTask);\n            }\n            ;\n            async checkTask(taskId) {\n                const currentTask = await System.processes._searchTasks().where(f =\u003e f.__id.eq(taskId)).first();\n                return !currentTask || [ProcessTaskState.closed, ProcessTaskState.cancel].indexOf(currentTask.data.state) !== -1;\n            }\n            ;\n            getFirstClassWord(elementType, itemIsTask) {\n                let firstClassWord = \"\";\n                if (itemIsTask) {\n                    firstClassWord = \"tasks\";\n                }\n                ;\n                if (!itemIsTask) {\n                    switch (elementType) {\n                        case chunkType.PERSONAL:\n                        case chunkType.PERSONAL_DOCS:\n                        case chunkType.LNA_DOCS:\n                            firstClassWord = \"documents\";\n                            break;\n                        case chunkType.BUSINESS_TRIPS:\n                            firstClassWord = \"business_trips\";\n                            break;\n                        case chunkType.VACATIONS:\n                            firstClassWord = \"vacations\";\n                            break;\n                    }\n                    ;\n                }\n                ;\n                return firstClassWord;\n            }\n            changePaginatorPages(firstClassWord) {\n                let paginatorPages = document.querySelectorAll(`.${firstClassWord}-page_main-content_paginator_item`);\n                if (paginatorPages) {\n                    let activePage = document.querySelector(`.${firstClassWord}-page_main-content_paginator_item.active`);\n                    if (activePage \u0026\u0026 paginatorPages.length \u003e 6) {\n                        let activeIndex = Number(activePage.dataset[\"index\"]);\n                        let acceptedIndexes = [\n                            0,\n                            paginatorPages.length - 1,\n                            activeIndex,\n                            activeIndex - 2 \u003e= 0 ? activeIndex - 2 : activeIndex + 4,\n                            activeIndex - 1 \u003e= 0 ? activeIndex - 1 : activeIndex + 3,\n                            activeIndex + 2 \u003c= paginatorPages.length - 1 ? activeIndex + 2 : activeIndex - 4,\n                            activeIndex + 1 \u003c= paginatorPages.length - 1 ? activeIndex + 1 : activeIndex - 3,\n                        ];\n                        for (let page of paginatorPages) {\n                            if (acceptedIndexes.includes(Number(page.dataset[\"index\"]))) {\n                                if (page.classList.contains(\"hidden\")) {\n                                    page.classList.remove(\"hidden\");\n                                }\n                            }\n                            else {\n                                if (!page.classList.contains(\"hidden\")) {\n                                    page.classList.add(\"hidden\");\n                                }\n                            }\n                        }\n                        if (paginatorPages.length \u003e 6) {\n                            let prevDots = document.querySelector(`.${firstClassWord}-page_main-content_paginator_dots_prev`);\n                            let nextDots = document.querySelector(`.${firstClassWord}-page_main-content_paginator_dots_next`);\n                            if (!acceptedIndexes.includes(1)) {\n                                if (prevDots \u0026\u0026 prevDots.classList.contains(\"hidden\")) {\n                                    prevDots.classList.remove(\"hidden\");\n                                }\n                            }\n                            else {\n                                if (prevDots \u0026\u0026 !prevDots.classList.contains(\"hidden\")) {\n                                    prevDots.classList.add(\"hidden\");\n                                }\n                            }\n                            if (!acceptedIndexes.includes(paginatorPages.length - 2)) {\n                                if (nextDots \u0026\u0026 nextDots.classList.contains(\"hidden\")) {\n                                    nextDots.classList.remove(\"hidden\");\n                                }\n                            }\n                            else {\n                                if (nextDots \u0026\u0026 !nextDots.classList.contains(\"hidden\")) {\n                                    nextDots.classList.add(\"hidden\");\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            updatePaginator(elementsToRender, rootToRender, elementType, itemIsTask) {\n                let templateToRender;\n                console.log('update');\n                rootToRender.innerHTML = \"\";\n                let firstClassWord = this.getFirstClassWord(elementType, itemIsTask);\n                this.changePaginatorPages(firstClassWord);\n                if (itemIsTask) {\n                    templateToRender = document.querySelector(\".tasks-page_main-content_table-item_template\");\n                    const mobileTemplateToRender = document.querySelector(\".tasks-page_main-content_mobile_container-item_template\");\n                    this.mobileTasksTableContent.innerHTML = \"\";\n                    for (let item of elementsToRender) {\n                        const newRow = this.getElementRow(item, templateToRender, elementType, itemIsTask);\n                        const newMobileRow = this.getElementRow(item, mobileTemplateToRender, elementType, itemIsTask, true);\n                        domManager.renderComponent(rootToRender, newRow);\n                        domManager.renderComponent(this.mobileTasksTableContent, newMobileRow);\n                        newRow.addEventListener(\"click\", () =\u003e {\n                            let i = 0;\n                            const handleTask = window.setInterval(async () =\u003e {\n                                const taskClosed = await this.checkTask(item.id);\n                                if (i \u003e= 60) {\n                                    window.clearInterval(handleTask);\n                                }\n                                ;\n                                if (taskClosed) {\n                                    window.clearInterval(handleTask);\n                                    await getOrRefreshData(true, true);\n                                    this.setPaginator(this.paginator, elementType);\n                                    const tasksCounter = document.querySelector(\".left-menu_item[data-menu-item='tasks'] .left-menu_item-counter\");\n                                    const tasksCount = [].concat.apply([], [...this.actualTasksChunks.globalData].map(item =\u003e [...item.data])).length;\n                                    tasksCounter.textContent = tasksCount;\n                                }\n                                ;\n                                i++;\n                            }, 1000);\n                        });\n                    }\n                    ;\n                }\n                else {\n                    switch (elementType) {\n                        case chunkType.PERSONAL:\n                        case chunkType.PERSONAL_DOCS:\n                        case chunkType.LNA_DOCS:\n                            templateToRender = document.querySelector(\".documents-page_main-content_table-item_template\");\n                            this.personnelDocumentsTable.innerHTML = \"\";\n                            for (let item of elementsToRender) {\n                                const newRow = this.getElementRow(item, templateToRender, elementType, itemIsTask);\n                                domManager.renderComponent(rootToRender, newRow);\n                            }\n                            ;\n                            break;\n                        case chunkType.BUSINESS_TRIPS:\n                            templateToRender = document.querySelector(\".business_trips-page_main-content_table-item_template\");\n                            this.businessTripsTable.innerHTML = \"\";\n                            for (let item of elementsToRender) {\n                                const newRow = this.getElementRow(item, templateToRender, elementType, itemIsTask);\n                                domManager.renderComponent(rootToRender, newRow);\n                            }\n                            ;\n                            break;\n                        case chunkType.VACATIONS:\n                            templateToRender = document.querySelector(\".vacations-page_main-content_table-item_template\");\n                            this.vacationsTable.innerHTML = \"\";\n                            for (let item of elementsToRender) {\n                                const newRow = this.getElementRow(item, templateToRender, elementType, itemIsTask);\n                                domManager.renderComponent(rootToRender, newRow);\n                            }\n                            ;\n                            break;\n                    }\n                    ;\n                }\n                ;\n            }\n            ;\n            getElementRow(item, template, itemType, isTask = false, isMobile = false) {\n                let itemContent;\n                let itemRow;\n                let itemName;\n                let itemStatus;\n                let itemStart;\n                let itemEnd;\n                let itemTypeEmployment;\n                if (isTask) {\n                    item = item;\n                    const taskElementContent = template.content.cloneNode(true);\n                    const taskItemName = taskElementContent.querySelector(\".tasks-name\");\n                    const taskItemStatus = taskElementContent.querySelector(\".tasks-page_main-content_table-item-section_status\");\n                    const taskElementItem = taskElementContent.querySelector(\".tasks-page_main-content_table-item\") || taskElementContent.querySelector(\".tasks-page_main-content_mobile_container-item\");\n                    taskItemName.textContent = item.name;\n                    taskItemStatus.textContent = item.status;\n                    taskElementItem.href = `${userStorageManager.baseUrl}/_portal/kedo_ext/my_profile(p:task/${item.id})`;\n                    taskElementItem.dataset.taskType = item.task_type;\n                    if (isMobile) {\n                        return taskElementItem;\n                    }\n                    else {\n                        const taskItemAuthor = taskElementContent.querySelector(\".task-author\");\n                        const taskItemCreatedAt = taskElementContent.querySelector(\".task-created\");\n                        taskItemAuthor.textContent = item.author;\n                        taskItemCreatedAt.textContent = item.due_date;\n                        return taskElementItem;\n                    }\n                    ;\n                }\n                else {\n                    item = item;\n                    let [startDay, endDay, startMonth, endMonth, startYear, endYear] = [];\n                    switch (itemType) {\n                        case chunkType.PERSONAL:\n                        case chunkType.LNA_DOCS:\n                        case chunkType.PERSONAL_DOCS:\n                            itemContent = template.content.cloneNode(true);\n                            itemRow = itemContent.querySelector(\".documents-page_main-content_table-item\");\n                            itemName = itemRow.querySelector(\".document-name\");\n                            const itemCreated = itemRow.querySelector(\".document-created\");\n                            itemStatus = itemRow.querySelector(\".documents-page_main-content_table-item-section_status\");\n                            itemName.textContent = item.name;\n                            try {\n                                itemCreated.textContent = `${item.created_at.day} ${monthReference[item.created_at.month.toString()].toLowerCase()}, ${item.created_at.year}г., ${item.created_at.hours}:${item.created_at.minutes.toString().length \u003c 2 ? \"0\" + item.created_at.minutes.toString() : item.created_at.minutes.toString()} `;\n                            }\n                            catch (e) {\n                                itemCreated.textContent = `${item.created_at.day} ${monthReference[item.created_at.month.toString()]}, ${item.created_at.year}г., ${item.created_at.hours}:${item.created_at.minutes.toString().length \u003c 2 ? \"0\" + item.created_at.minutes.toString() : item.created_at.minutes.toString()} `;\n                            }\n                            itemStatus.textContent = item.status;\n                            itemRow.href = item.link;\n                            return itemRow;\n                        case chunkType.BUSINESS_TRIPS:\n                            itemContent = template.content.cloneNode(true);\n                            itemRow = itemContent.querySelector(\".business_trips-page_main-content_table-item\");\n                            itemName = itemRow.querySelector(\".business_trips-name\");\n                            itemStatus = itemRow.querySelector(\".business_trips-page_main-content_table-item-section_status\");\n                            itemStart = itemRow.querySelector(\".business_trips-start\");\n                            itemEnd = itemRow.querySelector(\".business_trips-end\");\n                            itemName.textContent = item.name;\n                            itemStatus.textContent = item.status;\n                            [startDay, startMonth, startYear] = item.start_date ? item.start_date.split(\".\") : [\"\", \"\", \"\"];\n                            [endDay, endMonth, endYear] = item.end_date ? item.end_date.split(\".\") : [\"\", \"\", \"\"];\n                            try {\n                                itemStart.textContent = `${startDay} ${monthReference[startMonth.replace(\"0\", \"\")].toLowerCase()}, ${startYear}г., ${item.start_date_obj.hours}:${item.start_date_obj.minutes.toString().length \u003c 2 ? \"0\" + item.start_date_obj.minutes.toString() : item.start_date_obj.minutes.toString()} `;\n                                itemEnd.textContent = `${endDay} ${monthReference[endMonth.replace(\"0\", \"\")].toLowerCase()}, ${endYear}г., ${item.end_date_obj.hours}:${item.end_date_obj.minutes.toString().length \u003c 2 ? \"0\" + item.end_date_obj.minutes.toString() : item.end_date_obj.minutes.toString()} `;\n                            }\n                            catch (e) {\n                                itemStart.textContent = `${startDay} ${monthReference[startMonth.replace(\"0\", \"\")]}, ${startYear}г., ${item.start_date_obj.hours}:${item.start_date_obj.minutes.toString().length \u003c 2 ? \"0\" + item.start_date_obj.minutes.toString() : item.start_date_obj.minutes.toString()} `;\n                                itemEnd.textContent = `${endDay} ${monthReference[endMonth.replace(\"0\", \"\")]}, ${endYear}г., ${item.end_date_obj.hours}:${item.end_date_obj.minutes.toString().length \u003c 2 ? \"0\" + item.end_date_obj.minutes.toString() : item.end_date_obj.minutes.toString()} `;\n                            }\n                            itemRow.href = item.link;\n                            return itemRow;\n                        case chunkType.VACATIONS:\n                            itemContent = template.content.cloneNode(true);\n                            itemRow = itemContent.querySelector(\".vacations-page_main-content_table-item\");\n                            itemName = itemRow.querySelector(\".vacations-name\");\n                            itemStatus = itemRow.querySelector(\".vacations-page_main-content_table-item-section_status\");\n                            itemStart = itemRow.querySelector(\".vacations-start\");\n                            itemEnd = itemRow.querySelector(\".vacations-end\");\n                            itemTypeEmployment = itemRow.querySelector(\".vacations-type-employment\");\n                            itemName.textContent = item.name;\n                            itemStatus.textContent = item.status;\n                            itemTypeEmployment.textContent = item.type_employment;\n                            [startDay, startMonth, startYear] = item.start_date ? item.start_date.split(\".\") : [\"\", \"\", \"\"];\n                            [endDay, endMonth, endYear] = item.end_date ? item.end_date.split(\".\") : [\"\", \"\", \"\"];\n                            itemStart.textContent = `${startDay} ${monthReference[startMonth.replace(\"0\", \"\")].toLowerCase()}, ${startYear}г., ${item.start_date_obj.hours}:${item.start_date_obj.minutes.toString().length \u003c 2 ? \"0\" + item.start_date_obj.minutes.toString() : item.start_date_obj.minutes.toString()} `;\n                            itemEnd.textContent = `${endDay} ${monthReference[endMonth.replace(\"0\", \"\")].toLowerCase()}, ${endYear}г., ${item.end_date_obj.hours}:${item.end_date_obj.minutes.toString().length \u003c 2 ? \"0\" + item.end_date_obj.minutes.toString() : item.end_date_obj.minutes.toString()} `;\n                            itemRow.href = item.link;\n                            return itemRow;\n                    }\n                    ;\n                }\n            }\n            ;\n            updateChunks(elements, pageChunkType, userId) {\n                var _a;\n                let propToUpdate;\n                if (pageChunkType === chunkType.SUB_TASKS) {\n                    propToUpdate = (_a = this.subordinateTasksChunks.find(obj =\u003e obj.userData.userId === userId)) === null || _a === void 0 ? void 0 : _a.tasks;\n                }\n                else {\n                    propToUpdate = this[pageChunkType];\n                }\n                ;\n                let rootToRender;\n                switch (pageChunkType) {\n                    case chunkType.ACTUAL_TASKS:\n                    case chunkType.ALL:\n                    case chunkType.IN_PROGRESS:\n                    case chunkType.DOCS_TASKS:\n                    case chunkType.LNA:\n                    case chunkType.OUTGOING_TASKS:\n                    case chunkType.SUB_TASKS:\n                        rootToRender = this.tasksTable;\n                        break;\n                    case chunkType.PERSONAL:\n                    case chunkType.LNA_DOCS:\n                    case chunkType.PERSONAL_DOCS:\n                        rootToRender = this.personnelDocumentsTable;\n                        break;\n                }\n                ;\n                if (propToUpdate) {\n                    const oldItems = propToUpdate.globalData;\n                    propToUpdate = this.sliceToChunks([...oldItems, ...elements], 10, rootToRender, pageChunkType);\n                }\n                ;\n            }\n            ;\n            setChunks(elements, pageChunkType, userData) {\n                if (userData) {\n                    const userTasks = this.subordinateTasksChunks.find(obj =\u003e obj.userData.userId === userData.userId);\n                    if (userTasks) {\n                        userTasks.tasks = this.sliceToChunks(elements, 10, this.tasksTable, pageChunkType);\n                    }\n                    else {\n                        const newUserObj = {\n                            userData,\n                            tasks: this.sliceToChunks(elements, 10, this.tasksTable, pageChunkType)\n                        };\n                        this.subordinateTasksChunks.push(newUserObj);\n                    }\n                    ;\n                }\n                else {\n                    let rootToRender;\n                    switch (pageChunkType) {\n                        case chunkType.ACTUAL_TASKS:\n                        case chunkType.ALL:\n                        case chunkType.IN_PROGRESS:\n                        case chunkType.DOCS_TASKS:\n                        case chunkType.LNA:\n                        case chunkType.OUTGOING_TASKS:\n                        case chunkType.SUB_TASKS:\n                            rootToRender = this.tasksTable;\n                            break;\n                        case chunkType.PERSONAL:\n                        case chunkType.PERSONAL_DOCS:\n                        case chunkType.LNA_DOCS:\n                            rootToRender = this.personnelDocumentsTable;\n                            break;\n                        case chunkType.BUSINESS_TRIPS:\n                            rootToRender = this.businessTripsTable;\n                            break;\n                        case chunkType.VACATIONS:\n                            rootToRender = this.vacationsTable;\n                            break;\n                    }\n                    ;\n                    this[pageChunkType] = this.sliceToChunks(elements, 10, rootToRender, pageChunkType);\n                }\n                ;\n            }\n            ;\n        }\n        ;\n        class Serializer {\n            setManagers(dataManager, systemDataManager) {\n                this.userDataManager = dataManager;\n                this.systemDataManager = systemDataManager;\n            }\n            ;\n            serializeName(user) {\n                return user.data.fullname \u0026\u0026 user.data.fullname.lastname \u0026\u0026 user.data.fullname.middlename\n                    ? `${user.data.fullname.lastname} ${user.data.fullname.firstname[0]}. ${user.data.fullname.middlename[0]}.`\n                    : user.data.fullname \u0026\u0026 user.data.fullname.lastname ? `${user.data.fullname.lastname} ${user.data.fullname.firstname[0]}.` : user.data.__name;\n            }\n            ;\n            serializeObjData(item) {\n                var _a, _b, _c, _d, _e, _f, _g;\n                const linkCode = item.code === \"holidays\" ? \"vacations\"\n                    : item.code === \"business_trips\" ? \"businesstrip_requests\" : item.code;\n                const linkNs = item.code === \"holidays\" ? \"absences\"\n                    : item.code === \"business_trips\" ? \"business_trips\" : item.namespace;\n                const itemStatus = item.data.kedo_status ? this.systemDataManager.statuses.find(s =\u003e s.id === item.data.kedo_status.id) : undefined;\n                const referenceCity = userDataManager.businessTripsRefs.find(city =\u003e city.objId === item.id);\n                const dateArray = item.code === \"overtime_work\" ? item.data.start_date ? new Datetime(item.data.start_date).format(\"DD.MM.YYYY\").split(\".\").map(Number) : item.data.date ? new Datetime(item.data.date).format(\"DD.MM.YYYY\").split(\".\").map(Number) : undefined : undefined;\n                const employmentPlacement = item.data.employment_placement || item.data.employment_place || item.data.employment_directory;\n                return {\n                    id: item.id,\n                    name: item.data.__name,\n                    code: item.code === \"business_trips\" ? \"businesstrip_requests\" : item.code === \"holidays\" ? \"vacations\" : item.code,\n                    ns: item.code === \"business_trips\" ? item.code : item.code === \"holidays\" ? \"absences\" : item.namespace,\n                    status: itemStatus ? itemStatus.data.name : item.data.__status \u0026\u0026 item.data.__status.status ? item.data.__status.status.name : \"Не определён\",\n                    status_code: itemStatus ? itemStatus.data.code : item.data.__status \u0026\u0026 item.data.__status.status ? item.data.__status.status.code : \"not implemented\",\n                    business_type: issuesWidgetCodes.indexOf(item.code) === -1 ? \"personnel_document\" : \"issue\",\n                    item_type: item.code === \"business_trips\" ? DocType.BUSINESS_TRIP\n                        : item.code === \"holidays\" ? DocType.VACATION\n                            : issuesWidgetCodes.indexOf(item.code) === -1 ? DocType.PERSONAL : DocType.ISSUE,\n                    render_zone: issuesWidgetCodes.indexOf(item.code) === -1 ? \"main-page_personnel-events-widget_container\" : \"main-page_issues-widget_container\",\n                    created_at: item.code === \"overtime_work\" ? new Datetime(item.data.__createdAt) : item.data.__createdAt,\n                    link: `${window.location.href}(p:item/${linkNs}/${linkCode}/${item.id})`,\n                    start_date: item.code === \"business_trips\" ? item.data.start_date_string : item.code === \"holidays\" ? item.data.start_string || item.data.rest_day_first \u0026\u0026 item.data.rest_day_first.format(\"DD.MM.YYYY\") : item.code === \"overtime_work\" \u0026\u0026 item.data.start_date_string ? item.data.start_date_string.split(\",\").length \u003e 1 ? item.data.start_date_string.split(\",\")[0] : item.data.start_date_string : item.data.date_start ? item.data.date_start.format(\"DD.MM.YYYY\") : item.data.__createdAt.format ? item.data.__createdAt.format(\"DD.MM.YYYY\") : undefined,\n                    end_date: item.code === \"business_trips\" ? item.data.end_date_string : item.code === \"holidays\" ? item.data.end_string || item.data.rest_day_second \u0026\u0026 item.data.rest_day_second.format(\"DD.MM.YYYY\") || item.data.rest_day_first \u0026\u0026 item.data.rest_day_first.format(\"DD.MM.YYYY\") : item.data.date_end ? item.data.date_end.format(\"DD.MM.YYYY\") : item.data.date_start ? item.data.date_start.format(\"DD.MM.YYYY\") : item.data.__createdAt.format ? item.data.__createdAt.format(\"DD.MM.YYYY\") : undefined,\n                    start_date_obj: item.code === \"business_trips\" ? item.data.start_date : item.code === \"holidays\" ? (_a = item.data.start) !== null \u0026\u0026 _a !== void 0 ? _a : item.data.rest_day_first : item.code === \"overtime_work\" \u0026\u0026 dateArray ? new TDate(dateArray[2], dateArray[1], dateArray[0]) : item.code === \"dismissal_app\" ? item.data.date_of_dismissal : (_b = item.data.date_start) !== null \u0026\u0026 _b !== void 0 ? _b : item.data.__createdAt,\n                    end_date_obj: item.code === \"business_trips\" ? item.data.end_date : item.code === \"holidays\" ? (_d = (_c = item.data.end) !== null \u0026\u0026 _c !== void 0 ? _c : item.data.rest_day_second) !== null \u0026\u0026 _d !== void 0 ? _d : item.data.rest_day_first : (_f = (_e = item.data.date_end) !== null \u0026\u0026 _e !== void 0 ? _e : item.data.date_end) !== null \u0026\u0026 _f !== void 0 ? _f : item.data.__createdAt,\n                    vacation_type: item.code === \"holidays\" \u0026\u0026 item.data.type_of ? item.data.type_of.name : undefined,\n                    vacation_code: item.code === \"holidays\" \u0026\u0026 item.data.type_of ? item.data.type_of.code : undefined,\n                    duration: item.code === \"holidays\" ? item.data.amount_of_days : item.code === \"business_trips\" ? item.data.duration : undefined,\n                    cityId: referenceCity ? referenceCity.cityId : undefined,\n                    cityName: (referenceCity \u0026\u0026 systemDataManager.allCities) \u0026\u0026 systemDataManager.allCities.find(city =\u003e city.id === referenceCity.cityId) ? systemDataManager.allCities.find(city =\u003e city.id === referenceCity.cityId).name : undefined,\n                    staffId: item.data.kedo_staff ? item.data.kedo_staff.id : undefined,\n                    work_type: item.data.work_type || \"\",\n                    type_employment: employmentPlacement ? (_g = this.systemDataManager.allEmploymentPlacements.find(employment =\u003e employment.id === employmentPlacement.id)) === null || _g === void 0 ? void 0 : _g.data.__name : undefined,\n                };\n            }\n            ;\n        }\n        ;\n        class DomManager {\n            constructor(userManager) {\n                this.userManager = userManager;\n                this.documentTemplate = undefined;\n                this.loader = undefined;\n                this.uploadableComponents = [];\n                this.parser = new DOMParser();\n                this.domLoaded = false;\n            }\n            ;\n            createComponent(tag, cls, id) {\n                const newElement = document.createElement(tag);\n                if (newElement.className.split(\" \").length \u003e 1) {\n                    newElement.classlist = cls.split(\" \").map(c =\u003e {\n                        return `.${c} `;\n                    }).join(\" \").trim();\n                }\n                else {\n                    newElement.className = cls;\n                }\n                ;\n                if (id) {\n                    newElement.id = id;\n                }\n                ;\n                return newElement;\n            }\n            ;\n            setActive(element) {\n                element.classList.add(\"active\");\n            }\n            ;\n            processComponent(element, elementData, setActive = false) {\n                const title = element.querySelector(`.${elementData.titleClass}`);\n                title.textContent = elementData.titleContent;\n                if (elementData.iconClass) {\n                    const iconContainer = element.querySelector(`.${elementData.iconClass}`);\n                    const svg = this.parser.parseFromString(elementData.iconContent, \"text/html\").body.firstChild;\n                    iconContainer.append(svg);\n                }\n                ;\n                if (elementData.extraContentClass) {\n                    const extraContentContainer = element.querySelector(`.${elementData.extraContentClass}`);\n                    extraContentContainer.textContent = elementData.extraContent;\n                }\n                ;\n                if (elementData.status) {\n                    const statusContainer = element.querySelector(\".status-name\");\n                    statusContainer.textContent = elementData.status;\n                }\n                ;\n                if (setActive) {\n                    this.setActive(element);\n                }\n                ;\n                if (elementData.link) {\n                    element.href = elementData.link;\n                }\n                ;\n            }\n            ;\n            renderComponent(domElement, elementToAppend, prepend = false, elementData, setActive = false, onclick) {\n                if (elementData) {\n                    this.processComponent(elementToAppend, elementData, setActive);\n                }\n                ;\n                if (onclick) {\n                    elementToAppend.addEventListener(\"click\", onclick);\n                }\n                ;\n                if (prepend) {\n                    if (Array.isArray(elementToAppend)) {\n                        domElement.prepend(...elementToAppend);\n                        return;\n                    }\n                    ;\n                    domElement.prepend(elementToAppend);\n                }\n                else {\n                    if (Array.isArray(elementToAppend)) {\n                        domElement.append(...elementToAppend);\n                        return;\n                    }\n                    ;\n                    domElement.appendChild(elementToAppend);\n                }\n                ;\n            }\n            ;\n            renderDocumentSection(refresh = false) {\n                this.paginator.personnelDocumentsTable = document.querySelector(\".documents-page_main-content_table-content\");\n                this.paginator.personnelDocumentsTableContent = document.querySelector(\".documents-page_main-content_table\");\n                this.paginator.emptyDocumentsTemplate = document.querySelector(\".documents-page_main-content_table-empty\");\n                this.paginator.setChunks(userDataManager.allUserDocs, chunkType.PERSONAL);\n                function expandMobileDocuments() {\n                    const mobileFooterDocumentsTypes = document.querySelector(\".documents-page_main-content_mobile_footer\");\n                    mobileFooterDocumentsTypes.classList.toggle(\"hidden\");\n                }\n                const docsStatusContainer = document.querySelector(\".documents-page_main-content_title_search-extend_input-status-values\");\n                const documentsSearchButton = document.querySelector(\".documents-search\");\n                const documentsFilterClearButton = document.querySelector(\".documents-reset\");\n                const documentsPaginator = document.querySelector(\".documents-page_main-content_paginator\");\n                const docsFilterButtons = document.querySelectorAll(\".documents-page_main-content_title-left .documents-page_main-content_title_tab\");\n                const docsFilterButtonsMobile = document.querySelectorAll(\".documents-page_main-content_mobile_footer-item:not(.mobile-docs-expand)\");\n                const restElements = document.querySelectorAll(\".documents-page_main-content_title_tab\");\n                const mobileExpandButton = document.querySelector(\".document-page_main-content_title_text\");\n                const mobileCloseExpandButton = document.querySelector(\".documents-page_main-content_mobile_footer-item\");\n                docsFilterButtons.forEach((node) =\u003e {\n                    node.addEventListener(\"click\", () =\u003e {\n                        this.paginator.handlePageChange(node, restElements);\n                        this.paginator.setPaginator(documentsPaginator, node.dataset.dataType);\n                    });\n                });\n                docsFilterButtonsMobile.forEach((node) =\u003e {\n                    node.addEventListener(\"click\", () =\u003e {\n                        this.paginator.setPaginator(documentsPaginator, node.dataset.dataType);\n                        expandMobileDocuments();\n                    });\n                });\n                refresh \u0026\u0026 refreshContainers([docsStatusContainer]);\n                for (let status of systemDataManager.statuses) {\n                    const newStatusItem = this.createComponent(\"div\", \"input-status-values_item search-item\");\n                    newStatusItem.dataset.statusCode = status.data.code;\n                    newStatusItem.textContent = status.data.name;\n                    newStatusItem.addEventListener(\"click\", () =\u003e {\n                        handleStatusChoice(newStatusItem);\n                    });\n                    this.renderComponent(docsStatusContainer, newStatusItem);\n                }\n                ;\n                if (!Context.data.event_listeners_set) {\n                    documentsSearchButton.addEventListener(\"click\", () =\u003e {\n                        this.paginator.setPaginator(documentsPaginator, documentsPaginator.dataset.dataType);\n                        const closeFiltersButton = documentsSearchButton.closest(\".common-content_title_search-extend\").querySelector(\".common-content_title_search-extend_title-img\");\n                        closeFiltersButton.click();\n                    });\n                    documentsFilterClearButton.addEventListener(\"click\", () =\u003e {\n                        userStorageManager.clearFilters(documentsFilterClearButton.dataset.reset);\n                        const closeFiltersButton = documentsFilterClearButton.closest(\".common-content_title_search-extend\").querySelector(\".common-content_title_search-extend_title-img\");\n                        closeFiltersButton.click();\n                    });\n                    [mobileExpandButton, mobileCloseExpandButton].forEach((button) =\u003e button.addEventListener(\"click\", expandMobileDocuments));\n                    this.handleSearch(\"documents\");\n                }\n                ;\n                if (this.paginator.personnelDocumentsChunks \u0026\u0026 this.paginator.personnelDocumentsChunks.globalData.length \u003e 0) {\n                    this.paginator.setPaginator(documentsPaginator, chunkType.PERSONAL);\n                }\n                ;\n            }\n            ;\n            handleSearch(firstClassWord) {\n                let search = document.querySelector(`.${firstClassWord}-page_main-content_title_search-input`);\n                let searchExtend = document.querySelector(`.${firstClassWord}-page_main-content_title_search-extend_input`);\n                if (search \u0026\u0026 searchExtend) {\n                    search.addEventListener(\"keyup\", () =\u003e {\n                        let mainSearch = document.querySelector(`.${firstClassWord}-page_main-content_title_search-input`);\n                        let searchExtend = document.querySelector(`.${firstClassWord}-page_main-content_title_search-extend_input`);\n                        searchExtend.value = mainSearch.value;\n                        const paginator = document.querySelector(`.${firstClassWord}-page_main-content_paginator`);\n                        this.paginator.setPaginator(paginator, paginator.dataset.dataType);\n                        if (searchExtend.value === \"\") {\n                            let resetButton = document.querySelector(`.${firstClassWord}-reset`);\n                            userStorageManager.clearFilters(resetButton.dataset.reset);\n                        }\n                    });\n                }\n            }\n            handleLoader(loaderType) {\n                const waitForLoader = window.setInterval(() =\u003e {\n                    const loader = document.querySelector(`.kedo-loader-wrapper[data-loader=${loaderType}]`);\n                    if (!loader) {\n                        return;\n                    }\n                    ;\n                    window.clearInterval(waitForLoader);\n                    loader.classList.toggle(\"hidden\");\n                }, 100);\n            }\n            ;\n        }\n        function refreshContainers(containers, classToDelete) {\n            if (classToDelete) {\n                Array.from(containers).forEach((container) =\u003e {\n                    const nodesToDelete = container.querySelectorAll(`.${classToDelete}`);\n                    nodesToDelete.forEach((node) =\u003e {\n                        node.remove();\n                    });\n                });\n                return;\n            }\n            ;\n            containers.forEach((container) =\u003e {\n                container.innerHTML = \"\";\n            });\n        }\n        ;\n        async function getOrRefreshData(refresh = false, refreshTasks = false) {\n            let userTasksObj;\n            async function setOrRefreshTasks() {\n                paginator.setChunks(userTasksObj.filter(task =\u003e task.task_type === TaskType.PERSONAL), chunkType.ALL);\n                paginator.setChunks(userTasksObj.filter(task =\u003e task.task_type === TaskType.OUTGOING), chunkType.OUTGOING_TASKS);\n                paginator.setChunks(userTasksObj.filter(task =\u003e task.is_personal \u0026\u0026 task.task_type === TaskType.PERSONAL), chunkType.DOCS_TASKS);\n                paginator.setChunks(userTasksObj.filter(task =\u003e (task.state === \"in_progress\" || task.state === \"assignment\") \u0026\u0026 task.task_type === TaskType.PERSONAL), chunkType.ACTUAL_TASKS);\n                if (refreshTasks) {\n                    const taskTypeButtons = document.querySelectorAll(\".tasks-page_main-content_title-left .tasks-page_main-content_title_tab\");\n                    let activeType = Array.from(taskTypeButtons).find((button) =\u003e button.classList.contains(\"active\"));\n                    if (activeType.dataset.dataType === \"actualTasksChunks\") {\n                        activeType = Array.from(document.querySelectorAll(\".tasks-page_main-content_task-types .task-list-type\")).find((button) =\u003e button.classList.contains(\"active\"));\n                    }\n                }\n                ;\n            }\n            ;\n            domManager.paginator = paginator;\n            const defaultFilter = (f, g) =\u003e {\n                return g.and(f.__deletedAt.eq(null), f.staff.link(userDataManager.staff));\n            };\n            const allVacations = await Context.fields.vacations_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.kedo_staff.link(userDataManager.staff))).size(1000).all().then(res =\u003e res.map(item =\u003e serializer.serializeObjData(item))).then(res =\u003e res.sort((a, b) =\u003e {\n                if (!a.start_date_obj \u0026\u0026 !b.start_date_obj) {\n                    return 0;\n                }\n                if (!a.start_date_obj) {\n                    return 1;\n                }\n                if (!b.start_date_obj) {\n                    return -1;\n                }\n                if (a.start_date_obj.before(b.start_date_obj)) {\n                    return -1;\n                }\n                if (a.start_date_obj.after(b.start_date_obj)) {\n                    return 1;\n                }\n                ;\n                return 0;\n            }));\n            const allBusinessTripsObj = await Context.fields.business_trips_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.kedo_staff.link(userDataManager.staff))).size(1000).all();\n            const businessTripsRefs = await Promise.all(allBusinessTripsObj.map(obj =\u003e {\n                return obj.data.__sourceRef ? obj.data.__sourceRef.fetch() : undefined;\n            })).then(res =\u003e res.filter(obj =\u003e obj)).then(res =\u003e res.map(obj =\u003e {\n                return {\n                    cityId: obj.data.destination_city ? obj.data.destination_city.id : undefined,\n                    objId: obj.id\n                };\n            }));\n            userDataManager.businessTripsRefs = businessTripsRefs;\n            const allBusinessTrips = allBusinessTripsObj.map(item =\u003e serializer.serializeObjData(item)).sort((a, b) =\u003e {\n                if (a.start_date_obj.before(b.start_date_obj)) {\n                    return -1;\n                }\n                ;\n                if (a.start_date_obj.after(b.start_date_obj)) {\n                    return 1;\n                }\n                ;\n                return 0;\n            });\n            const [allMedicalRequests, allTransferApplications, allExecutionDuties, allDismissalApp, allEmployments] = await Promise.all([\n                Context.fields.medical_request_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n                Context.fields.transfer_application_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n                Context.fields.execution_duties_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n                Context.fields.dismissal_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n                Context.fields.employment_app.app.search().where(defaultFilter).size(1000).all().then(data =\u003e data.map(item =\u003e serializer.serializeObjData(item))),\n            ]);\n            userDataManager.position = userDataManager.staff.data.position ? await userDataManager.staff.data.position.fetch() : undefined;\n            const allIssues = await Promise.all([\n                Context.fields.benefit_application_app.app.search().where(defaultFilter).size(1000).all(),\n                Context.fields.order_financial_assistance_app.app.search().where(defaultFilter).size(1000).all(),\n                Context.fields.certificate_app.app.search().where(defaultFilter).size(1000).all(),\n                Context.fields.category_assignment_app.app.search().where(defaultFilter).size(1000).all(),\n                Context.fields.employees_personal_data_app.app.search().where(defaultFilter).size(1000).all(),\n                Context.fields.free_from_app.app.search().where(defaultFilter).size(1000).all(),\n                Context.fields.application_for_the_transfer_of_salary_to_the_current_account_app.app.search().where(defaultFilter).size(1000).all(),\n                Context.fields.setlement_sheet_app.app.search().where(defaultFilter).size(1000).all()\n            ]);\n            const allIssuesObj = [].concat.apply([], allIssues).map((item) =\u003e serializer.serializeObjData(item)).sort((a, b) =\u003e {\n                if (a.created_at.before(b.created_at)) {\n                    return -1;\n                }\n                ;\n                if (a.created_at.after(b.created_at)) {\n                    return 1;\n                }\n                ;\n                return 0;\n            });\n            const personnelDocuments = [...allBusinessTrips, ...allVacations, ...allDismissalApp, ...allExecutionDuties, ...allMedicalRequests, ...allTransferApplications, ...allEmployments].sort((a, b) =\u003e {\n                let startObjA;\n                let startObjB;\n                if (!a.start_date_obj || !b.start_date_obj) {\n                    return 0;\n                }\n                ;\n                if (a.code === \"holidays\" || a.code === \"overtime_work\" || a.code === \"dismissal_app\") {\n                    startObjA = a.start_date_obj.asDatetime(new TTime());\n                }\n                else {\n                    startObjA = a.start_date_obj;\n                }\n                ;\n                if (b.code === \"holidays\" || b.code === \"overtime_work\" || b.code === \"dismissal_app\") {\n                    startObjB = b.start_date_obj.asDatetime(new TTime());\n                }\n                else {\n                    startObjB = b.start_date_obj;\n                }\n                ;\n                if (startObjA.before(startObjB)) {\n                    return -1;\n                }\n                ;\n                if (startObjA.after(startObjB)) {\n                    return 1;\n                }\n                ;\n                return 0;\n            });\n            userDataManager.personnelDocuments = personnelDocuments;\n            userDataManager.lastDocsForRender = [...userDataManager.personnelDocuments.filter(item =\u003e item.start_date_obj \u0026\u0026 item.start_date_obj.after(today.asDatetime(new TTime())) \u0026\u0026 item.status_code !== \"completed\").slice(0, 4), ...userDataManager.issues.slice(0, 4)];\n            userDataManager.vacations = allVacations;\n            userDataManager.businessTrips = allBusinessTrips;\n            userDataManager.allUserDocs = [...allIssuesObj, ...personnelDocuments].sort((a, b) =\u003e {\n                if (a.created_at.before(b.created_at)) {\n                    return 1;\n                }\n                ;\n                if (a.created_at.after(b.created_at)) {\n                    return -1;\n                }\n                ;\n                return 0;\n            });\n        }\n        ;\n        function renderOrRefreshComponents(refresh = false) {\n            if (!Context.data.event_listeners_set) {\n                window.setInterval(() =\u003e {\n                    getOrRefreshData(true).then(_ =\u003e {\n                        renderOrRefreshComponents(true);\n                    });\n                }, 60000);\n            }\n            ;\n            Context.data.event_listeners_set = true;\n        }\n        ;\n        function setDate(event) {\n            const [year, month, day] = [...event.target.dataset.calendarDay.split(\"-\")];\n            const dateString = `${day}.${month}.${year}`;\n            const calendarInput = event.target.closest(\".task-search-date\").querySelector(\"input\");\n            const calendarArrow = event.target.closest(\".task-search-date\").querySelector(\".documents-page_main-content_title_search-extend_input-date-arrow\");\n            const closestCalendar = event.target.closest(\".vanilla-calendar\");\n            const filterType = calendarInput.dataset.filter;\n            calendarArrow.style.transform = \"\";\n            calendarInput.value = dateString;\n            closestCalendar.classList.toggle(\"hidden\");\n            setFilterField(filterType, dateString);\n        }\n        ;\n        function setFilterField(filterType, filterValue) {\n            const filterObject = window.localStorage.getItem(\"documents_filters\") ? JSON.parse(window.localStorage.getItem(\"documents_filters\")) : {};\n            filterObject[filterType] = filterValue;\n            window.localStorage.setItem(\"documents_filters\", JSON.stringify(filterObject));\n        }\n        ;\n        async function getAllData() {\n            const [currentUser, allStaff] = await Promise.all([System.users.getCurrentUser(), Context.fields.staff_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()]);\n            const currentStaff = allStaff.find(staff =\u003e staff.data.ext_user \u0026\u0026 staff.data.ext_user.id === currentUser.id);\n            systemDataManager.allStaff = allStaff;\n            userDataManager.staff = currentStaff;\n            Context.data.staff_app = currentStaff;\n            userDataManager.user = currentUser;\n            const allStatuses = await Context.fields.statuses_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(100).all();\n            const allEmploymentDirectory = await Context.fields.staff_app.app.fields.employment_table.fields.employment_placement_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            systemDataManager.statuses = allStatuses;\n            systemDataManager.allEmploymentPlacements = allEmploymentDirectory;\n            serializer.setManagers(userDataManager, systemDataManager);\n            await getOrRefreshData().then(_ =\u003e {\n                userDataManager.allDocsLoaded = true;\n            });\n        }\n        ;\n        const userDataManager = new UserDataManager();\n        const systemDataManager = new SystemDataManager();\n        const userStorageManager = new UserStorageManager();\n        const serializer = new Serializer();\n        const paginator = new Paginator();\n        const today = new TDate();\n        const domManager = new DomManager(userStorageManager);\n        async function onInit() {\n            await getAllData();\n        }\n        async function onLoad() {\n            domManager.renderDocumentSection(false);\n            calendarObject.setCalendars();\n        }\n        return {\n            expandSearch,\n            clearFilters,\n            expandCalendar,\n            checkAndSetDate,\n            searchStatusExpand,\n            handleStatusChoice,\n            refreshContainers,\n            getOrRefreshData,\n            renderOrRefreshComponents,\n            setDate,\n            setFilterField,\n            getAllData,\n            onInit,\n            onLoad\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "expandSearch",
        "parameters": [],
        "type": ""
      },
      {
        "name": "clearFilters",
        "parameters": [],
        "type": ""
      },
      {
        "name": "expandCalendar",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "checkAndSetDate",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "searchStatusExpand",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "handleStatusChoice",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "refreshContainers",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "getOrRefreshData",
        "parameters": [
          {
            "name": "[object Object]",
            "type": ""
          },
          {
            "name": "[object Object]",
            "type": ""
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "renderOrRefreshComponents",
        "parameters": [
          {
            "name": "[object Object]",
            "type": ""
          }
        ],
        "type": ""
      },
      {
        "name": "setDate",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "setFilterField",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "getAllData",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "onInit",
        "parameters": [],
        "type": ""
      },
      {
        "name": "onLoad",
        "parameters": [],
        "type": ""
      }
    ]
  },
  "__createdAt": "2024-06-04T12:07:31.963625906Z",
  "__createdBy": "7e61e9a9-edda-49a3-baa2-87b36c4fbb6c",
  "__updatedAt": "2024-06-06T14:05:00.027919868Z",
  "__updatedBy": "7e61e9a9-edda-49a3-baa2-87b36c4fbb6c",
  "__deletedAt": null
}
