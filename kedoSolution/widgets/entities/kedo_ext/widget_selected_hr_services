{
  "__id": "018fe325-f2ed-7b0e-b694-d491cfc775d5",
  "namespace": "kedo_ext",
  "code": "widget_selected_hr_services",
  "__name": "Виджет Избранные кадровые сервисы",
  "description": "",
  "extensionZoneCode": "",
  "sort": 0,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 15,
  "hidden": false,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "icon": "business_box",
    "template": {
      "id": "1dc1be71-556e-4474-86ee-33858dcc9506",
      "descriptor": "component",
      "content": {
        "": [
          {
            "id": "a7d40518-8bc6-422e-928a-fd8e8fc23f66",
            "descriptor": "code",
            "values": {
              "contentPlaceholder": "",
              "html": "\u003cstyle\u003e\n    .widget-selected-hr-services .services-page_main-content_favorites {\n        display: flex;\n        flex-direction: column;\n        gap: 2rem;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_favorites_title {\n        font-size: 2rem;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_favorites_choice {\n        display: flex;\n        gap: 2rem;\n        flex-wrap: wrap;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_favorites_choice a.services-widget_item {\n        cursor: pointer;\n    }\n\n    .widget-selected-hr-services .common-content_title_tab {\n        border-radius: 8px;\n        background-color: transparent;\n        border: 1px solid #05F;\n        padding: .35rem 1rem;\n        color: #05F;\n        user-select: none;\n        transition: all .3s;\n        cursor: pointer;\n    }\n\n    .widget-selected-hr-services .common-content_title_tab.active {\n        background-color: #05F;\n        color: white;\n    }\n\n    .widget-selected-hr-services .common-content_title_tab:hover {\n        background-color: #05F;\n        color: white;\n    }\n\n    .widget-selected-hr-services .common-content_title_tab.active.blocked,\n    .widget-selected-hr-services .common-content_title_tab.blocked {\n        color: #FFF;\n        background-color: #dcdcdc;\n        pointer-events: none;\n        border: 1px solid #dcdcdc;\n    }\n\n    .widget-selected-hr-services .common-content_title_tab.services-page_main-content_favorites_add-service {\n        padding: 0.35rem 4rem;\n        max-width: fit-content;\n    }\n\n    .widget-selected-hr-services .services-widget_item {\n        display: flex;\n        padding: 1rem;\n        gap: .6rem;\n        align-items: center;\n        background-color: #FFF;\n        border-radius: 8px;\n        flex-grow: 1;\n        flex-basis: 24rem;\n        position: relative;\n        transition: all .3s;\n        cursor: default;\n    }\n\n    .widget-selected-hr-services a.services-widget_item {\n        color: black;\n        text-decoration: none;\n    }\n\n    .widget-selected-hr-services a.services-widget_item:hover {\n        box-shadow: 0px 0px 13px 0px rgba(0, 0, 0, 0.1);\n        text-decoration: none;\n    }\n\n    .widget-selected-hr-services .services-widget_item-img {\n        display: flex;\n    }\n\n    .widget-selected-hr-services .services-widget_item-label {\n        font-size: 14px;\n        font-weight: 400;\n        max-width: 14rem;\n    }\n\n    .widget-selected-hr-services .favorite-services-widget_item_delete {\n        position: absolute;\n        top: 0.5rem;\n        right: 1rem;\n        font-size: 14px;\n        font-weight: 600;\n        color: #E2E5E7;\n        transition: all .3s;\n    }\n\n    .widget-selected-hr-services .favorite-services-widget_item_delete:hover {\n        color: #84ADFF;\n        cursor: pointer;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_modal {\n        position: fixed;\n        width: 100%;\n        height: 100%;\n        background-color: #00000033;\n        z-index: 100;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        transition: all .3s;\n        opacity: 1;\n        left: 0;\n        top: 0;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_choices {\n        background-color: #FFF;\n        display: flex;\n        flex-direction: column;\n        background-color: white;\n        padding: .75rem 0;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_modal.hidden {\n        opacity: 0;\n        z-index: -1;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_choices_title {\n        border-bottom: 1px solid #D9D9D9;\n        padding: 0 1.5rem;\n    }\n\n    .widget-selected-hr-services .common-widget-title {\n        display: flex;\n        justify-content: space-between;\n        gap: 1rem;\n    }\n\n    .widget-selected-hr-services .common-content_title_text {\n        pointer-events: none;\n        font-size: 2rem;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_title_text_reminder {\n        padding: 0.75rem 1.5rem;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_choices-content {\n        display: flex;\n        flex-direction: column;\n        padding: .75rem 1.5rem;\n        flex-wrap: wrap;\n        max-height: 45rem;\n        border-bottom: 1px solid #D9D9D9;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_choices-content .favorite-services_choice_column {\n        flex-basis: 13.5rem;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_footer {\n        padding: .75rem 1rem;\n    }\n\n    .widget-selected-hr-services .common-content_title_search-extend_footer {\n        display: flex;\n        gap: 1rem;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_favorites .favorite-services_choice_column {\n        display: flex;\n        flex-direction: column;\n        flex-basis: 20rem;\n        gap: 2rem;\n        width: 30rem;\n    }\n\n    .widget-selected-hr-services .services-page_main-content_choices-content .favorite-services_choice_column {\n        flex-basis: 13.5rem;\n    }\n\n    .widget-selected-hr-services .favorite-services_choice_column {\n        display: flex;\n        flex-direction: column;\n        flex-basis: 20rem;\n        gap: 2rem;\n        width: 30rem;\n    }\n\n    .widget-selected-hr-services .favorite-services_choice_column-title {\n        font-size: 16px;\n    }\n\n    .widget-selected-hr-services .favorite-services_choice_column-item {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n    }\n\n    .widget-selected-hr-services .favorite-services_choice_column-item_checkbox {\n        border: 1px solid #BFBFBF;\n        width: 1.5rem;\n        height: 1.5rem;\n        flex-shrink: 0;\n        position: relative;\n    }\n\n    .widget-selected-hr-services .favorite-services_choice_column-item_checkbox:hover {\n        cursor: pointer;\n    }\n\n    .widget-selected-hr-services .favorite-services_choice_column-item_checkbox.selected::after {\n        content: \"\";\n        width: 9px;\n        height: 5px;\n        border-bottom: 2px solid #5082E6;\n        border-left: 2px solid #5082E6;\n        transform: rotateZ(-45deg);\n        top: 20%;\n        left: 18%;\n        position: absolute;\n    }\n\n    .widget-selected-hr-services .favorite-services_choice_column-item_checkbox.selected {\n        border: 1px solid #5082E6;\n    }\n\n    @media (max-width: 450px) {\n\n        .widget-selected-hr-services .common-content_title_tab.services-page_main-content_favorites_add-service {\n            max-width: 100%;\n            align-items: center;\n            justify-content: center;\n            display: flex;\n            height: 5rem;\n        }\n\n        .widget-selected-hr-services .services-widget_item {\n            flex-basis: 100%;\n        }\n\n        .widget-selected-hr-services .services-page_main-content_choices {\n            position: fixed;\n            top: 0;\n            height: 100%;\n        }\n\n        .widget-selected-hr-services .common-widget-title {\n            border-bottom: 1px solid #D9D9D9;\n            background-color: #FFF;\n            padding: .5rem .8rem;\n        }\n\n        .widget-selected-hr-services .common-content_title_text:not(.business_trips-page_main-content_title_text):not(.services-page_main-content_title_text):not(.vacations-page_main-content_title_text):after {\n            position: absolute;\n            content: url(\"data:image/svg+xml,%3Csvg width='9' height='6' viewBox='0 0 9 6' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M4.12969 5.09184C4.32812 5.31056 4.67188 5.31056 4.87031 5.09184L8.5047 1.08597C8.7962 0.764662 8.56822 0.25 8.13439 0.25H0.86561C0.431776 0.25 0.203796 0.764663 0.495303 1.08597L4.12969 5.09184Z' fill='black'/%3E%3C/svg%3E\");\n            right: -1.5rem;\n            top: -0.1rem;\n            cursor: pointer;\n            pointer-events: all;\n        }\n\n        .widget-selected-hr-services .common-content_title_text {\n            font-size: 16px;\n            font-weight: 600;\n            position: relative;\n        }\n    }\n\n    @media (max-width: 900px) {\n\n        .widget-selected-hr-services .services-page_main-content_choices-content {\n            flex-direction: row;\n            overflow: auto;\n            gap: 1rem;\n        }\n\n        .widget-selected-hr-services .favorite-services_choice_column {\n            gap: 1rem;\n        }\n    }\n\u003c/style\u003e\n\n\u003ctemplate class=\"favorite-services_choice_column_template\"\u003e\n    \u003cdiv class=\"favorite-services_choice_column\"\u003e\n        \u003ch4 class=\"favorite-services_choice_column-title\"\u003e\n\n        \u003c/h4\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"favorite-services_choice_column-item_template\"\u003e\n    \u003cdiv class=\"favorite-services_choice_column-item\"\u003e\n        \u003cdiv class=\"favorite-services_choice_column-item_checkbox\" onclick=\"\u003c%= Scripts %\u003e.handleServiceSelect(this)\"\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"favorite-services_choice_column-item_label\"\u003e\n\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"favorite_services-widget_item-template\"\u003e\n    \u003ca class=\"services-widget_item\"\u003e\n        \u003cdiv class=\"services-widget_item-img\"\u003e\n            \u003csvg width=\"36\" height=\"36\" viewbox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                \u003crect width=\"36\" height=\"36\" rx=\"8\" fill=\"#84ADFF\" /\u003e\n                \u003cpath\n                    d=\"M17.9997 10.084L15.4527 15.283L9.66699 16.1219L13.8582 20.2194L12.8563 25.9173L17.9997 23.1753L23.1442 25.9173L22.1497 20.2194L26.3337 16.1219L20.58 15.283L17.9997 10.084Z\"\n                    fill=\"white\" stroke=\"white\" stroke-linejoin=\"round\" /\u003e\n            \u003c/svg\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"services-widget_item-label\"\u003e\n\n        \u003c/div\u003e\n\n            \u003cdiv class=\"favorite-services-widget_item_delete\"\u003e\n                \u0026#10005;\n            \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\u003ctemplate class=\"services-widget_item-template\"\u003e\n    \u003ca class=\"services-widget_item\"\u003e\n        \u003cdiv class=\"services-widget_item-img\"\u003e\n            \u003csvg width=\"36\" height=\"36\" viewbox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                \u003crect width=\"36\" height=\"36\" rx=\"8\" fill=\"#84ADFF\" /\u003e\n                \u003cpath\n                    d=\"M17.9997 10.084L15.4527 15.283L9.66699 16.1219L13.8582 20.2194L12.8563 25.9173L17.9997 23.1753L23.1442 25.9173L22.1497 20.2194L26.3337 16.1219L20.58 15.283L17.9997 10.084Z\"\n                    fill=\"white\" stroke=\"white\" stroke-linejoin=\"round\" /\u003e\n            \u003c/svg\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"services-widget_item-label\"\u003e\n\n        \u003c/div\u003e\n\n        \u003c% if(!Context.data.for_viewing_only) { %\u003e\n            \u003cdiv class=\"favorite-services-widget_item_delete\"\u003e\n                \u0026#10005;\n            \u003c/div\u003e\n        \u003c% } %\u003e\n    \u003c/a\u003e\n\u003c/template\u003e\n\u003cdiv class=\"widget-selected-hr-services\"\u003e\n    \u003cdiv class=\"services-page_main-content_favorites\"\u003e\n        \u003ch4 class=\"services-page_main-content_favorites_title\"\u003e\n            \u003c% if(Context.data.heading \u0026\u0026 Context.data.heading.length\u003e 0) { %\u003e\n                \u003c%= Context.data.heading %\u003e\n                    \u003c% } else { %\u003e\n                        Избранные кадровые сервисы\n                        \u003c% } %\u003e\n        \u003c/h4\u003e\n\n        \u003cdiv class=\"services-page_main-content_favorites_choice\"\u003e\n            \u003c!-- mock --\u003e\n\n            \u003c!-- mock end --\u003e\n        \u003c/div\u003e\n        \u003c% if(!Context.data.for_viewing_only) { %\u003e\n            \u003cdiv class=\"common-content_title_tab services-page_main-content_favorites_add-service\"\n                onclick=\"\u003c%= Scripts %\u003e.closeServices()\"\u003e\n                + Сервис\n            \u003c/div\u003e\n            \u003c% } %\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"services-page_main-content_modal hidden\"\u003e\n        \u003cdiv class=\"services-page_main-content_choices\"\u003e\n            \u003cdiv class=\"services-page_main-content_choices_title common-widget-title\"\u003e\n                \u003ch3 class=\"services-page_main-content_title_text common-content_title_text\"\u003e\n                    Добавить сервис в избранное\n                \u003c/h3\u003e\n            \u003c/div\u003e\n            \u003cp class=\"services-page_main-content_title_text_reminder\"\u003e\n                Вы можете добавить в раздел избранных сервисов не более пяти сервисов.\n            \u003c/p\u003e\n            \u003cdiv class=\"services-page_main-content_choices-content\"\u003e\n\n            \u003c/div\u003e\n            \u003cdiv class=\"services-page_main-content_footer common-content_title_search-extend_footer\"\u003e\n                \u003cdiv class=\"common-content_title_tab active services-save-button\"\u003e\n                    Добавить\n                \u003c/div\u003e\n                \u003cdiv class=\"common-content_title_tab services-cancel-button\" onclick=\"\u003c%= Scripts %\u003e.closeServices()\"\u003e\n                    Отменить\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e",
              "hideContent": false
            }
          }
        ]
      }
    },
    "fields": [
      {
        "code": "heading",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Заголовок",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "for_viewing_only",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Только для просмотра",
          "data": {
            "additionalType": "checkbox",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      }
    ],
    "fieldVisibilityConditions": {
      "heading": {
        "enabled": false,
        "conditions": []
      },
      "for_viewing_only": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {},
    "clientScripts": "declare const document: any;\ndeclare const window: any;\ndeclare const console: any;\n\ntype service = {\n    name: string,\n    code: string,\n    link: string,\n};\ntype newIssueConstructor = {\n    name: string,\n    code?: string,\n    expandable: boolean,\n    issue_type?: string,\n    issues?: newIssueConstructor[]\n    link?: string\n};\ntype serviceLinkConstructor = {\n    name: string,\n    ns: string,\n    code: string,\n    fieldToChange?: string,\n    fieldValue?: any\n};\n\nlet service_manager: ServiceManager;\nlet userStorageManager: UserStorageManager;\n\nclass ServiceManager {\n\n    constructor(userManager: UserStorageManager) {\n        this.userManager = userManager;\n    };\n\n    userManager: UserStorageManager;\n\n    /** Отрисовка заявок */\n    renderServices() {\n\n        this.renderFavorites();\n\n        // Получение шаблонов и окна отображения сервисов для выбора\n        const favoriteServicesChoiceContainer = document.querySelector(\".services-page_main-content_choices-content\");\n        const favoriteServiceColumnTemplate = document.querySelector(\".favorite-services_choice_column_template\");\n        const favoriteServiceItemTemplate = document.querySelector(\".favorite-services_choice_column-item_template\");\n\n        defaultIssues.forEach(issue =\u003e {\n\n            const newColumnLabelContent = favoriteServiceColumnTemplate.content.cloneNode(true);\n            const newColumnLabelItem = newColumnLabelContent.querySelector(\".favorite-services_choice_column\");\n            const newColumnLabel = newColumnLabelItem.querySelector(\"h4\");\n\n            // Добавление имени сервиса\n            newColumnLabel.textContent = issue.name;\n\n            if (issue.expandable \u0026\u0026 issue.issues) {\n\n                issue.issues.forEach(listIssue =\u003e {\n\n                    // Если сервис - отпуска\n                    if (listIssue.code \u0026\u0026 issue.issue_type === \"vacation\") {\n\n                        const favoriteIssueContent = favoriteServiceItemTemplate.content.cloneNode(true);\n                        const favoriteIssueItem = favoriteIssueContent.querySelector(\".favorite-services_choice_column-item\");\n                        const favoriteIssueLabel = favoriteIssueContent.querySelector(\".favorite-services_choice_column-item_label\");\n\n                        favoriteIssueItem.dataset[\"service_code\"] = listIssue.code;\n                        favoriteIssueLabel.textContent = listIssue.name;\n                        this.renderComponent(newColumnLabelItem, favoriteIssueContent);\n\n                        return;\n                    };\n\n                    const favoriteIssueContent = favoriteServiceItemTemplate.content.cloneNode(true);\n                    const favoriteIssueLabel = favoriteIssueContent.querySelector(\".favorite-services_choice_column-item_label\");\n                    const favoriteIssueItem = favoriteIssueContent.querySelector(\".favorite-services_choice_column-item\");\n\n                    favoriteIssueLabel.textContent = listIssue.name;\n                    favoriteIssueItem.dataset[\"service_code\"] = listIssue.code;\n\n                    this.renderComponent(newColumnLabelItem, favoriteIssueContent);\n                });\n            }\n\n            this.renderComponent(favoriteServicesChoiceContainer, newColumnLabelItem);\n        });\n\n        const saveServicesButton = document.querySelector(\".services-save-button\");\n        userStorageManager.setTempServices();\n\n        if (userStorageManager.servicesCount \u003e 5) {\n            saveServicesButton.classList.toggle(\"blocked\");\n        };\n\n        // Добавление слушателя на кнопку \"Добавить\"\n        saveServicesButton.addEventListener(\"click\", () =\u003e {\n            userStorageManager.addServices();\n            closeServices();\n        });\n    }\n\n    /** Отрисовка избранных сервисов\n    * @param refresh признак, что необходимо обновление контейнера при обновлении страницы\n    */\n    renderFavorites(refresh = false) {\n\n        // Получение контейнера с избранными сервисами\n        const favoriteServicesContainer = document.querySelector(\".services-page_main-content_favorites_choice\");\n\n        refresh \u0026\u0026 refreshContainers([favoriteServicesContainer])\n\n        // Получение шаблонов для создания элементов\n        const serviceTemplate = document.querySelector(\".services-widget_item-template\");\n        const favoriteServiceTemplate = document.querySelector(\".favorite_services-widget_item-template\");\n\n        const services = this.userManager.getServices();\n\n        console.log(\"1\");\n\n        services.forEach(service =\u003e {\n\n            console.log(\"2\");\n\n            // Если есть код\n            if (service.code) {\n                console.log(\"3\");\n                const fixedLink = document.querySelector(`.fixed-vacations .${service.code}-vacation`);\n                //const fixedFavoriteLink = Context.data.for_viewing_only ? serviceTemplate.content.cloneNode(true) : favoriteServiceTemplate.content.cloneNode(true);\n                const fixedFavoriteLink = serviceTemplate.content.cloneNode(true);\n                const favoriteServiceName = fixedFavoriteLink.querySelector(\".services-widget_item-label\");\n                const fixedFavoriteItem = fixedFavoriteLink.querySelector(\".services-widget_item\");\n\n                fixedFavoriteItem.dataset[\"service_code\"] = service.code;\n                favoriteServiceName.textContent = service.name;\n\n                // Если разрешено редактирование, то добавляем слушателя на кнопку удаления\n                if (!Context.data.for_viewing_only) {\n                    const deleteServiceButton = fixedFavoriteLink.querySelector(\".favorite-services-widget_item_delete\");\n                    deleteServiceButton.addEventListener(\"click\", () =\u003e {\n                        userStorageManager.deleteService(fixedFavoriteItem)\n                    });\n                }\n\n                if (fixedLink) {\n                    // В зависимости от пометки \"Только для просмотра\", выбираем шаблон для рендера\n                    if (Context.data.for_viewing_only) {\n                        this.renderComponent(favoriteServicesContainer, fixedLink);\n                    }\n                    else {\n                        this.renderComponent(favoriteServicesContainer, fixedFavoriteLink);\n                    }\n                    return;\n                };\n            };\n\n            const newService = serviceTemplate.content.cloneNode(true);\n            const newFavoriteService = favoriteServiceTemplate.content.cloneNode(true);\n\n            const serviceNameNode = newService.querySelector(\".services-widget_item-label\");\n            const favoriteServiceNameNode = newFavoriteService.querySelector(\".services-widget_item-label\");\n            const serviceContainer = newService.querySelector(\".services-widget_item\");\n            const deleteServiceButton = newFavoriteService.querySelector(\".favorite-services-widget_item_delete\");\n            const favoriteServiceContainer = newFavoriteService.querySelector(\".services-widget_item\");\n\n            serviceContainer.dataset[\"service_code\"] = service.code;\n            favoriteServiceContainer.dataset[\"service_code\"] = service.code;\n            serviceNameNode.textContent = service.name;\n            favoriteServiceNameNode.textContent = service.name;\n            console.log(service.link);\n            serviceContainer.href = service.link;\n            favoriteServiceContainer.href = service.link;\n\n            if (!Context.data.for_viewing_only) {\n                deleteServiceButton.addEventListener(\"click\", () =\u003e {\n                    userStorageManager.deleteService(favoriteServiceContainer)\n                });\n            }\n\n            if (Context.data.for_viewing_only) {\n                this.renderComponent(favoriteServicesContainer, serviceContainer);\n            }\n            else {\n                this.renderComponent(favoriteServicesContainer, favoriteServiceContainer);\n            }\n\n        });\n\n        // Обновление кликабельности кнопки \"Добавить\" если избранных больше 5\n        if (userStorageManager.servicesCount \u003e 5) {\n            const saveServicesButton = document.querySelector(\".services-save-button\");\n            saveServicesButton.classList.toggle(\"blocked\");\n        };\n    };\n\n    /** Метод для рендера элемента в определенной области DOM\n     * @param domElement Контейнер, в который нужно вставить элемент\n     * @param elementToAppend Элемент для вставки (может быть массивом с DOM-элементами)\n     */\n    renderComponent(domElement: any, elementToAppend: any) {\n\n        if (Array.isArray(elementToAppend)) {\n            domElement.append(...elementToAppend);\n            return;\n        };\n        domElement.appendChild(elementToAppend);\n    };\n}\n\n/** Класс для хранения и парсинга информации о избранных сервисах пользователя и фильтров для объектов\n * @property baseUrl Адрес площадки\n * @property servicesCount Количество избранных сервисов пользователя\n * @property favoriteServices Массив объектов типа service\n */\nclass UserStorageManager {\n\n    constructor() {\n\n        // Если избранных сервисов нет\n        if (!window.localStorage.getItem(\"favorite_services\")) {\n            this.setDefaultServices(true);\n        };\n        this.favoriteServices = JSON.parse(window.localStorage.getItem(\"favorite_services\")).services;\n        this.servicesCount = this.favoriteServices.length;\n        this.baseUrl = System.getBaseUrl();\n    };\n\n    baseUrl: string;\n    servicesCount: number;\n    favoriteServices: service[];\n\n    /** Получить избранные заявки */\n    getServices() {\n        return this.favoriteServices\n    };\n\n    /** Управляет визуальным отображением галочек с выбранными сервисами */\n    setTempServices() {\n\n        const tempServices = document.querySelectorAll(\".services-page_main-content_choices-content .favorite-services_choice_column-item\");\n\n        tempServices.forEach((node: any) =\u003e {\n            if (this.favoriteServices.find(service =\u003e service.code === node.dataset[\"service_code\"])) {\n                const checkbox = node.querySelector(\".favorite-services_choice_column-item_checkbox\");\n                if (!checkbox.classList.contains(\"selected\")) {\n                    checkbox.classList.add(\"selected\");\n                }\n            }\n            else {\n                const checkbox = node.querySelector(\".favorite-services_choice_column-item_checkbox\");\n                if (checkbox.classList.contains(\"selected\")) {\n                    checkbox.classList.remove(\"selected\");\n                }\n            }\n        });\n    };\n\n    /** Парсит DOM, находит выбранные избранные сервисы, и записывает в браузерное хранилище */\n    addServices() {\n\n        // Получение checkbox'ов\n        const favoriteServicesContainer = document.querySelector(\".services-page_main-content_choices-content\");\n        const newServices = favoriteServicesContainer.querySelectorAll(\".favorite-services_choice_column-item:has(.selected)\");\n\n        // Получение нового массива избранных заявок\n        const favoriteServices: service[] = Array.from(newServices).map((node: any) =\u003e {\n\n            const serviceCode = node.dataset[\"service_code\"];\n            let referenceService: newIssueConstructor = \u003cnewIssueConstructor\u003e{};\n\n            for (let service of defaultIssues) {\n                if (!service.issues) {\n                    continue;\n                };\n                // Поиск сервиса\n                const innerService = service.issues.find(s =\u003e s.code === serviceCode);\n\n                if (innerService) {\n                    referenceService = innerService;\n                };\n            };\n\n            return \u003cservice\u003e{\n                name: referenceService.name,\n                code: referenceService.code,\n                link: referenceService.link\n            }\n        }).filter(item =\u003e item.code);\n\n        // Обновление данных\n        this.favoriteServices = favoriteServices;\n        this.servicesCount = this.favoriteServices.length;\n        window.localStorage.setItem(\"favorite_services\", JSON.stringify({\n            count: this.servicesCount,\n            services: this.favoriteServices\n        }));\n\n        service_manager.renderFavorites(true);\n    };\n\n    /** Удаляет сервисы со страницы */\n    deleteService(service: any) {\n\n        // Получение избранных сервисов\n        const favoriteServices = JSON.parse(window.localStorage.getItem(\"favorite_services\"));\n        // Получение из окна выбора сервисы\n        const mainFavoriteServices = document.querySelectorAll(`.main-page_services-widget_container .services-widget_item`);\n\n        // Удаление элемента сервиса\n        for (let node of mainFavoriteServices) {\n            if (node.dataset[\"service_code\"] === service.dataset[\"service_code\"]) {\n                node.remove();\n            };\n        };\n\n        // Обновление данных\n        favoriteServices.count--;\n        favoriteServices.services = favoriteServices.services.filter((item: service) =\u003e item.code !== service.dataset[\"service_code\"]);\n        window.localStorage.setItem(\"favorite_services\", JSON.stringify(favoriteServices));\n        this.favoriteServices = favoriteServices.services;\n\n        // Обновление кликабельности кнопки\n        if (this.favoriteServices.length \u003c 5) {\n            const saveServicesButton = document.querySelector(\".services-save-button\");\n            saveServicesButton.classList.remove(\"blocked\");\n        };\n        service.remove();\n        userStorageManager.setTempServices();\n    };\n\n    /** Генерирует ссылку для сервиса */\n    parseLink(service: serviceLinkConstructor): string {\n        // const linkObj = encodeURIComponent(`${service.fieldToChange ? `{${`\"data\":{\"${service.fieldToChange}\":[${JSON.stringify(service.fieldValue)}]}}`}` : \"\"}`).replace(/:/g, \"%3A\").replace(/,/g, \"%2C\");\n        // const fullUrl = `(p:item/${service.ns}/${service.code}${linkObj ? `;values=${linkObj}` : \"\"})`;\n        const fullUrl = `(p:item/${service.ns}/${service.code})`;\n        return fullUrl;\n    };\n\n    /** Получить дефолтный набор избранных сервисов */\n    setDefaultServices(setStorageValue = false) {\n        const services: service[] = defaultServices.map(service =\u003e {\n            return {\n                name: service.name,\n                link: this.parseLink(service),\n                code: service.fieldValue ? service.fieldValue.code : service.code\n            };\n        });\n        const favoriteServices = {\n            count: 5,\n            services\n        }\n        if (setStorageValue) {\n            window.localStorage.setItem(\"favorite_services\", JSON.stringify(favoriteServices));\n        };\n    };\n};\n\nasync function onLoad(): Promise\u003cvoid\u003e {\n\n    userStorageManager = new UserStorageManager();\n    service_manager = new ServiceManager(userStorageManager);\n    service_manager.renderServices();\n}\n\n/** Функция для сброса компонентов внутри контейнеров при обновлении данных страницы\n * @param containers массив с DOM-элементами\n * @param classToDelete при указании класса - удаляет элементы с подходящим классом внутри контейнера\n */\nfunction refreshContainers(containers: any[], classToDelete?: string): void {\n    if (classToDelete) {\n        Array.from(containers).forEach((container: any) =\u003e {\n            const nodesToDelete = container.querySelectorAll(`.${classToDelete}`);\n            nodesToDelete.forEach((node: any) =\u003e {\n                node.remove();\n            });\n        });\n\n        return;\n    };\n\n    containers.forEach((container: any) =\u003e {\n        container.innerHTML = \"\";\n    });\n};\n\n/** Метод открывает/закрывает модальное окно для выбора избранных заявок */\nfunction closeServices() {\n\n    const servicesModal = document.querySelector(\".services-page_main-content_modal\");\n    servicesModal.classList.toggle(\"hidden\");\n    \n    // Если было закрытие, то обновляем чекбоксы\n    if (servicesModal.classList.contains(\"hidden\")) {\n        userStorageManager.setTempServices();\n    }\n};\n\n/** Метод проверяет возможность добавления сервисов в выбранные */\nfunction handleServiceSelect(target: any) {\n\n    target.classList.toggle(\"selected\");\n    target.selected = !target.selected;\n\n    const favoriteServicesContainer = document.querySelector(\".services-page_main-content_choices-content\");\n    const newServices = favoriteServicesContainer.querySelectorAll(\".favorite-services_choice_column-item:has(.selected)\");\n    const tempServicesCount = newServices.length;\n    const saveButton = document.querySelector(\".services-save-button\");\n\n    if (tempServicesCount \u003e 5) {\n        saveButton.classList.add(\"blocked\");\n    }\n    else if (saveButton.classList.contains(\"blocked\")) {\n        saveButton.classList.remove(\"blocked\");\n    };\n};\n\nconst defaultServices: serviceLinkConstructor[] = [\n    {\n        name: \"Отпуск без сохранения ЗП\",\n        ns: \"absences\",\n        code: \"vacations\",\n        fieldToChange: \"type_vacation\",\n        fieldValue: {\n            code: \"unpaid\",\n            name: \"Отпуск без сохранения заработной платы\"\n        }\n    },\n    {\n        name: \"Запросить справку\",\n        ns: \"personnel_documents\",\n        code: \"certificate\"\n    },\n    {\n        name: \"Уведомить о больничном\",\n        ns: \"absences\",\n        code: \"vacations\",\n        fieldToChange: \"type_vacation\",\n        fieldValue: {\n            code: \"sick_leave\",\n            name: \"Больничный\"\n        }\n    },\n    {\n        name: \"Оформить командировку\",\n        ns: \"business_trips\",\n        code: \"businesstrip_requests\",\n    },\n    {\n        name: \"Отпуск оплачиваемый\",\n        ns: \"absences\",\n        code: \"vacations\",\n        fieldToChange: \"type_vacation\",\n        fieldValue: {\n            code: \"basic\",\n            name: \"Ежегодный оплачиваемый отпуск\"\n        }\n    }\n];\n\nconst defaultIssues: newIssueConstructor[] = [\n    {\n        name: \"Отпуск/отсутствие\",\n        expandable: true,\n        issue_type: \"vacation\",\n        issues: [\n            {\n                name: \"Ежегодный оплачиваемый отпуск\",\n                code: \"basic\",\n                expandable: false,\n                link: `${window.location.href}(p:item/absences/vacations)`\n            },\n            {\n                name: \"Отпуск без сохранения ЗП\",\n                code: \"unpaid\",\n                expandable: false,\n                link: `${window.location.href}(p:item/absences/vacations)`\n            },\n            {\n                name: \"Дополнительный отдых\",\n                code: \"additional\",\n                expandable: false,\n                link: `${window.location.href}(p:item/absences/vacations)`\n            },\n            {\n                name: \"Оплачиваемый учебный отпуск\",\n                code: \"study\",\n                expandable: false,\n                link: `${window.location.href}(p:item/absences/vacations)`\n            },\n            {\n                name: \"Больничный\",\n                code: \"sick_leave\",\n                expandable: false,\n                link: `${window.location.href}(p:item/absences/vacations)`\n            },\n            {\n                name: \"По беременности и родам\",\n                code: \"pregnancy\",\n                expandable: false,\n                link: `${window.location.href}(p:item/absences/vacations)`\n            },\n            {\n                name: \"По уходу за ребенком\",\n                code: \"child_care\",\n                expandable: false,\n                link: `${window.location.href}(p:item/absences/vacations)`\n            },\n            {\n                name: \"Исполнение гос. и общ. обязанностей\",\n                code: \"duty\",\n                expandable: false,\n                link: `${window.location.href}(p:item/absences/vacations)`\n            }\n        ]\n    },\n    {\n        name: \"Перевод/увольнение\",\n        issue_type: \"issue\",\n        expandable: true,\n        issues: [\n            {\n                name: \"Заявка на перевод\",\n                code: \"transfer_application\",\n                expandable: false,\n                link: `${window.location.href}(p:item/kedo/transfer_application)`\n            },\n            {\n                name: \"Заявка на увольнение\",\n                expandable: false,\n                code: \"dismissal_app\",\n                link: `${window.location.href}(p:item/kedo/dismissal_app)`\n            },\n        ]\n    },\n    {\n        name: \"Заявления на выплату\",\n        issue_type: \"finance\",\n        expandable: true,\n        issues: [\n            {\n                name: \"Изменение расчетного счета\",\n                expandable: false,\n                code: \"application_for_the_transfer_of_salary_to_the_current_account\",\n                link: `${window.location.href}(p:item/personnel_documents/application_for_the_transfer_of_salary_to_the_current_account)`\n            },\n            {\n                name: \"Мат. помощь\",\n                expandable: false,\n                code: \"application_for_financial_assistance\",\n                link: `${window.location.href}(p:item/personnel_documents/application_for_financial_assistance)`\n            },\n            {\n                name: \"Пособие\",\n                expandable: false,\n                code: \"benefit_application\",\n                link: `${window.location.href}(p:item/personnel_documents/benefit_application)`\n            },\n        ]\n    },\n    {\n        name: \"Прочие заявления\",\n        issue_type: \"personal_data\",\n        expandable: true,\n        issues: [\n            {\n                name: \"Изменить личные данные\",\n                expandable: false,\n                code: \"employees_personal_data\",\n                link: `${window.location.href}(p:item/kedo/employees_personal_data)`\n            },\n            {\n                name: \"Присвоить льготную категорию\",\n                expandable: false,\n                code: \"category_assignment\",\n                link: `${window.location.href}(p:item/kedo/category_assignment)`\n            },\n            {\n                name: \"В свободной форме\",\n                expandable: false,\n                code: \"free_from\",\n                link: `${window.location.href}(p:item/personnel_documents/free_from)`\n            },\n            {\n                name: \"Справка\",\n                expandable: false,\n                code: \"certificate\",\n                link: `${window.location.href}(p:item/personnel_documents/certificate)`\n            },\n            {\n                name: \"Командировка\",\n                expandable: false,\n                code: \"businesstrip_requests\",\n                link: `${window.location.href}(p:item/business_trips/businesstrip_requests)`\n            },\n            {\n                name: \"Вызвать на работу в нерабочее время\",\n                expandable: false,\n                code: \"overtime_work\",\n                link: `${window.location.href}(p:item/time_tracking/overtime_work)`\n            },\n        ]\n    }\n    // {\n    //     name: \"Заявки в IT\",\n    //     issue_type: \"issue\",\n    //     expandable: true,\n    //     issues: [\n    //         {\n    //             name: \"Создать заявку\",\n    //             expandable: false,\n    //             code: \"applications\",\n    //             link: `${window.location.href}(p:run/service_desk.applications/creating_request_by_external_user;values=%7B%7D)`\n    //         }\n    //     ]\n    // },\n];",
    "clientScriptOptions": {
      "allowServer": true
    },
    "serverScripts": "/* Server scripts module */\n",
    "serverScriptOptions": {}
  },
  "dataNamespace": "",
  "dataCode": "",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        let service_manager;\n        let userStorageManager;\n        class ServiceManager {\n            constructor(userManager) {\n                this.userManager = userManager;\n            }\n            ;\n            renderServices() {\n                this.renderFavorites();\n                const favoriteServicesChoiceContainer = document.querySelector(\".services-page_main-content_choices-content\");\n                const favoriteServiceColumnTemplate = document.querySelector(\".favorite-services_choice_column_template\");\n                const favoriteServiceItemTemplate = document.querySelector(\".favorite-services_choice_column-item_template\");\n                defaultIssues.forEach(issue =\u003e {\n                    const newColumnLabelContent = favoriteServiceColumnTemplate.content.cloneNode(true);\n                    const newColumnLabelItem = newColumnLabelContent.querySelector(\".favorite-services_choice_column\");\n                    const newColumnLabel = newColumnLabelItem.querySelector(\"h4\");\n                    newColumnLabel.textContent = issue.name;\n                    if (issue.expandable \u0026\u0026 issue.issues) {\n                        issue.issues.forEach(listIssue =\u003e {\n                            if (listIssue.code \u0026\u0026 issue.issue_type === \"vacation\") {\n                                const favoriteIssueContent = favoriteServiceItemTemplate.content.cloneNode(true);\n                                const favoriteIssueItem = favoriteIssueContent.querySelector(\".favorite-services_choice_column-item\");\n                                const favoriteIssueLabel = favoriteIssueContent.querySelector(\".favorite-services_choice_column-item_label\");\n                                favoriteIssueItem.dataset[\"service_code\"] = listIssue.code;\n                                favoriteIssueLabel.textContent = listIssue.name;\n                                this.renderComponent(newColumnLabelItem, favoriteIssueContent);\n                                return;\n                            }\n                            ;\n                            const favoriteIssueContent = favoriteServiceItemTemplate.content.cloneNode(true);\n                            const favoriteIssueLabel = favoriteIssueContent.querySelector(\".favorite-services_choice_column-item_label\");\n                            const favoriteIssueItem = favoriteIssueContent.querySelector(\".favorite-services_choice_column-item\");\n                            favoriteIssueLabel.textContent = listIssue.name;\n                            favoriteIssueItem.dataset[\"service_code\"] = listIssue.code;\n                            this.renderComponent(newColumnLabelItem, favoriteIssueContent);\n                        });\n                    }\n                    this.renderComponent(favoriteServicesChoiceContainer, newColumnLabelItem);\n                });\n                const saveServicesButton = document.querySelector(\".services-save-button\");\n                userStorageManager.setTempServices();\n                if (userStorageManager.servicesCount \u003e 5) {\n                    saveServicesButton.classList.toggle(\"blocked\");\n                }\n                ;\n                saveServicesButton.addEventListener(\"click\", () =\u003e {\n                    userStorageManager.addServices();\n                    closeServices();\n                });\n            }\n            renderFavorites(refresh = false) {\n                const favoriteServicesContainer = document.querySelector(\".services-page_main-content_favorites_choice\");\n                refresh \u0026\u0026 refreshContainers([favoriteServicesContainer]);\n                const serviceTemplate = document.querySelector(\".services-widget_item-template\");\n                const favoriteServiceTemplate = document.querySelector(\".favorite_services-widget_item-template\");\n                const services = this.userManager.getServices();\n                console.log(\"1\");\n                services.forEach(service =\u003e {\n                    console.log(\"2\");\n                    if (service.code) {\n                        console.log(\"3\");\n                        const fixedLink = document.querySelector(`.fixed-vacations .${service.code}-vacation`);\n                        const fixedFavoriteLink = serviceTemplate.content.cloneNode(true);\n                        const favoriteServiceName = fixedFavoriteLink.querySelector(\".services-widget_item-label\");\n                        const fixedFavoriteItem = fixedFavoriteLink.querySelector(\".services-widget_item\");\n                        fixedFavoriteItem.dataset[\"service_code\"] = service.code;\n                        favoriteServiceName.textContent = service.name;\n                        if (!Context.data.for_viewing_only) {\n                            const deleteServiceButton = fixedFavoriteLink.querySelector(\".favorite-services-widget_item_delete\");\n                            deleteServiceButton.addEventListener(\"click\", () =\u003e {\n                                userStorageManager.deleteService(fixedFavoriteItem);\n                            });\n                        }\n                        if (fixedLink) {\n                            if (Context.data.for_viewing_only) {\n                                this.renderComponent(favoriteServicesContainer, fixedLink);\n                            }\n                            else {\n                                this.renderComponent(favoriteServicesContainer, fixedFavoriteLink);\n                            }\n                            return;\n                        }\n                        ;\n                    }\n                    ;\n                    const newService = serviceTemplate.content.cloneNode(true);\n                    const newFavoriteService = favoriteServiceTemplate.content.cloneNode(true);\n                    const serviceNameNode = newService.querySelector(\".services-widget_item-label\");\n                    const favoriteServiceNameNode = newFavoriteService.querySelector(\".services-widget_item-label\");\n                    const serviceContainer = newService.querySelector(\".services-widget_item\");\n                    const deleteServiceButton = newFavoriteService.querySelector(\".favorite-services-widget_item_delete\");\n                    const favoriteServiceContainer = newFavoriteService.querySelector(\".services-widget_item\");\n                    serviceContainer.dataset[\"service_code\"] = service.code;\n                    favoriteServiceContainer.dataset[\"service_code\"] = service.code;\n                    serviceNameNode.textContent = service.name;\n                    favoriteServiceNameNode.textContent = service.name;\n                    console.log(service.link);\n                    serviceContainer.href = service.link;\n                    favoriteServiceContainer.href = service.link;\n                    if (!Context.data.for_viewing_only) {\n                        deleteServiceButton.addEventListener(\"click\", () =\u003e {\n                            userStorageManager.deleteService(favoriteServiceContainer);\n                        });\n                    }\n                    if (Context.data.for_viewing_only) {\n                        this.renderComponent(favoriteServicesContainer, serviceContainer);\n                    }\n                    else {\n                        this.renderComponent(favoriteServicesContainer, favoriteServiceContainer);\n                    }\n                });\n                if (userStorageManager.servicesCount \u003e 5) {\n                    const saveServicesButton = document.querySelector(\".services-save-button\");\n                    saveServicesButton.classList.toggle(\"blocked\");\n                }\n                ;\n            }\n            ;\n            renderComponent(domElement, elementToAppend) {\n                if (Array.isArray(elementToAppend)) {\n                    domElement.append(...elementToAppend);\n                    return;\n                }\n                ;\n                domElement.appendChild(elementToAppend);\n            }\n            ;\n        }\n        class UserStorageManager {\n            constructor() {\n                if (!window.localStorage.getItem(\"favorite_services\")) {\n                    this.setDefaultServices(true);\n                }\n                ;\n                this.favoriteServices = JSON.parse(window.localStorage.getItem(\"favorite_services\")).services;\n                this.servicesCount = this.favoriteServices.length;\n                this.baseUrl = System.getBaseUrl();\n            }\n            ;\n            getServices() {\n                return this.favoriteServices;\n            }\n            ;\n            setTempServices() {\n                const tempServices = document.querySelectorAll(\".services-page_main-content_choices-content .favorite-services_choice_column-item\");\n                tempServices.forEach((node) =\u003e {\n                    if (this.favoriteServices.find(service =\u003e service.code === node.dataset[\"service_code\"])) {\n                        const checkbox = node.querySelector(\".favorite-services_choice_column-item_checkbox\");\n                        if (!checkbox.classList.contains(\"selected\")) {\n                            checkbox.classList.add(\"selected\");\n                        }\n                    }\n                    else {\n                        const checkbox = node.querySelector(\".favorite-services_choice_column-item_checkbox\");\n                        if (checkbox.classList.contains(\"selected\")) {\n                            checkbox.classList.remove(\"selected\");\n                        }\n                    }\n                });\n            }\n            ;\n            addServices() {\n                const favoriteServicesContainer = document.querySelector(\".services-page_main-content_choices-content\");\n                const newServices = favoriteServicesContainer.querySelectorAll(\".favorite-services_choice_column-item:has(.selected)\");\n                const favoriteServices = Array.from(newServices).map((node) =\u003e {\n                    const serviceCode = node.dataset[\"service_code\"];\n                    let referenceService = {};\n                    for (let service of defaultIssues) {\n                        if (!service.issues) {\n                            continue;\n                        }\n                        ;\n                        const innerService = service.issues.find(s =\u003e s.code === serviceCode);\n                        if (innerService) {\n                            referenceService = innerService;\n                        }\n                        ;\n                    }\n                    ;\n                    return {\n                        name: referenceService.name,\n                        code: referenceService.code,\n                        link: referenceService.link\n                    };\n                }).filter(item =\u003e item.code);\n                this.favoriteServices = favoriteServices;\n                this.servicesCount = this.favoriteServices.length;\n                window.localStorage.setItem(\"favorite_services\", JSON.stringify({\n                    count: this.servicesCount,\n                    services: this.favoriteServices\n                }));\n                service_manager.renderFavorites(true);\n            }\n            ;\n            deleteService(service) {\n                const favoriteServices = JSON.parse(window.localStorage.getItem(\"favorite_services\"));\n                const mainFavoriteServices = document.querySelectorAll(`.main-page_services-widget_container .services-widget_item`);\n                for (let node of mainFavoriteServices) {\n                    if (node.dataset[\"service_code\"] === service.dataset[\"service_code\"]) {\n                        node.remove();\n                    }\n                    ;\n                }\n                ;\n                favoriteServices.count--;\n                favoriteServices.services = favoriteServices.services.filter((item) =\u003e item.code !== service.dataset[\"service_code\"]);\n                window.localStorage.setItem(\"favorite_services\", JSON.stringify(favoriteServices));\n                this.favoriteServices = favoriteServices.services;\n                if (this.favoriteServices.length \u003c 5) {\n                    const saveServicesButton = document.querySelector(\".services-save-button\");\n                    saveServicesButton.classList.remove(\"blocked\");\n                }\n                ;\n                service.remove();\n                userStorageManager.setTempServices();\n            }\n            ;\n            parseLink(service) {\n                const fullUrl = `(p:item/${service.ns}/${service.code})`;\n                return fullUrl;\n            }\n            ;\n            setDefaultServices(setStorageValue = false) {\n                const services = defaultServices.map(service =\u003e {\n                    return {\n                        name: service.name,\n                        link: this.parseLink(service),\n                        code: service.fieldValue ? service.fieldValue.code : service.code\n                    };\n                });\n                const favoriteServices = {\n                    count: 5,\n                    services\n                };\n                if (setStorageValue) {\n                    window.localStorage.setItem(\"favorite_services\", JSON.stringify(favoriteServices));\n                }\n                ;\n            }\n            ;\n        }\n        ;\n        async function onLoad() {\n            userStorageManager = new UserStorageManager();\n            service_manager = new ServiceManager(userStorageManager);\n            service_manager.renderServices();\n        }\n        function refreshContainers(containers, classToDelete) {\n            if (classToDelete) {\n                Array.from(containers).forEach((container) =\u003e {\n                    const nodesToDelete = container.querySelectorAll(`.${classToDelete}`);\n                    nodesToDelete.forEach((node) =\u003e {\n                        node.remove();\n                    });\n                });\n                return;\n            }\n            ;\n            containers.forEach((container) =\u003e {\n                container.innerHTML = \"\";\n            });\n        }\n        ;\n        function closeServices() {\n            const servicesModal = document.querySelector(\".services-page_main-content_modal\");\n            servicesModal.classList.toggle(\"hidden\");\n            if (servicesModal.classList.contains(\"hidden\")) {\n                userStorageManager.setTempServices();\n            }\n        }\n        ;\n        function handleServiceSelect(target) {\n            target.classList.toggle(\"selected\");\n            target.selected = !target.selected;\n            const favoriteServicesContainer = document.querySelector(\".services-page_main-content_choices-content\");\n            const newServices = favoriteServicesContainer.querySelectorAll(\".favorite-services_choice_column-item:has(.selected)\");\n            const tempServicesCount = newServices.length;\n            const saveButton = document.querySelector(\".services-save-button\");\n            if (tempServicesCount \u003e 5) {\n                saveButton.classList.add(\"blocked\");\n            }\n            else if (saveButton.classList.contains(\"blocked\")) {\n                saveButton.classList.remove(\"blocked\");\n            }\n            ;\n        }\n        ;\n        const defaultServices = [\n            {\n                name: \"Отпуск без сохранения ЗП\",\n                ns: \"absences\",\n                code: \"vacations\",\n                fieldToChange: \"type_vacation\",\n                fieldValue: {\n                    code: \"unpaid\",\n                    name: \"Отпуск без сохранения заработной платы\"\n                }\n            },\n            {\n                name: \"Запросить справку\",\n                ns: \"personnel_documents\",\n                code: \"certificate\"\n            },\n            {\n                name: \"Уведомить о больничном\",\n                ns: \"absences\",\n                code: \"vacations\",\n                fieldToChange: \"type_vacation\",\n                fieldValue: {\n                    code: \"sick_leave\",\n                    name: \"Больничный\"\n                }\n            },\n            {\n                name: \"Оформить командировку\",\n                ns: \"business_trips\",\n                code: \"businesstrip_requests\",\n            },\n            {\n                name: \"Отпуск оплачиваемый\",\n                ns: \"absences\",\n                code: \"vacations\",\n                fieldToChange: \"type_vacation\",\n                fieldValue: {\n                    code: \"basic\",\n                    name: \"Ежегодный оплачиваемый отпуск\"\n                }\n            }\n        ];\n        const defaultIssues = [\n            {\n                name: \"Отпуск/отсутствие\",\n                expandable: true,\n                issue_type: \"vacation\",\n                issues: [\n                    {\n                        name: \"Ежегодный оплачиваемый отпуск\",\n                        code: \"basic\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/absences/vacations)`\n                    },\n                    {\n                        name: \"Отпуск без сохранения ЗП\",\n                        code: \"unpaid\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/absences/vacations)`\n                    },\n                    {\n                        name: \"Дополнительный отдых\",\n                        code: \"additional\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/absences/vacations)`\n                    },\n                    {\n                        name: \"Оплачиваемый учебный отпуск\",\n                        code: \"study\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/absences/vacations)`\n                    },\n                    {\n                        name: \"Больничный\",\n                        code: \"sick_leave\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/absences/vacations)`\n                    },\n                    {\n                        name: \"По беременности и родам\",\n                        code: \"pregnancy\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/absences/vacations)`\n                    },\n                    {\n                        name: \"По уходу за ребенком\",\n                        code: \"child_care\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/absences/vacations)`\n                    },\n                    {\n                        name: \"Исполнение гос. и общ. обязанностей\",\n                        code: \"duty\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/absences/vacations)`\n                    }\n                ]\n            },\n            {\n                name: \"Перевод/увольнение\",\n                issue_type: \"issue\",\n                expandable: true,\n                issues: [\n                    {\n                        name: \"Заявка на перевод\",\n                        code: \"transfer_application\",\n                        expandable: false,\n                        link: `${window.location.href}(p:item/kedo/transfer_application)`\n                    },\n                    {\n                        name: \"Заявка на увольнение\",\n                        expandable: false,\n                        code: \"dismissal_app\",\n                        link: `${window.location.href}(p:item/kedo/dismissal_app)`\n                    },\n                ]\n            },\n            {\n                name: \"Заявления на выплату\",\n                issue_type: \"finance\",\n                expandable: true,\n                issues: [\n                    {\n                        name: \"Изменение расчетного счета\",\n                        expandable: false,\n                        code: \"application_for_the_transfer_of_salary_to_the_current_account\",\n                        link: `${window.location.href}(p:item/personnel_documents/application_for_the_transfer_of_salary_to_the_current_account)`\n                    },\n                    {\n                        name: \"Мат. помощь\",\n                        expandable: false,\n                        code: \"application_for_financial_assistance\",\n                        link: `${window.location.href}(p:item/personnel_documents/application_for_financial_assistance)`\n                    },\n                    {\n                        name: \"Пособие\",\n                        expandable: false,\n                        code: \"benefit_application\",\n                        link: `${window.location.href}(p:item/personnel_documents/benefit_application)`\n                    },\n                ]\n            },\n            {\n                name: \"Прочие заявления\",\n                issue_type: \"personal_data\",\n                expandable: true,\n                issues: [\n                    {\n                        name: \"Изменить личные данные\",\n                        expandable: false,\n                        code: \"employees_personal_data\",\n                        link: `${window.location.href}(p:item/kedo/employees_personal_data)`\n                    },\n                    {\n                        name: \"Присвоить льготную категорию\",\n                        expandable: false,\n                        code: \"category_assignment\",\n                        link: `${window.location.href}(p:item/kedo/category_assignment)`\n                    },\n                    {\n                        name: \"В свободной форме\",\n                        expandable: false,\n                        code: \"free_from\",\n                        link: `${window.location.href}(p:item/personnel_documents/free_from)`\n                    },\n                    {\n                        name: \"Справка\",\n                        expandable: false,\n                        code: \"certificate\",\n                        link: `${window.location.href}(p:item/personnel_documents/certificate)`\n                    },\n                    {\n                        name: \"Командировка\",\n                        expandable: false,\n                        code: \"businesstrip_requests\",\n                        link: `${window.location.href}(p:item/business_trips/businesstrip_requests)`\n                    },\n                    {\n                        name: \"Вызвать на работу в нерабочее время\",\n                        expandable: false,\n                        code: \"overtime_work\",\n                        link: `${window.location.href}(p:item/time_tracking/overtime_work)`\n                    },\n                ]\n            }\n        ];\n        return {\n            onLoad,\n            refreshContainers,\n            closeServices,\n            handleServiceSelect\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "onLoad",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "refreshContainers",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "closeServices",
        "parameters": [],
        "type": ""
      },
      {
        "name": "handleServiceSelect",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      }
    ]
  },
  "__createdAt": "2024-06-04T12:07:46.152512419Z",
  "__createdBy": "7e61e9a9-edda-49a3-baa2-87b36c4fbb6c",
  "__updatedAt": "2024-06-06T08:51:28.712625729Z",
  "__updatedBy": "7e61e9a9-edda-49a3-baa2-87b36c4fbb6c",
  "__deletedAt": null
}
