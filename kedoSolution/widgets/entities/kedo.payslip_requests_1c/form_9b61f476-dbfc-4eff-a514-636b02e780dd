{"__id":"018e0b0d-d0f3-7fe0-95a1-87a3f1e092f3","namespace":"kedo.payslip_requests_1c","code":"form_9b61f476-dbfc-4eff-a514-636b02e780dd","__name":"Форма запуска","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":4,"hidden":true,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"2d066cba-6066-498a-ac19-41a3bc4bbd6b","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"formType":"start-process-form","formGroup":{"path":["context"]},"systemFunctions":{}},"content":{"[footer]":[{"id":"cc734fcd-17d6-4b8c-8529-91a25cc2a94e","descriptor":"buttons-panel","values":{"buttons":{"path":["actionButtons"]}}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"d66b99ed-27f2-425e-8d99-fd739cf9d524","descriptor":"dynamic-form-row","values":{"__readOnly":null,"bindingMode":false,"__relativeURL":"","onChangeValue":{"kind":"Function","name":"generateByOnChange","type":"client"},"showDisplayName":true,"__outlet":"","tooltip":null,"required":true,"__baseURL":"","hideEmpty":false,"__isConstValues":[],"__renderContentOnDemand":false,"control":{"path":["context","generate_by"]}}},{"id":"c54ffdbd-a81a-4845-973b-47d04497da5e","descriptor":"dynamic-form-row","values":{"bindingMode":false,"showDisplayName":true,"control":{"path":["context","organization"]},"tooltip":null,"__outlet":"","__baseURL":"","hideEmpty":false,"required":false,"__readOnly":true,"__relativeURL":"","__isConstValues":[],"__renderContentOnDemand":false}},{"id":"b6f3cdbe-3eb4-4b16-ba1f-e98c9c737c71","descriptor":"dynamic-form-row","values":{"__outlet":"","__baseURL":"","__isConstValues":[],"required":{"path":["subdivisions_visible"]},"bindingMode":false,"__relativeURL":"","control":{"path":["context","subdivisions"]},"showCreateItem":false,"__readOnly":null,"showDisplayName":true,"__renderContentOnDemand":false,"tooltip":null,"__hidden":{"path":["subdivisions_visible"],"modifier":"not"},"hideEmpty":false}},{"id":"993c8313-ec53-47b9-89d5-42091f898e47","descriptor":"dynamic-form-row","values":{"__baseURL":"","hideEmpty":false,"bindingMode":false,"showCreateItem":false,"control":{"path":["context","staffs"]},"__outlet":"","__isConstValues":[],"showDisplayName":true,"tooltip":null,"__relativeURL":"","__renderContentOnDemand":false,"__hidden":{"path":["staffs_visible"],"modifier":"not"},"required":{"path":["staffs_visible"]},"__readOnly":null}},{"id":"1ec73797-6077-4f4c-bff5-d176e9438799","descriptor":"dynamic-form-row","values":{"control":{"path":["context","month"]},"__outlet":"","__readOnly":null,"__relativeURL":"","onChangeValue":{"kind":"Function","name":"set_period","type":"client"},"__isConstValues":[],"__renderContentOnDemand":false,"tooltip":null,"required":true,"__baseURL":"","hideEmpty":false,"bindingMode":false,"showDisplayName":true}},{"id":"93e55480-8fd2-4b97-9dac-3073e3869b25","descriptor":"dynamic-form-row","values":{"__renderContentOnDemand":false,"control":{"path":["context","year"]},"tooltip":null,"__outlet":"","__readOnly":null,"__relativeURL":"","__isConstValues":[],"required":true,"__baseURL":"","hideEmpty":false,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"set_period","type":"client"},"showDisplayName":true}},{"id":"dd0e52fb-72bc-48ec-90ac-34c8dadcf2c7","descriptor":"dynamic-form-row","values":{"__relativeURL":"","__isConstValues":[],"required":false,"tooltip":null,"__outlet":"","__baseURL":"","hideEmpty":false,"__readOnly":true,"bindingMode":false,"showDisplayName":true,"control":{"path":["period"]},"__renderContentOnDemand":false}}]}}],"[sidebar]":[{"id":"0ceaa8ec-5cdc-4385-9a6b-b0ae1e04039b","descriptor":"sidebar-widget","content":{"":[{"id":"2c1bfe32-44b9-46d5-bee7-2ed66205f4d6","descriptor":"user-guide","values":{"userGuide":{"path":["instruction"]}}}]}},{"id":"2112f287-a8ad-433c-862d-f9808c2d4f7b","descriptor":"sidebar-widget","content":{"":[{"id":"8900384e-a047-46b0-8ba7-462c23711e72","descriptor":"target-widget","values":{"context":{"path":["context"]}}}]}}],"[headerControls]":[],"[headerCustomization]":[]}},"fields":[{"code":"subdivisions_visible","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать поле \"Подразделения\"?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}},{"code":"staffs_visible","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать поле \"Сотрудники\"?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}},{"code":"period","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Расчётный период","data":{"additionalType":"string"},"input":true,"output":true}}],"fieldVisibilityConditions":{"period":{"enabled":false,"conditions":[]},"staffs_visible":{"enabled":false,"conditions":[]},"subdivisions_visible":{"enabled":false,"conditions":[]}},"scriptOptions":{"allowNamespace":true},"clientScripts":"/* Client scripts module */\n\n// Статус трудоустроен.\nconst signed_document = Context.fields.staffs.app.fields.__status.variants.signed_documents;\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    const user = await System.users.getCurrentUser();\n\n    const staff = await Context.fields.staffs.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.ext_user.eq(user)\n        ))\n        .first();\n\n    if (!staff) {\n        throw new Error(\"Не найдена карточка сотрудника.\");\n    }\n\n    if (!staff.data.organization) {\n        throw new Error(\"В карточке сотрудника не указана организация.\");\n    }\n\n    Context.data.organization = staff.data.organization;\n\n    /** Вешаем ограничения на подразделения */\n    Context.fields.subdivisions.data.setFilter((f, c, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.is_closed.eq(false),\n        f.organization.link(Context.data.organization!)\n    ));\n\n    // Устанавливаем текущую дату и год.\n    await set_date();\n    // Расчёт периода.\n    await set_period();\n\n    /** На основе мест занятости по организации сотрудника-инициатора получаем всех сотрудников  */\n    const employment_placement = await Namespace.app.employment_directory.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__status.eq(Namespace.app.employment_directory.fields.__status.variants.actual),\n            f.organization.link(Context.data.organization!)\n        ))\n        .size(10000)\n        .all();\n\n    const staff_ids = [... new Set(\n        employment_placement\n            .filter(f =\u003e f.data.staff != undefined)\n            .map(f =\u003e f.data.staff!.id)\n    )];\n\n    Context.fields.staffs.data.setFilter((f, c, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.__id.in(staff_ids),\n        f.__status.eq(signed_document),\n    ));\n}\n\nasync function generateByOnChange(): Promise\u003cvoid\u003e {\n    ViewContext.data.subdivisions_visible = false;\n    ViewContext.data.staffs_visible = false;\n\n    if (!Context.data.generate_by) {\n        return;\n    }\n\n    const variants = Context.fields.generate_by.variants;\n\n    switch (Context.data.generate_by.code) {\n        case variants.organization.code: {\n            break;\n        }\n\n        case variants.staff.code: {\n            ViewContext.data.staffs_visible = true;\n            break;\n        }\n\n        case variants.subdivision.code: {\n            ViewContext.data.subdivisions_visible = true;\n            break;\n        }\n\n        default: {\n            break;\n        }\n    }\n}\n\n// На основе текущей даты установить год и месяц.\nasync function set_date(): Promise\u003cvoid\u003e {\n    const currentDate = new Datetime();\n    const month = currentDate.month;\n\n    Context.data.year = String(currentDate.year);\n\n    switch (month) {\n        case 1:\n            Context.data.month = Context.fields.month.variants.january;\n            break;\n\n        case 2:\n            Context.data.month = Context.fields.month.variants.february;\n            break;\n\n        case 3:\n            Context.data.month = Context.fields.month.variants.march;\n            break;\n\n        case 4:\n            Context.data.month = Context.fields.month.variants.april;\n            break;\n\n        case 5:\n            Context.data.month = Context.fields.month.variants.may;\n            break;\n\n        case 6:\n            Context.data.month = Context.fields.month.variants.june;\n            break;\n\n        case 7:\n            Context.data.month = Context.fields.month.variants.july;\n            break;\n\n        case 8:\n            Context.data.month = Context.fields.month.variants.august;\n            break;\n\n        case 9:\n            Context.data.month = Context.fields.month.variants.september;\n            break;\n\n        case 10:\n            Context.data.month = Context.fields.month.variants.october;\n            break;\n\n        case 11:\n            Context.data.month = Context.fields.month.variants.november;\n            break;\n\n        case 12:\n            Context.data.month = Context.fields.month.variants.december;\n            break;\n\n        default:\n            break;\n    }\n}\n\n// Вычисление расчётного периода.\nasync function set_period(): Promise\u003cvoid\u003e {\n    if (Context.data.month \u0026\u0026 Context.data.year) {\n        const year = Number(Context.data.year);\n        const month = Context.fields.month.data.variants.findIndex(f =\u003e f.code == Context.data.month!.code) + 1;\n        const start_date = new TDate(year, month, 1);\n        const end_date = new TDate(year, month + 1, 1).addDate(0, 0, -1);\n        Context.data.start_period_date = start_date;\n        Context.data.end_period_date = end_date;\n        ViewContext.data.period = `с ${start_date.format('DD MMMM YYYY г.')} по ${end_date.format('DD MMMM YYYY г.')}`;\n    }\n}\n","clientScriptOptions":{"allowNamespace":true,"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{"allowNamespace":true},"dataFieldCode":"context"},"dataNamespace":"kedo.payslip_requests_1c","dataCode":"_process_create_paylist_request_1c","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        const signed_document = Context.fields.staffs.app.fields.__status.variants.signed_documents;\n        async function onInit() {\n            const user = await System.users.getCurrentUser();\n            const staff = await Context.fields.staffs.app.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(user)))\n                .first();\n            if (!staff) {\n                throw new Error(\"Не найдена карточка сотрудника.\");\n            }\n            if (!staff.data.organization) {\n                throw new Error(\"В карточке сотрудника не указана организация.\");\n            }\n            Context.data.organization = staff.data.organization;\n            Context.fields.subdivisions.data.setFilter((f, c, g) =\u003e g.and(f.__deletedAt.eq(null), f.is_closed.eq(false), f.organization.link(Context.data.organization)));\n            await set_date();\n            await set_period();\n            const employment_placement = await Namespace.app.employment_directory.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(Namespace.app.employment_directory.fields.__status.variants.actual), f.organization.link(Context.data.organization)))\n                .size(10000)\n                .all();\n            const staff_ids = [...new Set(employment_placement\n                    .filter(f =\u003e f.data.staff != undefined)\n                    .map(f =\u003e f.data.staff.id))];\n            Context.fields.staffs.data.setFilter((f, c, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(staff_ids), f.__status.eq(signed_document)));\n        }\n        async function generateByOnChange() {\n            ViewContext.data.subdivisions_visible = false;\n            ViewContext.data.staffs_visible = false;\n            if (!Context.data.generate_by) {\n                return;\n            }\n            const variants = Context.fields.generate_by.variants;\n            switch (Context.data.generate_by.code) {\n                case variants.organization.code: {\n                    break;\n                }\n                case variants.staff.code: {\n                    ViewContext.data.staffs_visible = true;\n                    break;\n                }\n                case variants.subdivision.code: {\n                    ViewContext.data.subdivisions_visible = true;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n        }\n        async function set_date() {\n            const currentDate = new Datetime();\n            const month = currentDate.month;\n            Context.data.year = String(currentDate.year);\n            switch (month) {\n                case 1:\n                    Context.data.month = Context.fields.month.variants.january;\n                    break;\n                case 2:\n                    Context.data.month = Context.fields.month.variants.february;\n                    break;\n                case 3:\n                    Context.data.month = Context.fields.month.variants.march;\n                    break;\n                case 4:\n                    Context.data.month = Context.fields.month.variants.april;\n                    break;\n                case 5:\n                    Context.data.month = Context.fields.month.variants.may;\n                    break;\n                case 6:\n                    Context.data.month = Context.fields.month.variants.june;\n                    break;\n                case 7:\n                    Context.data.month = Context.fields.month.variants.july;\n                    break;\n                case 8:\n                    Context.data.month = Context.fields.month.variants.august;\n                    break;\n                case 9:\n                    Context.data.month = Context.fields.month.variants.september;\n                    break;\n                case 10:\n                    Context.data.month = Context.fields.month.variants.october;\n                    break;\n                case 11:\n                    Context.data.month = Context.fields.month.variants.november;\n                    break;\n                case 12:\n                    Context.data.month = Context.fields.month.variants.december;\n                    break;\n                default:\n                    break;\n            }\n        }\n        async function set_period() {\n            if (Context.data.month \u0026\u0026 Context.data.year) {\n                const year = Number(Context.data.year);\n                const month = Context.fields.month.data.variants.findIndex(f =\u003e f.code == Context.data.month.code) + 1;\n                const start_date = new TDate(year, month, 1);\n                const end_date = new TDate(year, month + 1, 1).addDate(0, 0, -1);\n                Context.data.start_period_date = start_date;\n                Context.data.end_period_date = end_date;\n                ViewContext.data.period = `с ${start_date.format('DD MMMM YYYY г.')} по ${end_date.format('DD MMMM YYYY г.')}`;\n            }\n        }\n        return {\n            onInit,\n            generateByOnChange,\n            set_date,\n            set_period\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"generateByOnChange","parameters":[],"type":"[object Object]"},{"name":"set_date","parameters":[],"type":"[object Object]"},{"name":"set_period","parameters":[],"type":"[object Object]"}]},"__createdAt":"2024-03-04T20:00:38.643944878Z","__createdBy":"b9287795-55a7-42be-989a-2677b5bb0a2c","__updatedAt":"2024-03-13T12:52:41.343484777Z","__updatedBy":"b9287795-55a7-42be-989a-2677b5bb0a2c","__deletedAt":null}
