{"__id":"018c8758-3350-7cc3-8656-b55bf3026f0f","namespace":"kedo.payslip_requests_1c","code":"form_ffaaf90b-62d8-4dc4-adbc-708f0d564c55","__name":"Форма запуска","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":3,"hidden":true,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"e7412a05-2a72-4d0f-8954-50e04cf569cd","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"__isConstValues":[],"sidebarAvailable":false,"__renderContentAsync":false,"formType":"start-process-form","formGroup":{"path":["context"]}},"content":{"[footer]":[{"id":"cc734fcd-17d6-4b8c-8529-91a25cc2a94e","descriptor":"buttons-panel","values":{"buttons":{"path":["actionButtons"]}}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"d29b50f5-6235-48f2-a02f-a0764ead1f7e","descriptor":"row","values":{"__outlet":"","__baseURL":"","__relativeURL":"","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"a943c924-20ae-49c9-8ed9-13cabc1b1bb5","descriptor":"column","content":{"":[{"id":"dcfed958-2fe8-4344-b931-2e52c2042413","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"showDisplayName":true,"control":{"path":["context","generate_by"]},"required":true,"hideEmpty":false,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"generate_by_onchange","type":"client"},"tooltip":null,"__hidden":{"path":["show_generate_by"],"modifier":"not"},"__readOnly":null}},{"id":"2c5a630f-cf0a-4973-afde-9bb03f49c6a3","descriptor":"dynamic-form-row","values":{"showDisplayName":true,"hideEmpty":false,"bindingMode":false,"showCreateItem":false,"required":{"path":["show_organization"]},"__readOnly":null,"onChangeValue":{"kind":"Function","name":"organization_onchange","type":"client"},"__isConstValues":[],"control":{"path":["context","organization"]},"tooltip":null,"__hidden":{"path":["show_organization"],"modifier":"not"}}},{"id":"e0c22510-ad26-4418-8478-44f5f060a646","descriptor":"dynamic-form-row","values":{"hideEmpty":false,"__readOnly":null,"onChangeValue":{"kind":"Function","name":"subdivisions_onchange","type":"client"},"__isConstValues":[],"showDisplayName":true,"tooltip":null,"__hidden":{"path":["show_subdivision"],"modifier":"not"},"required":{"path":["show_subdivision"]},"control":{"path":["context","subdivisions"]},"bindingMode":false,"showCreateItem":false}},{"id":"479f98f2-f56f-45bc-9b09-77df1cb3d0ba","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"control":{"path":["context","staffs"]},"tooltip":null,"__hidden":{"path":["show_staffs"],"modifier":"not"},"hideEmpty":false,"showCreateItem":false,"showDisplayName":true,"required":{"path":["show_staffs"]},"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"staffs_onchange","type":"client"}}},{"id":"136c54b1-9c36-492e-8803-5478e9cd4b88","descriptor":"dynamic-form-row","values":{"required":true,"__readOnly":null,"showDisplayName":true,"onChangeValue":{"kind":"Function","name":"set_period","type":"client"},"__isConstValues":[],"control":{"path":["context","month"]},"tooltip":null,"hideEmpty":false,"bindingMode":false}},{"id":"328fdb20-0082-4744-bf59-1a35684556c4","descriptor":"dynamic-form-row","values":{"required":true,"__readOnly":null,"showDisplayName":true,"control":{"path":["context","year"]},"tooltip":null,"hideEmpty":false,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"set_period","type":"client"},"__isConstValues":[]}},{"id":"b1f37539-6a32-4db9-bd78-695d773532a2","descriptor":"dynamic-form-row","values":{"required":false,"__readOnly":true,"showDisplayName":true,"control":{"path":["period"]},"tooltip":null,"__styles":"display: flex; justify-content: center;","hideEmpty":false,"bindingMode":false,"__isConstValues":[]}}]}}]}},{"id":"3453410e-a4b2-4414-833e-101cd300bb5b","descriptor":"kedo@custom_info","descriptorVersion":1,"values":{"__outlet":"","__styles":"width: 100%;","__baseURL":"","info_type":[{"code":"warning","name":"Предупреждение"}],"info_string":{"path":["infoblock_text"]},"__relativeURL":"","__isConstValues":[],"__hidden":{"path":["show_infoblock"],"modifier":"not"}}}]}}],"[sidebar]":[{"id":"0ceaa8ec-5cdc-4385-9a6b-b0ae1e04039b","descriptor":"sidebar-widget","content":{"":[{"id":"2c1bfe32-44b9-46d5-bee7-2ed66205f4d6","descriptor":"user-guide","values":{"userGuide":{"path":["instruction"]}}}]}},{"id":"2112f287-a8ad-433c-862d-f9808c2d4f7b","descriptor":"sidebar-widget","content":{"":[{"id":"8900384e-a047-46b0-8ba7-462c23711e72","descriptor":"target-widget","values":{"context":{"path":["context"]}}}]}}],"[headerControls]":[],"[headerCustomization]":[]}},"fields":[{"code":"show_generate_by","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":true,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать поле \"Сформировать по\"","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"show_organization","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать поле \"Организация\"","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"show_subdivision","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать поле \"Подразделения\"","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"show_staffs","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать поле \"Сотрудники\"","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"infoblock_text","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Текст инфоблока","data":{"additionalType":"text"}}},{"code":"show_infoblock","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать инфоблок","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"period","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Расчётный период","data":{"additionalType":"string"}}},{"code":"staff_list","type":"JSON","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Список сотрудников","data":{}}}],"fieldVisibilityConditions":{"period":{"enabled":false,"conditions":[]},"staff_list":{"enabled":false,"conditions":[]},"show_staffs":{"enabled":false,"conditions":[]},"infoblock_text":{"enabled":false,"conditions":[]},"show_infoblock":{"enabled":false,"conditions":[]},"show_generate_by":{"enabled":false,"conditions":[]},"show_subdivision":{"enabled":false,"conditions":[]},"show_organization":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"type Staff = ApplicationItem\u003cApplication$kedo$staff$Data, any\u003e;\n\n// Статус трудоустроен.\nconst signed_document = Context.fields.staffs.app.fields.__status.variants.signed_documents;\n\ninterface IStaffLine {\n    name : string,\n    payslipStatus : string,\n    error : string,\n}\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    console.log(\"start form 14.11\")\n\n    const user = await System.users.getCurrentUser();\n\n    const staff = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.ext_user.eq(user)\n    )).first();\n\n    if (!staff) {\n        // Не найдена карточка сотрудника. Блокируем дальнейшие действия.\n        ViewContext.data.show_generate_by = false;\n        await show_infoblock('Не найдена карточка сотрудника. Дальнейшие действия заблокированы.');\n        return;\n    }\n\n    if (!staff.data.organization) {\n        // У сотрудника не указана организация. Блокируем дальнейшние действия.\n        ViewContext.data.show_generate_by = false;\n        await show_infoblock('У вас не указана орагнизация. Дальнейшие действия заблокированы.');\n    }\n\n    // Устанавливаем текущую дату и год.\n    await set_date();\n    // Расчёт периода.\n    await set_period();\n\n    // Устанавливаем ограничения на выбор приложений:\n    //  - Только организация сотрудника-инициатора\n    //  - Только подразделения организации сотрудника-инициатора\n    //  - Только сотрудники организации сотрудника-инициатора\n    Context.fields.organization.data.setFilter((f, c, g) =\u003e f.__id.eq(staff.data.organization!.id));\n    Context.fields.subdivisions.data.setFilter((f, c, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.organization.link(staff.data.organization!)\n    ));\n    Context.fields.staffs.data.setFilter((f, c, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.organization.link(staff.data.organization!),\n        f.__status.eq(signed_document),\n    ));\n}\n\n// На основе текущей даты установить год и месяц.\nasync function set_date(): Promise\u003cvoid\u003e {\n    const currentDate = new Datetime();\n    const month = currentDate.month;\n\n    Context.data.year = String(currentDate.year);\n\n    switch (month) {\n        case 1:\n            Context.data.month = Context.fields.month.variants.january;\n            break;\n\n        case 2:\n            Context.data.month = Context.fields.month.variants.february;\n            break;\n\n        case 3:\n            Context.data.month = Context.fields.month.variants.march;\n            break;\n\n        case 4:\n            Context.data.month = Context.fields.month.variants.april;\n            break;\n\n        case 5:\n            Context.data.month = Context.fields.month.variants.may;\n            break;\n\n        case 6:\n            Context.data.month = Context.fields.month.variants.june;\n            break;\n\n        case 7:\n            Context.data.month = Context.fields.month.variants.july;\n            break;\n\n        case 8:\n            Context.data.month = Context.fields.month.variants.august;\n            break;\n\n        case 9:\n            Context.data.month = Context.fields.month.variants.september;\n            break;\n\n        case 10:\n            Context.data.month = Context.fields.month.variants.october;\n            break;\n\n        case 11:\n            Context.data.month = Context.fields.month.variants.november;\n            break;\n\n        case 12:\n            Context.data.month = Context.fields.month.variants.december;\n            break;\n\n        default:\n            break;\n    }\n}\n\n// Вычисление расчётного периода.\nasync function set_period(): Promise\u003cvoid\u003e {\n    if (Context.data.month \u0026\u0026 Context.data.year) {\n        const year = Number(Context.data.year);\n        const month = Context.fields.month.data.variants.findIndex(f =\u003e f.code == Context.data.month!.code) + 1;\n        const start_date = new TDate(year, month, 1);\n        const end_date = new TDate(year, month + 1, 1).addDate(0, 0, -1);\n        Context.data.start_period_date = start_date;\n        Context.data.end_period_date = end_date;\n        ViewContext.data.period = `с ${start_date.format('DD MMMM YYYY г.')} по ${end_date.format('DD MMMM YYYY г.')}`;\n    }\n}\n\nasync function organization_onchange(): Promise\u003cvoid\u003e {\n    await hide_infoblock();\n\n    if (!Context.data.organization) {\n        return;\n    }\n\n    // Получаем список сотрудников, у которых не указан ID физ. лица.\n    const staffs = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.organization.link(Context.data.organization!),\n        f.__status.eq(signed_document),\n        g.or(\n            f.individual_id_1c.eq(null),\n        ),\n    )).size(1000).all();\n\n    if (staffs.length \u003e 0) {\n        const staffs_link = generate_staffs_links(staffs);\n        await show_infoblock(`\u003cp\u003eУ следующих сотрудников отсутствует идентификатор физ. лица 1С. Для этих сотрудников \u003cb\u003eрасчётный лист не будет сформирован\u003c/b\u003e:\u003c/p\u003e\\n ${staffs_link}`);\n    }\n}\n\nasync function subdivisions_onchange(): Promise\u003cvoid\u003e {\n    await hide_infoblock();\n\n    if (Context.data.subdivisions) {\n        const staffs = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__status.eq(signed_document),\n            f.structural_subdivision.link(Context.data.subdivisions!),\n            g.or(\n                f.individual_id_1c.eq(null)\n            )\n        )).size(1000).all();\n\n        const staffs_map: Map\u003cstring, Staff[]\u003e = new Map\u003cstring, Staff[]\u003e();\n\n        for (const staff of staffs) {\n            if (!staff.data.structural_subdivision) {\n                continue;\n            }\n\n            if (staffs_map.has(staff.data.structural_subdivision.id)) {\n                const value = staffs_map.get(staff.data.structural_subdivision.id);\n                value!.push(staff);\n            } else {\n                staffs_map.set(staff.data.structural_subdivision.id, [staff]);\n            }\n        }\n\n        let infoblock_text = `\u003cp\u003eУ следующих сотрудников отсутствует идентификатор физ. лица 1С. Для этих сотрудников \u003cb\u003eрасчётный лист не будет сформирован\u003c/b\u003e:\u003c/p\u003e\\n`;\n\n        const subdivisions_ids = staffs.map(s =\u003e s.data.structural_subdivision!.id);\n\n        const subdivisions = await Context.fields.subdivisions.app.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__id.in(subdivisions_ids)\n        )).size(1000).all();\n\n        for (const subdivision of subdivisions) {\n            const staffs = staffs_map.get(subdivision.id);\n\n            if (!staffs || staffs.length == 0) {\n                continue;\n            }\n\n            infoblock_text += `\u003cp\u003e${subdivision.data.__name}\u003c/p\u003e\\n ${generate_staffs_links(staffs)}\\n`;\n        }\n\n        if (staffs.length \u003e 0) {\n            await show_infoblock(infoblock_text);\n        }\n    }\n}\n\ndeclare const console: any;\n\nasync function staffs_onchange(): Promise\u003cvoid\u003e {\n    await hide_infoblock();\n\n    if (Context.data.staffs) {\n        const staffs_ids = Context.data.staffs.map(f =\u003e f.id);\n\n        const bad_staffs = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__id.in(staffs_ids),\n            f.__status.eq(signed_document),\n            g.or(\n                f.individual_id_1c.eq(null),\n            )\n        )).size(1000).all();\n\n        if (bad_staffs.length \u003e 0) {\n            const staffs_link = generate_staffs_links(bad_staffs);\n            await show_infoblock(`\u003cp\u003eУ следующих сотрудников отсутствует идентификатор физ. лица 1С. Для этих сотрудников \u003cb\u003eрасчётный лист не будет сформирован\u003c/b\u003e:\u003c/p\u003e\\n ${staffs_link}`);\n        }\n    }\n}\n\nasync function generate_by_onchange(): Promise\u003cvoid\u003e {\n    // Очищаем и скрываем все поля.\n    await hide_fields();\n    await clear_fields();\n\n    if (Context.data.generate_by) {\n        switch (Context.data.generate_by.code) {\n            case Context.fields.generate_by.variants.organization.code:\n                ViewContext.data.show_organization = true;\n                break;\n\n            case Context.fields.generate_by.variants.subdivision.code:\n                ViewContext.data.show_subdivision = true;\n                break;\n\n            case Context.fields.generate_by.variants.staff.code:\n                ViewContext.data.show_staffs = true;\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n\nfunction generate_staffs_links(staffs: Staff[]): string {\n    return `\u003cul\u003e${staffs.map(s =\u003e `\u003cli\u003e\u003ca target=\"_blank\" href=\"(p:item/kedo/staff/${s.id})\"\u003e${s.data.__name}\u003c/a\u003e\u003c/li\u003e`).join('')}\u003c/ul\u003e`;\n}\n\nasync function show_infoblock(text: string): Promise\u003cvoid\u003e {\n    ViewContext.data.show_infoblock = true;\n    ViewContext.data.infoblock_text = `\u003cdiv style=\"display: flex; flex-direction: column;\"\u003e${text}\u003c/div\u003e`;\n}\n\nasync function hide_infoblock(): Promise\u003cvoid\u003e {\n    ViewContext.data.show_infoblock = false;\n    ViewContext.data.infoblock_text = undefined;\n}\n\nasync function hide_fields(): Promise\u003cvoid\u003e {\n    ViewContext.data.show_organization = false;\n    ViewContext.data.show_staffs = false;\n    ViewContext.data.show_subdivision = false;\n}\n\nasync function clear_fields(): Promise\u003cvoid\u003e {\n    Context.data.organization = undefined;\n    Context.data.subdivisions = undefined;\n    Context.data.staffs = undefined;\n}","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{},"dataFieldCode":"context"},"dataNamespace":"kedo.payslip_requests_1c","dataCode":"_process_create_paylist_request_1c","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server) {\n        const signed_document = Context.fields.staffs.app.fields.__status.variants.signed_documents;\n        async function onInit() {\n            console.log(\"start form 14.11\");\n            const user = await System.users.getCurrentUser();\n            const staff = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(user))).first();\n            if (!staff) {\n                ViewContext.data.show_generate_by = false;\n                await show_infoblock('Не найдена карточка сотрудника. Дальнейшие действия заблокированы.');\n                return;\n            }\n            if (!staff.data.organization) {\n                ViewContext.data.show_generate_by = false;\n                await show_infoblock('У вас не указана орагнизация. Дальнейшие действия заблокированы.');\n            }\n            await set_date();\n            await set_period();\n            Context.fields.organization.data.setFilter((f, c, g) =\u003e f.__id.eq(staff.data.organization.id));\n            Context.fields.subdivisions.data.setFilter((f, c, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(staff.data.organization)));\n            Context.fields.staffs.data.setFilter((f, c, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(staff.data.organization), f.__status.eq(signed_document)));\n        }\n        async function set_date() {\n            const currentDate = new Datetime();\n            const month = currentDate.month;\n            Context.data.year = String(currentDate.year);\n            switch (month) {\n                case 1:\n                    Context.data.month = Context.fields.month.variants.january;\n                    break;\n                case 2:\n                    Context.data.month = Context.fields.month.variants.february;\n                    break;\n                case 3:\n                    Context.data.month = Context.fields.month.variants.march;\n                    break;\n                case 4:\n                    Context.data.month = Context.fields.month.variants.april;\n                    break;\n                case 5:\n                    Context.data.month = Context.fields.month.variants.may;\n                    break;\n                case 6:\n                    Context.data.month = Context.fields.month.variants.june;\n                    break;\n                case 7:\n                    Context.data.month = Context.fields.month.variants.july;\n                    break;\n                case 8:\n                    Context.data.month = Context.fields.month.variants.august;\n                    break;\n                case 9:\n                    Context.data.month = Context.fields.month.variants.september;\n                    break;\n                case 10:\n                    Context.data.month = Context.fields.month.variants.october;\n                    break;\n                case 11:\n                    Context.data.month = Context.fields.month.variants.november;\n                    break;\n                case 12:\n                    Context.data.month = Context.fields.month.variants.december;\n                    break;\n                default:\n                    break;\n            }\n        }\n        async function set_period() {\n            if (Context.data.month \u0026\u0026 Context.data.year) {\n                const year = Number(Context.data.year);\n                const month = Context.fields.month.data.variants.findIndex(f =\u003e f.code == Context.data.month.code) + 1;\n                const start_date = new TDate(year, month, 1);\n                const end_date = new TDate(year, month + 1, 1).addDate(0, 0, -1);\n                Context.data.start_period_date = start_date;\n                Context.data.end_period_date = end_date;\n                ViewContext.data.period = `с ${start_date.format('DD MMMM YYYY г.')} по ${end_date.format('DD MMMM YYYY г.')}`;\n            }\n        }\n        async function organization_onchange() {\n            await hide_infoblock();\n            if (!Context.data.organization) {\n                return;\n            }\n            const staffs = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(Context.data.organization), f.__status.eq(signed_document), g.or(f.individual_id_1c.eq(null)))).size(1000).all();\n            if (staffs.length \u003e 0) {\n                const staffs_link = generate_staffs_links(staffs);\n                await show_infoblock(`\u003cp\u003eУ следующих сотрудников отсутствует идентификатор физ. лица 1С. Для этих сотрудников \u003cb\u003eрасчётный лист не будет сформирован\u003c/b\u003e:\u003c/p\u003e\\n ${staffs_link}`);\n            }\n        }\n        async function subdivisions_onchange() {\n            await hide_infoblock();\n            if (Context.data.subdivisions) {\n                const staffs = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(signed_document), f.structural_subdivision.link(Context.data.subdivisions), g.or(f.individual_id_1c.eq(null)))).size(1000).all();\n                const staffs_map = new Map();\n                for (const staff of staffs) {\n                    if (!staff.data.structural_subdivision) {\n                        continue;\n                    }\n                    if (staffs_map.has(staff.data.structural_subdivision.id)) {\n                        const value = staffs_map.get(staff.data.structural_subdivision.id);\n                        value.push(staff);\n                    }\n                    else {\n                        staffs_map.set(staff.data.structural_subdivision.id, [staff]);\n                    }\n                }\n                let infoblock_text = `\u003cp\u003eУ следующих сотрудников отсутствует идентификатор физ. лица 1С. Для этих сотрудников \u003cb\u003eрасчётный лист не будет сформирован\u003c/b\u003e:\u003c/p\u003e\\n`;\n                const subdivisions_ids = staffs.map(s =\u003e s.data.structural_subdivision.id);\n                const subdivisions = await Context.fields.subdivisions.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(subdivisions_ids))).size(1000).all();\n                for (const subdivision of subdivisions) {\n                    const staffs = staffs_map.get(subdivision.id);\n                    if (!staffs || staffs.length == 0) {\n                        continue;\n                    }\n                    infoblock_text += `\u003cp\u003e${subdivision.data.__name}\u003c/p\u003e\\n ${generate_staffs_links(staffs)}\\n`;\n                }\n                if (staffs.length \u003e 0) {\n                    await show_infoblock(infoblock_text);\n                }\n            }\n        }\n        async function staffs_onchange() {\n            await hide_infoblock();\n            if (Context.data.staffs) {\n                const staffs_ids = Context.data.staffs.map(f =\u003e f.id);\n                const bad_staffs = await Context.fields.staffs.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.in(staffs_ids), f.__status.eq(signed_document), g.or(f.individual_id_1c.eq(null)))).size(1000).all();\n                if (bad_staffs.length \u003e 0) {\n                    const staffs_link = generate_staffs_links(bad_staffs);\n                    await show_infoblock(`\u003cp\u003eУ следующих сотрудников отсутствует идентификатор физ. лица 1С. Для этих сотрудников \u003cb\u003eрасчётный лист не будет сформирован\u003c/b\u003e:\u003c/p\u003e\\n ${staffs_link}`);\n                }\n            }\n        }\n        async function generate_by_onchange() {\n            await hide_fields();\n            await clear_fields();\n            if (Context.data.generate_by) {\n                switch (Context.data.generate_by.code) {\n                    case Context.fields.generate_by.variants.organization.code:\n                        ViewContext.data.show_organization = true;\n                        break;\n                    case Context.fields.generate_by.variants.subdivision.code:\n                        ViewContext.data.show_subdivision = true;\n                        break;\n                    case Context.fields.generate_by.variants.staff.code:\n                        ViewContext.data.show_staffs = true;\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        function generate_staffs_links(staffs) {\n            return `\u003cul\u003e${staffs.map(s =\u003e `\u003cli\u003e\u003ca target=\"_blank\" href=\"(p:item/kedo/staff/${s.id})\"\u003e${s.data.__name}\u003c/a\u003e\u003c/li\u003e`).join('')}\u003c/ul\u003e`;\n        }\n        async function show_infoblock(text) {\n            ViewContext.data.show_infoblock = true;\n            ViewContext.data.infoblock_text = `\u003cdiv style=\"display: flex; flex-direction: column;\"\u003e${text}\u003c/div\u003e`;\n        }\n        async function hide_infoblock() {\n            ViewContext.data.show_infoblock = false;\n            ViewContext.data.infoblock_text = undefined;\n        }\n        async function hide_fields() {\n            ViewContext.data.show_organization = false;\n            ViewContext.data.show_staffs = false;\n            ViewContext.data.show_subdivision = false;\n        }\n        async function clear_fields() {\n            Context.data.organization = undefined;\n            Context.data.subdivisions = undefined;\n            Context.data.staffs = undefined;\n        }\n        return {\n            onInit,\n            set_date,\n            set_period,\n            organization_onchange,\n            subdivisions_onchange,\n            staffs_onchange,\n            generate_by_onchange,\n            generate_staffs_links,\n            show_infoblock,\n            hide_infoblock,\n            hide_fields,\n            clear_fields\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"set_date","parameters":[],"type":"[object Object]"},{"name":"set_period","parameters":[],"type":"[object Object]"},{"name":"organization_onchange","parameters":[],"type":"[object Object]"},{"name":"subdivisions_onchange","parameters":[],"type":"[object Object]"},{"name":"staffs_onchange","parameters":[],"type":"[object Object]"},{"name":"generate_by_onchange","parameters":[],"type":"[object Object]"},{"name":"generate_staffs_links","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"show_infoblock","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"hide_infoblock","parameters":[],"type":"[object Object]"},{"name":"hide_fields","parameters":[],"type":"[object Object]"},{"name":"clear_fields","parameters":[],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:13.677857536Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:08:36.710411367Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
