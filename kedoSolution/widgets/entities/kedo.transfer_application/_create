{
  "__id": "018f7ade-f53d-774d-a48b-81c3e5bbc586",
  "namespace": "kedo.transfer_application",
  "code": "_create",
  "__name": "Форма создания",
  "description": "",
  "extensionZoneCode": "",
  "sort": 0,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 5,
  "hidden": false,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "types": ["form"],
    "template": {
      "id": "09d49be2-1448-4c99-9e5f-bdf768ca047b",
      "descriptor": "item-form-complex-popup",
      "descriptorVersion": 2,
      "values": {
        "formGroup": {
          "path": ["item"]
        },
        "systemFunctions": {
          "validate": {
            "kind": "Function",
            "name": "validation",
            "type": "client"
          }
        }
      },
      "content": {
        "[footer]": [
          {
            "id": "5e5e467b-402e-4e5b-858a-da8c26feb86e",
            "descriptor": "zone-content",
            "values": {
              "zoneCode": "[footer]"
            }
          }
        ],
        "[content]": [
          {
            "id": "7d7bd35a-d521-4c08-9d55-d7c3a74932cc",
            "descriptor": "modal-body",
            "content": {
              "": [
                {
                  "id": "4d1209e7-4289-46ad-bc98-25ba2887c891",
                  "descriptor": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed@forget_me_not_widget",
                  "descriptorVersion": 2,
                  "values": {
                    "__isConstValues": [],
                    "element_name": "заявления на перевод"
                  }
                },
                {
                  "id": "2dbb1a95-17a0-4fbf-8232-f496e407b161",
                  "descriptor": "elma-info-block",
                  "values": {
                    "__renderContentAsync": false,
                    "__renderContentOnDemand": false,
                    "__baseURL": "",
                    "__relativeURL": "",
                    "__isConstValues": [],
                    "text": "Внимание! По данному процессу запущен процесс отмены. До завершения процесса рекомендуем не выполнять данную задачу.",
                    "__hidden": {
                      "path": ["item", "is_cancellation_process"],
                      "modifier": "not"
                    },
                    "__outlet": "",
                    "typeEnum": [
                      {
                        "code": "danger",
                        "name": "Ошибка (красный)"
                      }
                    ]
                  },
                  "content": {
                    "": []
                  }
                },
                {
                  "id": "05849f5f-a56c-4239-b6a5-dceb5f5555f1",
                  "descriptor": "groupbox",
                  "values": {
                    "styleEnum": [
                      {
                        "code": "default",
                        "name": "Default"
                      }
                    ],
                    "collapsible": false,
                    "__isConstValues": [],
                    "__renderContentAsync": false,
                    "title": "Информация о корректировки заявки",
                    "__hidden": {
                      "path": ["view_result"],
                      "modifier": "not"
                    },
                    "expanded": true
                  },
                  "content": {
                    "": [
                      {
                        "id": "9b242d84-f11f-464b-ae2a-9b7ac6892151",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "__readOnly": true,
                          "bindingMode": false,
                          "showDisplayName": true,
                          "control": {
                            "path": ["item", "correct_comment"]
                          },
                          "required": false,
                          "hideEmpty": true,
                          "tooltip": null,
                          "displayName": "Комментарий ",
                          "__isConstValues": []
                        }
                      },
                      {
                        "id": "1be21502-c30a-475d-884f-e404d65bdccb",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "showDisplayName": true,
                          "control": {
                            "path": ["item", "transfer_approve"]
                          },
                          "__readOnly": true,
                          "hideEmpty": true,
                          "bindingMode": false,
                          "showCreateItem": false,
                          "__isConstValues": [],
                          "tooltip": null,
                          "required": false
                        }
                      },
                      {
                        "id": "2593a6f0-3469-470c-b5d6-af110bf6033b",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "required": {
                            "path": ["view_result"]
                          },
                          "hideEmpty": false,
                          "__readOnly": null,
                          "bindingMode": false,
                          "__isConstValues": [],
                          "showDisplayName": true,
                          "control": {
                            "path": ["item", "posted_result"]
                          },
                          "tooltip": null
                        }
                      }
                    ]
                  }
                },
                {
                  "id": "3991176e-d2b7-4732-87bd-c74419b7832e",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "changeType",
                      "type": "client"
                    },
                    "__isConstValues": [],
                    "showDisplayName": true,
                    "tooltip": null,
                    "__baseURL": "",
                    "__readOnly": null,
                    "bindingMode": false,
                    "__relativeURL": "",
                    "__renderContentOnDemand": false,
                    "control": {
                      "path": ["item", "transfer_type"]
                    },
                    "__outlet": "",
                    "required": true,
                    "hideEmpty": false
                  }
                },
                {
                  "id": "34113c23-7676-4d52-9642-4f2cf23dedab",
                  "descriptor": "groupbox",
                  "values": {
                    "__styles": "margin-bottom: 10px",
                    "expanded": true,
                    "styleEnum": [
                      {
                        "code": "default",
                        "name": "Default"
                      }
                    ],
                    "collapsible": false,
                    "__isConstValues": [],
                    "__renderContentAsync": false,
                    "title": "Куда"
                  },
                  "content": {
                    "": [
                      {
                        "id": "dfc6803b-c165-4203-86bd-b0e9b73c16fe",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "bindingMode": false,
                          "__renderContentOnDemand": false,
                          "tooltip": null,
                          "__baseURL": "",
                          "__relativeURL": "",
                          "onChangeValue": {
                            "kind": "Function",
                            "name": "set_structural_subdivision",
                            "type": "client"
                          },
                          "showCreateItem": false,
                          "__outlet": "",
                          "displayName": "Позиция ШР ",
                          "required": {
                            "path": ["change_department_position"]
                          },
                          "hideEmpty": false,
                          "__readOnly": null,
                          "__isConstValues": [],
                          "showDisplayName": true,
                          "control": {
                            "path": ["item", "new_position"]
                          },
                          "__hidden": {
                            "path": ["change_department_position"],
                            "modifier": "not"
                          }
                        }
                      },
                      {
                        "id": "8e1daa7f-3d1a-4192-81b9-79cf19fd095e",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "control": {
                            "path": ["item", "organization"]
                          },
                          "showCreateItem": false,
                          "__isConstValues": [],
                          "showDisplayName": true,
                          "__hidden": {
                            "path": ["view_organization"],
                            "modifier": "not"
                          },
                          "__outlet": "",
                          "bindingMode": false,
                          "__baseURL": "",
                          "__relativeURL": "",
                          "__renderContentOnDemand": false,
                          "__readOnly": true,
                          "tooltip": null,
                          "required": false,
                          "hideEmpty": false
                        }
                      },
                      {
                        "id": "657f1d7e-7cea-4c11-bac1-ed7d0b65f2df",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "tooltip": null,
                          "__hidden": {
                            "path": ["change_department_position"],
                            "modifier": "not"
                          },
                          "required": false,
                          "__readOnly": true,
                          "bindingMode": false,
                          "showCreateItem": false,
                          "__isConstValues": [],
                          "control": {
                            "path": ["item", "structural_subdivision"]
                          },
                          "hideEmpty": false,
                          "showDisplayName": true
                        }
                      },
                      {
                        "id": "531b57e5-9ef8-4595-a388-237dd878cf42",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "__hidden": true,
                          "__isConstValues": [],
                          "control": {
                            "path": ["item", "employment_type"]
                          },
                          "tooltip": null,
                          "__readOnly": false,
                          "bindingMode": false,
                          "showDisplayName": true,
                          "required": false,
                          "hideEmpty": false
                        }
                      },
                      {
                        "id": "fe614de9-4eb1-4336-bd96-fd8036899c1e",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "bindingMode": false,
                          "__isConstValues": [],
                          "showDisplayName": true,
                          "__hidden": {
                            "path": ["show_work_schedules"]
                          },
                          "__readOnly": null,
                          "required": {
                            "path": ["work_shedules_required"]
                          },
                          "hideEmpty": false,
                          "displayName": "График работы",
                          "showCreateItem": false,
                          "control": {
                            "path": ["item", "schedule_work_new"]
                          },
                          "tooltip": null
                        }
                      },
                      {
                        "id": "d519b6e4-2ad8-44c3-b88c-d4125edb1a85",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "__readOnly": false,
                          "displayName": "Рабочее место ",
                          "showDisplayName": true,
                          "tooltip": null,
                          "__hidden": true,
                          "hideEmpty": false,
                          "bindingMode": false,
                          "showCreateItem": false,
                          "__isConstValues": [],
                          "control": {
                            "path": ["item", "workplace_new"]
                          },
                          "required": false
                        }
                      },
                      {
                        "id": "940de644-5d30-4fa2-a63c-33c5b0b981af",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "onChangeValue": {
                            "kind": "Function",
                            "name": "viewEndDate",
                            "type": "client"
                          },
                          "__isConstValues": [],
                          "showDisplayName": true,
                          "__hidden": true,
                          "bindingMode": false,
                          "required": false,
                          "hideEmpty": false,
                          "__readOnly": null,
                          "displayName": "Вид трудовых отношений ",
                          "showCreateItem": false,
                          "control": {
                            "path": ["item", "type_employment_relationship"]
                          },
                          "tooltip": null
                        }
                      },
                      {
                        "id": "b853767f-c2d6-4148-8bdf-00d9588a1a5f",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "control": {
                            "path": ["item", "rate_new"]
                          },
                          "tooltip": null,
                          "__hidden": true,
                          "__readOnly": null,
                          "bindingMode": false,
                          "required": false,
                          "hideEmpty": false,
                          "displayName": "Ставка ",
                          "__isConstValues": [],
                          "showDisplayName": true
                        }
                      }
                    ]
                  }
                },
                {
                  "id": "f1c8ec2e-2cc9-4840-bec1-91eb42599c2f",
                  "descriptor": "row",
                  "values": {
                    "__isConstValues": [],
                    "__renderContentAsync": false
                  },
                  "content": {
                    "": [
                      {
                        "id": "d343650e-46d7-4e09-9dbf-d01a999bf8b4",
                        "descriptor": "column",
                        "content": {
                          "": [
                            {
                              "id": "f285a48b-99d6-4938-b34e-5461ef02b444",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "__baseURL": "",
                                "__relativeURL": "",
                                "onChangeValue": {
                                  "kind": "Function",
                                  "name": "checkTemporaryTransfer",
                                  "type": "client"
                                },
                                "__isConstValues": [],
                                "__hidden": {
                                  "path": ["change_department_position"],
                                  "modifier": "not"
                                },
                                "__outlet": "",
                                "required": {
                                  "path": ["change_department_position"]
                                },
                                "hideEmpty": false,
                                "__readOnly": null,
                                "bindingMode": false,
                                "showDisplayName": true,
                                "control": {
                                  "path": ["item", "temporary_transfer"]
                                },
                                "tooltip": null
                              }
                            }
                          ]
                        }
                      },
                      {
                        "id": "b29cfc4d-73ec-4684-8b2c-0075b3ae3ccb",
                        "descriptor": "column",
                        "content": {
                          "": [
                            {
                              "id": "d68b2159-9b97-4406-abda-fd3b28fdff89",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "__hidden": {
                                  "path": ["show_cause_temporary_transfer"],
                                  "modifier": "not"
                                },
                                "hideEmpty": false,
                                "bindingMode": false,
                                "__relativeURL": "",
                                "__outlet": "",
                                "required": {
                                  "path": ["show_cause_temporary_transfer"]
                                },
                                "showCreateItem": false,
                                "onChangeValue": {
                                  "kind": "Function",
                                  "name": "checkReason",
                                  "type": "client"
                                },
                                "__isConstValues": [],
                                "control": {
                                  "path": ["item", "cause_temporary_transfer"]
                                },
                                "tooltip": null,
                                "__baseURL": "",
                                "__readOnly": null,
                                "showDisplayName": true
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "id": "6653d80c-e30b-4620-b4ef-0bdac7c4e00e",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "required": {
                      "path": ["show_missing"]
                    },
                    "hideEmpty": false,
                    "__readOnly": null,
                    "showCreateItem": false,
                    "showDisplayName": true,
                    "control": {
                      "path": ["item", "transfer_during_absence"]
                    },
                    "tooltip": null,
                    "__hidden": {
                      "path": ["show_missing"],
                      "modifier": "not"
                    },
                    "bindingMode": false,
                    "__isConstValues": []
                  }
                },
                {
                  "id": "bd9e7e9c-2bc9-41b2-a5b6-3cba6862a8b0",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "tooltip": null,
                    "required": false,
                    "__isConstValues": [],
                    "control": {
                      "path": ["item", "remote_work"]
                    },
                    "__hidden": {
                      "path": ["show_remote_work"]
                    },
                    "hideEmpty": false,
                    "__readOnly": null,
                    "bindingMode": false,
                    "showDisplayName": true
                  }
                },
                {
                  "id": "ea330c6c-5430-467e-8181-791a8352f318",
                  "descriptor": "elma-info-block",
                  "values": {
                    "text": {
                      "path": ["error_message"]
                    },
                    "__hidden": {
                      "path": ["show_error"],
                      "modifier": "not"
                    },
                    "typeEnum": [
                      {
                        "code": "danger",
                        "name": "Ошибка (красный)"
                      }
                    ],
                    "__isConstValues": [],
                    "__renderContentAsync": false
                  },
                  "content": {
                    "": []
                  }
                },
                {
                  "id": "e25b5836-8ff4-4e57-b280-d3985acbc30f",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "hideEmpty": false,
                    "__isConstValues": [],
                    "required": true,
                    "__readOnly": null,
                    "bindingMode": false,
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "checkDates",
                      "type": "client"
                    },
                    "showDisplayName": true,
                    "control": {
                      "path": ["item", "date_start"]
                    },
                    "tooltip": null
                  }
                },
                {
                  "id": "9b33d6b6-1a61-46b9-8a9c-9ac5f0cbc4b6",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "showDisplayName": true,
                    "control": {
                      "path": ["item", "date_end"]
                    },
                    "tooltip": null,
                    "hideEmpty": false,
                    "bindingMode": false,
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "checkDates",
                      "type": "client"
                    },
                    "__hidden": {
                      "path": ["show_work_schedules"]
                    },
                    "required": false,
                    "__readOnly": null,
                    "__isConstValues": []
                  }
                },
                {
                  "id": "5780be25-fac5-4fb6-a4f6-ac7f294d3565",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "showDisplayName": true,
                    "control": {
                      "path": ["item", "transfer_reason"]
                    },
                    "tooltip": null,
                    "required": false,
                    "hideEmpty": false,
                    "__readOnly": null,
                    "bindingMode": false,
                    "__isConstValues": []
                  }
                },
                {
                  "id": "e4d20b88-32a8-4165-b324-05b2e4076fe3",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "showDisplayName": true,
                    "control": {
                      "path": ["item", "comment"]
                    },
                    "tooltip": null,
                    "required": false,
                    "hideEmpty": false,
                    "__readOnly": null,
                    "bindingMode": false,
                    "__isConstValues": []
                  }
                },
                {
                  "id": "7fa074d4-efac-4953-bf36-cbdc9a9b1738",
                  "descriptor": "elma-info-block",
                  "values": {
                    "text": {
                      "path": ["table_error"]
                    },
                    "__hidden": {
                      "path": ["show_table_error"],
                      "modifier": "not"
                    },
                    "typeEnum": [
                      {
                        "code": "danger",
                        "name": "Ошибка (красный)"
                      }
                    ],
                    "__isConstValues": [],
                    "__renderContentAsync": false
                  },
                  "content": {
                    "": []
                  }
                },
                {
                  "id": "32b5e8b9-6f1d-4c33-8dec-63bddc3891aa",
                  "descriptor": "elma-info-block",
                  "values": {
                    "__hidden": {
                      "path": ["view_warning"],
                      "modifier": "not"
                    },
                    "typeEnum": [
                      {
                        "code": "warning",
                        "name": "Предупреждение (оранжевый)"
                      }
                    ],
                    "__baseURL": "",
                    "__isConstValues": [],
                    "__renderContentAsync": false,
                    "text": {
                      "path": ["warning_text"]
                    },
                    "__outlet": "",
                    "__relativeURL": "",
                    "__renderContentOnDemand": false
                  },
                  "content": {
                    "": []
                  }
                },
                {
                  "id": "eac9a10e-cf19-42da-9e0a-ccb59dfedead",
                  "descriptor": "groupbox",
                  "values": {
                    "title": "Кого переводим",
                    "__hidden": {
                      "path": ["view_table"],
                      "modifier": "not"
                    },
                    "__outlet": "",
                    "expanded": true,
                    "__baseURL": "",
                    "__isConstValues": [],
                    "__renderContentAsync": false,
                    "styleEnum": [
                      {
                        "code": "default",
                        "name": "Default"
                      }
                    ],
                    "collapsible": false,
                    "__relativeURL": "",
                    "__renderContentOnDemand": false
                  },
                  "content": {
                    "": [
                      {
                        "id": "d8ec2548-25dc-4f95-9453-ffa111d0cf91",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "__renderContentOnDemand": false,
                          "control": {
                            "path": ["item", "transferred_staff_table"]
                          },
                          "__hidden": true,
                          "__relativeURL": "",
                          "__isConstValues": [],
                          "widgetCustomSettings": {
                            "kind": "BlobObject",
                            "settings": {
                              "columnsView": {
                                "rate": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": true,
                                  "tensile": false,
                                  "readonly": false,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "staff": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": false,
                                  "required": true,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "position": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "workplace": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "current_rate": {
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle"
                                },
                                "staff_position": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": true,
                                  "tensile": false,
                                  "readonly": false,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "work_schedules": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "employment_type": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "staff_current_position": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "type_employment_relationship": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                }
                              },
                              "allowDeleteRows": false
                            }
                          },
                          "__readOnly": null,
                          "bindingMode": false,
                          "tooltip": null,
                          "hideEmpty": false,
                          "onChangeValue": {
                            "kind": "Function",
                            "name": "updateTable",
                            "type": "client"
                          },
                          "showDisplayName": true,
                          "__outlet": "",
                          "required": false,
                          "__baseURL": "",
                          "displayName": ""
                        }
                      },
                      {
                        "id": "52c360a6-687a-41f9-afd5-70c7f1038139",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "__baseURL": "",
                          "__readOnly": null,
                          "bindingMode": false,
                          "widgetCustomSettings": {
                            "kind": "BlobObject",
                            "settings": {
                              "columnsView": {
                                "json_staff": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": true,
                                  "tensile": false,
                                  "readonly": false,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "transfer_staff": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": false,
                                  "required": true,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "transfer_workplace": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "transfet_workplace": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": false,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "filter_organization": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": false,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "transfer_work_schedule": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": true,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "transfer_work_schedules": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": false,
                                  "required": false,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                },
                                "transfer_employment_place": {
                                  "key": false,
                                  "font": {
                                    "bold": false,
                                    "color": "",
                                    "italic": false,
                                    "underline": false
                                  },
                                  "align": "left",
                                  "width": 175,
                                  "hidden": false,
                                  "tensile": false,
                                  "readonly": null,
                                  "required": true,
                                  "compression": false,
                                  "verticalAlign": "middle",
                                  "backgroundColor": ""
                                }
                              },
                              "allowDeleteRows": true
                            }
                          },
                          "__renderContentOnDemand": false,
                          "control": {
                            "path": ["item", "transfer_table"]
                          },
                          "required": false,
                          "__isConstValues": [],
                          "tooltip": null,
                          "onChangeValue": {
                            "kind": "Function",
                            "name": "changeTransferTable",
                            "type": "client"
                          },
                          "__relativeURL": "",
                          "showDisplayName": true,
                          "__outlet": "",
                          "hideEmpty": false,
                          "displayName": ""
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "[sidebar]": [
          {
            "id": "4eea2fb4-b49e-471e-b4cc-3ea5632693c6",
            "descriptor": "sidebar-widget",
            "values": {
              "__isConstValues": [],
              "__renderContentAsync": false
            },
            "content": {
              "": [
                {
                  "id": "437bad70-d6dd-4c21-bd7c-69b0d3284924",
                  "descriptor": "docflow-approval-lists",
                  "values": {
                    "item": {
                      "path": ["itemModel"]
                    },
                    "__isConstValues": []
                  }
                }
              ]
            }
          },
          {
            "id": "d66aba74-334f-4f04-b5d9-b0dc06e96ac0",
            "descriptor": "sidebar-widget",
            "values": {
              "title": "Инструкция",
              "__renderContentAsync": false
            },
            "content": {
              "": [
                {
                  "id": "2a17885d-9d74-4473-9a88-f4517f180122",
                  "descriptor": "html",
                  "descriptorVersion": 3,
                  "values": {
                    "html": "\u003cp\u003eВнимательно заполните данные для оформления заявки.  \u003c/p\u003e\u003cp\u003e\u003cbr/\u003eПри помощи данной заявки вы можете предоставить работодателю данные для перевода Вас на другую должность.\u003c/p\u003e\u003cp\u003e\u003cbr/\u003eПосле создания заявки необходимо будет подписать заявление, затем оно попадет на согласование. При положительном согласовании \u003c/p\u003e"
                  }
                }
              ]
            }
          }
        ],
        "[headerControls]": [],
        "[headerCustomization]": []
      }
    },
    "fields": [
      {
        "code": "change_department_position",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Смена отдела/должности",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "view_date_end",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Показать дату перевода по",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_error",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "show_error",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "view_result",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_result",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "table_string",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "table_string",
          "data": {
            "additionalType": "string"
          }
        }
      },
      {
        "code": "error_message",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Текст ошибки",
          "data": {
            "additionalType": "text"
          }
        }
      },
      {
        "code": "show_error_start_date",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "show_error_start_date",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "table_error",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Текст ошибки таблица",
          "data": {
            "additionalType": "text"
          }
        }
      },
      {
        "code": "show_table_error",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Показать ошибку по таблице",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_work_schedules",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": true,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Скрыть график работы",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "work_shedules_required",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Обязательность график работы",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_block",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Показывать блок Куда",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_remote_work",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Скрыть дистанционная  работа",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_missing",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "show_missing",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_cause_temporary_transfer",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "show_cause_temporary_transfer",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "type_employment",
        "type": "ENUM",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "enumItems": [
            {
              "code": "main_workplace",
              "name": "Основное место работы",
              "checked": false
            }
          ]
        },
        "view": {
          "name": "Категория",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "transfer_table_string",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "transfer_table_string",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "transfer_table_staff_update",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "transfer_table_staff_update",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "view_table",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_table",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "filter_organization",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "organization",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Организация для фильтра",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "organization_update",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "organization_update",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "is_staff",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Заполнен сотрудник?",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "size",
        "type": "FLOAT",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "size",
          "data": {
            "additionalType": "integer",
            "showRowSeparator": true
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "warning_text",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "warning_text",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "view_warning",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_warning",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "view_organization",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_organization",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "app_organization_view",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "organization",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "namespace": "kedo"
        },
        "view": {
          "name": "app_organization_view",
          "data": {},
          "input": true,
          "output": true
        }
      }
    ],
    "fieldVisibilityConditions": {
      "size": {
        "enabled": false,
        "conditions": []
      },
      "is_staff": {
        "enabled": false,
        "conditions": []
      },
      "show_block": {
        "enabled": false,
        "conditions": []
      },
      "show_error": {
        "enabled": false,
        "conditions": []
      },
      "view_table": {
        "enabled": false,
        "conditions": []
      },
      "table_error": {
        "enabled": false,
        "conditions": []
      },
      "view_result": {
        "enabled": false,
        "conditions": []
      },
      "show_missing": {
        "enabled": false,
        "conditions": []
      },
      "table_string": {
        "enabled": false,
        "conditions": []
      },
      "view_warning": {
        "enabled": false,
        "conditions": []
      },
      "warning_text": {
        "enabled": false,
        "conditions": []
      },
      "error_message": {
        "enabled": false,
        "conditions": []
      },
      "view_date_end": {
        "enabled": false,
        "conditions": []
      },
      "transfer_table": {
        "enabled": false,
        "conditions": []
      },
      "type_employment": {
        "enabled": false,
        "conditions": []
      },
      "show_remote_work": {
        "enabled": false,
        "conditions": []
      },
      "show_table_error": {
        "enabled": false,
        "conditions": []
      },
      "organization_view": {
        "enabled": false,
        "conditions": []
      },
      "view_organization": {
        "enabled": false,
        "conditions": []
      },
      "filter_organization": {
        "enabled": false,
        "conditions": []
      },
      "organization_update": {
        "enabled": false,
        "conditions": []
      },
      "show_work_schedules": {
        "enabled": false,
        "conditions": []
      },
      "app_organization_view": {
        "enabled": false,
        "conditions": []
      },
      "show_error_start_date": {
        "enabled": false,
        "conditions": []
      },
      "transfer_table_string": {
        "enabled": false,
        "conditions": []
      },
      "work_shedules_required": {
        "enabled": false,
        "conditions": []
      },
      "change_department_position": {
        "enabled": false,
        "conditions": []
      },
      "transfer_table_staff_update": {
        "enabled": false,
        "conditions": []
      },
      "show_cause_temporary_transfer": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {
      "allowNamespace": true
    },
    "clientScripts": "/* Client scripts module */\n\ndeclare const console: any;\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    ViewContext.data.warning_text = ''\n    ViewContext.data.view_warning = false;\n    Context.data.transfer_table = undefined;\n    ViewContext.data.view_table = false;\n    ViewContext.data.view_organization = false;\n    ViewContext.data.change_department_position = false;\n    Context.data.new_position = undefined;\n    ViewContext.data.show_work_schedules = false;\n    ViewContext.data.work_shedules_required = false;\n    ViewContext.data.show_remote_work = false;\n    Context.data.transfer_during_absence = undefined;\n    Context.data.cause_temporary_transfer = undefined;\n    ViewContext.data.show_missing = false;\n\n    ViewContext.data.view_table = false;\n\n    Context.fields.new_position.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(\n        appFields.is_closed.eq(false)\n    ));\n    Context.fields.structural_subdivision.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(\n        appFields.is_closed.eq(false)\n    ));\n\n    let user = await System.users.getCurrentUser();\n    if (!Context.data.staff) {\n        let staff = await Context.fields.staff.app.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.ext_user.eq(user)\n            ))\n            .first();\n        if (staff) {\n            Context.data.staff = staff;\n        }\n    }\n\n    const current_staff = await Context.data.staff!.fetch();\n    Context.data.transfer_date = new TDate();\n    if (current_staff.data.organization) {\n        Context.data.organization = current_staff.data.organization;\n        ViewContext.data.app_organization_view = current_staff.data.organization;\n        Context.fields.transfer_during_absence.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(\n            appFields.organization.link(Context.data.organization!)\n        ));\n    }\n\n    if (Context.data.transferred_staff_table!.length === 0) {\n        const row = Context.data.transferred_staff_table!.insert();\n        row.staff = Context.data.staff!;\n        Context.data.transferred_staff_table = Context.data.transferred_staff_table;\n    }\n    const hr_group = await Namespace.app.settings.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.code.eq('hr_department')\n        ))\n        .first();\n    if (hr_group) {\n        const usersArrays = await Promise.all(hr_group.data.members!.map(x =\u003e x.getUsers()));\n        const users = usersArrays.reduce((a, b) =\u003e a.concat(b));\n        if (users.find(f =\u003e f.id === user.id)) {\n            Context.data.iniciator_manager_hr = true;\n        } else {\n            Context.data.iniciator_manager_hr = false;\n        }\n    }\n    if (ViewContext.data.__formType \u0026\u0026 ViewContext.data.__formType.code == ViewContext.fields.__formType.variants.edit.code) {\n        ViewContext.data.view_result = true;\n    }\n    if (Context.data.transfer_type) {\n        await changeType();\n    }\n    await checkTemporaryTransfer();\n}\n\n\n\nasync function changeType(): Promise\u003cvoid\u003e {\n    if (Context.data.transfer_type) {\n        switch (Context.data.transfer_type.code) {\n            case \"transfer_another_position\": {\n                ViewContext.data.warning_text = ''\n                ViewContext.data.view_warning = false;\n                Context.data.transfer_table = undefined;\n                ViewContext.data.view_table = false;\n                ViewContext.data.view_organization = false;\n                ViewContext.data.change_department_position = true;\n                ViewContext.data.show_work_schedules = false;\n                ViewContext.data.show_remote_work = true;\n                ViewContext.data.work_shedules_required = false;\n                Context.data.date_end = undefined;\n                await checkTemporaryTransfer();\n\n                break;\n            }\n            case \"work_condition_change\": {\n                ViewContext.data.warning_text = ''\n                ViewContext.data.view_warning = false;\n                Context.data.transfer_table = undefined;\n                ViewContext.data.view_table = true;\n                ViewContext.data.view_organization = false;\n                ViewContext.data.change_department_position = false;\n                Context.data.new_position = undefined;\n                ViewContext.data.show_work_schedules = false;\n                ViewContext.data.show_remote_work = false;\n                ViewContext.data.work_shedules_required = true;\n                ViewContext.data.show_cause_temporary_transfer = false;\n                Context.data.transfer_during_absence = undefined;\n                Context.data.cause_temporary_transfer = undefined;\n                ViewContext.data.show_missing = false;\n\n                break;\n            }\n            case \"change_of_schedule\": {\n                ViewContext.data.warning_text = ''\n                ViewContext.data.view_warning = false;\n                Context.data.transfer_table = undefined;\n                ViewContext.data.view_table = true;\n                ViewContext.data.view_organization = false;\n                ViewContext.data.change_department_position = false;\n                Context.data.new_position = undefined;\n                ViewContext.data.show_work_schedules = false;\n                ViewContext.data.work_shedules_required = true;\n                ViewContext.data.show_cause_temporary_transfer = false;\n                ViewContext.data.show_remote_work = true;\n                Context.data.transfer_during_absence = undefined;\n                Context.data.cause_temporary_transfer = undefined;\n                ViewContext.data.show_missing = false;\n\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    } else {\n        ViewContext.data.warning_text = ''\n        ViewContext.data.view_warning = false;\n        Context.data.transfer_table = undefined;\n        ViewContext.data.view_table = false;\n        ViewContext.data.view_organization = false;\n        ViewContext.data.change_department_position = false;\n        Context.data.new_position = undefined;\n        ViewContext.data.show_work_schedules = false;\n        ViewContext.data.work_shedules_required = false;\n        ViewContext.data.show_cause_temporary_transfer = false;\n        ViewContext.data.show_remote_work = false;\n        Context.data.transfer_during_absence = undefined;\n        Context.data.cause_temporary_transfer = undefined;\n        ViewContext.data.show_missing = false;\n    }\n}\n\n\nasync function set_structural_subdivision(): Promise\u003cvoid\u003e {\n    if (Context.data.new_position) {\n        ViewContext.data.view_table = true;\n        ViewContext.data.view_organization = true;\n        Context.data.transfer_table = undefined;\n        const position = await Context.data.new_position.fetch();\n\n        Context.data.structural_subdivision = position.data.subdivision;\n        if (ViewContext.data.show_missing === true \u0026\u0026 position.data.staff \u0026\u0026 position.data.staff.length === 1) {\n            Context.data.transfer_during_absence = position.data.staff[0];\n        }\n\n        if (position.data.organization \u0026\u0026 Context.data.transfer_type \u0026\u0026 Context.data.transfer_type.code === Context.fields.transfer_type.variants.transfer_another_position.code) {\n            const transfer_row_table = Context.data.transfer_table!.insert();\n            transfer_row_table.filter_organization = position.data.organization!;\n            Context.data.transfer_table = Context.data.transfer_table;\n\n            Context.data.organization = position.data.organization;\n            ViewContext.data.filter_organization = position.data.organization;\n        }\n\n        //Закоменчено для выгрузки ТН 31.05.2023\n        // Context.data.employment_type = position.data.employment_type;\n        // Context.data.schedule_work_new = position.data.work_schedules;\n        // Context.data.workplace_new = position.data.work_place;\n        // Context.data.type_employment_relationship = position.data.type_employment_relationship;\n\n    } else {\n        if (Context.data.transfer_table \u0026\u0026 Context.data.transfer_type \u0026\u0026 Context.data.transfer_type.code === Context.fields.transfer_type.variants.transfer_another_position.code) {\n            ViewContext.data.view_table = false;\n            Context.data.transfer_table = undefined;\n            ViewContext.data.filter_organization = undefined;\n        }\n        Context.data.structural_subdivision = undefined;\n        Context.data.organization = ViewContext.data.app_organization_view;\n\n        // Context.data.employment_type = undefined;\n        // Context.data.schedule_work_new = undefined;\n        // Context.data.workplace_new = undefined;\n        // Context.data.type_employment_relationship = undefined;\n        // Context.data.rate_new = undefined;\n    }\n}\n\nasync function checkTemporaryTransfer(): Promise\u003cvoid\u003e {\n    if (Context.data.temporary_transfer === true) {\n        ViewContext.data.show_cause_temporary_transfer = true;\n        ViewContext.data.view_date_end = true;\n    } else {\n        ViewContext.data.show_cause_temporary_transfer = false;\n        ViewContext.data.view_date_end = false;\n        Context.data.cause_temporary_transfer = undefined;\n    }\n}\n\nasync function checkDates(): Promise\u003cvoid\u003e {\n    ViewContext.data.error_message = '';\n    let check = 0;\n    let check_start_date = 0\n    if (Context.data.date_start \u0026\u0026 Context.data.date_start.before(new TDate())) {\n        check_start_date++;\n        ViewContext.data.error_message += '\\n\"Дата перевода с\" не может быть раньше текущей даты';\n    }\n    if (Context.data.date_start \u0026\u0026 Context.data.date_end \u0026\u0026 Context.data.date_end.before(Context.data.date_start)) {\n        check++;\n        ViewContext.data.error_message += '\\n\"Дата перевода по\" не может быть раньше \"Дата перевода с\" ';\n    }\n    ViewContext.data.show_error = check \u003e 0 || check_start_date \u003e 0 ? true : false;\n    ViewContext.data.show_error_start_date = check_start_date \u003e 0 ? true : false;\n}\n\n\nasync function validation(): Promise\u003cValidationResult\u003e {\n    const result = new ValidationResult();\n    if (ViewContext.data.show_error === true) {\n        result.addContextError('date_end', '\"Дата перевода по\" не может быть раньше \"Дата перевода с\"');\n    }\n    if (ViewContext.data.show_error_start_date === true) {\n        result.addContextError('date_start', '\"Дата перевода с\" не может быть раньше текущей даты');\n    }\n    if (ViewContext.data.show_table_error === true) {\n        result.addContextError('transferred_staff_table', 'Невозможно указать одного и того же сотрудника несколько раз');\n    }\n\n    if (Context.data.transfer_table \u0026\u0026 Context.data.transfer_table.length \u003e 0) {\n        let count = 0;\n        const staffs_id = Context.data.transfer_table.filter(item =\u003e item.transfer_staff).map(f =\u003e f.transfer_staff.id);\n        const staffs = await Context.fields.staff.app.search().where(f =\u003e f.__id.in(staffs_id)).size(100).all();\n        let staffs_fio: string = \"\";\n        if (Context.data.new_position) {\n            let position = await Context.data.new_position.fetch();\n            for (let row of Context.data.transfer_table) {\n                let staff = staffs.find(item =\u003e item.id == row.transfer_staff.id)\n                if (staff) {\n                    let elem = staff.data.employment_table?.find(item =\u003e item.position \u0026\u0026 item.position.id == position.id);\n                    if (!!elem) {\n                        staffs_fio += staff.data.full_name ? staff.data.full_name.lastname + \" \" + staff.data.full_name.firstname + \", \" : \"\";\n                        count++;\n                    }\n                }\n            }\n            if (!!staffs_fio)\n                if (count == 1) {\n                    result.addMessage(staffs_fio.slice(0, -2) + ' : данный сотрудник уже назначен на позицию по которому осуществляется перевод')\n                } else {\n                    result.addMessage(staffs_fio.slice(0, -2) + ' : данные сотрудники уже назначены на позицию по которому осуществляется перевод')\n                }\n\n        }\n    }\n    return result\n}\n\nasync function updateTable(): Promise\u003cvoid\u003e {\n    ViewContext.data.show_table_error = false;\n    ViewContext.data.table_error = '';\n    if (Context.data.transferred_staff_table \u0026\u0026 Context.data.transferred_staff_table.length \u003e 0) {\n        const staffs_id = Context.data.transferred_staff_table!.map(f =\u003e f.staff.id)\n        const findDuplicates = staffs_id.filter((item, index) =\u003e staffs_id!.indexOf(item) !== index);\n        if (findDuplicates \u0026\u0026 findDuplicates.length \u003e 0) {\n            ViewContext.data.show_table_error = true;\n            ViewContext.data.table_error = 'Невозможно указать одного и того же сотрудника несколько раз';\n        }\n        for (const row of Context.data.transferred_staff_table!) {\n            if (row.staff) {\n                const staff = await row.staff.fetch();\n                row.employment_type = staff.data.employment_type!;\n            }\n        }\n        if (ViewContext.data.table_string !== JSON.stringify((Context.data.transferred_staff_table as any).json())) {\n            ViewContext.data.table_string = JSON.stringify((Context.data.transferred_staff_table as any).json());\n            Context.data.transferred_staff_table = Context.data.transferred_staff_table;\n        }\n    }\n\n}\n\n\nasync function checkReason(): Promise\u003cvoid\u003e {\n    ViewContext.data.show_missing = false;\n    Context.data.transfer_during_absence = undefined;\n    if (Context.data.cause_temporary_transfer) {\n        const cause_temporary_transfer = await Context.data.cause_temporary_transfer.fetch();\n        if (cause_temporary_transfer.data.__name === 'Для замещения временно отсутствующего (до выхода сотрудника)') {\n            ViewContext.data.show_missing = true;\n            if (Context.data.new_position) {\n                const new_position = await Context.data.new_position.fetch();\n                if (new_position.data.staff \u0026\u0026 new_position.data.staff.length === 1) {\n                    Context.data.transfer_during_absence = new_position.data.staff[0];\n                }\n            }\n        }\n    }\n}\n\nasync function changeTransferTable(): Promise\u003cvoid\u003e {\n    if (Context.data.transfer_table \u0026\u0026 Context.data.transfer_table.length \u003e 0) {\n        const filter_organization = await ViewContext.data.filter_organization?.fetch();\n        const staffs_id = Context.data.transfer_table.map(f =\u003e f.transfer_staff.id);\n        const staffs = await Context.fields.staff.app.search().where(f =\u003e f.__id.in(staffs_id)).size(100).all();\n\n        for (const row of Context.data.transfer_table) {\n\n            const staff_data = staffs.find(f =\u003e f.id == row.transfer_staff.id);\n\n            // Нужна, чтобы не обновлять строчку таблицы, если не было изменений в сотруднике. сделано для того, чтобы каждый раз не перезаписывалось место занятости\n            if (row.json_staff !== JSON.stringify((staff_data as any).json())) {\n                row.json_staff = JSON.stringify((staff_data as any).json());\n                if (staff_data) {\n                    row.transfer_employment_place = undefined!;\n                    row.transfer_work_schedule = undefined!;\n                    row.transfer_workplace = undefined!;\n\n                    const employment_table = staff_data.data.employment_table ?? staff_data.fields.employment_table.create();\n\n                    if (Context.data.transfer_type \u0026\u0026 Context.data.transfer_type.code === Context.fields.transfer_type.variants.transfer_another_position.code) {\n                        if (ViewContext.data.filter_organization) {\n                            row.filter_organization = ViewContext.data.filter_organization;\n                        }\n\n                        const [main, internal, external] = [\n                            employment_table.find(f =\u003e f.type_employment.code == \"main_workplace\" \u0026\u0026 f.organization.id == row.filter_organization.id),\n                            employment_table.find(f =\u003e f.type_employment.code == \"internal_combination\" \u0026\u0026 f.organization.id == row.filter_organization.id),\n                            employment_table.find(f =\u003e f.type_employment.code == \"external_combination\" \u0026\u0026 f.organization.id == row.filter_organization.id),\n                        ];\n\n                        const staff_workplace = main || internal || external;\n\n                        if (!staff_workplace) {\n                            row.error = true;\n                            continue;\n                        }\n\n                        row.error = false;\n                        row.transfer_employment_place = staff_workplace.employment_placement_app;\n                        row.transfer_work_schedule = staff_workplace.work_schedules;\n                        row.transfer_workplace = staff_workplace.work_place;\n\n                    } else {\n                        const [main, internal, external] = [\n                            employment_table.find(f =\u003e f.type_employment.code == \"main_workplace\"),\n                            employment_table.find(f =\u003e f.type_employment.code == \"internal_combination\"),\n                            employment_table.find(f =\u003e f.type_employment.code == \"external_combination\"),\n                        ];\n\n                        const staff_workplace = main || internal || external;\n\n                        row.error = false;\n\n                        if (staff_workplace) {\n                            row.transfer_employment_place = staff_workplace.employment_placement_app;\n                            row.transfer_work_schedule = staff_workplace.work_schedules;\n                            row.transfer_workplace = staff_workplace.work_place;\n                            if (staff_data.data.organization)\n                                row.filter_organization = staff_data.data.organization;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (ViewContext.data.transfer_table_string !== JSON.stringify((Context.data.transfer_table as any).json())) {\n            ViewContext.data.transfer_table_string = JSON.stringify((Context.data.transfer_table as any).json());\n            const search_error = Context.data.transfer_table.filter(f =\u003e f.error === true);\n            if (search_error \u0026\u0026 search_error.length \u003e 0) {\n                ViewContext.data.warning_text = `Выбранный(-ие) сотрудник(-и) не имеет(-ют) мест занятости в ${filter_organization ? filter_organization.data.__name : 'выбранной организации'}`;\n                ViewContext.data.view_warning = true;\n            } else {\n                ViewContext.data.warning_text = ''\n                ViewContext.data.view_warning = false;\n            }\n            Context.data.transfer_table = Context.data.transfer_table;\n        }\n\n        const find_duplicates_staff_id = Context.data.transfer_table.map(f =\u003e f.transfer_staff.id);\n        const find_duplicates_employment_place_id = Context.data.transfer_table.map(f =\u003e f.transfer_employment_place.id);\n        const find_duplicates_staff = find_duplicates_staff_id.filter((item, index) =\u003e find_duplicates_staff_id.indexOf(item) !== index);\n        const find_duplicates_employment_place = find_duplicates_employment_place_id.filter((item, index) =\u003e find_duplicates_employment_place_id.indexOf(item) !== index);\n\n        if (find_duplicates_staff \u0026\u0026 find_duplicates_employment_place \u0026\u0026 find_duplicates_staff.length \u003e 0 \u0026\u0026 find_duplicates_employment_place.length \u003e 0) {\n            ViewContext.data.show_table_error = true;\n            ViewContext.data.table_error = 'Невозможно указать одного и того же сотрудника несколько раз с одним видом занятости';\n        } else {\n            ViewContext.data.show_table_error = false;\n            ViewContext.data.table_error = '';\n        }\n    }\n}\n",
    "clientScriptOptions": {
      "allowNamespace": true,
      "allowServer": true
    },
    "serverScripts": "/* Server scripts module */\n",
    "serverScriptOptions": {
      "allowNamespace": true
    },
    "widgetZones": [
      {
        "code": "[footer]"
      }
    ],
    "dataFieldCode": "item"
  },
  "dataNamespace": "kedo",
  "dataCode": "transfer_application",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        async function onInit() {\n            ViewContext.data.warning_text = '';\n            ViewContext.data.view_warning = false;\n            Context.data.transfer_table = undefined;\n            ViewContext.data.view_table = false;\n            ViewContext.data.view_organization = false;\n            ViewContext.data.change_department_position = false;\n            Context.data.new_position = undefined;\n            ViewContext.data.show_work_schedules = false;\n            ViewContext.data.work_shedules_required = false;\n            ViewContext.data.show_remote_work = false;\n            Context.data.transfer_during_absence = undefined;\n            Context.data.cause_temporary_transfer = undefined;\n            ViewContext.data.show_missing = false;\n            ViewContext.data.view_table = false;\n            Context.fields.new_position.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(appFields.is_closed.eq(false)));\n            Context.fields.structural_subdivision.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(appFields.is_closed.eq(false)));\n            let user = await System.users.getCurrentUser();\n            if (!Context.data.staff) {\n                let staff = await Context.fields.staff.app.search()\n                    .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(user)))\n                    .first();\n                if (staff) {\n                    Context.data.staff = staff;\n                }\n            }\n            const current_staff = await Context.data.staff.fetch();\n            Context.data.transfer_date = new TDate();\n            if (current_staff.data.organization) {\n                Context.data.organization = current_staff.data.organization;\n                ViewContext.data.app_organization_view = current_staff.data.organization;\n                Context.fields.transfer_during_absence.data.setFilter((appFields, context, globalFilters) =\u003e globalFilters.and(appFields.organization.link(Context.data.organization)));\n            }\n            if (Context.data.transferred_staff_table.length === 0) {\n                const row = Context.data.transferred_staff_table.insert();\n                row.staff = Context.data.staff;\n                Context.data.transferred_staff_table = Context.data.transferred_staff_table;\n            }\n            const hr_group = await Namespace.app.settings.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq('hr_department')))\n                .first();\n            if (hr_group) {\n                const usersArrays = await Promise.all(hr_group.data.members.map(x =\u003e x.getUsers()));\n                const users = usersArrays.reduce((a, b) =\u003e a.concat(b));\n                if (users.find(f =\u003e f.id === user.id)) {\n                    Context.data.iniciator_manager_hr = true;\n                }\n                else {\n                    Context.data.iniciator_manager_hr = false;\n                }\n            }\n            if (ViewContext.data.__formType \u0026\u0026 ViewContext.data.__formType.code == ViewContext.fields.__formType.variants.edit.code) {\n                ViewContext.data.view_result = true;\n            }\n            if (Context.data.transfer_type) {\n                await changeType();\n            }\n            await checkTemporaryTransfer();\n        }\n        async function changeType() {\n            if (Context.data.transfer_type) {\n                switch (Context.data.transfer_type.code) {\n                    case \"transfer_another_position\": {\n                        ViewContext.data.warning_text = '';\n                        ViewContext.data.view_warning = false;\n                        Context.data.transfer_table = undefined;\n                        ViewContext.data.view_table = false;\n                        ViewContext.data.view_organization = false;\n                        ViewContext.data.change_department_position = true;\n                        ViewContext.data.show_work_schedules = false;\n                        ViewContext.data.show_remote_work = true;\n                        ViewContext.data.work_shedules_required = false;\n                        Context.data.date_end = undefined;\n                        await checkTemporaryTransfer();\n                        break;\n                    }\n                    case \"work_condition_change\": {\n                        ViewContext.data.warning_text = '';\n                        ViewContext.data.view_warning = false;\n                        Context.data.transfer_table = undefined;\n                        ViewContext.data.view_table = true;\n                        ViewContext.data.view_organization = false;\n                        ViewContext.data.change_department_position = false;\n                        Context.data.new_position = undefined;\n                        ViewContext.data.show_work_schedules = false;\n                        ViewContext.data.show_remote_work = false;\n                        ViewContext.data.work_shedules_required = true;\n                        ViewContext.data.show_cause_temporary_transfer = false;\n                        Context.data.transfer_during_absence = undefined;\n                        Context.data.cause_temporary_transfer = undefined;\n                        ViewContext.data.show_missing = false;\n                        break;\n                    }\n                    case \"change_of_schedule\": {\n                        ViewContext.data.warning_text = '';\n                        ViewContext.data.view_warning = false;\n                        Context.data.transfer_table = undefined;\n                        ViewContext.data.view_table = true;\n                        ViewContext.data.view_organization = false;\n                        ViewContext.data.change_department_position = false;\n                        Context.data.new_position = undefined;\n                        ViewContext.data.show_work_schedules = false;\n                        ViewContext.data.work_shedules_required = true;\n                        ViewContext.data.show_cause_temporary_transfer = false;\n                        ViewContext.data.show_remote_work = true;\n                        Context.data.transfer_during_absence = undefined;\n                        Context.data.cause_temporary_transfer = undefined;\n                        ViewContext.data.show_missing = false;\n                        break;\n                    }\n                    default: {\n                        break;\n                    }\n                }\n            }\n            else {\n                ViewContext.data.warning_text = '';\n                ViewContext.data.view_warning = false;\n                Context.data.transfer_table = undefined;\n                ViewContext.data.view_table = false;\n                ViewContext.data.view_organization = false;\n                ViewContext.data.change_department_position = false;\n                Context.data.new_position = undefined;\n                ViewContext.data.show_work_schedules = false;\n                ViewContext.data.work_shedules_required = false;\n                ViewContext.data.show_cause_temporary_transfer = false;\n                ViewContext.data.show_remote_work = false;\n                Context.data.transfer_during_absence = undefined;\n                Context.data.cause_temporary_transfer = undefined;\n                ViewContext.data.show_missing = false;\n            }\n        }\n        async function set_structural_subdivision() {\n            if (Context.data.new_position) {\n                ViewContext.data.view_table = true;\n                ViewContext.data.view_organization = true;\n                Context.data.transfer_table = undefined;\n                const position = await Context.data.new_position.fetch();\n                Context.data.structural_subdivision = position.data.subdivision;\n                if (ViewContext.data.show_missing === true \u0026\u0026 position.data.staff \u0026\u0026 position.data.staff.length === 1) {\n                    Context.data.transfer_during_absence = position.data.staff[0];\n                }\n                if (position.data.organization \u0026\u0026 Context.data.transfer_type \u0026\u0026 Context.data.transfer_type.code === Context.fields.transfer_type.variants.transfer_another_position.code) {\n                    const transfer_row_table = Context.data.transfer_table.insert();\n                    transfer_row_table.filter_organization = position.data.organization;\n                    Context.data.transfer_table = Context.data.transfer_table;\n                    Context.data.organization = position.data.organization;\n                    ViewContext.data.filter_organization = position.data.organization;\n                }\n            }\n            else {\n                if (Context.data.transfer_table \u0026\u0026 Context.data.transfer_type \u0026\u0026 Context.data.transfer_type.code === Context.fields.transfer_type.variants.transfer_another_position.code) {\n                    ViewContext.data.view_table = false;\n                    Context.data.transfer_table = undefined;\n                    ViewContext.data.filter_organization = undefined;\n                }\n                Context.data.structural_subdivision = undefined;\n                Context.data.organization = ViewContext.data.app_organization_view;\n            }\n        }\n        async function checkTemporaryTransfer() {\n            if (Context.data.temporary_transfer === true) {\n                ViewContext.data.show_cause_temporary_transfer = true;\n                ViewContext.data.view_date_end = true;\n            }\n            else {\n                ViewContext.data.show_cause_temporary_transfer = false;\n                ViewContext.data.view_date_end = false;\n                Context.data.cause_temporary_transfer = undefined;\n            }\n        }\n        async function checkDates() {\n            ViewContext.data.error_message = '';\n            let check = 0;\n            let check_start_date = 0;\n            if (Context.data.date_start \u0026\u0026 Context.data.date_start.before(new TDate())) {\n                check_start_date++;\n                ViewContext.data.error_message += '\\n\"Дата перевода с\" не может быть раньше текущей даты';\n            }\n            if (Context.data.date_start \u0026\u0026 Context.data.date_end \u0026\u0026 Context.data.date_end.before(Context.data.date_start)) {\n                check++;\n                ViewContext.data.error_message += '\\n\"Дата перевода по\" не может быть раньше \"Дата перевода с\" ';\n            }\n            ViewContext.data.show_error = check \u003e 0 || check_start_date \u003e 0 ? true : false;\n            ViewContext.data.show_error_start_date = check_start_date \u003e 0 ? true : false;\n        }\n        async function validation() {\n            var _a;\n            const result = new ValidationResult();\n            if (ViewContext.data.show_error === true) {\n                result.addContextError('date_end', '\"Дата перевода по\" не может быть раньше \"Дата перевода с\"');\n            }\n            if (ViewContext.data.show_error_start_date === true) {\n                result.addContextError('date_start', '\"Дата перевода с\" не может быть раньше текущей даты');\n            }\n            if (ViewContext.data.show_table_error === true) {\n                result.addContextError('transferred_staff_table', 'Невозможно указать одного и того же сотрудника несколько раз');\n            }\n            if (Context.data.transfer_table \u0026\u0026 Context.data.transfer_table.length \u003e 0) {\n                let count = 0;\n                const staffs_id = Context.data.transfer_table.filter(item =\u003e item.transfer_staff).map(f =\u003e f.transfer_staff.id);\n                const staffs = await Context.fields.staff.app.search().where(f =\u003e f.__id.in(staffs_id)).size(100).all();\n                let staffs_fio = \"\";\n                if (Context.data.new_position) {\n                    let position = await Context.data.new_position.fetch();\n                    for (let row of Context.data.transfer_table) {\n                        let staff = staffs.find(item =\u003e item.id == row.transfer_staff.id);\n                        if (staff) {\n                            let elem = (_a = staff.data.employment_table) === null || _a === void 0 ? void 0 : _a.find(item =\u003e item.position \u0026\u0026 item.position.id == position.id);\n                            if (!!elem) {\n                                staffs_fio += staff.data.full_name ? staff.data.full_name.lastname + \" \" + staff.data.full_name.firstname + \", \" : \"\";\n                                count++;\n                            }\n                        }\n                    }\n                    if (!!staffs_fio)\n                        if (count == 1) {\n                            result.addMessage(staffs_fio.slice(0, -2) + ' : данный сотрудник уже назначен на позицию по которому осуществляется перевод');\n                        }\n                        else {\n                            result.addMessage(staffs_fio.slice(0, -2) + ' : данные сотрудники уже назначены на позицию по которому осуществляется перевод');\n                        }\n                }\n            }\n            return result;\n        }\n        async function updateTable() {\n            ViewContext.data.show_table_error = false;\n            ViewContext.data.table_error = '';\n            if (Context.data.transferred_staff_table \u0026\u0026 Context.data.transferred_staff_table.length \u003e 0) {\n                const staffs_id = Context.data.transferred_staff_table.map(f =\u003e f.staff.id);\n                const findDuplicates = staffs_id.filter((item, index) =\u003e staffs_id.indexOf(item) !== index);\n                if (findDuplicates \u0026\u0026 findDuplicates.length \u003e 0) {\n                    ViewContext.data.show_table_error = true;\n                    ViewContext.data.table_error = 'Невозможно указать одного и того же сотрудника несколько раз';\n                }\n                for (const row of Context.data.transferred_staff_table) {\n                    if (row.staff) {\n                        const staff = await row.staff.fetch();\n                        row.employment_type = staff.data.employment_type;\n                    }\n                }\n                if (ViewContext.data.table_string !== JSON.stringify(Context.data.transferred_staff_table.json())) {\n                    ViewContext.data.table_string = JSON.stringify(Context.data.transferred_staff_table.json());\n                    Context.data.transferred_staff_table = Context.data.transferred_staff_table;\n                }\n            }\n        }\n        async function checkReason() {\n            ViewContext.data.show_missing = false;\n            Context.data.transfer_during_absence = undefined;\n            if (Context.data.cause_temporary_transfer) {\n                const cause_temporary_transfer = await Context.data.cause_temporary_transfer.fetch();\n                if (cause_temporary_transfer.data.__name === 'Для замещения временно отсутствующего (до выхода сотрудника)') {\n                    ViewContext.data.show_missing = true;\n                    if (Context.data.new_position) {\n                        const new_position = await Context.data.new_position.fetch();\n                        if (new_position.data.staff \u0026\u0026 new_position.data.staff.length === 1) {\n                            Context.data.transfer_during_absence = new_position.data.staff[0];\n                        }\n                    }\n                }\n            }\n        }\n        async function changeTransferTable() {\n            var _a, _b;\n            if (Context.data.transfer_table \u0026\u0026 Context.data.transfer_table.length \u003e 0) {\n                const filter_organization = await ((_a = ViewContext.data.filter_organization) === null || _a === void 0 ? void 0 : _a.fetch());\n                const staffs_id = Context.data.transfer_table.map(f =\u003e f.transfer_staff.id);\n                const staffs = await Context.fields.staff.app.search().where(f =\u003e f.__id.in(staffs_id)).size(100).all();\n                for (const row of Context.data.transfer_table) {\n                    const staff_data = staffs.find(f =\u003e f.id == row.transfer_staff.id);\n                    if (row.json_staff !== JSON.stringify(staff_data.json())) {\n                        row.json_staff = JSON.stringify(staff_data.json());\n                        if (staff_data) {\n                            row.transfer_employment_place = undefined;\n                            row.transfer_work_schedule = undefined;\n                            row.transfer_workplace = undefined;\n                            const employment_table = (_b = staff_data.data.employment_table) !== null \u0026\u0026 _b !== void 0 ? _b : staff_data.fields.employment_table.create();\n                            if (Context.data.transfer_type \u0026\u0026 Context.data.transfer_type.code === Context.fields.transfer_type.variants.transfer_another_position.code) {\n                                if (ViewContext.data.filter_organization) {\n                                    row.filter_organization = ViewContext.data.filter_organization;\n                                }\n                                const [main, internal, external] = [\n                                    employment_table.find(f =\u003e f.type_employment.code == \"main_workplace\" \u0026\u0026 f.organization.id == row.filter_organization.id),\n                                    employment_table.find(f =\u003e f.type_employment.code == \"internal_combination\" \u0026\u0026 f.organization.id == row.filter_organization.id),\n                                    employment_table.find(f =\u003e f.type_employment.code == \"external_combination\" \u0026\u0026 f.organization.id == row.filter_organization.id),\n                                ];\n                                const staff_workplace = main || internal || external;\n                                if (!staff_workplace) {\n                                    row.error = true;\n                                    continue;\n                                }\n                                row.error = false;\n                                row.transfer_employment_place = staff_workplace.employment_placement_app;\n                                row.transfer_work_schedule = staff_workplace.work_schedules;\n                                row.transfer_workplace = staff_workplace.work_place;\n                            }\n                            else {\n                                const [main, internal, external] = [\n                                    employment_table.find(f =\u003e f.type_employment.code == \"main_workplace\"),\n                                    employment_table.find(f =\u003e f.type_employment.code == \"internal_combination\"),\n                                    employment_table.find(f =\u003e f.type_employment.code == \"external_combination\"),\n                                ];\n                                const staff_workplace = main || internal || external;\n                                row.error = false;\n                                if (staff_workplace) {\n                                    row.transfer_employment_place = staff_workplace.employment_placement_app;\n                                    row.transfer_work_schedule = staff_workplace.work_schedules;\n                                    row.transfer_workplace = staff_workplace.work_place;\n                                    if (staff_data.data.organization)\n                                        row.filter_organization = staff_data.data.organization;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (ViewContext.data.transfer_table_string !== JSON.stringify(Context.data.transfer_table.json())) {\n                    ViewContext.data.transfer_table_string = JSON.stringify(Context.data.transfer_table.json());\n                    const search_error = Context.data.transfer_table.filter(f =\u003e f.error === true);\n                    if (search_error \u0026\u0026 search_error.length \u003e 0) {\n                        ViewContext.data.warning_text = `Выбранный(-ие) сотрудник(-и) не имеет(-ют) мест занятости в ${filter_organization ? filter_organization.data.__name : 'выбранной организации'}`;\n                        ViewContext.data.view_warning = true;\n                    }\n                    else {\n                        ViewContext.data.warning_text = '';\n                        ViewContext.data.view_warning = false;\n                    }\n                    Context.data.transfer_table = Context.data.transfer_table;\n                }\n                const find_duplicates_staff_id = Context.data.transfer_table.map(f =\u003e f.transfer_staff.id);\n                const find_duplicates_employment_place_id = Context.data.transfer_table.map(f =\u003e f.transfer_employment_place.id);\n                const find_duplicates_staff = find_duplicates_staff_id.filter((item, index) =\u003e find_duplicates_staff_id.indexOf(item) !== index);\n                const find_duplicates_employment_place = find_duplicates_employment_place_id.filter((item, index) =\u003e find_duplicates_employment_place_id.indexOf(item) !== index);\n                if (find_duplicates_staff \u0026\u0026 find_duplicates_employment_place \u0026\u0026 find_duplicates_staff.length \u003e 0 \u0026\u0026 find_duplicates_employment_place.length \u003e 0) {\n                    ViewContext.data.show_table_error = true;\n                    ViewContext.data.table_error = 'Невозможно указать одного и того же сотрудника несколько раз с одним видом занятости';\n                }\n                else {\n                    ViewContext.data.show_table_error = false;\n                    ViewContext.data.table_error = '';\n                }\n            }\n        }\n        return {\n            onInit,\n            changeType,\n            set_structural_subdivision,\n            checkTemporaryTransfer,\n            checkDates,\n            validation,\n            updateTable,\n            checkReason,\n            changeTransferTable\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "onInit",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "changeType",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "set_structural_subdivision",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkTemporaryTransfer",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkDates",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "validation",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "updateTable",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkReason",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "changeTransferTable",
        "parameters": [],
        "type": "[object Object]"
      }
    ],
    "clientDependencies": {
      "applications": [],
      "collections": [
        {
          "namespace": "kedo",
          "code": "staff"
        },
        {
          "namespace": "kedo",
          "code": "settings"
        },
        {
          "namespace": "kedo",
          "code": "position"
        },
        {
          "namespace": "kedo",
          "code": "reasons_temporary_transfer"
        },
        {
          "namespace": "kedo",
          "code": "organization"
        }
      ],
      "pages": [
        {
          "namespace": "global",
          "code": "kedo"
        }
      ]
    }
  },
  "__createdAt": "2024-05-15T06:09:43.222651961Z",
  "__createdBy": "2ee2e398-247f-4e00-aec4-2e40d6b93a70",
  "__updatedAt": "2024-05-17T09:14:32.492462426Z",
  "__updatedBy": "2ee2e398-247f-4e00-aec4-2e40d6b93a70",
  "__deletedAt": null
}
