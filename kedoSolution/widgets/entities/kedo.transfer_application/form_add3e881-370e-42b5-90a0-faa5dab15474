{"__id":"018c8758-051e-7aa2-87ff-99d9e311bac5","namespace":"kedo.transfer_application","code":"form_add3e881-370e-42b5-90a0-faa5dab15474","__name":"Задача 2","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":3,"hidden":true,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"2060d361-692e-4be3-ac69-121d0af61d54","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"formType":"task-form","formGroup":{"path":["context"]},"systemFunctions":{"onInit":{"kind":"Function","name":"action","type":"client"}}},"content":{"[headerControls]":[{"id":"475aa008-aaff-402f-8de2-408bae1f1928","descriptor":"task-percent-widget","values":{"task":{"path":["task"]}}},{"id":"702d9c59-77ae-4dd5-b71a-a5fe7b58858f","descriptor":"extension-zone-toolbar-widget","values":{"item":{"path":["__itemRef"]}}},{"id":"f7b11c79-4267-4f5b-a002-dd629d549682","descriptor":"process-item-map","values":{"task":{"path":["task"]},"skipRulesCheck":true}},{"id":"ff2500ee-6573-49cd-a9e8-2d5c93350f26","descriptor":"button","values":{"icon":"menu_vertical","view":"icon","label":"bpm.tasks.item@menu","action":{"path":["menuAction"]},"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}}],"[headerCustomization]":[],"[footer]":[{"id":"31979bac-00bd-4123-a901-9d14190c8dde","descriptor":"buttons-panel","values":{"buttons":{"path":["actionButtons"]}}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"dcdd3e4e-0c49-483b-87c2-8c782a8890f0","descriptor":"dynamic-form","values":{"form":{"path":["context"]},"fields":{"path":["fields"]}}}]}}],"[sidebar]":[{"id":"39d7757a-529f-4526-98f3-fddc66becf85","descriptor":"sidebar-widget","content":{"":[{"id":"abe4b782-6e2d-49cc-a57e-81b636422ee5","descriptor":"target-widget","values":{"context":{"path":["context"]}}}]}},{"id":"231b371a-64ae-4b61-8014-cba6da318ac9","descriptor":"sidebar-widget","content":{"":[{"id":"5e39b91d-aea4-467e-862f-0f8766eb44df","descriptor":"linked-item","values":{"context":{"path":["context"]}}}]}},{"id":"a4469de0-d7f3-11ec-9d64-0242ac120002","descriptor":"sidebar-widget","content":{"":[{"id":"3ead7c41-6dfa-4144-80da-2bfb5f0ccf59","descriptor":"item-reminder","values":{"formGroup":{"path":["context"]}}}]}},{"id":"56d1d0e8-aa83-4cdd-ae43-294b26ad4d04","descriptor":"sidebar-widget","content":{"":[{"id":"e1525e34-14ba-456b-b703-f407945c01e0","descriptor":"item-tasks","descriptorVersion":4,"values":{"formGroup":{"path":["context"]}}}]}},{"id":"eef018f2-1d3a-4600-a19d-791733b28b5e","descriptor":"sidebar-widget","content":{"":[{"id":"e0a17dec-603a-461a-becf-861637630584","descriptor":"messages-target","values":{"target":{"path":["target"]}}}]}}],"[formInfoPanel]":[{"id":"b5287903-5bdf-48ae-a8f4-0ae17fe7ebe8","descriptor":"validation-info-block","values":{"__validateResult":{"path":["context","__validateResult"]}}}]}},"fieldVisibilityConditions":{},"scriptOptions":{},"clientScripts":"/* Client scripts module */\n\nasync function action(): Promise\u003cvoid\u003e {\n    const staff = await Context.data.staff_chief!.fetch();\n    const organization = await staff.data.organization!.fetch();\n    const subdivisions = await staff.fields.structural_subdivision.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organization)\n        ))\n        .size(10000)\n        .all();\n    const positions = await staff.fields.position.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organization)\n        ))\n        .size(10000)\n        .all();\n    const staffs = await staff.fields.dop_staff.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organization)\n        ))\n        .size(10000)\n        .all();\n    const position = positions.find(f =\u003e f.id == staff.data.position!.id)!;\n    if (!position.data.subdivision) {\n        Context.data.chief_user = (await organization_get_head(organization, positions, staffs)) || undefined;\n    } else {\n        Context.data.chief_user = (await subdivision_get_head(position.data.subdivision, positions, subdivisions, staffs, organization)) || undefined;\n    }\n}\n\nasync function subdivision_get_head(subdivision: TApplication\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params, Application$kedo$structural_subdivision$Processes\u003e,\n    positions: ApplicationItem\u003cApplication$kedo$position$Data, Application$kedo$position$Params\u003e[],\n    subdivisions: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, Application$kedo$structural_subdivision$Params\u003e[],\n    staffs: ApplicationItem\u003cApplication$kedo$staff$Data, Application$kedo$staff$Params\u003e[],\n    organization: ApplicationItem\u003cApplication$kedo$organization$Data, Application$kedo$organization$Params\u003e): Promise\u003cUserItemRef | undefined\u003e {\n    const division = subdivisions.find(f =\u003e f.id == subdivision.id)!;\n    if (!division.data.position) {\n        if (!division.data.subdivision) {\n            return organization_get_head(organization, positions, staffs)\n        } else {\n            return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization)\n        }\n    } else {\n        const position_head = positions.find(f =\u003e f.id == division.data.position!.id)!;\n        if (!position_head.data.staff || position_head.data.staff.length == 0) {\n            if (!division.data.subdivision) {\n                return organization_get_head(organization, positions, staffs)\n            } else {\n                return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization)\n            }\n        } else {\n            const chief = staffs.find(f =\u003e f.id == position_head.data.staff![0].id);\n            if (chief) {\n                return chief.data.ext_user\n            }\n        }\n    }\n}\n\nasync function organization_get_head(organization: ApplicationItem\u003cApplication$kedo$organization$Data, Application$kedo$organization$Params\u003e,\n    positions: ApplicationItem\u003cApplication$kedo$position$Data, Application$kedo$position$Params\u003e[],\n    staffs: ApplicationItem\u003cApplication$kedo$staff$Data, Application$kedo$staff$Params\u003e[]): Promise\u003cUserItemRef | undefined\u003e {\n    if (!organization.data.position_head) {\n        return undefined\n    } else {\n        const position_head = positions.find(f =\u003e f.id == organization.data.position_head!.id)!;\n        if (!position_head.data.staff || position_head.data.staff.length == 0) {\n            return undefined\n        } else {\n            const chief = staffs.find(f =\u003e f.id == position_head.data.staff![0].id);\n            if (chief) {\n                return chief.data.ext_user\n            }\n        }\n    }\n}\n","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{},"dataFieldCode":"context"},"dataNamespace":"kedo.transfer_application","dataCode":"_process_transfer_request_workflow","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server) {\n        async function action() {\n            const staff = await Context.data.staff_chief.fetch();\n            const organization = await staff.data.organization.fetch();\n            const subdivisions = await staff.fields.structural_subdivision.app.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organization)))\n                .size(10000)\n                .all();\n            const positions = await staff.fields.position.app.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organization)))\n                .size(10000)\n                .all();\n            const staffs = await staff.fields.dop_staff.app.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organization)))\n                .size(10000)\n                .all();\n            const position = positions.find(f =\u003e f.id == staff.data.position.id);\n            if (!position.data.subdivision) {\n                Context.data.chief_user = (await organization_get_head(organization, positions, staffs)) || undefined;\n            }\n            else {\n                Context.data.chief_user = (await subdivision_get_head(position.data.subdivision, positions, subdivisions, staffs, organization)) || undefined;\n            }\n        }\n        async function subdivision_get_head(subdivision, positions, subdivisions, staffs, organization) {\n            const division = subdivisions.find(f =\u003e f.id == subdivision.id);\n            if (!division.data.position) {\n                if (!division.data.subdivision) {\n                    return organization_get_head(organization, positions, staffs);\n                }\n                else {\n                    return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization);\n                }\n            }\n            else {\n                const position_head = positions.find(f =\u003e f.id == division.data.position.id);\n                if (!position_head.data.staff || position_head.data.staff.length == 0) {\n                    if (!division.data.subdivision) {\n                        return organization_get_head(organization, positions, staffs);\n                    }\n                    else {\n                        return await subdivision_get_head(division.data.subdivision, positions, subdivisions, staffs, organization);\n                    }\n                }\n                else {\n                    const chief = staffs.find(f =\u003e f.id == position_head.data.staff[0].id);\n                    if (chief) {\n                        return chief.data.ext_user;\n                    }\n                }\n            }\n        }\n        async function organization_get_head(organization, positions, staffs) {\n            if (!organization.data.position_head) {\n                return undefined;\n            }\n            else {\n                const position_head = positions.find(f =\u003e f.id == organization.data.position_head.id);\n                if (!position_head.data.staff || position_head.data.staff.length == 0) {\n                    return undefined;\n                }\n                else {\n                    const chief = staffs.find(f =\u003e f.id == position_head.data.staff[0].id);\n                    if (chief) {\n                        return chief.data.ext_user;\n                    }\n                }\n            }\n        }\n        return {\n            action,\n            subdivision_get_head,\n            organization_get_head\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"action","parameters":[],"type":"[object Object]"},{"name":"subdivision_get_head","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"organization_get_head","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:01.853573257Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:07:52.669140812Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
