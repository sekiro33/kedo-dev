{"__id":"018c8758-63de-7ff3-a7e7-b90a476760e9","namespace":"ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd","code":"kontur_sign_widget","__name":"УЦ Контур","description":"","extensionZoneCode":"sign-application","sort":1,"category":"00000000-0000-0000-0000-000000000000","version":35,"hidden":false,"draft":false,"readonly":false,"descriptor":{"template":{"id":"0926af2f-ad90-45a3-b5b3-7668112cd2fb","descriptor":"component","content":{"":[{"id":"64d21c6b-81d0-4855-a168-2df4676b47fc","descriptor":"dynamic-form-row","values":{"__hidden":{"path":["empty_certs"]},"__readOnly":null,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"assignCertificate","type":"client"},"__isConstValues":[],"showDisplayName":true,"tooltip":null,"required":false,"hideEmpty":false,"control":{"path":["certificates"]}}},{"id":"3aaab3d4-2d58-4224-875d-b47f06e74164","descriptor":"button","values":{"__classes":"send-code","runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"onClick":{"kind":"Function","name":"createFileWrapper","type":"client"},"__styles":"","__baseURL":"","processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"__isConstValues":[],"view":"primary","__hidden":{"path":["certificate_assigned"],"modifier":"not"},"runInPopover":null,"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"label":"Получить код","action":null,"__outlet":"","__relativeURL":""}},{"id":"315096de-ecad-4bd6-84de-c3871818885f","descriptor":"dynamic-form-row","values":{"control":{"path":["sms_code"]},"required":false,"hideEmpty":false,"__readOnly":null,"showDisplayName":true,"tooltip":null,"__hidden":{"path":["draft_created"],"modifier":"not"},"__classes":"sign-password","bindingMode":false,"__isConstValues":[]}},{"id":"69cf945d-65fc-4dc3-9eea-6c28f7dea1f4","descriptor":"button","values":{"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"__isConstValues":[],"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"label":"Подписать","action":null,"__styles":"","runInPopover":null,"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"view":"primary","onClick":{"kind":"Function","name":"closeDraftWrapper","type":"client"},"__hidden":{"path":["draft_created"],"modifier":"not"},"__classes":"create-sign"}},{"id":"0ccced11-3164-470b-87ab-2a6cee970096","descriptor":"code","values":{"html":"\u003c% if (Context.data.sign_error) { %\u003e\n    \u003cp style=\"color: red\"\u003e\n        Произошла ошибка: \u003c%= Context.data.error %\u003e\n    \u003c/p\u003e\n\u003c% } %\u003e\n\u003c% if (Context.data.sign_success) { %\u003e\n    \u003cp style=\"color: green\"\u003e\n        Документ успешно подписан.\n    \u003c/p\u003e\n\u003c% } %\u003e","hideContent":true,"contentPlaceholder":"sign status"}},{"id":"2f9198a7-37e8-4887-b58a-6fd28fc515f5","descriptor":"code","values":{"html":"\n\u003ctemplate class=\"my-spinner\"\u003e\n  \u003csvg\n  width=\"25\"\n  height=\"25\"\n  viewBox=\"0 0 200 200\"\n  color=\"black\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  class=\"spinner-svg\"\n\u003e\n  \u003cg stroke=\"currentColor\" stroke-width=\"8\"\u003e\n    \u003cpath opacity=\"1\" d=\"M 191 70 A 96 96 0 0 1 196 100\" /\u003e\n    \u003cpath opacity=\"0.95\" d=\"M 178 44 A 96 96 0 0 1 191 70\" /\u003e\n    \u003cpath opacity=\"0.90\" d=\"M 156 22 A 96 96 0 0 1 178 44\" /\u003e\n    \u003cpath opacity=\"0.85\" d=\"M 130 9 A 96 96 0 0 1 156 22\" /\u003e\n    \u003cpath opacity=\"0.80\" d=\"M 100 4 A 96 96 0 0 1 130 9\" /\u003e\n    \u003cpath opacity=\"0.75\" d=\"M 70 9 A 96 96 0 0 1 100 4\" /\u003e\n    \u003cpath opacity=\"0.70\" d=\"M 44 22 A 96 96 0 0 1 70 9\" /\u003e\n    \u003cpath opacity=\"0.65\" d=\"M 22 44 A 96 96 0 0 1 44 22\" /\u003e\n    \u003cpath opacity=\"0.60\" d=\"M 9 70 A 96 96 0 0 1 22 44\" /\u003e\n    \u003cpath opacity=\"0.55\" d=\"M 4 100 A 96 96 0 0 1 9 70\" /\u003e\n    \u003cpath opacity=\"0.50\" d=\"M 9 130 A 96 96 0 0 1 4 100\" /\u003e\n    \u003cpath opacity=\"0.45\" d=\"M 22 156 A 96 96 0 0 1 9 130\" /\u003e\n    \u003cpath opacity=\"0.40\" d=\"M 44 178 A 96 96 0 0 1 22 156\" /\u003e\n    \u003cpath opacity=\"0.35\" d=\"M 70 191 A 96 96 0 0 1 44 178\" /\u003e\n    \u003cpath opacity=\"0.30\" d=\"M 100 196 A 96 96 0 0 1 70 191\" /\u003e\n    \u003cpath opacity=\"0.25\" d=\"M 130 191 A 96 96 0 0 1 100 196\" /\u003e\n    \u003cpath opacity=\"0.20\" d=\"M 156 178 A 96 96 0 0 1 130 191\" /\u003e\n    \u003cpath opacity=\"0.15\" d=\"M 178 156 A 96 96 0 0 1 156 178\" /\u003e\n    \u003cpath opacity=\"0.10\" d=\"M 191 130 A 96 96 0 0 1 178 156\" /\u003e\n    \u003cpath opacity=\"0.05\" d=\"M 196 100 A 96 96 0 0 1 191 130\" /\u003e\n  \u003c/g\u003e\n\u003c/svg\u003e\n\u003c/template\u003e\n\n\u003cstyle\u003e\n  .spinner-svg {\n    animation: spin 1s linear infinite;\n  }\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"loader template"}}]}},"fields":[{"code":"applicationRef","type":"REF_ITEM","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Application"}},{"code":"provider","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Provider"}},{"code":"signType","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Type of Sign"}},{"code":"user","type":"SYS_USER","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"User"}},{"code":"isDone","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"isDone"}},{"code":"finalStatus","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Final status"}},{"code":"content","type":"JSON","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Content"}},{"code":"certificates","type":"ENUM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"enumItems":[]},"view":{"name":"Сертификаты","data":{}}},{"code":"digital_sign_object","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Объект подписи","data":{"additionalType":"string"}}},{"code":"response","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Ответ сервера","data":{"additionalType":"string"}}},{"code":"file_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Идентификатор файла","data":{"additionalType":"string"}}},{"code":"operation_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Идентификатор операции подписания","data":{"additionalType":"string"}}},{"code":"sms_code","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"mask":{"pattern":"\\d{6}","errorMessage":"Код должен состоять из 6-ти цифр"}},"view":{"name":"Код из СМС","data":{"additionalType":"string"}}},{"code":"draft_created","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Черновик подписи создан","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"inner_sign_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Внутренний идентификатор подписи","data":{"additionalType":"string"}}},{"code":"certificate_assigned","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификат выбран","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"debug","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"debug","data":{"additionalType":"string"}}},{"code":"sign_success","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Подпись успешна","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"file_link","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Ссылка на файл","data":{"additionalType":"string"}}},{"code":"sign_error","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Ошибка при подписании","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"error","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Ошибка","data":{"additionalType":"string"}}},{"code":"empty_certs","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификаты не найдены","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"certs_json","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификаты JSON","data":{"additionalType":"string"}}},{"code":"file_processed","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Файл полностью загружен","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}},{"code":"hash_only","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Загрузить только хэш","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}},{"code":"base64_only","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Загрузить только base64","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}},{"code":"file_length","type":"FLOAT","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Длина файла","data":{"additionalType":"integer","showRowSeparator":true},"input":true,"output":true}},{"code":"full_size","type":"FLOAT","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Полный размер файла","data":{"additionalType":"integer","showRowSeparator":true},"input":true,"output":true}}],"fieldVisibilityConditions":{"user":{"enabled":false,"conditions":[]},"debug":{"enabled":false,"conditions":[]},"error":{"enabled":false,"conditions":[]},"isDone":{"enabled":false,"conditions":[]},"content":{"enabled":false,"conditions":[]},"file_id":{"enabled":false,"conditions":[]},"__hidden":{"enabled":false,"conditions":[]},"__styles":{"enabled":false,"conditions":[]},"provider":{"enabled":false,"conditions":[]},"response":{"enabled":false,"conditions":[]},"signType":{"enabled":false,"conditions":[]},"sms_code":{"enabled":false,"conditions":[]},"__classes":{"enabled":false,"conditions":[]},"file_hash":{"enabled":false,"conditions":[]},"file_link":{"enabled":false,"conditions":[]},"full_size":{"enabled":false,"conditions":[]},"hash_only":{"enabled":false,"conditions":[]},"__readOnly":{"enabled":false,"conditions":[]},"certs_json":{"enabled":false,"conditions":[]},"sign_error":{"enabled":false,"conditions":[]},"base64_only":{"enabled":false,"conditions":[]},"empty_certs":{"enabled":false,"conditions":[]},"file_length":{"enabled":false,"conditions":[]},"finalStatus":{"enabled":false,"conditions":[]},"certificates":{"enabled":false,"conditions":[]},"operation_id":{"enabled":false,"conditions":[]},"sign_success":{"enabled":false,"conditions":[]},"draft_created":{"enabled":false,"conditions":[]},"inner_sign_id":{"enabled":false,"conditions":[]},"__onMouseEnter":{"enabled":false,"conditions":[]},"__onMouseLeave":{"enabled":false,"conditions":[]},"applicationRef":{"enabled":false,"conditions":[]},"file_processed":{"enabled":false,"conditions":[]},"__isConstValues":{"enabled":false,"conditions":[]},"digital_sign_object":{"enabled":false,"conditions":[]},"__renderContentAsync":{"enabled":false,"conditions":[]},"certificate_assigned":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"declare const console: any;\ndeclare const window: any;\ndeclare const document: any;\n\nasync function canRender(): Promise\u003cboolean\u003e {\n    return Context.data.provider === \"ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd@kontur_sign_widget\"\n}\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    await Server.rpc.getCerts();\n    \n    let certs = Context.data.certs_json ? JSON.parse(Context.data.certs_json!) : [];\n    if (!certs || certs.length \u003c 1) {\n        // const providerVariants = document.querySelectorAll(\"elma-popover-menu-option span\");\n        // for (let provider of providerVariants) {\n        //     if (provider.textContent.includes(\"УЦ Контур\")) {\n        //         provider.parentElement.remove();\n        //         break;\n        //     };\n        // };\n        Context.data.__hidden = true;\n        return;\n    };\n\n    for (let cert of certs) {\n        Context.fields.certificates.data.variants.push({name: cert.name, code: cert.code});\n    };\n    if (Context.fields.certificates.data.variants.length === 1) {\n        //@ts-ignore\n        Context.data.certificates = {name: Context.fields.certificates.data.variants[0].name, code: Context.fields.certificates.data.variants[0].code};\n        await assignCertificate();\n    };\n};\n\nfunction showLoader(location: string) {\n    let loader = document.querySelector(\".my-spinner\").content.cloneNode(true);\n    let triggerElement = document.querySelector(location);\n    triggerElement.append(loader);\n};\n\nfunction hideLoader(location: string) {\n    let loader = document.querySelector(`${location} .spinner-svg`)\n    loader.remove();\n};\n\nasync function assignCertificate(): Promise\u003cvoid\u003e {\n    if (!!Context.data.certificates) {\n        Context.data.certificate_assigned = true;\n    } else {\n        Context.data.certificate_assigned = false;\n    };\n};\n\nasync function createFileWrapper(): Promise\u003cvoid\u003e {\n    showLoader(\".send-code\");\n    Context.data.sign_error = false;\n    Context.data.sign_success = false;\n    await Server.rpc.createFile();\n    console.log(\"debug: \", Context.data.debug)\n    hideLoader(\".send-code\");\n};\n\nasync function closeDraftWrapper():Promise\u003cvoid\u003e {\n    showLoader(\".create-sign\")\n    Context.data.sign_error = false;\n    Context.data.sign_success = false;\n    await Server.rpc.sendCode();\n    if (!Context.data.sign_error) {\n        window.setTimeout(await Server.rpc.closeDraft(), 5000);\n    };\n    hideLoader('.create-sign');\n};\n\nfunction onlyUnique(value: any, index: any, array: any) {\n    return array.indexOf(value) === index;\n};","clientScriptOptions":{"allowServer":true},"serverScripts":"type createSignData = {\n    ConfirmMessage: {\n        Template: string\n    },\n    FileIds?: string[],\n    FileHashes?: hashFile[],\n    SerializedFiles?: base64File[]\n    SignType: string,\n    CertificateBase64?: string\n};\n\ntype base64File = {\n    Id: string,\n    FileName: string,\n    ContentBase64: string\n};\n\ntype hashFile = {\n    FileName: string,\n    HashContent: string\n};\n\n\nconst chunkSize = 10000;\nconst apiKey = \"393a34b7-a20a-498d-9a1b-4fca580e8a9d\";\nconst konturSignUrl = Namespace.params.data.kontur_sign_server;\nlet headers: Record\u003cstring, string\u003e = {\n    \"X-KONTUR-APIKEY\": apiKey\n};\nconst stableData: createSignData = {\n    ConfirmMessage: {\n        Template: \"0\"\n    },\n    SignType: \"0\",\n    FileIds: []\n};\n\nconst stableDataForHash: createSignData = {\n    ConfirmMessage: {\n        Template: \"0\"\n    },\n    SignType: \"0\",\n    FileHashes: []\n};\n\nconst stableDataForBase64: createSignData = {\n    ConfirmMessage: {\n        Template: \"0\"\n    },\n    SignType: \"0\",\n    SerializedFiles: []\n};\n\nlet prodServer: boolean;\n\nasync function getCerts(): Promise\u003cvoid\u003e {\n    try {\n        Context.data.debug = `${Context.data.applicationRef!.namespace}/${Context.data.applicationRef!.code}`\n\n    } catch {\n        throw new Error(`no appref: ${Context.data.applicationRef}`)\n    }\n    let currentUser = await System.users.getCurrentUser();\n    let certs = await System.signs.digitalSigns.search().where((f ,g) =\u003e g.and(\n        f.__createdBy.eq(currentUser),\n        f.__deletedAt.eq(null)\n    )).size(1000).sort(\"__createdAt\").all();\n    certs = certs.filter(cert =\u003e {\n        return (cert.data.sign_provider?.code === \"Kontur\" || cert.data.signProvider?.code === \"Kontur\" || cert.data.signProvider?.code === \"KonturNew\" || cert.data.sign_provider?.code === \"KonturNew\") \u0026\u0026 ((cert.data.cert_status === \"released\" || cert.data.certStatus === \"released\") || !!cert.data.cert)\n    });\n    \n    certs = [...new Map(certs.map(item =\u003e [item.data.issueID, item])).values()]\n\n    let certItems = await Namespace.params.fields.digital_signs_list.app.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.user.eq(currentUser),\n            f.status.like('Выпущена')\n    )).size(10000).all();\n    let allCerts = certs.map(cert =\u003e {\n        let certItem = certItems.find(c =\u003e c.data.external_id === cert.data.issueID)\n        return  {\n            name: certItem ? certItem.data.__name : `${currentUser.data.__name} ${cert.data.__createdAt.format(\"DD.MM.YY\")}`,\n            code: cert.data.__id\n        };\n    });\n    if (!allCerts || allCerts.length \u003c 1) {\n        Context.data.error = \"Нет сертификатов\";\n        Context.data.sign_error = true;\n        Context.data.empty_certs = true;\n        return;\n    };\n    Context.data.certs_json = JSON.stringify(allCerts);\n};\n\nasync function createFile(): Promise\u003cvoid\u003e {\n    try {\n        prodServer = Namespace.params.data.kontur_server.code == \"production\";\n        const uploadType = Namespace.params.data.file_upload_type ? Namespace.params.data.file_upload_type.code : undefined;\n\n        switch (uploadType) {\n            case \"hash_only\":\n                Context.data.hash_only = true;\n                break\n            case \"base64_only\":\n                Context.data.base64_only = true;\n                break;\n            case \"full_body\":\n            case undefined:\n                let responseJson: any;\n                let docApp = await Context.data.applicationRef!.fetch();\n                if (!docApp.data.__file) {\n                    throw new Error(\"Отсутствует файл в документе\")\n                };\n                let file: FileItem = await docApp.data.__file.fetch();\n                let fileLink = await file.getDownloadUrl();\n                Context.data.file_link = fileLink;\n                let fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n                let fileSize = fileBuffer.byteLength.toString();\n                let fileHash = await file.getFileMD5Hash();\n                let fileName = file.data.__name;\n                let fullUrl: string = \"\";\n                \n                let response: FetchResponse;\n                if (prodServer) {\n                    fullUrl = `${konturSignUrl}/CreateFile?md5=${fileHash}\u0026fileName=${fileName}\u0026length=${fileSize}`\n                    response = await fetch(fullUrl, {\n                        // headers,\n                        method: \"POST\"\n                    });\n                } else {\n                    fullUrl = `${konturSignUrl}/CreateFile?certificate=${apiKey}\u0026md5=${fileHash}\u0026fileName=${fileName}\u0026length=${fileSize}`\n                    response = await fetch(fullUrl, {\n                        method: \"POST\"\n                    });\n                };\n                if (!response.ok) {\n                    let errorMsg = `${konturSignUrl}/CreateFile?certificate=${apiKey}\u0026md5=${fileHash}\u0026fileName=${fileName}\u0026length=${fileSize} ` + await response.text();\n                    errorMsg += prodServer ? \" (production server)\" : \" (test server)\"\n                    throw new Error(errorMsg);\n                };\n                responseJson = await response.json();\n                let fileId: string = responseJson.FileId;\n                Context.data.file_id = fileId;\n\n                const uploadedLength = Number(responseJson.Length);\n                Context.data.full_size = Number(fileSize);\n\n                Context.data.debug = JSON.stringify({\n                    file_length: Number(fileSize),\n                    uploaded_size: uploadedLength\n                });\n\n                if (uploadedLength \u003c Number(fileSize)) {\n                    Context.data.debug += \" uploading chunk..\"\n                    Context.data.file_length = uploadedLength;\n                    await uploadChunk();\n                };\n                break;\n        };\n        \n        await createSignDraft();\n    } catch (err) {\n        Context.data.error = err.message;\n        Context.data.sign_error = true;\n        return;\n    };\n};\n\nasync function uploadChunk(): Promise\u003cvoid\u003e {\n    try {\n        let fileId = Context.data.file_id;\n        let fileLink = Context.data.file_link!;\n        let fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n        let fullUrl: string = \"\";\n        let response: FetchResponse;\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/UploadChunk?fileId=${fileId}\u0026offset=${Context.data.file_length}`;\n            response = await fetch(fullUrl, {\n                // headers,\n                method: \"POST\",\n                body: fileBuffer\n            });\n        } else {\n            fullUrl = `${konturSignUrl}/UploadChunk?certificate=${apiKey}\u0026fileId=${fileId}\u0026offset=${Context.data.file_length}`;\n            response = await fetch(fullUrl, {\n                method: \"POST\",\n                body: fileBuffer\n            });\n        };\n\n        if (!response.ok) {\n            throw new Error(await response.text());\n        };\n\n    } catch (err) {\n        Context.data.sign_error = true;\n        Context.data.error = err.message;\n        return\n    };\n};\n\nasync function createSignDraft(): Promise\u003cvoid\u003e {\n    try {\n        let issueId = Context.data.certificates!.code;\n        let selectedIssue = await System.signs.digitalSigns.search().where(f =\u003e f.__id.eq(issueId!)).first();\n        let certificateBase64 = selectedIssue!.data.cert;\n        let fileId = Context.data.file_id!;\n        let response: FetchResponse;\n        let dataForRequest: createSignData = {\n            ConfirmMessage: {\n                Template: \"0\"\n            },\n            SignType: \"0\"\n        };\n\n        const docApp = await Context.data.applicationRef!.fetch();\n\n        if (!docApp.data.__file) {\n            throw new Error(\"Отсутствует файл в документе\");\n        };\n        \n        const file: FileItem = await docApp.data.__file.fetch();\n\n        if (Context.data.hash_only) {\n            const fileHash = await file.getFileMD5Hash();\n\n            stableDataForHash.FileHashes = [{\n                FileName: file.data.__name,\n                HashContent: fileHash\n            }];\n            \n            dataForRequest = stableDataForHash;\n        } else if (Context.data.base64_only) {\n            const fileLink = await file.getDownloadUrl();\n            const fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n            const fileBase64 = arrayBufferToBase64(fileBuffer);\n\n            stableDataForBase64.SerializedFiles = [{\n                Id: file.id,\n                FileName: file.data.__name,\n                ContentBase64: fileBase64\n            }];\n            dataForRequest = stableDataForBase64;\n        } else {\n            stableData.FileIds!.push(fileId)\n            dataForRequest = stableData;\n        }\n\n        dataForRequest.CertificateBase64 = certificateBase64;\n\n        // Context.data.debug = JSON.stringify({\n        //     url: `${konturSignUrl}/Sign?certificate=${apiKey}`,\n        //     method: \"POST\",\n        //     data: dataForRequest\n        // });\n        \n        let fullUrl: string = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/Sign`\n            response = await fetch(fullUrl, {\n                // headers,\n                method: \"POST\",\n                body: JSON.stringify(dataForRequest)\n            });\n        } else {\n            fullUrl = `${konturSignUrl}/Sign?certificate=${apiKey}`\n            response = await fetch(fullUrl, {\n                method: \"POST\",\n                body: JSON.stringify(dataForRequest)\n            });\n        }\n        if (!response.ok) {\n            throw new Error(await response.text());\n        };\n        let responseJson = await response.json();\n        let operationId = responseJson.OperationId;\n        Context.data.operation_id = operationId;\n        const provider = await System.signs.providers.search().where(f =\u003e f.code.eq(\"Kontur\")).first();\n\n        let dataSigns = await docApp.getDataSigns();\n        let signType = \u003cSignType\u003e\"file\";\n        let updatedAt = docApp.data.__updatedAt.format();\n        let newIssue: EntitySignItem;\n\n        newIssue = await System.signs.entitySigns.createDraft(operationId, issueId, Context.data.applicationRef!, dataSigns, updatedAt, signType, \"\", provider!);\n\n        Context.data.inner_sign_id = newIssue.id;\n        Context.data.draft_created = true;\n    } catch (err) {\n        Context.data.sign_error = true;\n        Context.data.error = `createSignDraft: ${err.message}`;\n        return;\n    };\n};\n\nasync function sendCode(): Promise\u003cvoid\u003e {\n    try {\n        let confirmationCode = Context.data.sms_code;\n        let operationId = Context.data.operation_id;\n        let fullUrl: string = \"\";\n        let response: FetchResponse;\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/Confirm?confirmationCode=${confirmationCode}\u0026operationId=${operationId}`;\n            response = await fetch(fullUrl, {\n                // headers,\n                method: \"POST\"\n            });\n        } else {\n            fullUrl =`${konturSignUrl}/Confirm?certificate=${apiKey}\u0026confirmationCode=${confirmationCode}\u0026operationId=${operationId}`;\n            response = await fetch(fullUrl, {\n                method: \"POST\"\n            });\n        };\n        if (!response.ok) {\n            throw new Error(await response.text());\n        };\n    } catch (err) {\n        Context.data.sign_error = true;\n        Context.data.error = err.message;\n        return;\n    };\n};\n\nasync function closeDraft(): Promise\u003cvoid\u003e {\n    try {\n        let fullUrl: string = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/GetStatus?operationId=${Context.data.operation_id}`;\n        } else {\n            fullUrl = `${konturSignUrl}/GetStatus?certificate=${apiKey}\u0026operationId=${Context.data.operation_id}`;\n        };\n        let responseCheck = await fetch(fullUrl, {\n            // headers\n        });\n        if (!responseCheck.ok) {\n            throw new Error(`getstatus error: ${await responseCheck.text()}`);\n        };\n        let responseJson = await responseCheck.json();\n        let resultId = responseJson[\"FileStatuses\"][0].ResultId;\n        let resultSize = responseJson[\"FileStatuses\"][0].ResultSize;\n        let responseGet: FetchResponse;\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/GetResult?resultId=${resultId}\u0026offset=0\u0026size=${resultSize}`\n            responseGet = await fetch(fullUrl, {\n                // headers\n            });\n        } else {\n            fullUrl = `${konturSignUrl}/GetResult?certificate=${apiKey}\u0026resultId=${resultId}\u0026offset=0\u0026size=${resultSize}`\n            responseGet = await fetch(fullUrl, {\n                method: \"GET\"\n            });\n        }\n        if (!responseGet.ok) {\n            throw new Error(`getresult error: ${await responseGet.text()}`);\n        };\n        try {\n            let signBuffer = await responseGet.arrayBuffer();\n\n            let entitySign = await System.signs.entitySigns.search().where(f =\u003e f.__id.eq(Context.data.inner_sign_id!)).first();\n            await entitySign!.uploadSign(signBuffer);\n            \n            try {\n                await entitySign!.setStatus(\u003cEntitySignOperationStatus\u003e\"completed\");\n            } catch {\n                await entitySign!.setStatus(EntitySignOperationStatus.Completed);\n            };\n\n            Context.data.sign_success = true;\n            Context.data.isDone = true;\n        } catch (err) {\n            throw new Error(`Произошла ошибка при подписании: ${err.message}, пожалуйста, попробуйте еще раз.`);\n        };\n    } catch (err) {\n        Context.data.sign_error = true;\n        Context.data.error = err.message;\n        return;\n    };\n};\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer): string {\n    let binary = '';\n    let bytes = new Uint8Array( buffer );\n    let len = bytes.byteLength;\n\n    for (let i = 0; i \u003c len; i++) {\n        binary += String.fromCharCode( bytes[ i ] );\n    };\n\n    return btoa(binary);\n}\n","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        async function canRender() {\n            return Context.data.provider === \"ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd@kontur_sign_widget\";\n        }\n        async function onInit() {\n            await Server.rpc.getCerts();\n            let certs = Context.data.certs_json ? JSON.parse(Context.data.certs_json) : [];\n            if (!certs || certs.length \u003c 1) {\n                Context.data.__hidden = true;\n                return;\n            }\n            ;\n            for (let cert of certs) {\n                Context.fields.certificates.data.variants.push({ name: cert.name, code: cert.code });\n            }\n            ;\n            if (Context.fields.certificates.data.variants.length === 1) {\n                Context.data.certificates = { name: Context.fields.certificates.data.variants[0].name, code: Context.fields.certificates.data.variants[0].code };\n                await assignCertificate();\n            }\n            ;\n        }\n        ;\n        function showLoader(location) {\n            let loader = document.querySelector(\".my-spinner\").content.cloneNode(true);\n            let triggerElement = document.querySelector(location);\n            triggerElement.append(loader);\n        }\n        ;\n        function hideLoader(location) {\n            let loader = document.querySelector(`${location} .spinner-svg`);\n            loader.remove();\n        }\n        ;\n        async function assignCertificate() {\n            if (!!Context.data.certificates) {\n                Context.data.certificate_assigned = true;\n            }\n            else {\n                Context.data.certificate_assigned = false;\n            }\n            ;\n        }\n        ;\n        async function createFileWrapper() {\n            showLoader(\".send-code\");\n            Context.data.sign_error = false;\n            Context.data.sign_success = false;\n            await Server.rpc.createFile();\n            console.log(\"debug: \", Context.data.debug);\n            hideLoader(\".send-code\");\n        }\n        ;\n        async function closeDraftWrapper() {\n            showLoader(\".create-sign\");\n            Context.data.sign_error = false;\n            Context.data.sign_success = false;\n            await Server.rpc.sendCode();\n            if (!Context.data.sign_error) {\n                window.setTimeout(await Server.rpc.closeDraft(), 5000);\n            }\n            ;\n            hideLoader('.create-sign');\n        }\n        ;\n        function onlyUnique(value, index, array) {\n            return array.indexOf(value) === index;\n        }\n        ;\n        return {\n            canRender,\n            onInit,\n            showLoader,\n            hideLoader,\n            assignCertificate,\n            createFileWrapper,\n            closeDraftWrapper,\n            onlyUnique\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"canRender","parameters":[],"type":"[object Object]"},{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"showLoader","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"hideLoader","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"assignCertificate","parameters":[],"type":"[object Object]"},{"name":"createFileWrapper","parameters":[],"type":"[object Object]"},{"name":"closeDraftWrapper","parameters":[],"type":"[object Object]"},{"name":"onlyUnique","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":""}],"serverScripts":"const chunkSize = 10000;\nconst apiKey = \"393a34b7-a20a-498d-9a1b-4fca580e8a9d\";\nconst konturSignUrl = Namespace.params.data.kontur_sign_server;\nlet headers = {\n    \"X-KONTUR-APIKEY\": apiKey\n};\nconst stableData = {\n    ConfirmMessage: {\n        Template: \"0\"\n    },\n    SignType: \"0\",\n    FileIds: []\n};\nconst stableDataForHash = {\n    ConfirmMessage: {\n        Template: \"0\"\n    },\n    SignType: \"0\",\n    FileHashes: []\n};\nconst stableDataForBase64 = {\n    ConfirmMessage: {\n        Template: \"0\"\n    },\n    SignType: \"0\",\n    SerializedFiles: []\n};\nlet prodServer;\nasync function getCerts() {\n    try {\n        Context.data.debug = `${Context.data.applicationRef.namespace}/${Context.data.applicationRef.code}`;\n    }\n    catch (_a) {\n        throw new Error(`no appref: ${Context.data.applicationRef}`);\n    }\n    let currentUser = await System.users.getCurrentUser();\n    let certs = await System.signs.digitalSigns.search().where((f, g) =\u003e g.and(f.__createdBy.eq(currentUser), f.__deletedAt.eq(null))).size(1000).sort(\"__createdAt\").all();\n    certs = certs.filter(cert =\u003e {\n        var _a, _b, _c, _d;\n        return (((_a = cert.data.sign_provider) === null || _a === void 0 ? void 0 : _a.code) === \"Kontur\" || ((_b = cert.data.signProvider) === null || _b === void 0 ? void 0 : _b.code) === \"Kontur\" || ((_c = cert.data.signProvider) === null || _c === void 0 ? void 0 : _c.code) === \"KonturNew\" || ((_d = cert.data.sign_provider) === null || _d === void 0 ? void 0 : _d.code) === \"KonturNew\") \u0026\u0026 ((cert.data.cert_status === \"released\" || cert.data.certStatus === \"released\") || !!cert.data.cert);\n    });\n    certs = [...new Map(certs.map(item =\u003e [item.data.issueID, item])).values()];\n    let certItems = await Namespace.params.fields.digital_signs_list.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.user.eq(currentUser), f.status.like('Выпущена'))).size(10000).all();\n    let allCerts = certs.map(cert =\u003e {\n        let certItem = certItems.find(c =\u003e c.data.external_id === cert.data.issueID);\n        return {\n            name: certItem ? certItem.data.__name : `${currentUser.data.__name} ${cert.data.__createdAt.format(\"DD.MM.YY\")}`,\n            code: cert.data.__id\n        };\n    });\n    if (!allCerts || allCerts.length \u003c 1) {\n        Context.data.error = \"Нет сертификатов\";\n        Context.data.sign_error = true;\n        Context.data.empty_certs = true;\n        return;\n    }\n    ;\n    Context.data.certs_json = JSON.stringify(allCerts);\n}\n;\nasync function createFile() {\n    try {\n        prodServer = Namespace.params.data.kontur_server.code == \"production\";\n        const uploadType = Namespace.params.data.file_upload_type ? Namespace.params.data.file_upload_type.code : undefined;\n        switch (uploadType) {\n            case \"hash_only\":\n                Context.data.hash_only = true;\n                break;\n            case \"base64_only\":\n                Context.data.base64_only = true;\n                break;\n            case \"full_body\":\n            case undefined:\n                let responseJson;\n                let docApp = await Context.data.applicationRef.fetch();\n                if (!docApp.data.__file) {\n                    throw new Error(\"Отсутствует файл в документе\");\n                }\n                ;\n                let file = await docApp.data.__file.fetch();\n                let fileLink = await file.getDownloadUrl();\n                Context.data.file_link = fileLink;\n                let fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n                let fileSize = fileBuffer.byteLength.toString();\n                let fileHash = await file.getFileMD5Hash();\n                let fileName = file.data.__name;\n                let fullUrl = \"\";\n                let response;\n                if (prodServer) {\n                    fullUrl = `${konturSignUrl}/CreateFile?md5=${fileHash}\u0026fileName=${fileName}\u0026length=${fileSize}`;\n                    response = await fetch(fullUrl, {\n                        method: \"POST\"\n                    });\n                }\n                else {\n                    fullUrl = `${konturSignUrl}/CreateFile?certificate=${apiKey}\u0026md5=${fileHash}\u0026fileName=${fileName}\u0026length=${fileSize}`;\n                    response = await fetch(fullUrl, {\n                        method: \"POST\"\n                    });\n                }\n                ;\n                if (!response.ok) {\n                    let errorMsg = `${konturSignUrl}/CreateFile?certificate=${apiKey}\u0026md5=${fileHash}\u0026fileName=${fileName}\u0026length=${fileSize} ` + await response.text();\n                    errorMsg += prodServer ? \" (production server)\" : \" (test server)\";\n                    throw new Error(errorMsg);\n                }\n                ;\n                responseJson = await response.json();\n                let fileId = responseJson.FileId;\n                Context.data.file_id = fileId;\n                const uploadedLength = Number(responseJson.Length);\n                Context.data.full_size = Number(fileSize);\n                Context.data.debug = JSON.stringify({\n                    file_length: Number(fileSize),\n                    uploaded_size: uploadedLength\n                });\n                if (uploadedLength \u003c Number(fileSize)) {\n                    Context.data.debug += \" uploading chunk..\";\n                    Context.data.file_length = uploadedLength;\n                    await uploadChunk();\n                }\n                ;\n                break;\n        }\n        ;\n        await createSignDraft();\n    }\n    catch (err) {\n        Context.data.error = err.message;\n        Context.data.sign_error = true;\n        return;\n    }\n    ;\n}\n;\nasync function uploadChunk() {\n    try {\n        let fileId = Context.data.file_id;\n        let fileLink = Context.data.file_link;\n        let fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n        let fullUrl = \"\";\n        let response;\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/UploadChunk?fileId=${fileId}\u0026offset=${Context.data.file_length}`;\n            response = await fetch(fullUrl, {\n                method: \"POST\",\n                body: fileBuffer\n            });\n        }\n        else {\n            fullUrl = `${konturSignUrl}/UploadChunk?certificate=${apiKey}\u0026fileId=${fileId}\u0026offset=${Context.data.file_length}`;\n            response = await fetch(fullUrl, {\n                method: \"POST\",\n                body: fileBuffer\n            });\n        }\n        ;\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n        ;\n    }\n    catch (err) {\n        Context.data.sign_error = true;\n        Context.data.error = err.message;\n        return;\n    }\n    ;\n}\n;\nasync function createSignDraft() {\n    try {\n        let issueId = Context.data.certificates.code;\n        let selectedIssue = await System.signs.digitalSigns.search().where(f =\u003e f.__id.eq(issueId)).first();\n        let certificateBase64 = selectedIssue.data.cert;\n        let fileId = Context.data.file_id;\n        let response;\n        let dataForRequest = {\n            ConfirmMessage: {\n                Template: \"0\"\n            },\n            SignType: \"0\"\n        };\n        const docApp = await Context.data.applicationRef.fetch();\n        if (!docApp.data.__file) {\n            throw new Error(\"Отсутствует файл в документе\");\n        }\n        ;\n        const file = await docApp.data.__file.fetch();\n        if (Context.data.hash_only) {\n            const fileHash = await file.getFileMD5Hash();\n            stableDataForHash.FileHashes = [{\n                    FileName: file.data.__name,\n                    HashContent: fileHash\n                }];\n            dataForRequest = stableDataForHash;\n        }\n        else if (Context.data.base64_only) {\n            const fileLink = await file.getDownloadUrl();\n            const fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n            const fileBase64 = arrayBufferToBase64(fileBuffer);\n            stableDataForBase64.SerializedFiles = [{\n                    Id: file.id,\n                    FileName: file.data.__name,\n                    ContentBase64: fileBase64\n                }];\n            dataForRequest = stableDataForBase64;\n        }\n        else {\n            stableData.FileIds.push(fileId);\n            dataForRequest = stableData;\n        }\n        dataForRequest.CertificateBase64 = certificateBase64;\n        let fullUrl = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/Sign`;\n            response = await fetch(fullUrl, {\n                method: \"POST\",\n                body: JSON.stringify(dataForRequest)\n            });\n        }\n        else {\n            fullUrl = `${konturSignUrl}/Sign?certificate=${apiKey}`;\n            response = await fetch(fullUrl, {\n                method: \"POST\",\n                body: JSON.stringify(dataForRequest)\n            });\n        }\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n        ;\n        let responseJson = await response.json();\n        let operationId = responseJson.OperationId;\n        Context.data.operation_id = operationId;\n        const provider = await System.signs.providers.search().where(f =\u003e f.code.eq(\"Kontur\")).first();\n        let dataSigns = await docApp.getDataSigns();\n        let signType = \"file\";\n        let updatedAt = docApp.data.__updatedAt.format();\n        let newIssue;\n        newIssue = await System.signs.entitySigns.createDraft(operationId, issueId, Context.data.applicationRef, dataSigns, updatedAt, signType, \"\", provider);\n        Context.data.inner_sign_id = newIssue.id;\n        Context.data.draft_created = true;\n    }\n    catch (err) {\n        Context.data.sign_error = true;\n        Context.data.error = `createSignDraft: ${err.message}`;\n        return;\n    }\n    ;\n}\n;\nasync function sendCode() {\n    try {\n        let confirmationCode = Context.data.sms_code;\n        let operationId = Context.data.operation_id;\n        let fullUrl = \"\";\n        let response;\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/Confirm?confirmationCode=${confirmationCode}\u0026operationId=${operationId}`;\n            response = await fetch(fullUrl, {\n                method: \"POST\"\n            });\n        }\n        else {\n            fullUrl = `${konturSignUrl}/Confirm?certificate=${apiKey}\u0026confirmationCode=${confirmationCode}\u0026operationId=${operationId}`;\n            response = await fetch(fullUrl, {\n                method: \"POST\"\n            });\n        }\n        ;\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n        ;\n    }\n    catch (err) {\n        Context.data.sign_error = true;\n        Context.data.error = err.message;\n        return;\n    }\n    ;\n}\n;\nasync function closeDraft() {\n    try {\n        let fullUrl = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/GetStatus?operationId=${Context.data.operation_id}`;\n        }\n        else {\n            fullUrl = `${konturSignUrl}/GetStatus?certificate=${apiKey}\u0026operationId=${Context.data.operation_id}`;\n        }\n        ;\n        let responseCheck = await fetch(fullUrl, {});\n        if (!responseCheck.ok) {\n            throw new Error(`getstatus error: ${await responseCheck.text()}`);\n        }\n        ;\n        let responseJson = await responseCheck.json();\n        let resultId = responseJson[\"FileStatuses\"][0].ResultId;\n        let resultSize = responseJson[\"FileStatuses\"][0].ResultSize;\n        let responseGet;\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/GetResult?resultId=${resultId}\u0026offset=0\u0026size=${resultSize}`;\n            responseGet = await fetch(fullUrl, {});\n        }\n        else {\n            fullUrl = `${konturSignUrl}/GetResult?certificate=${apiKey}\u0026resultId=${resultId}\u0026offset=0\u0026size=${resultSize}`;\n            responseGet = await fetch(fullUrl, {\n                method: \"GET\"\n            });\n        }\n        if (!responseGet.ok) {\n            throw new Error(`getresult error: ${await responseGet.text()}`);\n        }\n        ;\n        try {\n            let signBuffer = await responseGet.arrayBuffer();\n            let entitySign = await System.signs.entitySigns.search().where(f =\u003e f.__id.eq(Context.data.inner_sign_id)).first();\n            await entitySign.uploadSign(signBuffer);\n            try {\n                await entitySign.setStatus(\"completed\");\n            }\n            catch (_a) {\n                await entitySign.setStatus(EntitySignOperationStatus.Completed);\n            }\n            ;\n            Context.data.sign_success = true;\n            Context.data.isDone = true;\n        }\n        catch (err) {\n            throw new Error(`Произошла ошибка при подписании: ${err.message}, пожалуйста, попробуйте еще раз.`);\n        }\n        ;\n    }\n    catch (err) {\n        Context.data.sign_error = true;\n        Context.data.error = err.message;\n        return;\n    }\n    ;\n}\n;\nfunction arrayBufferToBase64(buffer) {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n    let len = bytes.byteLength;\n    for (let i = 0; i \u003c len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    ;\n    return btoa(binary);\n}\n","serverFnDeclarations":[{"name":"getCerts","parameters":[],"type":"[object Object]"},{"name":"createFile","parameters":[],"type":"[object Object]"},{"name":"uploadChunk","parameters":[],"type":"[object Object]"},{"name":"createSignDraft","parameters":[],"type":"[object Object]"},{"name":"sendCode","parameters":[],"type":"[object Object]"},{"name":"closeDraft","parameters":[],"type":"[object Object]"},{"name":"arrayBufferToBase64","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:26.105007632Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-28T12:42:56.514767398Z","__updatedBy":"6163c306-9e58-491d-b0e4-407d6cc24727","__deletedAt":null}
