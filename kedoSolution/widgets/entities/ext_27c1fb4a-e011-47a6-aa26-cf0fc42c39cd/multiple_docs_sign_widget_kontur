{"__id":"018c8758-6483-701d-854a-54b2e061fa1c","namespace":"ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd","code":"multiple_docs_sign_widget_kontur","__name":"Массовое подписание (Контур)","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":3,"hidden":false,"draft":false,"readonly":false,"descriptor":{"template":{"id":"4c4ca5de-2052-49ad-9c51-8fa8f45c2b73","descriptor":"component","content":{"":[{"id":"2a50056e-8c1d-4e28-8718-3801f1f29b91","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"control":{"path":["certs_choice"]},"tooltip":null,"__outlet":"","__baseURL":"","hideEmpty":false,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"setIssueId","type":"client"},"required":false,"__readOnly":false,"__relativeURL":"","showDisplayName":true}},{"id":"0c063afa-1ecb-421c-8ecc-b26ed3528ebe","descriptor":"button","values":{"__isConstValues":[],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"action":null,"__hidden":{"path":["certificate_chosen"],"modifier":"not"},"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"view":"default","label":"Получить код для подписания","runInPopover":null,"__relativeURL":"","runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"onClick":{"kind":"Function","name":"getCodeWrapper","type":"client"},"__outlet":"","__baseURL":"","__classes":"get-code-button","createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}},{"id":"b2e48cbf-97a6-4394-a9a2-df01342bf839","descriptor":"dynamic-form-row","values":{"showDisplayName":true,"__classes":"code-input","hideEmpty":false,"__readOnly":null,"bindingMode":false,"required":false,"__baseURL":"","__relativeURL":"","__isConstValues":[],"control":{"path":["sms_code"]},"tooltip":null,"__hidden":{"path":["draft_created"],"modifier":"not"},"__outlet":""}},{"id":"45c8eec8-a5e1-40b6-b1d1-3d4b6b2c2f0f","descriptor":"code","values":{"hideContent":true,"contentPlaceholder":"loader template","html":"\u003ctemplate class=\"my-spinner\"\u003e\n  \u003csvg\n  width=\"25\"\n  height=\"25\"\n  viewBox=\"0 0 200 200\"\n  color=\"black\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  class=\"spinner-svg\"\n\u003e\n  \u003cg stroke=\"currentColor\" stroke-width=\"8\"\u003e\n    \u003cpath opacity=\"1\" d=\"M 191 70 A 96 96 0 0 1 196 100\" /\u003e\n    \u003cpath opacity=\"0.95\" d=\"M 178 44 A 96 96 0 0 1 191 70\" /\u003e\n    \u003cpath opacity=\"0.90\" d=\"M 156 22 A 96 96 0 0 1 178 44\" /\u003e\n    \u003cpath opacity=\"0.85\" d=\"M 130 9 A 96 96 0 0 1 156 22\" /\u003e\n    \u003cpath opacity=\"0.80\" d=\"M 100 4 A 96 96 0 0 1 130 9\" /\u003e\n    \u003cpath opacity=\"0.75\" d=\"M 70 9 A 96 96 0 0 1 100 4\" /\u003e\n    \u003cpath opacity=\"0.70\" d=\"M 44 22 A 96 96 0 0 1 70 9\" /\u003e\n    \u003cpath opacity=\"0.65\" d=\"M 22 44 A 96 96 0 0 1 44 22\" /\u003e\n    \u003cpath opacity=\"0.60\" d=\"M 9 70 A 96 96 0 0 1 22 44\" /\u003e\n    \u003cpath opacity=\"0.55\" d=\"M 4 100 A 96 96 0 0 1 9 70\" /\u003e\n    \u003cpath opacity=\"0.50\" d=\"M 9 130 A 96 96 0 0 1 4 100\" /\u003e\n    \u003cpath opacity=\"0.45\" d=\"M 22 156 A 96 96 0 0 1 9 130\" /\u003e\n    \u003cpath opacity=\"0.40\" d=\"M 44 178 A 96 96 0 0 1 22 156\" /\u003e\n    \u003cpath opacity=\"0.35\" d=\"M 70 191 A 96 96 0 0 1 44 178\" /\u003e\n    \u003cpath opacity=\"0.30\" d=\"M 100 196 A 96 96 0 0 1 70 191\" /\u003e\n    \u003cpath opacity=\"0.25\" d=\"M 130 191 A 96 96 0 0 1 100 196\" /\u003e\n    \u003cpath opacity=\"0.20\" d=\"M 156 178 A 96 96 0 0 1 130 191\" /\u003e\n    \u003cpath opacity=\"0.15\" d=\"M 178 156 A 96 96 0 0 1 156 178\" /\u003e\n    \u003cpath opacity=\"0.10\" d=\"M 191 130 A 96 96 0 0 1 178 156\" /\u003e\n    \u003cpath opacity=\"0.05\" d=\"M 196 100 A 96 96 0 0 1 191 130\" /\u003e\n  \u003c/g\u003e\n\u003c/svg\u003e\n\u003c/template\u003e\n\n\u003cstyle\u003e\n  .spinner-svg {\n    animation: spin 1s linear infinite;\n  }\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\u003c/style\u003e"}},{"id":"26b1c1f8-e2c7-408c-ad36-e90d1f5aa7a5","descriptor":"button","values":{"label":"Отправить код","onClick":{"kind":"Function","name":"sendCodeWrapper","type":"client"},"__outlet":"","runInPopover":null,"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"__baseURL":"","view":"default","__hidden":{"path":["draft_created"],"modifier":"not"},"__classes":"send-code-button","__isConstValues":[],"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"action":null,"__relativeURL":"","createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}},{"id":"65f7b983-3750-42fc-bdcc-80eeb8059198","descriptor":"elma-info-block","values":{"__isConstValues":[],"__renderContentAsync":false,"text":"Документы успешно подписаны","__hidden":{"path":["docs_signed"],"modifier":"not"},"__outlet":"","typeEnum":[{"code":"success","name":"Положительный результат (зеленый)"}],"__baseURL":"","__relativeURL":""},"content":{"":[]}},{"id":"943e4877-14b7-4c66-afe2-f0c5dc1ccc83","descriptor":"elma-info-block","values":{"__renderContentAsync":false,"text":{"path":["error"]},"__hidden":{"path":["error_exists"],"modifier":"not"},"__outlet":"","typeEnum":[{"code":"danger","name":"Ошибка (красный)"}],"__baseURL":"","__relativeURL":"","__isConstValues":[]},"content":{"":[]}}]}},"fields":[{"code":"docs_array","type":"REF_ITEM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Массив с документами","data":{},"output":false}},{"code":"docs_signed","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Документы подписаны","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":false}},{"code":"error","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Ошибка","data":{"additionalType":"string"},"input":false}},{"code":"error_exists","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Есть ошибка?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":false}},{"code":"certificate_base64","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификат base64","data":{"additionalType":"string"},"input":false,"output":false}},{"code":"issue_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Идентификатор электронной подписи","data":{"additionalType":"string"},"input":false,"output":false}},{"code":"certs_choice","type":"ENUM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"enumItems":[]},"view":{"name":"Сертификаты","data":{},"input":false,"output":false}},{"code":"operation_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Идентификатор подписания","data":{"additionalType":"string"},"input":false,"output":false}},{"code":"draft_created","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Черновик подписи создан","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":false,"output":false}},{"code":"sms_code","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Код из СМС","data":{"additionalType":"string"},"input":false,"output":false}},{"code":"certificate_chosen","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификат выбран","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":false,"output":false}},{"code":"debug","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"debug","data":{"additionalType":"string"}}},{"code":"files_meta","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Файлы JSON","data":{"additionalType":"string"}}}],"fieldVisibilityConditions":{"debug":{"enabled":false,"conditions":[]},"error":{"enabled":false,"conditions":[]},"issue_id":{"enabled":false,"conditions":[]},"sms_code":{"enabled":false,"conditions":[]},"certs_json":{"enabled":false,"conditions":[]},"docs_array":{"enabled":false,"conditions":[]},"files_meta":{"enabled":false,"conditions":[]},"docs_signed":{"enabled":false,"conditions":[]},"certs_choice":{"enabled":false,"conditions":[]},"error_exists":{"enabled":false,"conditions":[]},"operation_id":{"enabled":false,"conditions":[]},"draft_created":{"enabled":false,"conditions":[]},"certificate_base64":{"enabled":false,"conditions":[]},"certificate_chosen":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"declare const console: any, document: any, window: any;\n\nlet spinnerTemplate: any;\nlet codeInput: any;\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    const waitForSpinner = window.setInterval(() =\u003e {\n        spinnerTemplate = document.querySelector(\"template.my-spinner\");\n        \n        if (!spinnerTemplate) {\n            return;\n        };\n        window.clearInterval(waitForSpinner);\n    }, 200)\n    await Server.rpc.getCertificates();\n};\n\nasync function setIssueId(): Promise\u003cvoid\u003e {\n    if (!Context.data.certs_choice) {\n        Context.data.certificate_chosen = false;\n        return;\n    };\n    Context.data.issue_id = Context.data.certs_choice.code;\n    Context.data.certificate_chosen = true;\n    // Context.data.draft_created \n};\n\nasync function getCodeWrapper(): Promise\u003cvoid\u003e {\n    if (!Context.data.docs_array) {\n        Context.data.error = \"Не переданы документы для подписания\";\n        Context.data.error_exists = true;\n        return;\n    };\n    const findInput = window.setInterval(() =\u003e {\n        codeInput = document.querySelector(\".code-input input\");\n        if (!codeInput) {\n            return;\n        };\n        window.clearInterval(findInput);\n        codeInput.focus();\n    }, 300);\n    const location = \".get-code-button\"\n    toggleLoader(location);\n    await Server.rpc.createFile()\n    toggleLoader(location);\n};\n\nasync function sendCodeWrapper(): Promise\u003cvoid\u003e {\n    const location = \".send-code-button\"\n    toggleLoader(location);\n    await Server.rpc.sendCode();\n    window.setTimeout(async () =\u003e {\n        await Server.rpc.closeDraft();\n        console.log(Context.data.debug)\n        toggleLoader(location);\n    }, 2000);\n};\n\nfunction toggleLoader(location: string) {\n    let loader = document.querySelector(`${location} .spinner-svg`);\n\n    if (!loader) {\n        loader = spinnerTemplate.content.cloneNode(true);\n        document.querySelector(location).append(loader);\n        return;\n    };\n\n    document.querySelector(`${location} .spinner-svg`).remove();\n};","clientScriptOptions":{"allowServer":true},"serverScripts":"type createSignData = {\n    ConfirmMessage: {\n        Template: string\n    },\n    FileIds: string[],\n    SignType: string,\n    CertificateBase64?: string\n};\n\ntype createFileData = {\n    fileName: string,\n    fileHash: string,\n    fileSize: number,\n    fileBuffer?: ArrayBuffer,\n    refId: string,\n    fileId?: string,\n    issueId?: string\n};\n\nconst apiKey = \"393a34b7-a20a-498d-9a1b-4fca580e8a9d\";\nconst konturSignUrl = Namespace.params.data.kontur_sign_server;\nconst headers: Record\u003cstring, string\u003e = {\n    \"X-KONTUR-APIKEY\": apiKey\n};\nconst stableData: createSignData = {\n    ConfirmMessage: {\n        Template: \"0\"\n    },\n    SignType: \"0\",\n    FileIds: []\n};\n\nlet filesMeta: createFileData[] = [];\n\nlet prodServer: boolean;\n\nasync function getCertificates(): Promise\u003cvoid\u003e {\n    const currentUser = await System.users.getCurrentUser();\n    const certs = await System.signs.digitalSigns.search().where((f ,g) =\u003e g.and(\n        f.__createdBy.eq(currentUser),\n        f.__deletedAt.eq(null)\n    )).size(1000).sort(\"__createdAt\").all().then(items =\u003e items.filter(cert =\u003e {\n        return (\n                cert.data.sign_provider?.code === \"Kontur\" || cert.data.signProvider?.code === \"Kontur\" || cert.data.signProvider?.code === \"KonturNew\" || cert.data.sign_provider?.code === \"KonturNew\"\n            ) \u0026\u0026 (\n                (cert.data.cert_status === \"released\" || cert.data.certStatus === \"released\") || !!cert.data.cert\n            )\n    }));\n\n\n    const certItems = await Namespace.params.fields.digital_signs_list.app.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.user.eq(currentUser),\n            f.status.like('Выпущена')\n    )).size(10000).all();\n    const allCerts = certs.map(cert =\u003e {\n        const certItem = certItems.find(c =\u003e c.data.external_id === cert.data.issueID)\n        return  {\n            name: certItem ? certItem.data.__name : `${currentUser.data.__name} ${cert.data.__createdAt.format(\"DD.MM.YY\")}`,\n            code: cert.data.__id\n        };\n    });\n    if (!allCerts || allCerts.length \u003c 1) {\n        Context.data.error = \"Нет сертификатов\";\n        Context.data.error_exists = true;\n        return;\n    };\n    Context.fields.certs_choice.data.variants = allCerts;\n};\n\nasync function createFile(): Promise\u003cvoid\u003e {\n    Context.data.error_exists = false;\n    Context.data.docs_signed = false;\n    Context.data.error = \"\";\n    try {\n        prodServer = Namespace.params.data.kontur_server.code == \"production\";\n        \n        const docs = await Promise.all(Context.data.docs_array!.map(doc =\u003e doc.fetch())).then(docs =\u003e docs.filter(doc =\u003e doc.data.__file));\n        filesMeta = await Promise.all(docs.map(async doc =\u003e {\n            const file: FileItem = await doc.data.__file.fetch();\n            const fileHash = await file.getFileMD5Hash();\n            const fileName = file.data.__name;\n            const fileSize = file.data.size!;\n            const fileLink = await file.getDownloadUrl();\n            const fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n            const refId = doc.id;\n\n            return {\n                fileHash,\n                fileName,\n                fileSize,\n                fileBuffer,\n                refId\n            };\n        }));\n        let fullUrl: string = \"\";\n\n        for (let file of filesMeta) {\n            if (prodServer) {\n                fullUrl = `${konturSignUrl}/CreateFile?md5=${file.fileHash}\u0026fileName=${file.fileName}\u0026length=${file.fileSize}`\n            } else {\n                fullUrl = `${konturSignUrl}/CreateFile?certificate=${apiKey}\u0026md5=${file.fileHash}\u0026fileName=${file.fileName}\u0026length=${file.fileSize}`\n            };\n            const response = await fetch(fullUrl, {\n                headers,\n                method: \"POST\"\n            });\n            if (!response.ok) {\n                Context.data.error = await response.text();\n                Context.data.error_exists = true;\n                return;\n            };\n            const responseJson = await response.json();\n            const fileId: string = responseJson.FileId;\n            file.fileId = fileId;\n            \n            if (responseJson.Length !== file.fileSize) {\n                await uploadChunk(file.fileId, file.fileBuffer!, );\n            };\n            if (Context.data.error_exists) {\n                return;\n            };\n        };\n        await createSignDraft();\n    } catch (err) {\n        Context.data.error = err.message;\n        Context.data.sign_error = true;\n        return;\n    };\n};\n\nasync function uploadChunk(fileId: string, fileBuffer: ArrayBuffer): Promise\u003cvoid\u003e {\n    try {\n        let fullUrl: string = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/UploadChunk?fileId=${fileId}\u0026offset=0`;\n        } else {\n            fullUrl = `${konturSignUrl}/UploadChunk?certificate=${apiKey}\u0026fileId=${fileId}\u0026offset=0`;\n        };\n        const response = await fetch(fullUrl, {\n            headers,\n            method: \"POST\",\n            body: fileBuffer\n        });\n        if (!response.ok) {\n            Context.data.error_exists = true;\n            Context.data.error = await response.text();\n            return;\n        };\n    } catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n        return\n    };\n};\n\nasync function createSignDraft(): Promise\u003cvoid\u003e {\n    Context.data.docs_signed = false;\n    Context.data.error = \"\";\n    Context.data.error_exists = false;\n    try {\n        const issueId = Context.data.issue_id;\n        const selectedIssue = await System.signs.digitalSigns.search().where(f =\u003e f.__id.eq(issueId!)).first();\n        const certificateBase64 = selectedIssue!.data.cert;\n        stableData.CertificateBase64 = certificateBase64;\n        stableData.FileIds = filesMeta.map(file =\u003e file.fileId!);\n\n        let fullUrl: string = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/Sign`\n        } else {\n            fullUrl = `${konturSignUrl}/Sign?certificate=${apiKey}`\n        };\n        const response = await fetch(fullUrl, {\n            headers,\n            method: \"POST\",\n            body: JSON.stringify(stableData)\n        });\n        if (!response.ok) {\n            Context.data.error = await response.text();\n            Context.data.error_exists = true;\n            return;\n        };\n        const responseJson = await response.json();\n        const operationId = responseJson.OperationId;\n        Context.data.operation_id = operationId;\n\n        const docs = await Promise.all(Context.data.docs_array!.map(doc =\u003e doc.fetch()));\n        const provider = await System.signs.providers.search().where(f =\u003e f.code.eq(\"Kontur\")).first();\n        const providerRef = \u003cany\u003e {\n            namespace: \"system.__digital_sign_provider\",\n            code: provider!.data.code,\n            id: provider!.id\n        };\n        const signType = \u003cSignType\u003e\"file\";\n\n        for (let doc of docs) {\n            const dataSigns = await doc.getDataSigns();\n            const updatedAt = doc.data.__updatedAt;\n            const newIssue = await System.signs.entitySigns.createDraft(operationId, issueId!, doc, dataSigns, updatedAt, signType, \"\", providerRef);\n            const fileObj = filesMeta.find(obj =\u003e obj.refId === doc.id);\n            fileObj!.issueId = newIssue.id;\n        };\n\n        Context.data.draft_created = true;\n    } catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n        return;\n    };\n    Context.data.files_meta = JSON.stringify(filesMeta.map(obj =\u003e {\n        return {\n            fileId: obj.fileId,\n            issueId: obj.issueId\n        }\n    }));\n};\n\nasync function sendCode(): Promise\u003cvoid\u003e {\n    try {\n        const confirmationCode = Context.data.sms_code;\n        const operationId = Context.data.operation_id;\n\n        let fullUrl: string = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/Confirm?confirmationCode=${confirmationCode}\u0026operationId=${operationId}`;\n        } else {\n            fullUrl =`${konturSignUrl}/Confirm?certificate=${apiKey}\u0026confirmationCode=${confirmationCode}\u0026operationId=${operationId}`;\n        };\n        const response = await fetch(fullUrl, {\n            headers,\n            method: \"POST\"\n        });\n        if (!response.ok) {\n            Context.data.error = await response.text();\n            Context.data.error_exists = true;\n            return;\n        };\n    } catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n        return;\n    };\n};\n\nasync function closeDraft(): Promise\u003cvoid\u003e {\n    try {\n        filesMeta = JSON.parse(Context.data.files_meta!)\n        Context.data.debug = JSON.stringify(filesMeta);\n\n        let fullUrl: string = \"\";\n\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/GetStatus?operationId=${Context.data.operation_id}`;\n        } else {\n            fullUrl = `${konturSignUrl}/GetStatus?certificate=${apiKey}\u0026operationId=${Context.data.operation_id}`;\n        };\n\n        const responseCheck = await fetch(fullUrl, {\n            headers\n        });\n\n        if (!responseCheck.ok) {\n            Context.data.error = await responseCheck.text();\n            Context.data.error_exists = true;\n            return;\n        };\n\n        const responseJson = await responseCheck.json();\n        const resultStatuses: {size: string, resId: string, fileId: string}[] = responseJson[\"FileStatuses\"].map((status: any) =\u003e {\n            return {\n                size: String(status.ResultSize),\n                resId: status.ResultId,\n                fileId: status.FileId\n            };\n        });\n        \n        const promises: Promise\u003cvoid\u003e[] = [];\n\n        Context.data.debug += \"\" + JSON.stringify(responseJson);\n\n        for (let status of resultStatuses) {\n            if (prodServer) {\n                fullUrl = `${konturSignUrl}/GetResult?resultId=${status.resId}\u0026offset=0\u0026size=${status.size}`\n            } else {\n                fullUrl = `${konturSignUrl}/GetResult?certificate=${apiKey}\u0026resultId=${status.resId}\u0026offset=0\u0026size=${status.size}`\n            };\n\n            promises.push(fetch(fullUrl, {\n                headers\n            }).then(async res =\u003e {\n                const signBuffer = await res.arrayBuffer();\n                const fileObj = filesMeta.find(obj =\u003e obj.fileId === status.fileId);\n                const entitySign = await System.signs.entitySigns.search().where(f =\u003e f.__id.eq(fileObj!.issueId!)).first();\n                await entitySign!.uploadSign(signBuffer);\n                await entitySign!.setStatus(\u003cEntitySignOperationStatus\u003e\"completed\");\n                await entitySign!.createSignFile();\n            }));\n        };\n\n        await Promise.all(promises);\n\n        if (Context.data.error_exists) {\n            return;\n        };\n\n        Context.data.docs_signed = true;\n    } catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n        return;\n    };\n};","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server) {\n        let spinnerTemplate;\n        let codeInput;\n        async function onInit() {\n            const waitForSpinner = window.setInterval(() =\u003e {\n                spinnerTemplate = document.querySelector(\"template.my-spinner\");\n                if (!spinnerTemplate) {\n                    return;\n                }\n                ;\n                window.clearInterval(waitForSpinner);\n            }, 200);\n            await Server.rpc.getCertificates();\n        }\n        ;\n        async function setIssueId() {\n            if (!Context.data.certs_choice) {\n                Context.data.certificate_chosen = false;\n                return;\n            }\n            ;\n            Context.data.issue_id = Context.data.certs_choice.code;\n            Context.data.certificate_chosen = true;\n        }\n        ;\n        async function getCodeWrapper() {\n            if (!Context.data.docs_array) {\n                Context.data.error = \"Не переданы документы для подписания\";\n                Context.data.error_exists = true;\n                return;\n            }\n            ;\n            const findInput = window.setInterval(() =\u003e {\n                codeInput = document.querySelector(\".code-input input\");\n                if (!codeInput) {\n                    return;\n                }\n                ;\n                window.clearInterval(findInput);\n                codeInput.focus();\n            }, 300);\n            const location = \".get-code-button\";\n            toggleLoader(location);\n            await Server.rpc.createFile();\n            toggleLoader(location);\n        }\n        ;\n        async function sendCodeWrapper() {\n            const location = \".send-code-button\";\n            toggleLoader(location);\n            await Server.rpc.sendCode();\n            window.setTimeout(async () =\u003e {\n                await Server.rpc.closeDraft();\n                console.log(Context.data.debug);\n                toggleLoader(location);\n            }, 2000);\n        }\n        ;\n        function toggleLoader(location) {\n            let loader = document.querySelector(`${location} .spinner-svg`);\n            if (!loader) {\n                loader = spinnerTemplate.content.cloneNode(true);\n                document.querySelector(location).append(loader);\n                return;\n            }\n            ;\n            document.querySelector(`${location} .spinner-svg`).remove();\n        }\n        ;\n        return {\n            onInit,\n            setIssueId,\n            getCodeWrapper,\n            sendCodeWrapper,\n            toggleLoader\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"setIssueId","parameters":[],"type":"[object Object]"},{"name":"getCodeWrapper","parameters":[],"type":"[object Object]"},{"name":"sendCodeWrapper","parameters":[],"type":"[object Object]"},{"name":"toggleLoader","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""}],"serverScripts":"const apiKey = \"393a34b7-a20a-498d-9a1b-4fca580e8a9d\";\nconst konturSignUrl = Namespace.params.data.kontur_sign_server;\nconst headers = {\n    \"X-KONTUR-APIKEY\": apiKey\n};\nconst stableData = {\n    ConfirmMessage: {\n        Template: \"0\"\n    },\n    SignType: \"0\",\n    FileIds: []\n};\nlet filesMeta = [];\nlet prodServer;\nasync function getCertificates() {\n    const currentUser = await System.users.getCurrentUser();\n    const certs = await System.signs.digitalSigns.search().where((f, g) =\u003e g.and(f.__createdBy.eq(currentUser), f.__deletedAt.eq(null))).size(1000).sort(\"__createdAt\").all().then(items =\u003e items.filter(cert =\u003e {\n        var _a, _b, _c, _d;\n        return (((_a = cert.data.sign_provider) === null || _a === void 0 ? void 0 : _a.code) === \"Kontur\" || ((_b = cert.data.signProvider) === null || _b === void 0 ? void 0 : _b.code) === \"Kontur\" || ((_c = cert.data.signProvider) === null || _c === void 0 ? void 0 : _c.code) === \"KonturNew\" || ((_d = cert.data.sign_provider) === null || _d === void 0 ? void 0 : _d.code) === \"KonturNew\") \u0026\u0026 ((cert.data.cert_status === \"released\" || cert.data.certStatus === \"released\") || !!cert.data.cert);\n    }));\n    const certItems = await Namespace.params.fields.digital_signs_list.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.user.eq(currentUser), f.status.like('Выпущена'))).size(10000).all();\n    const allCerts = certs.map(cert =\u003e {\n        const certItem = certItems.find(c =\u003e c.data.external_id === cert.data.issueID);\n        return {\n            name: certItem ? certItem.data.__name : `${currentUser.data.__name} ${cert.data.__createdAt.format(\"DD.MM.YY\")}`,\n            code: cert.data.__id\n        };\n    });\n    if (!allCerts || allCerts.length \u003c 1) {\n        Context.data.error = \"Нет сертификатов\";\n        Context.data.error_exists = true;\n        return;\n    }\n    ;\n    Context.fields.certs_choice.data.variants = allCerts;\n}\n;\nasync function createFile() {\n    Context.data.error_exists = false;\n    Context.data.docs_signed = false;\n    Context.data.error = \"\";\n    try {\n        prodServer = Namespace.params.data.kontur_server.code == \"production\";\n        const docs = await Promise.all(Context.data.docs_array.map(doc =\u003e doc.fetch())).then(docs =\u003e docs.filter(doc =\u003e doc.data.__file));\n        filesMeta = await Promise.all(docs.map(async (doc) =\u003e {\n            const file = await doc.data.__file.fetch();\n            const fileHash = await file.getFileMD5Hash();\n            const fileName = file.data.__name;\n            const fileSize = file.data.size;\n            const fileLink = await file.getDownloadUrl();\n            const fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n            const refId = doc.id;\n            return {\n                fileHash,\n                fileName,\n                fileSize,\n                fileBuffer,\n                refId\n            };\n        }));\n        let fullUrl = \"\";\n        for (let file of filesMeta) {\n            if (prodServer) {\n                fullUrl = `${konturSignUrl}/CreateFile?md5=${file.fileHash}\u0026fileName=${file.fileName}\u0026length=${file.fileSize}`;\n            }\n            else {\n                fullUrl = `${konturSignUrl}/CreateFile?certificate=${apiKey}\u0026md5=${file.fileHash}\u0026fileName=${file.fileName}\u0026length=${file.fileSize}`;\n            }\n            ;\n            const response = await fetch(fullUrl, {\n                headers,\n                method: \"POST\"\n            });\n            if (!response.ok) {\n                Context.data.error = await response.text();\n                Context.data.error_exists = true;\n                return;\n            }\n            ;\n            const responseJson = await response.json();\n            const fileId = responseJson.FileId;\n            file.fileId = fileId;\n            if (responseJson.Length !== file.fileSize) {\n                await uploadChunk(file.fileId, file.fileBuffer);\n            }\n            ;\n            if (Context.data.error_exists) {\n                return;\n            }\n            ;\n        }\n        ;\n        await createSignDraft();\n    }\n    catch (err) {\n        Context.data.error = err.message;\n        Context.data.sign_error = true;\n        return;\n    }\n    ;\n}\n;\nasync function uploadChunk(fileId, fileBuffer) {\n    try {\n        let fullUrl = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/UploadChunk?fileId=${fileId}\u0026offset=0`;\n        }\n        else {\n            fullUrl = `${konturSignUrl}/UploadChunk?certificate=${apiKey}\u0026fileId=${fileId}\u0026offset=0`;\n        }\n        ;\n        const response = await fetch(fullUrl, {\n            headers,\n            method: \"POST\",\n            body: fileBuffer\n        });\n        if (!response.ok) {\n            Context.data.error_exists = true;\n            Context.data.error = await response.text();\n            return;\n        }\n        ;\n    }\n    catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n        return;\n    }\n    ;\n}\n;\nasync function createSignDraft() {\n    Context.data.docs_signed = false;\n    Context.data.error = \"\";\n    Context.data.error_exists = false;\n    try {\n        const issueId = Context.data.issue_id;\n        const selectedIssue = await System.signs.digitalSigns.search().where(f =\u003e f.__id.eq(issueId)).first();\n        const certificateBase64 = selectedIssue.data.cert;\n        stableData.CertificateBase64 = certificateBase64;\n        stableData.FileIds = filesMeta.map(file =\u003e file.fileId);\n        let fullUrl = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/Sign`;\n        }\n        else {\n            fullUrl = `${konturSignUrl}/Sign?certificate=${apiKey}`;\n        }\n        ;\n        const response = await fetch(fullUrl, {\n            headers,\n            method: \"POST\",\n            body: JSON.stringify(stableData)\n        });\n        if (!response.ok) {\n            Context.data.error = await response.text();\n            Context.data.error_exists = true;\n            return;\n        }\n        ;\n        const responseJson = await response.json();\n        const operationId = responseJson.OperationId;\n        Context.data.operation_id = operationId;\n        const docs = await Promise.all(Context.data.docs_array.map(doc =\u003e doc.fetch()));\n        const provider = await System.signs.providers.search().where(f =\u003e f.code.eq(\"Kontur\")).first();\n        const providerRef = {\n            namespace: \"system.__digital_sign_provider\",\n            code: provider.data.code,\n            id: provider.id\n        };\n        const signType = \"file\";\n        for (let doc of docs) {\n            const dataSigns = await doc.getDataSigns();\n            const updatedAt = doc.data.__updatedAt;\n            const newIssue = await System.signs.entitySigns.createDraft(operationId, issueId, doc, dataSigns, updatedAt, signType, \"\", providerRef);\n            const fileObj = filesMeta.find(obj =\u003e obj.refId === doc.id);\n            fileObj.issueId = newIssue.id;\n        }\n        ;\n        Context.data.draft_created = true;\n    }\n    catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n        return;\n    }\n    ;\n    Context.data.files_meta = JSON.stringify(filesMeta.map(obj =\u003e {\n        return {\n            fileId: obj.fileId,\n            issueId: obj.issueId\n        };\n    }));\n}\n;\nasync function sendCode() {\n    try {\n        const confirmationCode = Context.data.sms_code;\n        const operationId = Context.data.operation_id;\n        let fullUrl = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/Confirm?confirmationCode=${confirmationCode}\u0026operationId=${operationId}`;\n        }\n        else {\n            fullUrl = `${konturSignUrl}/Confirm?certificate=${apiKey}\u0026confirmationCode=${confirmationCode}\u0026operationId=${operationId}`;\n        }\n        ;\n        const response = await fetch(fullUrl, {\n            headers,\n            method: \"POST\"\n        });\n        if (!response.ok) {\n            Context.data.error = await response.text();\n            Context.data.error_exists = true;\n            return;\n        }\n        ;\n    }\n    catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n        return;\n    }\n    ;\n}\n;\nasync function closeDraft() {\n    try {\n        filesMeta = JSON.parse(Context.data.files_meta);\n        Context.data.debug = JSON.stringify(filesMeta);\n        let fullUrl = \"\";\n        if (prodServer) {\n            fullUrl = `${konturSignUrl}/GetStatus?operationId=${Context.data.operation_id}`;\n        }\n        else {\n            fullUrl = `${konturSignUrl}/GetStatus?certificate=${apiKey}\u0026operationId=${Context.data.operation_id}`;\n        }\n        ;\n        const responseCheck = await fetch(fullUrl, {\n            headers\n        });\n        if (!responseCheck.ok) {\n            Context.data.error = await responseCheck.text();\n            Context.data.error_exists = true;\n            return;\n        }\n        ;\n        const responseJson = await responseCheck.json();\n        const resultStatuses = responseJson[\"FileStatuses\"].map((status) =\u003e {\n            return {\n                size: String(status.ResultSize),\n                resId: status.ResultId,\n                fileId: status.FileId\n            };\n        });\n        const promises = [];\n        Context.data.debug += \"\" + JSON.stringify(responseJson);\n        for (let status of resultStatuses) {\n            if (prodServer) {\n                fullUrl = `${konturSignUrl}/GetResult?resultId=${status.resId}\u0026offset=0\u0026size=${status.size}`;\n            }\n            else {\n                fullUrl = `${konturSignUrl}/GetResult?certificate=${apiKey}\u0026resultId=${status.resId}\u0026offset=0\u0026size=${status.size}`;\n            }\n            ;\n            promises.push(fetch(fullUrl, {\n                headers\n            }).then(async (res) =\u003e {\n                const signBuffer = await res.arrayBuffer();\n                const fileObj = filesMeta.find(obj =\u003e obj.fileId === status.fileId);\n                const entitySign = await System.signs.entitySigns.search().where(f =\u003e f.__id.eq(fileObj.issueId)).first();\n                await entitySign.uploadSign(signBuffer);\n                await entitySign.setStatus(\"completed\");\n                await entitySign.createSignFile();\n            }));\n        }\n        ;\n        await Promise.all(promises);\n        if (Context.data.error_exists) {\n            return;\n        }\n        ;\n        Context.data.docs_signed = true;\n    }\n    catch (err) {\n        Context.data.error_exists = true;\n        Context.data.error = err.message;\n        return;\n    }\n    ;\n}\n;\n","serverFnDeclarations":[{"name":"getCertificates","parameters":[],"type":"[object Object]"},{"name":"createFile","parameters":[],"type":"[object Object]"},{"name":"uploadChunk","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"createSignDraft","parameters":[],"type":"[object Object]"},{"name":"sendCode","parameters":[],"type":"[object Object]"},{"name":"closeDraft","parameters":[],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:26.270253444Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:09:43.010974773Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
