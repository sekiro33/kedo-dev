{"__id":"018c8758-642e-7016-a496-226e37c7d655","namespace":"ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd","code":"sign_me_sign_widget","__name":"УЦ SignMe","description":"","extensionZoneCode":"sign-application","sort":2,"category":"00000000-0000-0000-0000-000000000000","version":3,"hidden":false,"draft":false,"readonly":false,"descriptor":{"template":{"id":"85292647-1a70-4708-a5dd-70a38e64bbe8","descriptor":"component","content":{"":[{"id":"19993599-45fb-4afe-980e-e308fe27407e","descriptor":"dynamic-form-row","values":{"onChangeValue":{"kind":"Function","name":"assignCertificate","type":"client"},"__isConstValues":[],"showDisplayName":true,"control":{"path":["certs"]},"required":false,"__readOnly":null,"bindingMode":false,"tooltip":null,"__hidden":{"path":["certificates_empty"]},"hideEmpty":false}},{"id":"0692823a-e6f7-4dc6-8215-a1ab8c78b3c6","descriptor":"dynamic-form-row","values":{"required":false,"__classes":"signme-password-field","hideEmpty":false,"__readOnly":null,"control":{"path":["password"]},"tooltip":null,"__hidden":{"path":["certificate_choosed"],"modifier":"not"},"bindingMode":false,"__isConstValues":[],"showDisplayName":true}},{"id":"9c9d0e9a-4175-4f31-bbb8-a86ecf91592d","descriptor":"button","values":{"label":"Подписать","onClick":{"kind":"Function","name":"signFileWrapper","type":"client"},"__hidden":{"path":["certificate_choosed"],"modifier":"not"},"runInPopover":null,"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"view":"primary","__classes":"signme-button","runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"__isConstValues":[],"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"action":null}},{"id":"a3a693bc-56ec-412a-8118-fdc420653431","descriptor":"code","values":{"html":"\u003c% if (Context.data.error_exists) { %\u003e\n    \u003cp style=\"color: red\"\u003e\n        Произошла ошибка: \u003c%= Context.data.error %\u003e\n    \u003c/p\u003e\n\u003c% } %\u003e\n\u003c% if (Context.data.sign_success) { %\u003e\n    \u003cp style=\"color: green\"\u003e\n        Документ успешно подписан.\n    \u003c/p\u003e\n\u003c% } %\u003e","hideContent":true,"contentPlaceholder":"sign status"}},{"id":"60637d84-3ac6-452d-9225-f447f4bf8a86","descriptor":"code","values":{"html":"\n\u003ctemplate class=\"my-spinner\"\u003e\n  \u003csvg\n  width=\"25\"\n  height=\"25\"\n  viewBox=\"0 0 200 200\"\n  color=\"black\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  class=\"spinner-svg\"\n\u003e\n  \u003cg stroke=\"currentColor\" stroke-width=\"8\"\u003e\n    \u003cpath opacity=\"1\" d=\"M 191 70 A 96 96 0 0 1 196 100\" /\u003e\n    \u003cpath opacity=\"0.95\" d=\"M 178 44 A 96 96 0 0 1 191 70\" /\u003e\n    \u003cpath opacity=\"0.90\" d=\"M 156 22 A 96 96 0 0 1 178 44\" /\u003e\n    \u003cpath opacity=\"0.85\" d=\"M 130 9 A 96 96 0 0 1 156 22\" /\u003e\n    \u003cpath opacity=\"0.80\" d=\"M 100 4 A 96 96 0 0 1 130 9\" /\u003e\n    \u003cpath opacity=\"0.75\" d=\"M 70 9 A 96 96 0 0 1 100 4\" /\u003e\n    \u003cpath opacity=\"0.70\" d=\"M 44 22 A 96 96 0 0 1 70 9\" /\u003e\n    \u003cpath opacity=\"0.65\" d=\"M 22 44 A 96 96 0 0 1 44 22\" /\u003e\n    \u003cpath opacity=\"0.60\" d=\"M 9 70 A 96 96 0 0 1 22 44\" /\u003e\n    \u003cpath opacity=\"0.55\" d=\"M 4 100 A 96 96 0 0 1 9 70\" /\u003e\n    \u003cpath opacity=\"0.50\" d=\"M 9 130 A 96 96 0 0 1 4 100\" /\u003e\n    \u003cpath opacity=\"0.45\" d=\"M 22 156 A 96 96 0 0 1 9 130\" /\u003e\n    \u003cpath opacity=\"0.40\" d=\"M 44 178 A 96 96 0 0 1 22 156\" /\u003e\n    \u003cpath opacity=\"0.35\" d=\"M 70 191 A 96 96 0 0 1 44 178\" /\u003e\n    \u003cpath opacity=\"0.30\" d=\"M 100 196 A 96 96 0 0 1 70 191\" /\u003e\n    \u003cpath opacity=\"0.25\" d=\"M 130 191 A 96 96 0 0 1 100 196\" /\u003e\n    \u003cpath opacity=\"0.20\" d=\"M 156 178 A 96 96 0 0 1 130 191\" /\u003e\n    \u003cpath opacity=\"0.15\" d=\"M 178 156 A 96 96 0 0 1 156 178\" /\u003e\n    \u003cpath opacity=\"0.10\" d=\"M 191 130 A 96 96 0 0 1 178 156\" /\u003e\n    \u003cpath opacity=\"0.05\" d=\"M 196 100 A 96 96 0 0 1 191 130\" /\u003e\n  \u003c/g\u003e\n\u003c/svg\u003e\n\u003c/template\u003e\n\n\u003cstyle\u003e\n  .spinner-svg {\n    animation: spin 1s linear infinite;\n  }\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"loader template"}}]}},"fields":[{"code":"applicationRef","type":"REF_ITEM","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Application"}},{"code":"provider","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Provider"}},{"code":"signType","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Type of Sign"}},{"code":"user","type":"SYS_USER","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"User"}},{"code":"isDone","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"isDone"}},{"code":"finalStatus","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Final status"}},{"code":"content","type":"JSON","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":null,"view":{"name":"Content"}},{"code":"certs","type":"ENUM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"enumItems":[]},"view":{"name":"Сертификаты","data":{}}},{"code":"password","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Пароль","data":{"additionalType":"string"}}},{"code":"error_exists","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Есть ошибка","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"error","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Ошибка","data":{"additionalType":"string"}}},{"code":"certificate_assigned","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификат выбран","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"certificates_empty","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификаты не найдены","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"certificates_json","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификаты JSON","data":{"additionalType":"string"}}},{"code":"external_doc_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Внешний идентификатор документа","data":{"additionalType":"string"}}},{"code":"sign_operation_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Идентификатор операции подписания","data":{"additionalType":"string"}}},{"code":"user_phone","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Телефон пользователя","data":{"additionalType":"string"}}},{"code":"sign_file_formed","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Файл подписи сформирован","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"inner_sign_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Внутренний идентификатор подписи","data":{"additionalType":"string"}}},{"code":"certificate_choosed","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Сертификат выбран","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"debug","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"debug","data":{"additionalType":"string"}}},{"code":"elma_address","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Адрес ELMA","data":{"additionalType":"string"}}}],"fieldVisibilityConditions":{"user":{"enabled":false,"conditions":[]},"certs":{"enabled":false,"conditions":[]},"debug":{"enabled":false,"conditions":[]},"error":{"enabled":false,"conditions":[]},"isDone":{"enabled":false,"conditions":[]},"content":{"enabled":false,"conditions":[]},"__hidden":{"enabled":false,"conditions":[]},"__styles":{"enabled":false,"conditions":[]},"password":{"enabled":false,"conditions":[]},"provider":{"enabled":false,"conditions":[]},"signType":{"enabled":false,"conditions":[]},"__classes":{"enabled":false,"conditions":[]},"__readOnly":{"enabled":false,"conditions":[]},"user_phone":{"enabled":false,"conditions":[]},"finalStatus":{"enabled":false,"conditions":[]},"elma_address":{"enabled":false,"conditions":[]},"error_exists":{"enabled":false,"conditions":[]},"inner_sign_id":{"enabled":false,"conditions":[]},"__onMouseEnter":{"enabled":false,"conditions":[]},"__onMouseLeave":{"enabled":false,"conditions":[]},"applicationRef":{"enabled":false,"conditions":[]},"__isConstValues":{"enabled":false,"conditions":[]},"external_doc_id":{"enabled":false,"conditions":[]},"sign_file_formed":{"enabled":false,"conditions":[]},"certificates_json":{"enabled":false,"conditions":[]},"sign_operation_id":{"enabled":false,"conditions":[]},"certificates_empty":{"enabled":false,"conditions":[]},"certificate_choosed":{"enabled":false,"conditions":[]},"__renderContentAsync":{"enabled":false,"conditions":[]},"certificate_assigned":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"declare const document: any;\ndeclare const console: any;\ndeclare const window: any;\n\nasync function canRender(): Promise\u003cboolean\u003e {\n    return Context.data.provider === \"ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd@sign_me_sign_widget\";\n};\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    console.log(\"custom signme\");\n    Context.data.elma_address = window.location.host;\n\n    await Server.rpc.getCertificates();\n\n    let certs = Context.data.certificates_json ? JSON.parse(Context.data.certificates_json) : [];\n    if (!certs || certs.length \u003c 1) {\n        return;\n    };\n\n    for (let cert of certs) {\n        Context.fields.certs.data.variants.push({name: cert.name, code: cert.code});\n    };\n    const user = await System.users.getCurrentUser();\n    console.log(user)\n    if (Context.fields.certs.data.variants.length === 1) {\n        //@ts-ignore\n        Context.data.certs = {name: Context.fields.certs.data.variants[0].name, code: Context.fields.certs.data.variants[0].code};\n        await assignCertificate();\n    };\n};\n\nasync function assignCertificate(): Promise\u003cvoid\u003e {\n    console.log(Context.data.certs)\n    if (!!Context.data.certs) {\n        Context.data.certificate_choosed = true;\n        let findPassField = window.setInterval(() =\u003e {\n            let passField = document.querySelector(\".signme-password-field input\");\n            if (!passField) {\n                return;\n            };\n            window.clearInterval(findPassField);\n            passField.type = \"password\";\n        }, 200);\n    } else {\n        Context.data.certificate_choosed = false;\n    };\n};\n\nasync function signFileWrapper(): Promise\u003cvoid\u003e {\n    Context.data.error_exists = false;\n    if (!Context.data.password) {\n        Context.data.error = \"Вы не ввели пароль\";\n        Context.data.error_exists = true;\n        return;\n    };\n    handleLoader();\n    await Server.rpc.createSign();\n    console.log(Context.data.debug)\n    handleLoader();\n};\n\nfunction handleLoader() {\n    const loader = document.querySelector(\".spinner-svg\");\n    if (!loader) {\n        const loaderTemplate = document.querySelector(\".my-spinner\").content.cloneNode(true);\n        const signButton = document.querySelector(\".signme-button\");\n        signButton.append(loaderTemplate);\n    } else {\n        loader.remove();\n    };\n};","clientScriptOptions":{"allowServer":true},"serverScripts":"const apiKey = \"0AXPZD21MY812DYA\";\n// let signmeUrl = Namespace.params.data.sign_me_server_address;\nlet signmeUrl = \"https://gost-tls-signme-test.elma-bpm.com\"\nlet user: UserItem;\n\nasync function getCertificates(): Promise\u003cvoid\u003e {\n    user = await System.users.getCurrentUser();\n    let certificates = await System.signs.digitalSigns.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.__createdBy.eq(user),\n        //@ts-ignore\n        // f.certStatus.eq(\"released\")\n    )).size(1000).all();\n    certificates = certificates.filter(cert =\u003e cert.data.signProvider?.code === \"SignMe\" || cert.data.sign_provider?.code === \"SignMe\");\n    if (!certificates || certificates.length \u003c 1) {\n        Context.data.error = \"Нет сертификатов\";\n        Context.data.error_exists = true;\n        Context.data.certificates_empty = true;\n        return;\n    };\n    const mappedCertificates = certificates.map((cert) =\u003e {\n        return {\n            name: `${user.data.__name} ${cert.data.__createdAt.format(\"DD.MM.YY\")}`,\n            code: cert.data.__id\n        };\n    });\n    Context.data.certificates_json = JSON.stringify(mappedCertificates);\n};\n\nasync function createSign(): Promise\u003cvoid\u003e {\n    try {\n        if (!signmeUrl.endsWith(\"/\")) {\n            signmeUrl += \"/\";\n        };\n        const docApp = await Context.data.applicationRef!.fetch();\n        if (!docApp) {\n            Context.data.error = \"Не получается получить документ\";\n            Context.data.error_exists = true;\n            return;\n        };\n        const fileLink: string = await docApp.data.__file.getDownloadUrl();\n        const fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n        const fileBase64 = _arrayBufferToBase64(fileBuffer);\n        user = await System.users.getCurrentUser();\n        \n        let phone: any;\n        if (user.data.workPhone \u0026\u0026 user.data.workPhone.tel) {\n            phone = user.data.workPhone!.tel;\n        } else {\n            phone = user.data.mobilePhone!.tel\n        }\n\n        if (!phone) {\n            \n            Context.data.error = \"У пользователя отсутствует телефон\";\n            Context.data.error_exists = true;\n            return;\n        };\n        Context.data.user_phone = phone;\n        const response = await fetch(`${signmeUrl}signapi/sjson`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                key: apiKey,\n                filet: fileBase64,\n                fname: docApp.data.__name,\n                user_ph: phone,\n                noemail: 1\n            })\n        });\n        const responseBody = await response.text();\n        if (!response.ok || responseBody.includes(\"error\")) {\n            Context.data.error = responseBody;\n            Context.data.error_exists = true;\n            return;\n        };\n        const [operationId, fileId] = responseBody.split(\"/\");\n        Context.data.sign_operation_id = operationId;\n        Context.data.external_doc_id = fileId;\n        const provider = await System.signs.providers.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.code.eq(\"SignMe\")\n        )).first();\n        const digitalSignId = \u003cstring\u003eContext.data.certs!.code;\n        const itemRef = \u003cRefItem\u003e {\n            code: docApp.code,\n            namespace: docApp.namespace,\n            id: docApp.id\n        };\n        const providerRef = \u003cany\u003e {\n            code: provider!.data.code,\n            namespace: \"system.__digital_sign_provider\",\n            id: provider!.id\n        };\n        const dataSigns = await docApp.getDataSigns();\n        const signType = \u003cSignType\u003e\"file\";\n        const updatedAt = docApp.data.__updatedAt.format();\n\n        Context.data.debug = JSON.stringify({\n            operationId,\n            digitalSignId,\n            itemRef,\n            dataSigns,\n            updatedAt,\n            signType,\n            providerRef\n        })\n\n        const newSign = await System.signs.entitySigns.createDraft(operationId, digitalSignId, itemRef, dataSigns, updatedAt, signType, \"\", providerRef);\n        Context.data.inner_sign_id = newSign.id;\n        await signFile();\n    } catch (err) {\n        Context.data.error = err.message;\n        Context.data.error_exists = true;\n        return;\n    };\n};\n\nasync function signFile(): Promise\u003cvoid\u003e {\n    let body = new FormData();\n    body.append(\"key\", apiKey);\n    body.append(\"type\", \"single\");\n    body.append(\"id\", Context.data.sign_operation_id!);\n    body.append(\"user_ph\", Context.data.user_phone!);\n    body.append(\"passw\", Context.data.password!);\n    \n    Context.data.debug = JSON.stringify(body)\n\n    const response = await fetch(`${signmeUrl}signapi/sign/`, {\n        method: \"POST\",\n        headers: {\n            'ContentType': 'multipart/form-data'\n        },\n        body\n    });\n\n    const responseText = await response.text();\n    if (!response.ok || responseText.includes(\"error\")) {\n        Context.data.error = \"signFile error \" + responseText;\n        Context.data.error_exists = true;\n        return;\n    };\n    await getSignFile();\n};\n\nasync function checkSign(): Promise\u003cboolean\u003e {\n    const fileId = Context.data.external_doc_id;\n    const operationId = Context.data.sign_operation_id;\n    const response = await fetch(`${signmeUrl}signapi/check/${operationId}/${fileId}`);\n    const responseText = await response.text();\n    if (!response.ok || responseText.includes(\"error\")) {\n        Context.data.error = responseText;\n        Context.data.error_exists = true;\n        return false;\n    };\n    const responseJson = JSON.parse(responseText);\n    return responseJson.status == 1 || responseJson.status == \"1\";\n};\n\nasync function getSignFile(): Promise\u003cvoid\u003e {\n    try {\n        const itemRef = await Context.data.applicationRef!.fetch();\n        const hash = await itemRef.data.__file.getFileMD5Hash();\n        const operationId = Context.data.sign_operation_id;\n        const signFileFormed = await checkSign();\n        if (signFileFormed) {\n            const response = await fetch(`${signmeUrl}signaturecheck/get_t_pkcs/hash/${hash}/${operationId}`);\n            const signBuffer = await response.arrayBuffer();\n            const currentSign = await System.signs.entitySigns.search().where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.__id.eq(Context.data.inner_sign_id!)\n            )).first();\n            await currentSign!.uploadSign(signBuffer);\n            try {\n                await currentSign!.setStatus(\u003cEntitySignOperationStatus\u003e\"completed\");\n            } catch (err) {\n                throw new Error(\"setStatus error\")\n            }\n            Context.data.isDone = true;\n        };\n    } catch (err) {\n        Context.data.error = \"getSignFile error\" + err.message;\n        Context.data.error_exists = true;\n    };\n};\n\nasync function mockFetch(user: UserItem): Promise\u003cstring | undefined\u003e {\n    const extUser = await Namespace.params.fields.ext_user_app.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        //@ts-ignore\n        f.__id.eq(user.originalData.profiles[0].id)\n    )).first();\n    \n    if (!extUser) {\n        return;\n    };\n    return extUser.data.phone ? extUser.data.phone[0].tel : undefined;\n};\n\nfunction _arrayBufferToBase64(buffer: ArrayBuffer): string {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n    let len = bytes.byteLength;\n    for (let i = 0; i \u003c len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    };\n    return btoa(binary);\n};","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server) {\n        async function canRender() {\n            return Context.data.provider === \"ext_27c1fb4a-e011-47a6-aa26-cf0fc42c39cd@sign_me_sign_widget\";\n        }\n        ;\n        async function onInit() {\n            console.log(\"custom signme\");\n            Context.data.elma_address = window.location.host;\n            await Server.rpc.getCertificates();\n            let certs = Context.data.certificates_json ? JSON.parse(Context.data.certificates_json) : [];\n            if (!certs || certs.length \u003c 1) {\n                return;\n            }\n            ;\n            for (let cert of certs) {\n                Context.fields.certs.data.variants.push({ name: cert.name, code: cert.code });\n            }\n            ;\n            const user = await System.users.getCurrentUser();\n            console.log(user);\n            if (Context.fields.certs.data.variants.length === 1) {\n                Context.data.certs = { name: Context.fields.certs.data.variants[0].name, code: Context.fields.certs.data.variants[0].code };\n                await assignCertificate();\n            }\n            ;\n        }\n        ;\n        async function assignCertificate() {\n            console.log(Context.data.certs);\n            if (!!Context.data.certs) {\n                Context.data.certificate_choosed = true;\n                let findPassField = window.setInterval(() =\u003e {\n                    let passField = document.querySelector(\".signme-password-field input\");\n                    if (!passField) {\n                        return;\n                    }\n                    ;\n                    window.clearInterval(findPassField);\n                    passField.type = \"password\";\n                }, 200);\n            }\n            else {\n                Context.data.certificate_choosed = false;\n            }\n            ;\n        }\n        ;\n        async function signFileWrapper() {\n            Context.data.error_exists = false;\n            if (!Context.data.password) {\n                Context.data.error = \"Вы не ввели пароль\";\n                Context.data.error_exists = true;\n                return;\n            }\n            ;\n            handleLoader();\n            await Server.rpc.createSign();\n            console.log(Context.data.debug);\n            handleLoader();\n        }\n        ;\n        function handleLoader() {\n            const loader = document.querySelector(\".spinner-svg\");\n            if (!loader) {\n                const loaderTemplate = document.querySelector(\".my-spinner\").content.cloneNode(true);\n                const signButton = document.querySelector(\".signme-button\");\n                signButton.append(loaderTemplate);\n            }\n            else {\n                loader.remove();\n            }\n            ;\n        }\n        ;\n        return {\n            canRender,\n            onInit,\n            assignCertificate,\n            signFileWrapper,\n            handleLoader\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"canRender","parameters":[],"type":"[object Object]"},{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"assignCertificate","parameters":[],"type":"[object Object]"},{"name":"signFileWrapper","parameters":[],"type":"[object Object]"},{"name":"handleLoader","parameters":[],"type":""}],"serverScripts":"const apiKey = \"0AXPZD21MY812DYA\";\nlet signmeUrl = \"https://gost-tls-signme-test.elma-bpm.com\";\nlet user;\nasync function getCertificates() {\n    user = await System.users.getCurrentUser();\n    let certificates = await System.signs.digitalSigns.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__createdBy.eq(user))).size(1000).all();\n    certificates = certificates.filter(cert =\u003e { var _a, _b; return ((_a = cert.data.signProvider) === null || _a === void 0 ? void 0 : _a.code) === \"SignMe\" || ((_b = cert.data.sign_provider) === null || _b === void 0 ? void 0 : _b.code) === \"SignMe\"; });\n    if (!certificates || certificates.length \u003c 1) {\n        Context.data.error = \"Нет сертификатов\";\n        Context.data.error_exists = true;\n        Context.data.certificates_empty = true;\n        return;\n    }\n    ;\n    const mappedCertificates = certificates.map((cert) =\u003e {\n        return {\n            name: `${user.data.__name} ${cert.data.__createdAt.format(\"DD.MM.YY\")}`,\n            code: cert.data.__id\n        };\n    });\n    Context.data.certificates_json = JSON.stringify(mappedCertificates);\n}\n;\nasync function createSign() {\n    try {\n        if (!signmeUrl.endsWith(\"/\")) {\n            signmeUrl += \"/\";\n        }\n        ;\n        const docApp = await Context.data.applicationRef.fetch();\n        if (!docApp) {\n            Context.data.error = \"Не получается получить документ\";\n            Context.data.error_exists = true;\n            return;\n        }\n        ;\n        const fileLink = await docApp.data.__file.getDownloadUrl();\n        const fileBuffer = await fetch(fileLink).then(r =\u003e r.arrayBuffer());\n        const fileBase64 = _arrayBufferToBase64(fileBuffer);\n        user = await System.users.getCurrentUser();\n        let phone;\n        if (user.data.workPhone \u0026\u0026 user.data.workPhone.tel) {\n            phone = user.data.workPhone.tel;\n        }\n        else {\n            phone = user.data.mobilePhone.tel;\n        }\n        if (!phone) {\n            Context.data.error = \"У пользователя отсутствует телефон\";\n            Context.data.error_exists = true;\n            return;\n        }\n        ;\n        Context.data.user_phone = phone;\n        const response = await fetch(`${signmeUrl}signapi/sjson`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                key: apiKey,\n                filet: fileBase64,\n                fname: docApp.data.__name,\n                user_ph: phone,\n                noemail: 1\n            })\n        });\n        const responseBody = await response.text();\n        if (!response.ok || responseBody.includes(\"error\")) {\n            Context.data.error = responseBody;\n            Context.data.error_exists = true;\n            return;\n        }\n        ;\n        const [operationId, fileId] = responseBody.split(\"/\");\n        Context.data.sign_operation_id = operationId;\n        Context.data.external_doc_id = fileId;\n        const provider = await System.signs.providers.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"SignMe\"))).first();\n        const digitalSignId = Context.data.certs.code;\n        const itemRef = {\n            code: docApp.code,\n            namespace: docApp.namespace,\n            id: docApp.id\n        };\n        const providerRef = {\n            code: provider.data.code,\n            namespace: \"system.__digital_sign_provider\",\n            id: provider.id\n        };\n        const dataSigns = await docApp.getDataSigns();\n        const signType = \"file\";\n        const updatedAt = docApp.data.__updatedAt.format();\n        Context.data.debug = JSON.stringify({\n            operationId,\n            digitalSignId,\n            itemRef,\n            dataSigns,\n            updatedAt,\n            signType,\n            providerRef\n        });\n        const newSign = await System.signs.entitySigns.createDraft(operationId, digitalSignId, itemRef, dataSigns, updatedAt, signType, \"\", providerRef);\n        Context.data.inner_sign_id = newSign.id;\n        await signFile();\n    }\n    catch (err) {\n        Context.data.error = err.message;\n        Context.data.error_exists = true;\n        return;\n    }\n    ;\n}\n;\nasync function signFile() {\n    let body = new FormData();\n    body.append(\"key\", apiKey);\n    body.append(\"type\", \"single\");\n    body.append(\"id\", Context.data.sign_operation_id);\n    body.append(\"user_ph\", Context.data.user_phone);\n    body.append(\"passw\", Context.data.password);\n    Context.data.debug = JSON.stringify(body);\n    const response = await fetch(`${signmeUrl}signapi/sign/`, {\n        method: \"POST\",\n        headers: {\n            'ContentType': 'multipart/form-data'\n        },\n        body\n    });\n    const responseText = await response.text();\n    if (!response.ok || responseText.includes(\"error\")) {\n        Context.data.error = \"signFile error \" + responseText;\n        Context.data.error_exists = true;\n        return;\n    }\n    ;\n    await getSignFile();\n}\n;\nasync function checkSign() {\n    const fileId = Context.data.external_doc_id;\n    const operationId = Context.data.sign_operation_id;\n    const response = await fetch(`${signmeUrl}signapi/check/${operationId}/${fileId}`);\n    const responseText = await response.text();\n    if (!response.ok || responseText.includes(\"error\")) {\n        Context.data.error = responseText;\n        Context.data.error_exists = true;\n        return false;\n    }\n    ;\n    const responseJson = JSON.parse(responseText);\n    return responseJson.status == 1 || responseJson.status == \"1\";\n}\n;\nasync function getSignFile() {\n    try {\n        const itemRef = await Context.data.applicationRef.fetch();\n        const hash = await itemRef.data.__file.getFileMD5Hash();\n        const operationId = Context.data.sign_operation_id;\n        const signFileFormed = await checkSign();\n        if (signFileFormed) {\n            const response = await fetch(`${signmeUrl}signaturecheck/get_t_pkcs/hash/${hash}/${operationId}`);\n            const signBuffer = await response.arrayBuffer();\n            const currentSign = await System.signs.entitySigns.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(Context.data.inner_sign_id))).first();\n            await currentSign.uploadSign(signBuffer);\n            try {\n                await currentSign.setStatus(\"completed\");\n            }\n            catch (err) {\n                throw new Error(\"setStatus error\");\n            }\n            Context.data.isDone = true;\n        }\n        ;\n    }\n    catch (err) {\n        Context.data.error = \"getSignFile error\" + err.message;\n        Context.data.error_exists = true;\n    }\n    ;\n}\n;\nasync function mockFetch(user) {\n    const extUser = await Namespace.params.fields.ext_user_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(user.originalData.profiles[0].id))).first();\n    if (!extUser) {\n        return;\n    }\n    ;\n    return extUser.data.phone ? extUser.data.phone[0].tel : undefined;\n}\n;\nfunction _arrayBufferToBase64(buffer) {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n    let len = bytes.byteLength;\n    for (let i = 0; i \u003c len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    ;\n    return btoa(binary);\n}\n;\n","serverFnDeclarations":[{"name":"getCertificates","parameters":[],"type":"[object Object]"},{"name":"createSign","parameters":[],"type":"[object Object]"},{"name":"signFile","parameters":[],"type":"[object Object]"},{"name":"checkSign","parameters":[],"type":"[object Object]"},{"name":"getSignFile","parameters":[],"type":"[object Object]"},{"name":"mockFetch","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"_arrayBufferToBase64","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:26.185596726Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:09:42.756821196Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
