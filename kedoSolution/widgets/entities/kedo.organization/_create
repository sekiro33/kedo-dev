{"__id":"018e89f9-37fc-7d6d-a181-1b1bb49e0795","namespace":"kedo.organization","code":"_create","__name":"Форма создания","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":15,"hidden":false,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"455632af-ebf1-49c3-ac20-f822c8f18c6b","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"formGroup":{"path":["item"]},"systemFunctions":{"validate":{"kind":"Function","name":"validation","type":"client"}}},"content":{"[footer]":[{"id":"457b13f8-ad87-43f3-867f-995513df70d8","descriptor":"zone-content","values":{"zoneCode":"[footer]"}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"b0fbfe9d-278d-4605-b86a-b19e8b157b41","descriptor":"tabset","values":{"__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"7e7a443f-6d94-44f7-9942-7bbbb107cba9","descriptor":"tab","values":{"__renderContentAsync":false,"__renderContentOnDemand":false,"title":"Основная информация","__isConstValues":[]},"content":{"":[{"id":"03a1036e-775b-446d-93e3-cfbe0cfb4122","descriptor":"modal-body","content":{"":[{"id":"198f69fd-132c-400d-a2c7-a7ae96046acd","descriptor":"kedo@custom_info","descriptorVersion":1,"values":{"__hidden":{"path":["show_error"],"modifier":"not"},"info_type":[{"code":"danger","name":"Ошибка"}],"info_string":"Организация с указанным Юр.лицом уже создана","__isConstValues":[]}},{"id":"7bd7d63b-ae9b-471a-9c51-55b79f956a29","descriptor":"dynamic-form-row","values":{"bindingMode":false,"onChangeValue":{"kind":"Function","name":"findOrganization","type":"client"},"showDisplayName":true,"tooltip":null,"hideEmpty":false,"__readOnly":null,"__isConstValues":[],"control":{"path":["item","entity"]},"required":true,"showCreateItem":{"label":"По умолчанию"}}},{"id":"407c6349-21d4-4a49-ab07-d5fb9493b3a8","descriptor":"dynamic-form-row","values":{"required":false,"__baseURL":"","bindingMode":false,"__relativeURL":"","showCreateItem":false,"showDisplayName":true,"control":{"path":["item","head_org"]},"__outlet":"","hideEmpty":false,"__readOnly":null,"__isConstValues":[],"tooltip":null}},{"id":"50c5f51e-2b04-4d77-9072-9cf2419c5a1e","descriptor":"dynamic-form-row","values":{"__baseURL":"","hideEmpty":false,"__readOnly":null,"bindingMode":false,"__relativeURL":"","control":{"path":["item","position_head"]},"tooltip":"Позиция штатного расписания, которая отображается в приказах и является адресатом заявлений и служебных записок ","__outlet":"","showCreateItem":false,"required":false,"__isConstValues":[],"showDisplayName":true}},{"id":"406e769e-77c8-4293-9686-79d290af77fa","descriptor":"dynamic-form-row","values":{"tooltip":"Генеральный директор / руководитель организации или специалист / группа специалистов с доверенностями, подписывающие документы от лица компании ","__baseURL":"","hideEmpty":false,"bindingMode":false,"__relativeURL":"","showCreateItem":false,"showDisplayName":true,"control":{"path":["item","signatories"]},"__outlet":"","required":false,"__readOnly":null,"onChangeValue":{"kind":"Function","name":"changeDefaultGroups","type":"client"},"__isConstValues":[]}},{"id":"f2c08abf-e205-4fc3-87ab-90df9e0f93d6","descriptor":"dynamic-form-row","values":{"required":false,"__baseURL":"","hideEmpty":false,"__readOnly":null,"bindingMode":false,"__relativeURL":"","tooltip":"Группа сотрудников, которая выполняет кадровые действия - на определенных этапах процессов задачи поступают им на исполнение или согласование ","__outlet":"","onChangeValue":{"kind":"Function","name":"changeDefaultGroups","type":"client"},"showCreateItem":false,"showDisplayName":true,"control":{"path":["item","hr_department"]},"__isConstValues":[]}},{"id":"99fbba3a-487e-4312-980a-c3503b552ca5","descriptor":"dynamic-form-row","values":{"onChangeValue":{"kind":"Function","name":"changeDefaultGroups","type":"client"},"__isConstValues":[],"showDisplayName":true,"tooltip":"Группа сотрудников, которая выполняет расчет на основании кадровых действий - на определенных этапах процессов задачи поступают им на исполнение или согласование ","hideEmpty":false,"__readOnly":null,"__relativeURL":"","bindingMode":false,"showCreateItem":false,"control":{"path":["item","accounting"]},"__outlet":"","required":false,"__baseURL":""}},{"id":"63db7b94-3838-4abb-996e-2caf0fc809f2","descriptor":"dynamic-form-row","values":{"tooltip":"Сотрудники, имеющие доступ к объектам организации, но не участвующие в процессах КЭДО","required":false,"__relativeURL":"","showCreateItem":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","special_access_new"]},"__baseURL":"","hideEmpty":false,"__readOnly":null,"bindingMode":false,"__onMouseEnter":{"kind":"Function","name":"changeDefaultGroups","type":"client"},"__outlet":""}},{"id":"3f38e2d6-5410-4a3d-84ce-e1893483a6b6","descriptor":"dynamic-form-row","values":{"required":false,"hideEmpty":false,"showCreateItem":false,"__isConstValues":[],"showDisplayName":true,"tooltip":"Сотрудники, которые ищут, покупают транспортные билеты и бронируют гостиницу для командируемого","__outlet":"","__readOnly":null,"bindingMode":false,"displayName":"Офис-менеджеры","__relativeURL":"","control":{"path":["item","office_managers"]},"__baseURL":""}},{"id":"b382c073-1552-4de1-963a-268964ad29b1","descriptor":"dynamic-form-row","values":{"tooltip":"Сотрудники, ответственные за согласование затрат на командировки","__baseURL":"","__isConstValues":[],"showDisplayName":true,"bindingMode":false,"__relativeURL":"","showCreateItem":false,"control":{"path":["item","matching_finance"]},"__outlet":"","required":false,"hideEmpty":false,"__readOnly":null}},{"id":"52738cdb-6d80-4cb3-a052-dbef15157788","descriptor":"groupbox","values":{"styleEnum":[{"code":"simple","name":"Простой"}],"collapsible":true,"__isConstValues":[],"__renderContentAsync":false,"title":"ref_key","__outlet":"","expanded":false,"__baseURL":"","__relativeURL":""},"content":{"":[{"id":"e42963a1-15f6-4b55-8a40-227cb784e4d6","descriptor":"row","values":{"__baseURL":"","__relativeURL":"","__isConstValues":[],"__renderContentAsync":false,"__outlet":""},"content":{"":[{"id":"9b843e3c-69cc-4e9e-9406-86b5e06a787a","descriptor":"column","content":{"":[{"id":"1474dc86-dba0-4aa8-98b9-8fefa4fec3ce","descriptor":"dynamic-form-row","values":{"control":{"path":["item","ref_key"]},"tooltip":null,"__outlet":"","required":false,"hideEmpty":false,"bindingMode":false,"__baseURL":"","__readOnly":null,"__relativeURL":"","__isConstValues":[],"showDisplayName":false}}]}},{"id":"5ba21a92-b674-4e71-8b5f-9adcd22958a0","descriptor":"column","content":{"":[]}}]}}]}}]}}]}},{"id":"41fd7c4f-09d0-4a36-a03e-acb670126a38","descriptor":"tab","values":{"__renderContentOnDemand":false,"title":"Документы","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"b7acd83f-0e17-44d3-9363-c24fcdb7a4b8","descriptor":"modal-body","content":{"":[{"id":"d826d655-0013-4f53-ba2e-c3f02878153f","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","agreement_processing_personal_data"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":null,"bindingMode":false}},{"id":"2f53648a-558c-4599-8e10-53cbefd54eaa","descriptor":"dynamic-form-row","values":{"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","confidentiality_policy"]},"tooltip":null,"required":false}},{"id":"035da564-cde9-455c-84db-0c7ca6cc91f6","descriptor":"dynamic-form-row","values":{"showDisplayName":true,"control":{"path":["item","kedo_regulation"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[]}},{"id":"ada3c357-06bf-4195-846a-b2acbd0aad60","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","address_HR_department"]},"__outlet":"","required":false,"__baseURL":"","__readOnly":null,"__relativeURL":"","tooltip":null,"hideEmpty":false,"bindingMode":false}},{"id":"34774d3d-6381-47ea-b152-4edd94bf2aa4","descriptor":"dynamic-form-row","values":{"showDisplayName":true,"control":{"path":["item","custom_html_card"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__isConstValues":[]}}]}}]}},{"id":"09aa160f-f63c-409e-83eb-c787ec011913","descriptor":"tab","values":{"__baseURL":"","__relativeURL":"","__isConstValues":[],"__renderContentAsync":false,"__renderContentOnDemand":false,"title":"Настройка ЭП","__outlet":""},"content":{"":[{"id":"b0a3cb0d-e9ae-47e4-9686-e5b292007800","descriptor":"modal-body","content":{"":[{"id":"f8fa9e74-a236-4333-9332-7e8a79513a87","descriptor":"dynamic-form-row","values":{"__readOnly":null,"__relativeURL":"","__isConstValues":[],"showDisplayName":true,"control":{"path":["item","sign_provider"]},"__outlet":"","required":false,"bindingMode":false,"onChangeValue":{"kind":"Function","name":"getProvider","type":"client"},"__renderContentOnDemand":false,"tooltip":null,"__baseURL":"","hideEmpty":false}},{"id":"a45295c1-8127-4d13-b01a-491b08520464","descriptor":"dynamic-form-row","values":{"tooltip":null,"__hidden":{"path":["show_staff_choice_field"],"modifier":"not"},"hideEmpty":false,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"__renderContentOnDemand":false,"control":{"path":["item","leave_choice_to_staff"]},"__outlet":"","required":false,"__baseURL":"","__readOnly":null,"__relativeURL":""}},{"id":"79ebcc3f-d96f-4bc0-80b2-d759531e70bb","descriptor":"dynamic-form-row","values":{"tooltip":null,"required":{"path":["kontur"]},"hideEmpty":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","issue_confirm_type_kontur"]},"__hidden":{"path":["kontur"],"modifier":"not"},"__readOnly":null,"bindingMode":false}},{"id":"469524b8-2896-4d31-b899-169821d243e9","descriptor":"dynamic-form-row","values":{"__readOnly":null,"bindingMode":false,"__renderContentOnDemand":false,"control":{"path":["item","api_key"]},"__hidden":{"path":["show_api_key_field"],"modifier":"not"},"__outlet":"","required":false,"hideEmpty":false,"tooltip":null,"__baseURL":"","__relativeURL":"","__isConstValues":[],"showDisplayName":true}}]}}]}},{"id":"3e2c5a68-50b2-496e-baa0-b333bc79f241","descriptor":"tab","values":{"__renderContentAsync":false,"__renderContentOnDemand":false,"title":"Доступы","__isConstValues":[]},"content":{"":[{"id":"ca677bb9-7eb9-4467-a768-0e51a1beb2aa","descriptor":"modal-body","content":{"":[{"id":"ae01bc6d-127c-49e1-a88b-ca12087ca0ce","descriptor":"html","descriptorVersion":3,"values":{"html":"\u003cp\u003e\u003cspan\u003eНа данной вкладке указываются позиции ШР, при приеме/переводе на которые сотрудники автоматически будут включаться в нужные группы доступа.\u003c/span\u003e\u003c/p\u003e"}},{"id":"228b7cdd-9204-46de-9a80-4a836936f731","descriptor":"dynamic-form-row","values":{"required":false,"hideEmpty":false,"__readOnly":null,"__isConstValues":[],"control":{"path":["item","hr_department_positions"]},"bindingMode":false,"showCreateItem":false,"showDisplayName":true,"tooltip":null}},{"id":"f94cd09b-892a-4c04-9fbd-c07e0f322195","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"hideEmpty":false,"__readOnly":null,"bindingMode":false,"showCreateItem":false,"showDisplayName":true,"control":{"path":["item","accounting_positions"]},"tooltip":null,"required":false}}]}}]}}]}},{"id":"d1ace676-6867-457d-a77c-e966645f77e1","descriptor":"extended-fields","values":{"fields":{"path":["fields"]},"__outlet":"","__baseURL":"","__relativeURL":"","__isConstValues":[],"form":{"path":["item"]}}},{"id":"4729ad67-c71b-444f-b883-aad93dc133ef","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    .itemscope__item.disabled {\n        pointer-events: none;\n        color: gray;\n    }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"css"}}]}}],"[sidebar]":[{"id":"662f08da-59da-4112-9ae1-763785ab8bf2","descriptor":"sidebar-widget","content":{"":[{"id":"1556d7a7-eaa5-41a2-b262-82ec3b86e64d","descriptor":"user-guide"}]}}],"[headerControls]":[],"[headerCustomization]":[]}},"fields":[{"code":"kontur","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Контур","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"show_error","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показывать ошибку","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"sign_me","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Sign.me","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}},{"code":"goskey_enabled","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":true,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Модуль госключа подключен","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}},{"code":"currnet_provider_code","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Текущий провайдер","data":{"additionalType":"string"},"input":true,"output":true}},{"code":"show_staff_choice_field","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать поле Дать выбор сотруднику","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}},{"code":"show_api_key_field","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":true,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать поле с api-ключом","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":true}}],"fieldVisibilityConditions":{"kontur":{"enabled":false,"conditions":[]},"sign_me":{"enabled":false,"conditions":[]},"show_error":{"enabled":false,"conditions":[]},"goskey_enabled":{"enabled":false,"conditions":[]},"show_api_key_field":{"enabled":false,"conditions":[]},"currnet_provider_code":{"enabled":false,"conditions":[]},"show_staff_choice_field":{"enabled":false,"conditions":[]}},"scriptOptions":{"allowNamespace":true},"clientScripts":"declare const console: any, document: any;\nasync function onInit():Promise\u003cvoid\u003e{\n    const baseUrl = System.getBaseUrl();\n    const tokenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n\n    if (!tokenSetting || !tokenSetting.data.value) {\n        Context.data.enabled_module_code = \"null\";\n        return;\n    };\n\n    if(Context.data.sign_provider \u0026\u0026 Context.data.sign_provider.find(variant =\u003e variant.code.toLowerCase() === \"kontur\")){\n        console.log(\"kontur\")\n        ViewContext.data.kontur = true;\n    };\n\n    \n    const goskeyResponse = await fetch(`${baseUrl}/pub/v1/scheme/modules/7fb0a0d0-fc8d-452e-843f-6a7f2f28a8bf`, {\n        headers: {\n            Authorization: `Bearer ${tokenSetting.data.value}`\n        }\n    });\n\n    if (goskeyResponse.ok) {\n        const responseJson = await goskeyResponse.json();\n        const goskeyEnabled = responseJson.module.enabled;\n\n        if (!goskeyEnabled) {\n            ViewContext.data.goskey_enabled = false;\n        };\n    };\n};\n\nasync function onLoad(): Promise\u003cvoid\u003e {\n    const labels = document.querySelectorAll(\".itemscope__item\");\n    getProvider();\n\n    if (!ViewContext.data.goskey_enabled) {\n        const goskeyLabel = Array.from(labels).find((node: any) =\u003e {\n            const nodeLabel = node.querySelector(\"label\");\n            console.log(nodeLabel.textContent.toLowerCase().includes(\"госключ\"))\n\n            if (nodeLabel.textContent.toLowerCase().includes(\"госключ\")) {\n                return node;\n            };\n        });\n        if (goskeyLabel) {\n            console.log(\"found\");\n            (goskeyLabel as any).remove()\n        }\n    }\n};\n\n// async function checkProvider():Promise\u003cvoid\u003e {\n//     if (Context.data.provider \u0026\u0026 Context.data.provider.code === \"kontur\") {\n//         ViewContext.data.kontur = true\n//         ViewContext.data.kontur = ViewContext.data.kontur;\n//     } else {\n//         ViewContext.data.kontur = false;\n//     };\n// };\n\nasync function getProvider(): Promise\u003cvoid\u003e {\n    const providerCodes = Context.data.sign_provider ? Context.data.sign_provider.map(p =\u003e p.code) : [];\n    const labels = Array.from(document.querySelectorAll(\".itemscope__item\"));\n    const signMeLabel = \u003cany\u003elabels.find((node: any) =\u003e {\n        const label = node.querySelector(\"label\");\n        return label.textContent.toLowerCase().includes(\"sign.me\");\n    });\n    const konturLabel = \u003cany\u003elabels.find((node: any) =\u003e {\n        const label = node.querySelector(\"label\");\n        return label.textContent.toLowerCase().includes(\"контур\");\n    });\n    signMeLabel.classList.remove(\"disabled\");\n\n    ViewContext.data.kontur = Context.data.sign_provider \u0026\u0026 providerCodes.indexOf(\"kontur\") !== -1;\n    ViewContext.data.show_api_key_field = Context.data.sign_provider \u0026\u0026 (providerCodes.indexOf(\"sign_me\") !== -1 || providerCodes.indexOf(\"kontur\") !== -1);\n\n    if (Context.data.sign_provider \u0026\u0026 (providerCodes.indexOf(\"sign_me\") !== -1 || providerCodes.indexOf(\"kontur\")) !== -1 \u0026\u0026 providerCodes.indexOf(\"goskey\") !== -1) {\n        ViewContext.data.show_staff_choice_field = true;\n    } else {\n        ViewContext.data.show_staff_choice_field = false;\n        Context.data.leave_choice_to_staff = false;\n    };\n\n    if (Context.data.sign_provider \u0026\u0026 Context.data.sign_provider.find(variant =\u003e variant.code.toLowerCase() === \"kontur\")) {\n        if (!signMeLabel.classList.contains(\"disabled\")) {\n            signMeLabel.classList.add(\"disabled\");\n        };\n    } else if (Context.data.sign_provider) {\n        signMeLabel.classList.remove(\"disabled\");\n    }\n    if (Context.data.sign_provider \u0026\u0026 Context.data.sign_provider.find(variant =\u003e variant.code.toLowerCase() === \"sign_me\")) {\n        if (!konturLabel.classList.contains(\"disabled\")) {\n            konturLabel.classList.add(\"disabled\");\n        };\n    } else if (Context.data.sign_provider) {\n        konturLabel.classList.remove(\"disabled\");\n    };\n};\n\nasync function findOrganization(): Promise\u003cvoid\u003e {\n    if (Context.data.entity) {\n        const organization = await Application.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.entity.link(Context.data.entity!)\n            ))\n            .first();\n        if (organization) {\n            ViewContext.data.show_error = true;\n        } else {\n            ViewContext.data.show_error = false;\n        }\n    }\n    else {\n        ViewContext.data.show_error = false;\n    }\n\n}\n\nasync function validation(): Promise\u003cValidationResult\u003e {\n    const result = new ValidationResult();\n    if (ViewContext.data.show_error === true) {\n        result.addContextError('entity', `Организация с указанным юр.лицом уже создана`)\n    }\n    return result\n}\n\nasync function changeDefaultGroups(): Promise\u003cvoid\u003e {\n    const allStaff = await Namespace.app.staff.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.ext_user.neq(null)\n    )).size(10000).all();\n    const domenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"domen\")).first();\n    const tokenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n    if (!domenSetting || !tokenSetting) {\n        return;\n    };\n    const domen = domenSetting.data.value;\n    const token = tokenSetting.data.value;\n    console.log(token);\n    let accountingIds: string[] | undefined = undefined;\n    let hrIds: string[] | undefined = undefined;\n    let specialIds: string[] | undefined = undefined;\n    let signatoriesIds: string[] = [];\n    if (Context.data.accounting \u0026\u0026 Context.data.accounting.length \u003e 0) {\n        accountingIds = Context.data.accounting.map(staff =\u003e {\n            const staffData = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffData) {\n                return staffData.data.ext_user!.id\n            };\n            return \"\"\n        }).filter(item =\u003e item);\n    };\n\n    if (Context.data.signatories \u0026\u0026 Context.data.signatories.length \u003e 0) {\n        signatoriesIds = Context.data.signatories.map(staff =\u003e {\n            const staffData = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffData) {\n                return staffData.data.ext_user!.id\n            };\n            return \"\"\n        }).filter(item =\u003e item);\n    };\n\n    if (Context.data.special_access_new \u0026\u0026 Context.data.special_access_new.length \u003e 0) {\n        specialIds = Context.data.special_access_new.map(staff =\u003e {\n            const staffData = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffData) {\n                return staffData.data.ext_user!.id\n            };\n            return \"\"\n        }).filter(item =\u003e item)\n    }\n\n    if (Context.data.hr_department \u0026\u0026 Context.data.hr_department.length \u003e 0) {\n        hrIds = Context.data.hr_department.map(staff =\u003e {\n            const staffData = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffData) {\n                return staffData.data.ext_user!.id\n            };\n            return \"\"\n        }).filter(item =\u003e item);\n    };\n    await fetch(`https://${domen}/api/extensions/7fe3de7d-f459-4f75-940c-271c6e9ea1ed/script/change_hr_department_and_accounting`, {\n        method: \"POST\",\n        body: JSON.stringify({\n            org_id: Context.data.__id,\n            accounting_ids: accountingIds,\n            hr_ids: hrIds,\n            special_ids: specialIds,\n            signatories_ids: signatoriesIds\n        })\n    });\n};\n","clientScriptOptions":{"allowNamespace":true,"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{"allowNamespace":true},"widgetZones":[{"code":"[footer]"}],"dataFieldCode":"item"},"dataNamespace":"kedo","dataCode":"organization","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        async function onInit() {\n            const baseUrl = System.getBaseUrl();\n            const tokenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n            if (!tokenSetting || !tokenSetting.data.value) {\n                Context.data.enabled_module_code = \"null\";\n                return;\n            }\n            ;\n            if (Context.data.sign_provider \u0026\u0026 Context.data.sign_provider.find(variant =\u003e variant.code.toLowerCase() === \"kontur\")) {\n                console.log(\"kontur\");\n                ViewContext.data.kontur = true;\n            }\n            ;\n            const goskeyResponse = await fetch(`${baseUrl}/pub/v1/scheme/modules/7fb0a0d0-fc8d-452e-843f-6a7f2f28a8bf`, {\n                headers: {\n                    Authorization: `Bearer ${tokenSetting.data.value}`\n                }\n            });\n            if (goskeyResponse.ok) {\n                const responseJson = await goskeyResponse.json();\n                const goskeyEnabled = responseJson.module.enabled;\n                if (!goskeyEnabled) {\n                    ViewContext.data.goskey_enabled = false;\n                }\n                ;\n            }\n            ;\n        }\n        ;\n        async function onLoad() {\n            const labels = document.querySelectorAll(\".itemscope__item\");\n            getProvider();\n            if (!ViewContext.data.goskey_enabled) {\n                const goskeyLabel = Array.from(labels).find((node) =\u003e {\n                    const nodeLabel = node.querySelector(\"label\");\n                    console.log(nodeLabel.textContent.toLowerCase().includes(\"госключ\"));\n                    if (nodeLabel.textContent.toLowerCase().includes(\"госключ\")) {\n                        return node;\n                    }\n                    ;\n                });\n                if (goskeyLabel) {\n                    console.log(\"found\");\n                    goskeyLabel.remove();\n                }\n            }\n        }\n        ;\n        async function getProvider() {\n            const providerCodes = Context.data.sign_provider ? Context.data.sign_provider.map(p =\u003e p.code) : [];\n            const labels = Array.from(document.querySelectorAll(\".itemscope__item\"));\n            const signMeLabel = labels.find((node) =\u003e {\n                const label = node.querySelector(\"label\");\n                return label.textContent.toLowerCase().includes(\"sign.me\");\n            });\n            const konturLabel = labels.find((node) =\u003e {\n                const label = node.querySelector(\"label\");\n                return label.textContent.toLowerCase().includes(\"контур\");\n            });\n            signMeLabel.classList.remove(\"disabled\");\n            ViewContext.data.kontur = Context.data.sign_provider \u0026\u0026 providerCodes.indexOf(\"kontur\") !== -1;\n            ViewContext.data.show_api_key_field = Context.data.sign_provider \u0026\u0026 (providerCodes.indexOf(\"sign_me\") !== -1 || providerCodes.indexOf(\"kontur\") !== -1);\n            if (Context.data.sign_provider \u0026\u0026 (providerCodes.indexOf(\"sign_me\") !== -1 || providerCodes.indexOf(\"kontur\")) !== -1 \u0026\u0026 providerCodes.indexOf(\"goskey\") !== -1) {\n                ViewContext.data.show_staff_choice_field = true;\n            }\n            else {\n                ViewContext.data.show_staff_choice_field = false;\n                Context.data.leave_choice_to_staff = false;\n            }\n            ;\n            if (Context.data.sign_provider \u0026\u0026 Context.data.sign_provider.find(variant =\u003e variant.code.toLowerCase() === \"kontur\")) {\n                if (!signMeLabel.classList.contains(\"disabled\")) {\n                    signMeLabel.classList.add(\"disabled\");\n                }\n                ;\n            }\n            else if (Context.data.sign_provider) {\n                signMeLabel.classList.remove(\"disabled\");\n            }\n            if (Context.data.sign_provider \u0026\u0026 Context.data.sign_provider.find(variant =\u003e variant.code.toLowerCase() === \"sign_me\")) {\n                if (!konturLabel.classList.contains(\"disabled\")) {\n                    konturLabel.classList.add(\"disabled\");\n                }\n                ;\n            }\n            else if (Context.data.sign_provider) {\n                konturLabel.classList.remove(\"disabled\");\n            }\n            ;\n        }\n        ;\n        async function findOrganization() {\n            if (Context.data.entity) {\n                const organization = await Application.search()\n                    .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.entity.link(Context.data.entity)))\n                    .first();\n                if (organization) {\n                    ViewContext.data.show_error = true;\n                }\n                else {\n                    ViewContext.data.show_error = false;\n                }\n            }\n            else {\n                ViewContext.data.show_error = false;\n            }\n        }\n        async function validation() {\n            const result = new ValidationResult();\n            if (ViewContext.data.show_error === true) {\n                result.addContextError('entity', `Организация с указанным юр.лицом уже создана`);\n            }\n            return result;\n        }\n        async function changeDefaultGroups() {\n            const allStaff = await Namespace.app.staff.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.neq(null))).size(10000).all();\n            const domenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"domen\")).first();\n            const tokenSetting = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n            if (!domenSetting || !tokenSetting) {\n                return;\n            }\n            ;\n            const domen = domenSetting.data.value;\n            const token = tokenSetting.data.value;\n            console.log(token);\n            let accountingIds = undefined;\n            let hrIds = undefined;\n            let specialIds = undefined;\n            let signatoriesIds = [];\n            if (Context.data.accounting \u0026\u0026 Context.data.accounting.length \u003e 0) {\n                accountingIds = Context.data.accounting.map(staff =\u003e {\n                    const staffData = allStaff.find(s =\u003e s.id === staff.id);\n                    if (staffData) {\n                        return staffData.data.ext_user.id;\n                    }\n                    ;\n                    return \"\";\n                }).filter(item =\u003e item);\n            }\n            ;\n            if (Context.data.signatories \u0026\u0026 Context.data.signatories.length \u003e 0) {\n                signatoriesIds = Context.data.signatories.map(staff =\u003e {\n                    const staffData = allStaff.find(s =\u003e s.id === staff.id);\n                    if (staffData) {\n                        return staffData.data.ext_user.id;\n                    }\n                    ;\n                    return \"\";\n                }).filter(item =\u003e item);\n            }\n            ;\n            if (Context.data.special_access_new \u0026\u0026 Context.data.special_access_new.length \u003e 0) {\n                specialIds = Context.data.special_access_new.map(staff =\u003e {\n                    const staffData = allStaff.find(s =\u003e s.id === staff.id);\n                    if (staffData) {\n                        return staffData.data.ext_user.id;\n                    }\n                    ;\n                    return \"\";\n                }).filter(item =\u003e item);\n            }\n            if (Context.data.hr_department \u0026\u0026 Context.data.hr_department.length \u003e 0) {\n                hrIds = Context.data.hr_department.map(staff =\u003e {\n                    const staffData = allStaff.find(s =\u003e s.id === staff.id);\n                    if (staffData) {\n                        return staffData.data.ext_user.id;\n                    }\n                    ;\n                    return \"\";\n                }).filter(item =\u003e item);\n            }\n            ;\n            await fetch(`https://${domen}/api/extensions/7fe3de7d-f459-4f75-940c-271c6e9ea1ed/script/change_hr_department_and_accounting`, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    org_id: Context.data.__id,\n                    accounting_ids: accountingIds,\n                    hr_ids: hrIds,\n                    special_ids: specialIds,\n                    signatories_ids: signatoriesIds\n                })\n            });\n        }\n        ;\n        return {\n            onInit,\n            onLoad,\n            getProvider,\n            findOrganization,\n            validation,\n            changeDefaultGroups\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"onLoad","parameters":[],"type":"[object Object]"},{"name":"getProvider","parameters":[],"type":"[object Object]"},{"name":"findOrganization","parameters":[],"type":"[object Object]"},{"name":"validation","parameters":[],"type":"[object Object]"},{"name":"changeDefaultGroups","parameters":[],"type":"[object Object]"}],"clientDependencies":{"applications":[],"collections":[{"namespace":"kedo","code":"settings"},{"namespace":"kedo","code":"organization"},{"namespace":"kedo","code":"staff"}],"pages":[{"namespace":"global","code":"kedo"}]}},"__createdAt":"2024-03-29T11:29:55.192586412Z","__createdBy":"d78f4b2f-13a2-4903-aeeb-fdb72d5b9d0c","__updatedAt":"2024-04-10T09:39:20.844932982Z","__updatedBy":"1a8a4a0b-7e7e-4e0e-895e-ab2a0a301d1e","__deletedAt":null}
