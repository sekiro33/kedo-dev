{"__id":"018e89f9-0f7f-79b2-a126-08f279627fc5","namespace":"kedo.work_schedules","code":"create","__name":"Форма создания","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":6,"hidden":false,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"d6ee36db-0102-48b8-a24e-44c2840c8b0e","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"formGroup":{"path":["item"]}},"content":{"[footer]":[{"id":"3a927f0b-f82b-4fcf-bb06-7bebc6299b41","descriptor":"zone-content","values":{"zoneCode":"[footer]"}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"add69b94-4307-4467-9c3f-5c74276fa3ca","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    /* .create-schedule-button button {\n        background-color: var(--el-component-button-color-primary);\n        pointer-events: auto;\n    }\n    .create-schedule-button.disabled,\n    .create-schedule-button.disabled button {\n        background-color: #e2e2e2;\n        pointer-events: none;\n    } */\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"disabled button css"}},{"id":"a302f982-13d3-4159-883f-d7d2547230c5","descriptor":"dynamic-form-row","values":{"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"__outlet":"","__baseURL":"","__readOnly":null,"hideEmpty":false,"__relativeURL":"","control":{"path":["item","__name"]},"tooltip":null,"required":true}},{"id":"da13f686-f715-462a-8ce8-4b5f10b0f008","descriptor":"dynamic-form-row","values":{"tooltip":null,"__baseURL":"","__readOnly":null,"__isConstValues":[],"showDisplayName":true,"__relativeURL":"","onChangeValue":{"kind":"Function","name":"handleContextChange","type":"client"},"control":{"path":["item","work_days"]},"__outlet":"","required":true,"hideEmpty":false,"bindingMode":false,"displayName":"Рабочие дни (количество в неделе)"}},{"id":"2c64cd65-8c2d-4f3b-b224-ce9ebeff1f2e","descriptor":"dynamic-form-row","values":{"__outlet":"","required":true,"__baseURL":"","hideEmpty":false,"__readOnly":null,"bindingMode":false,"showDisplayName":true,"control":{"path":["item","day_offs"]},"displayName":"Выходные дни (количество в неделе)","__relativeURL":"","onChangeValue":{"kind":"Function","name":"handleContextChange","type":"client"},"__isConstValues":[],"tooltip":null}},{"id":"cd66f836-3231-47e3-bf12-565ee34604d2","descriptor":"dynamic-form-row","values":{"hideEmpty":false,"__readOnly":null,"bindingMode":false,"__relativeURL":"","control":{"path":["item","utc"]},"__baseURL":"","required":true,"onChangeValue":{"kind":"Function","name":"handleContextChange","type":"client"},"__isConstValues":[],"showDisplayName":true,"tooltip":null,"__outlet":""}},{"id":"dd81dde5-a695-422d-927c-0b545de26a7d","descriptor":"code","values":{"html":"\u003cdiv class=\"year-wrapper\"\u003e\n    \u003cdiv class=\"year-label\"\u003e\n        Год\n    \u003c/div\u003e\n    \u003cdiv class=\"year-options decrement\" onclick=\"\u003c%= Scripts %\u003e.changeYear(this)\"\u003e\n        \u003c\n    \u003c/div\u003e\n    \u003c%= Context.data.year %\u003e\n    \u003cdiv class=\"year-options increment\" onclick=\"\u003c%= Scripts %\u003e.changeYear(this)\"\"\u003e\n        \u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cstyle\u003e\n    .year-wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 1rem;\n    }\n\n    .year-label {\n        color: #666;\n        width: 18rem;\n    }\n\n    .year-options {\n        padding: 0.5rem 1rem;\n        border-radius: 5px;\n        border: 1px solid #D9D9D9;\n        cursor: pointer;\n    }\n\n    .year-options:hover {\n        border: 1px solid var(--el-component-button-color-primary-hover);\n    }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"year choice"}},{"id":"f8df7ec8-e556-4964-87fd-ab8e71e5e244","descriptor":"dynamic-form-row","values":{"bindingMode":false,"__relativeURL":"","__isConstValues":[],"control":{"path":["item","start_date"]},"required":true,"__readOnly":null,"hideEmpty":false,"onChangeValue":{"kind":"Function","name":"handleYearChange","type":"client"},"showDisplayName":true,"__renderContentOnDemand":false,"tooltip":null,"__outlet":"","__baseURL":""}},{"id":"0cc080f6-6816-4d1d-a7a0-a004ca28a944","descriptor":"dynamic-form-row","values":{"tooltip":null,"__outlet":"","__baseURL":"","hideEmpty":false,"bindingMode":false,"__relativeURL":"","onChangeValue":{"kind":"Function","name":"handleDisabledButtton","type":"client"},"control":{"path":["item","region"]},"required":false,"__readOnly":null,"showCreateItem":false,"__isConstValues":[],"showDisplayName":true}},{"id":"890f7430-63c6-45f0-85bb-1e560b7b8cc7","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"tooltip":null,"__outlet":"","hideEmpty":false,"bindingMode":false,"__relativeURL":"","control":{"path":["item","id_1c"]},"required":false,"__baseURL":"","__readOnly":true,"showDisplayName":true}},{"id":"e0e2c37e-3693-49b1-9bb5-7778b1352289","descriptor":"button","values":{"__outlet":"","__classes":"create-schedule-button","action":null,"onClick":{"kind":"Function","name":"createSchedule","type":"client"},"__relativeURL":"","view":"primary","label":"Рассчитать график","__baseURL":"","createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"__renderContentOnDemand":false,"runInPopover":null,"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"__isConstValues":[],"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}}]}}],"[sidebar]":[{"id":"662f08da-59da-4112-9ae1-763785ab8bf2","descriptor":"sidebar-widget","content":{"":[{"id":"1556d7a7-eaa5-41a2-b262-82ec3b86e64d","descriptor":"user-guide"}]}}],"[headerControls]":[],"[headerCustomization]":[]}},"fields":[{"code":"all_required_fields_filled","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Все поля заполнены","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}}],"fieldVisibilityConditions":{"all_required_fields_filled":{"enabled":false,"conditions":[]}},"scriptOptions":{"allowNamespace":true},"clientScripts":"declare const window: any;\ndeclare const console: any;\ndeclare const document: any;\n\n// import * as globalVars from \"vars.js\";\n\ntype dateInfo = {\n    isHoliday?: boolean,\n    isDayOff?: boolean,\n    date: string,\n    dateForCalendar: string,\n    isPreDayOff?: boolean,\n    description?: string\n};\n\ntype holidayInfo = {\n    date: string,\n    name: string\n};\n\nlet scheduleButton: any\nlet holidaysInfo: holidayInfo[];\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    Context.data.year = new TDate().year;\n    const waitForButton = window.setInterval(() =\u003e {\n        scheduleButton = document.querySelector(\".create-schedule-button\");\n        if(!scheduleButton) {\n            return;\n        };\n        window.clearInterval(waitForButton);\n        scheduleButton.classList.add(\"disabled\");\n    }, 200);\n}\n\nasync function getAllDatesInYear(currentYear: number): Promise\u003cdateInfo[]\u003e {\n    const testResponse = await fetch('https://isdayoff.ru/20230625');\n    const holidayResponse = await fetch(`https://date.nager.at/api/v3/PublicHolidays/${Context.data.year_string!}/RU`);\n    const openKontur = testResponse.ok;\n\n    let jsonDates: Map\u003cstring, string\u003e[] = [];\n    let objDates: Date[] = [];\n\n    if (holidayResponse.ok) {\n        const responseJson = await holidayResponse.json();\n        holidaysInfo = responseJson.map((item: any) =\u003e {\n            return {\n                name: item.localName,\n                date: convertDate(item.date, \"-\")\n            }\n        });\n    };\n\n    for (let i = 0; i \u003c= 11; i++) {\n        const currentMonthDays = await getDatesFromApi(currentYear, i, openKontur);\n        if (currentMonthDays instanceof Map) {\n            jsonDates.push(currentMonthDays);\n        } else {\n            objDates.push(...currentMonthDays);\n        };\n    };\n\n    let jsonData: dateInfo[] = [];\n\n    if (jsonDates \u0026\u0026 jsonDates.length \u003e 0) {\n        const commonMap: Map\u003cstring, string\u003e = new Map\u003cstring, string\u003e([].concat.apply([], jsonDates.map(m =\u003e {\n            return [...m]\n        })));\n        for (let item of commonMap.entries()) {\n            const key = item[0];\n            const dayCode = commonMap.get(key);\n\n            const dayMeta: dateInfo = {\n                date: key,\n                dateForCalendar: convertDate(key, \".\"),\n                isHoliday: !!holidaysInfo.find(item =\u003e item.date === key),\n                isDayOff: false,\n                isPreDayOff: dayCode === \"pre_day_off\",\n                description: holidaysInfo.find(item =\u003e item.date === key) ? holidaysInfo.find(item =\u003e item.date === key)!.name : \"\"\n            };\n\n            jsonData.push(dayMeta)\n        };\n        return jsonData;\n    } else {\n        return objDates.map(date =\u003e {\n            const day = String(date.getDate()).length == 2 ? String(date.getDate()) : \"0\" + String(date.getDate());\n            const month = String(date.getMonth() + 1).length == 2 ? String(date.getMonth() + 1) : \"0\" + String(date.getMonth() + 1);\n            const dateString = `${day}.${month}.${date.getFullYear()}`;\n\n            return \u003cdateInfo\u003e {\n                date: dateString,\n                dateForCalendar: convertDate(dateString, \".\"),\n                isDayOff: false\n            }\n        })\n    }\n};\n\nfunction convertDate(date: string, delimiter: string): string {\n    let [day, month, year]: string[] = [];\n    if (delimiter === \"-\") {\n        [year, month, day] = date.split(\"-\");\n        return `${day}.${month}.${year}`;\n\n    } else {\n        [day, month, year] = date.split(\".\");\n        return `${year}-${month}-${day}`;\n    };\n}\n\nasync function getDatesFromApi(year: number, month: number, openKontur: boolean): Promise\u003cDate[] | Map\u003cstring, string\u003e\u003e {\n    let startDate = new Date(year, month, 1);\n    let endDate = new Date(year, month + 1, 1);\n    let dates: Date[] = [];\n\n    while (startDate \u003c endDate) {\n        dates.push(new Date(startDate));\n        startDate.setDate(startDate.getDate() + 1);\n    };\n    if (!openKontur) {\n        return dates;\n    };\n\n    const monthPadded = String(month + 1).length == 2 ? String(month + 1) : \"0\" + String(month + 1);\n    const datesRequest = await fetch(`https://isdayoff.ru/api/getdata?year=${year}\u0026month=${monthPadded}\u0026pre=1`);\n    const datesInfo: any = await datesRequest.text();\n    const mappedDays: Map\u003cstring, string\u003e = new Map();\n\n    for (let i in datesInfo) {\n        const currentDate: Date = dates[Number(i)];\n        const paddedMonth = String(month + 1).length == 2 ? String(month + 1) : \"0\" + String(month + 1);\n        const paddedDay = String(currentDate.getDate()).length == 2 ? String(currentDate.getDate()) : \"0\" + String(currentDate.getDate());\n        const dateString = `${paddedDay}.${paddedMonth}.${currentDate.getFullYear()}`;\n        const metaNumber = datesInfo[i];\n        let dayMeta: string = \"\";\n\n        switch (metaNumber) {\n            case \"0\":\n                dayMeta = \"work\";\n                break;\n            case \"1\":\n                dayMeta = \"day_off\";\n                break;\n            case \"2\":\n                dayMeta = \"pre_day_off\";\n                break;\n        };\n\n        mappedDays.set(dateString, dayMeta);\n    };\n\n    return mappedDays;\n};\n\nasync function createSchedule(): Promise\u003cvoid\u003e {\n    Context.data.dates_table = Context.fields.dates_table.create();\n    const table = Context.data.dates_table;\n    // let currentYearDays = globalVars[Context.data.year_string as keyof globalVars];\n    // if (!currentYearDays) {\n        const currentYearDays = await getAllDatesInYear(Context.data.year!);\n        const dayOffs = getDayOffs(Context.data.start_date!, Context.data.year!, Context.data.work_days!, Context.data.day_offs!);\n        currentYearDays.filter(obj =\u003e dayOffs.indexOf(obj.date) !== -1).forEach(obj =\u003e {\n            obj.isDayOff = true;\n        });\n        const additionalHolidays = await Namespace.app.additional_holidays.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.year.eq(Context.data.year!)\n        )).first();\n\n        if (additionalHolidays \u0026\u0026 additionalHolidays.data.dates_table \u0026\u0026 additionalHolidays.data.dates_table.length \u003e 0) {\n            const additionalHolidaysTable = additionalHolidays.data.dates_table;\n            additionalHolidaysTable.filter(row =\u003e !row.region || row.region.id === Context.data.region!.id).forEach(row =\u003e {\n                const currentDate = currentYearDays.find(item =\u003e item.date === row.date.format(\"DD.MM.YYYY\"));\n                if (currentDate) {\n                    currentDate.description = row.holiday_name;\n                    currentDate.isDayOff = row.day_off;\n                    currentDate.isHoliday = row.holiday;\n                };\n            });\n        };\n        for (let dateObj of currentYearDays) {\n            const newRow = table.insert();\n            const dateArr = dateObj.date.split(\".\");\n            const [day, month, year] = [...dateArr].map(Number)\n            newRow.date = new TDate(year, month, day);\n            newRow.holiday_name = dateObj.description || \"\";\n            newRow.is_day_off = dateObj.isDayOff || false;\n            newRow.is_holiday = dateObj.isHoliday || false;\n        };\n\n        Context.data.dates_table = table;\n        Context.data.json_data = JSON.stringify(currentYearDays);\n        console.log(currentYearDays)\n    // };\n};\n\nasync function handleContextChange(): Promise\u003cvoid\u003e {\n    if (Context.data.work_days \u0026\u0026 Context.data.day_offs \u0026\u0026 Context.data.year \u0026\u0026 Context.data.start_date \u0026\u0026 Context.data.utc \u0026\u0026 ViewContext.data.all_required_fields_filled) {\n        scheduleButton.classList.remove(\"disabled\")\n    } else if (!scheduleButton.classList.contains(\"disabled\")) {\n        scheduleButton.classList.add(\"disabled\");\n    };\n};\n\nasync function handleYearChange(): Promise\u003cvoid\u003e {\n    if (Context.data.year) {\n        Context.data.year_string = String(Context.data.year);\n        ViewContext.data.all_required_fields_filled = true;\n        const firstDate = new TDate(Context.data.year, 1, 1);\n        const lastDate = new TDate(Context.data.year, 12, 31);\n\n        Context.fields.start_date.data.setFilter((f, g) =\u003e g.and(\n            f.gte(firstDate),\n            f.lte(lastDate)\n        ));\n\n        Context.data.start_date = firstDate;\n\n    } else {\n        ViewContext.data.all_required_fields_filled = false;\n    };\n    handleContextChange();\n};\n\nfunction getDayOffs(dateStart: TDate, year: number, workDaysCount: number, dayOffsCount: number): string[] {\n    let dayOffs: string[] = [];\n    let i = 0;\n    let isWorkDays = true;\n\n    while (dateStart.year === year) {\n        if (!isWorkDays) {\n            dayOffs.push(dateStart.format(\"DD.MM.YYYY\"));\n        }\n        dateStart = dateStart.addDate(0, 0, 1);\n        i++;\n\n        if (isWorkDays \u0026\u0026 i === workDaysCount) {\n            isWorkDays = false;\n            i = 0;\n        } else if (!isWorkDays \u0026\u0026 i === dayOffsCount) {\n            isWorkDays = true;\n            i = 0;\n        };\n    };\n\n    return dayOffs;\n};\n\nfunction changeYear(elem: any) {\n    if (elem.classList.contains(\"increment\")) {\n        Context.data.year!++;\n    } else {\n        Context.data.year!--;\n    };\n    Context.data.year_string = String(Context.data.year!);\n};\n","clientScriptOptions":{"allowNamespace":true,"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{"allowNamespace":true},"widgetZones":[{"code":"[footer]"}],"dataFieldCode":"item"},"dataNamespace":"kedo","dataCode":"work_schedules","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        let scheduleButton;\n        let holidaysInfo;\n        async function onInit() {\n            Context.data.year = new TDate().year;\n            const waitForButton = window.setInterval(() =\u003e {\n                scheduleButton = document.querySelector(\".create-schedule-button\");\n                if (!scheduleButton) {\n                    return;\n                }\n                ;\n                window.clearInterval(waitForButton);\n                scheduleButton.classList.add(\"disabled\");\n            }, 200);\n        }\n        async function getAllDatesInYear(currentYear) {\n            const testResponse = await fetch('https://isdayoff.ru/20230625');\n            const holidayResponse = await fetch(`https://date.nager.at/api/v3/PublicHolidays/${Context.data.year_string}/RU`);\n            const openKontur = testResponse.ok;\n            let jsonDates = [];\n            let objDates = [];\n            if (holidayResponse.ok) {\n                const responseJson = await holidayResponse.json();\n                holidaysInfo = responseJson.map((item) =\u003e {\n                    return {\n                        name: item.localName,\n                        date: convertDate(item.date, \"-\")\n                    };\n                });\n            }\n            ;\n            for (let i = 0; i \u003c= 11; i++) {\n                const currentMonthDays = await getDatesFromApi(currentYear, i, openKontur);\n                if (currentMonthDays instanceof Map) {\n                    jsonDates.push(currentMonthDays);\n                }\n                else {\n                    objDates.push(...currentMonthDays);\n                }\n                ;\n            }\n            ;\n            let jsonData = [];\n            if (jsonDates \u0026\u0026 jsonDates.length \u003e 0) {\n                const commonMap = new Map([].concat.apply([], jsonDates.map(m =\u003e {\n                    return [...m];\n                })));\n                for (let item of commonMap.entries()) {\n                    const key = item[0];\n                    const dayCode = commonMap.get(key);\n                    const dayMeta = {\n                        date: key,\n                        dateForCalendar: convertDate(key, \".\"),\n                        isHoliday: !!holidaysInfo.find(item =\u003e item.date === key),\n                        isDayOff: false,\n                        isPreDayOff: dayCode === \"pre_day_off\",\n                        description: holidaysInfo.find(item =\u003e item.date === key) ? holidaysInfo.find(item =\u003e item.date === key).name : \"\"\n                    };\n                    jsonData.push(dayMeta);\n                }\n                ;\n                return jsonData;\n            }\n            else {\n                return objDates.map(date =\u003e {\n                    const day = String(date.getDate()).length == 2 ? String(date.getDate()) : \"0\" + String(date.getDate());\n                    const month = String(date.getMonth() + 1).length == 2 ? String(date.getMonth() + 1) : \"0\" + String(date.getMonth() + 1);\n                    const dateString = `${day}.${month}.${date.getFullYear()}`;\n                    return {\n                        date: dateString,\n                        dateForCalendar: convertDate(dateString, \".\"),\n                        isDayOff: false\n                    };\n                });\n            }\n        }\n        ;\n        function convertDate(date, delimiter) {\n            let [day, month, year] = [];\n            if (delimiter === \"-\") {\n                [year, month, day] = date.split(\"-\");\n                return `${day}.${month}.${year}`;\n            }\n            else {\n                [day, month, year] = date.split(\".\");\n                return `${year}-${month}-${day}`;\n            }\n            ;\n        }\n        async function getDatesFromApi(year, month, openKontur) {\n            let startDate = new Date(year, month, 1);\n            let endDate = new Date(year, month + 1, 1);\n            let dates = [];\n            while (startDate \u003c endDate) {\n                dates.push(new Date(startDate));\n                startDate.setDate(startDate.getDate() + 1);\n            }\n            ;\n            if (!openKontur) {\n                return dates;\n            }\n            ;\n            const monthPadded = String(month + 1).length == 2 ? String(month + 1) : \"0\" + String(month + 1);\n            const datesRequest = await fetch(`https://isdayoff.ru/api/getdata?year=${year}\u0026month=${monthPadded}\u0026pre=1`);\n            const datesInfo = await datesRequest.text();\n            const mappedDays = new Map();\n            for (let i in datesInfo) {\n                const currentDate = dates[Number(i)];\n                const paddedMonth = String(month + 1).length == 2 ? String(month + 1) : \"0\" + String(month + 1);\n                const paddedDay = String(currentDate.getDate()).length == 2 ? String(currentDate.getDate()) : \"0\" + String(currentDate.getDate());\n                const dateString = `${paddedDay}.${paddedMonth}.${currentDate.getFullYear()}`;\n                const metaNumber = datesInfo[i];\n                let dayMeta = \"\";\n                switch (metaNumber) {\n                    case \"0\":\n                        dayMeta = \"work\";\n                        break;\n                    case \"1\":\n                        dayMeta = \"day_off\";\n                        break;\n                    case \"2\":\n                        dayMeta = \"pre_day_off\";\n                        break;\n                }\n                ;\n                mappedDays.set(dateString, dayMeta);\n            }\n            ;\n            return mappedDays;\n        }\n        ;\n        async function createSchedule() {\n            Context.data.dates_table = Context.fields.dates_table.create();\n            const table = Context.data.dates_table;\n            const currentYearDays = await getAllDatesInYear(Context.data.year);\n            const dayOffs = getDayOffs(Context.data.start_date, Context.data.year, Context.data.work_days, Context.data.day_offs);\n            currentYearDays.filter(obj =\u003e dayOffs.indexOf(obj.date) !== -1).forEach(obj =\u003e {\n                obj.isDayOff = true;\n            });\n            const additionalHolidays = await Namespace.app.additional_holidays.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.year.eq(Context.data.year))).first();\n            if (additionalHolidays \u0026\u0026 additionalHolidays.data.dates_table \u0026\u0026 additionalHolidays.data.dates_table.length \u003e 0) {\n                const additionalHolidaysTable = additionalHolidays.data.dates_table;\n                additionalHolidaysTable.filter(row =\u003e !row.region || row.region.id === Context.data.region.id).forEach(row =\u003e {\n                    const currentDate = currentYearDays.find(item =\u003e item.date === row.date.format(\"DD.MM.YYYY\"));\n                    if (currentDate) {\n                        currentDate.description = row.holiday_name;\n                        currentDate.isDayOff = row.day_off;\n                        currentDate.isHoliday = row.holiday;\n                    }\n                    ;\n                });\n            }\n            ;\n            for (let dateObj of currentYearDays) {\n                const newRow = table.insert();\n                const dateArr = dateObj.date.split(\".\");\n                const [day, month, year] = [...dateArr].map(Number);\n                newRow.date = new TDate(year, month, day);\n                newRow.holiday_name = dateObj.description || \"\";\n                newRow.is_day_off = dateObj.isDayOff || false;\n                newRow.is_holiday = dateObj.isHoliday || false;\n            }\n            ;\n            Context.data.dates_table = table;\n            Context.data.json_data = JSON.stringify(currentYearDays);\n            console.log(currentYearDays);\n        }\n        ;\n        async function handleContextChange() {\n            if (Context.data.work_days \u0026\u0026 Context.data.day_offs \u0026\u0026 Context.data.year \u0026\u0026 Context.data.start_date \u0026\u0026 Context.data.utc \u0026\u0026 ViewContext.data.all_required_fields_filled) {\n                scheduleButton.classList.remove(\"disabled\");\n            }\n            else if (!scheduleButton.classList.contains(\"disabled\")) {\n                scheduleButton.classList.add(\"disabled\");\n            }\n            ;\n        }\n        ;\n        async function handleYearChange() {\n            if (Context.data.year) {\n                Context.data.year_string = String(Context.data.year);\n                ViewContext.data.all_required_fields_filled = true;\n                const firstDate = new TDate(Context.data.year, 1, 1);\n                const lastDate = new TDate(Context.data.year, 12, 31);\n                Context.fields.start_date.data.setFilter((f, g) =\u003e g.and(f.gte(firstDate), f.lte(lastDate)));\n                Context.data.start_date = firstDate;\n            }\n            else {\n                ViewContext.data.all_required_fields_filled = false;\n            }\n            ;\n            handleContextChange();\n        }\n        ;\n        function getDayOffs(dateStart, year, workDaysCount, dayOffsCount) {\n            let dayOffs = [];\n            let i = 0;\n            let isWorkDays = true;\n            while (dateStart.year === year) {\n                if (!isWorkDays) {\n                    dayOffs.push(dateStart.format(\"DD.MM.YYYY\"));\n                }\n                dateStart = dateStart.addDate(0, 0, 1);\n                i++;\n                if (isWorkDays \u0026\u0026 i === workDaysCount) {\n                    isWorkDays = false;\n                    i = 0;\n                }\n                else if (!isWorkDays \u0026\u0026 i === dayOffsCount) {\n                    isWorkDays = true;\n                    i = 0;\n                }\n                ;\n            }\n            ;\n            return dayOffs;\n        }\n        ;\n        function changeYear(elem) {\n            if (elem.classList.contains(\"increment\")) {\n                Context.data.year++;\n            }\n            else {\n                Context.data.year--;\n            }\n            ;\n            Context.data.year_string = String(Context.data.year);\n        }\n        ;\n        return {\n            onInit,\n            getAllDatesInYear,\n            convertDate,\n            getDatesFromApi,\n            createSchedule,\n            handleContextChange,\n            handleYearChange,\n            getDayOffs,\n            changeYear\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"getAllDatesInYear","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"convertDate","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getDatesFromApi","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"createSchedule","parameters":[],"type":"[object Object]"},{"name":"handleContextChange","parameters":[],"type":"[object Object]"},{"name":"handleYearChange","parameters":[],"type":"[object Object]"},{"name":"getDayOffs","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"changeYear","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""}],"clientDependencies":{"applications":[],"collections":[{"namespace":"kedo","code":"additional_holidays"}],"pages":[{"namespace":"global","code":"kedo"}]}},"__createdAt":"2024-03-29T11:29:44.828182545Z","__createdBy":"d78f4b2f-13a2-4903-aeeb-fdb72d5b9d0c","__updatedAt":"2024-04-22T12:02:45.529576363Z","__updatedBy":"b25a7cf7-ce56-4d22-b3c0-a7e160498088","__deletedAt":null}
