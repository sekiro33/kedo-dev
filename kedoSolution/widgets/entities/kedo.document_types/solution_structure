{
  "__id": "018f0a75-45b5-79f5-81e0-29af632903e5",
  "namespace": "kedo.document_types",
  "code": "solution_structure",
  "__name": "Структура разделов",
  "description": "",
  "extensionZoneCode": "",
  "sort": 0,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 1,
  "hidden": false,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "icon": "business_structure",
    "template": {
      "id": "f1ed395a-ee17-4e98-b8b5-342528a1f830",
      "descriptor": "component",
      "content": {
        "": [
          {
            "id": "3d005547-fbc5-4bf1-8cfc-82c317f8f69f",
            "descriptor": "row-layout",
            "values": {
              "__relativeURL": "",
              "__isConstValues": [],
              "elementsAlignEnum": [
                {
                  "code": "left",
                  "name": "shared.common.row-layout@widget-elements-align-left"
                }
              ],
              "__renderContentAsync": false,
              "__hidden": true,
              "__outlet": "",
              "__baseURL": "",
              "__classes": "custom-buttons"
            },
            "content": {
              "": [
                {
                  "id": "0b6b568a-22bf-4456-b07d-1bb6eb553235",
                  "descriptor": "button",
                  "values": {
                    "action": null,
                    "__classes": "custom_collaspse_nodes",
                    "runProcessSettings": {
                      "kind": "",
                      "settings": {
                        "code": "",
                        "field": "",
                        "binding": null,
                        "namespace": ""
                      }
                    },
                    "__styles": "",
                    "processPopoverSize": [
                      {
                        "code": "default",
                        "name": "shared.common.button@widget-process-popover-size-default",
                        "translate": true
                      }
                    ],
                    "label": "Свернуть дерево (скрытая кнопка)",
                    "__baseURL": "",
                    "runInPopover": null,
                    "__relativeURL": "",
                    "runActionEnum": [
                      {
                        "code": "undefined",
                        "name": "shared.common.button@widget-runAction-none",
                        "translate": true
                      }
                    ],
                    "__isConstValues": [],
                    "view": "default",
                    "onClick": {
                      "kind": "Function",
                      "name": "collapseNodes",
                      "type": "client"
                    },
                    "__outlet": "",
                    "createAppItemSettings": {
                      "kind": "",
                      "settings": {
                        "code": "",
                        "field": "",
                        "binding": null,
                        "namespace": ""
                      }
                    }
                  }
                },
                {
                  "id": "014905d0-9a62-46ae-8adf-ac7023bc385d",
                  "descriptor": "button",
                  "values": {
                    "label": "Выбрать дочерний узел (скрытая кнопка)",
                    "onClick": {
                      "kind": "Function",
                      "name": "selectNode",
                      "type": "client"
                    },
                    "__relativeURL": "",
                    "runProcessSettings": {
                      "kind": "",
                      "settings": {
                        "code": "",
                        "field": "",
                        "binding": null,
                        "namespace": ""
                      }
                    },
                    "view": "default",
                    "action": null,
                    "__outlet": "",
                    "runInPopover": null,
                    "__isConstValues": [],
                    "createAppItemSettings": {
                      "kind": "",
                      "settings": {
                        "code": "",
                        "field": "",
                        "binding": null,
                        "namespace": ""
                      }
                    },
                    "__baseURL": "",
                    "__classes": "custom_select_node",
                    "runActionEnum": [
                      {
                        "code": "undefined",
                        "name": "shared.common.button@widget-runAction-none",
                        "translate": true
                      }
                    ],
                    "processPopoverSize": [
                      {
                        "code": "default",
                        "name": "shared.common.button@widget-process-popover-size-default",
                        "translate": true
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "id": "f58245c1-f7f1-48fd-a9fb-ce88224bd38e",
            "descriptor": "code",
            "values": {
              "html": "\u003c% const containerId = `list-container-${Context.data.container_id}` %\u003e\n\n\u003clink rel=\"stylesheet\" href=\"\u003c%= UI.widget.filePath %\u003e/vanilajstree.new.css\" /\u003e\n\n\u003c% if (Context.data.loader == true) { %\u003e\n  \u003cdiv class=\"loader-container\"\u003e\n      \u003cspan class=\"custom-loader\"\u003e\u003c/span\u003e\n  \u003c/div\u003e\n\u003c% } else { %\u003e\n  \u003cdiv id=\"\u003c%=containerId%\u003e\"\u003e\u003c/div\u003e\n\u003c% } %\u003e\n\n\u003cstyle\u003e\n    #list-container {\n        font-size: 15pt;\n    }\n\n    .loader-container {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      align-content: center;\n    }\n\n    .custom-loader {\n      width: 48px;\n      height: 48px;\n      border-radius: 50%;\n      position: relative;\n      animation: rotate 1s linear infinite\n    }\n    \n    .custom-loader::before {\n      content: \"\";\n      box-sizing: border-box;\n      position: absolute;\n      inset: 0px;\n      border-radius: 50%;\n      border: 5px solid #1e6599;\n      animation: prixClipFix 2s linear infinite ;\n    }\n\n    @keyframes rotate {\n      100%   {transform: rotate(360deg)}\n    }\n\n    @keyframes prixClipFix {\n        0%   {clip-path:polygon(50% 50%,0 0,0 0,0 0,0 0,0 0)}\n        25%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 0,100% 0,100% 0)}\n        50%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,100% 100%,100% 100%)}\n        75%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 100%)}\n        100% {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 0)}\n    }\n\u003c/style\u003e",
              "hideContent": true,
              "contentPlaceholder": "Дерево разделов"
            }
          }
        ]
      }
    },
    "fields": [
      {
        "code": "solution_structure",
        "type": "JSON",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Структура разделов",
          "data": {},
          "input": false,
          "output": false
        }
      },
      {
        "code": "selected_element",
        "type": "JSON",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Выбранный элемент",
          "data": {},
          "input": true
        }
      },
      {
        "code": "token",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Токен",
          "data": {
            "additionalType": "string"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "container_id",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "ID контейнера",
          "data": {
            "additionalType": "string"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "loader",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "loader",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": false,
          "output": false
        }
      }
    ],
    "fieldVisibilityConditions": {
      "item": {
        "enabled": false,
        "conditions": []
      },
      "token": {
        "enabled": false,
        "conditions": []
      },
      "fields": {
        "enabled": false,
        "conditions": []
      },
      "loader": {
        "enabled": false,
        "conditions": []
      },
      "target": {
        "enabled": false,
        "conditions": []
      },
      "__hidden": {
        "enabled": false,
        "conditions": []
      },
      "__outlet": {
        "enabled": false,
        "conditions": []
      },
      "__styles": {
        "enabled": false,
        "conditions": []
      },
      "isLocked": {
        "enabled": false,
        "conditions": []
      },
      "__baseURL": {
        "enabled": false,
        "conditions": []
      },
      "__classes": {
        "enabled": false,
        "conditions": []
      },
      "__itemRef": {
        "enabled": false,
        "conditions": []
      },
      "fileModel": {
        "enabled": false,
        "conditions": []
      },
      "itemModel": {
        "enabled": false,
        "conditions": []
      },
      "__formType": {
        "enabled": false,
        "conditions": []
      },
      "__readOnly": {
        "enabled": false,
        "conditions": []
      },
      "application": {
        "enabled": false,
        "conditions": []
      },
      "permissions": {
        "enabled": false,
        "conditions": []
      },
      "routeParams": {
        "enabled": false,
        "conditions": []
      },
      "container_id": {
        "enabled": false,
        "conditions": []
      },
      "__relativeURL": {
        "enabled": false,
        "conditions": []
      },
      "actionButtons": {
        "enabled": false,
        "conditions": []
      },
      "__onMouseEnter": {
        "enabled": false,
        "conditions": []
      },
      "__onMouseLeave": {
        "enabled": false,
        "conditions": []
      },
      "accessSettings": {
        "enabled": false,
        "conditions": []
      },
      "buttonSettings": {
        "enabled": false,
        "conditions": []
      },
      "__isConstValues": {
        "enabled": false,
        "conditions": []
      },
      "addVersionAction": {
        "enabled": false,
        "conditions": []
      },
      "runProcessAction": {
        "enabled": false,
        "conditions": []
      },
      "selected_element": {
        "enabled": false,
        "conditions": []
      },
      "bpTemplateBuilder": {
        "enabled": false,
        "conditions": []
      },
      "docflowSendAction": {
        "enabled": false,
        "conditions": []
      },
      "versionListAction": {
        "enabled": false,
        "conditions": []
      },
      "solution_structure": {
        "enabled": false,
        "conditions": []
      },
      "__renderContentAsync": {
        "enabled": false,
        "conditions": []
      },
      "__renderContentOnDemand": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {
      "allowNamespace": true
    },
    "clientScripts": "/* Client scripts module */\n\nimport { TreeNode, TreeView, TreeConfig, TreePath } from \"sometree.js\";\n\ndeclare const document: any;\ndeclare const console: any;\ndeclare const window: any;\n\nlet tree: any;\nlet leafs: any[] = [];\n\ninterface ISolutionStrucutre {\n    name: string,\n    code: string,\n    icon?: string,\n    apps: IApp[],\n}\n\ninterface ISolution {\n    name: string,\n    code: string,\n}\n\ninterface IApp {\n    name: string,\n    code: string,\n}\n\ninterface INamespace {\n    name: string,\n    code: string,\n    icon?: string,\n}\n\nconst namespaces: INamespace[] = [\n    {\n        name: 'КЭДО',\n        code: 'kedo',\n        icon: `\u003ci class=\"elma-icons\"\u003euser_many\u003c/i\u003e`,\n    },\n    {\n        name: 'Приказы и заявления',\n        code: 'personnel_documents',\n        icon: `\u003ci class=\"elma-icons\"\u003efile_type_bookmark\u003c/i\u003e`,\n    }\n];\n\nfunction showLoader(): void {\n    Context.data.loader = true;\n}\n\nfunction hideLoader(): void {\n    Context.data.loader = false;\n}\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    Context.data.container_id = generateGuid();\n\n    const token = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n\n    if (!token) {\n        hideLoader();\n        throw new Error('Не найден параметр со значением токена в настройках КЭДО. api_key not found');\n    }\n\n    if (token \u0026\u0026 !token.data.value) {\n        hideLoader();\n        throw new Error('Токен не указан в настройках КЭДО. api_key.value is undefined');\n    }\n\n    Context.data.token = token.data.value;\n\n    prepareData();\n}\n\nasync function prepareData(): Promise\u003cvoid\u003e {\n    showLoader();\n    await get_documents_types();\n    searchContainter();\n    hideLoader();\n}\n\nfunction generateGuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r \u0026 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nfunction searchContainter() {\n    const list = document.querySelector(`#list-container-${Context.data.container_id}`);\n\n    if (list) {\n        createTree(list);\n    } else {\n        window.setTimeout(searchContainter, 500);\n    }\n}\n\nfunction createTree(container: any): void {\n    const clearSelect = (node: any) =\u003e {\n        node.setSelected(false);\n        Context.data.selected_element = undefined;\n    }\n\n    const structure: ISolutionStrucutre[] = Context.data.solution_structure;\n\n    /** Задаем иконки для дочерних элементов дерева, закрывающую и открывающую иконку ветки. */\n    TreeConfig.leaf_icon = `\u003ci _ngcontent-ubh-c693=\"\" class=\"elma-icons md-20\"\u003efile_type_text\u003c/i\u003e`;\n    TreeConfig.open_icon = `\u003ci _ngcontent-upa-c222=\"\" class=\"default elma-icons ng-star-inserted\" style=\"transform: rotate(90deg);\"\u003earrow_right\u003c/i\u003e`\n    TreeConfig.close_icon = `\u003ci _ngcontent-upa-c222=\"\" class=\"default elma-icons ng-star-inserted\"\u003earrow_right\u003c/i\u003e`;\n\n    var root = new TreeNode(\"Список доступных решений\");\n\n    root.on(\"select\", clearSelect);\n\n    const selected_element = {\n        select: () =\u003e { },\n        namespace: Context.data.selected_element?.namespace,\n        name: Context.data.selected_element?.name,\n        code: Context.data.selected_element?.code,\n    }\n\n    for (const solution of structure) {\n        const node = new TreeNode(solution.name, {\n            name: solution.name,\n            code: solution.code,\n            icon: solution.icon,\n        });\n\n        solution.apps.forEach((app: IApp) =\u003e {\n            const child = new TreeNode(app.name, {\n                name: app.name,\n                code: app.code,\n            });\n\n            child.on(\"select\", (node: any) =\u003e {\n                const options = node.getOptions();\n\n                Context.data.selected_element = {\n                    namespace: solution.code,\n                    name: `${solution.name} -\u003e ${options.name}`,\n                    code: options.code,\n                }\n            });\n\n            if (selected_element.code \u0026\u0026 selected_element.code == app.code) {\n                selected_element.select = () =\u003e {\n                    root.setExpanded(true);\n                    node.setExpanded(true);\n                    child.setSelected(true);\n                }\n            }\n\n            node.addChild(child);\n\n            leafs.push(child);\n        });\n\n        node.on(\"select\", clearSelect);\n\n        root.addChild(node);\n    }\n\n    tree = new TreeView(root, container);\n\n    tree.collapseAllNodes();\n    root.setExpanded(true);\n    selected_element.select();\n    tree.reload();\n}\n\nasync function get_documents_types(): Promise\u003cvoid\u003e {\n    const solutions = await getSolutionsRequest();\n\n    if (solutions.find(f =\u003e f.code == \"komandirovki\")) {\n        namespaces.push({\n            name: 'Командировки',\n            code: 'business_trips',\n            icon: `\u003ci class=\"elma-icons\"\u003evehicle_plane\u003c/i\u003e`,\n        });\n    }\n\n    if (solutions.find(f =\u003e f.code == \"otpuska\")) {\n        namespaces.push({\n            name: 'Отпуска',\n            code: 'absences',\n            icon: `\u003ci class=\"elma-icons\"\u003esystem_brightness\u003c/i\u003e`,\n        });\n        namespaces.push({\n            name: 'УРВ',\n            code: 'time_tracking',\n            icon: `\u003ci class=\"elma-icons\"\u003esystem_time\u003c/i\u003e`,\n        });\n    }\n\n    Context.data.solution_structure = await get_apps(namespaces);\n}\n\n/** Запрос на получение списка решений. */\nasync function getSolutionsRequest(): Promise\u003cISolution[]\u003e {\n    let solutions: ISolution[] = [];\n\n    try {\n        const request = await fetch(`${System.getBaseUrl()}/pub/v1/scheme/solutions`, {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${Context.data.token}`\n            }\n        });\n\n        if (!request.ok) {\n            throw new Error(JSON.stringify(request));\n        }\n\n        const response = await request.json();\n        solutions = response.result.result as ISolution[];\n        return solutions;\n\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nasync function get_apps(namespaces: INamespace[]): Promise\u003cISolutionStrucutre[] | undefined\u003e {\n    const solution_structure: ISolutionStrucutre[] = [];\n\n    try {\n        const requests = namespaces.map(f =\u003e fetch(`${System.getBaseUrl()}/pub/v1/scheme/namespaces/${f.code}/apps`, {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${Context.data.token}`\n            }\n        }));\n\n        await Promise.all(requests)\n            .then(responses =\u003e Promise.all(responses.map(r =\u003e r.json())))\n            .then(data =\u003e data.forEach((d, index) =\u003e {\n                const apps = d.result.result\n                    .filter((f: any) =\u003e f.type == \"DOCUMENT\" \u0026\u0026 f.__deletedAt == null)\n                    .map((f: any) =\u003e {\n                        return {\n                            name: f.name,\n                            code: f.code,\n                        }\n                    });\n\n                const namespace = namespaces[index];\n\n                solution_structure.push({\n                    name: namespace.name,\n                    code: namespace.code,\n                    icon: namespace.icon,\n                    apps: apps\n                });\n            }));\n\n        return solution_structure;\n    } catch (error) {\n        throw new Error(`Произошла ошибка во время выполнения запроса: ${JSON.stringify({ name: error.name, message: error.message, stack: error.stack })}`);\n    }\n}\n\nasync function selectNode(): Promise\u003cvoid\u003e {\n    collapseNodes();\n\n    if (!Context.data.selected_element) {\n        return;\n    }\n\n    const root = tree.getRoot();\n    const selected_namespace = root.getChildren().find((f: any) =\u003e f.getOptions().code == Context.data.selected_element.namespace);\n    const selected_app = selected_namespace.getChildren().find((f: any) =\u003e f.getOptions().code == Context.data.selected_element.code);\n\n    root.setExpanded(true);\n    selected_namespace.setExpanded(true);\n    selected_app.setSelected(true);\n    tree.reload();\n}\n\nasync function collapseNodes(): Promise\u003cvoid\u003e {\n    leafs.forEach(f =\u003e f.setSelected(false));\n\n    tree.collapseAllNodes();\n    tree.getRoot().setExpanded(true);\n    tree.reload();\n}",
    "clientScriptOptions": {
      "allowNamespace": true,
      "allowServer": true
    },
    "serverScripts": "/* Server scripts module */\n",
    "serverScriptOptions": {
      "allowNamespace": true
    }
  },
  "dataNamespace": "",
  "dataCode": "",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([\"sometree.js\"], function (exports_1, context_1) {\n    \"use strict\";\n    var sometree_js_1;\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        let tree;\n        let leafs = [];\n        const namespaces = [\n            {\n                name: 'КЭДО',\n                code: 'kedo',\n                icon: `\u003ci class=\"elma-icons\"\u003euser_many\u003c/i\u003e`,\n            },\n            {\n                name: 'Приказы и заявления',\n                code: 'personnel_documents',\n                icon: `\u003ci class=\"elma-icons\"\u003efile_type_bookmark\u003c/i\u003e`,\n            }\n        ];\n        function showLoader() {\n            Context.data.loader = true;\n        }\n        function hideLoader() {\n            Context.data.loader = false;\n        }\n        async function onInit() {\n            Context.data.container_id = generateGuid();\n            const token = await Namespace.app.settings.search().where(f =\u003e f.code.eq(\"api_key\")).first();\n            if (!token) {\n                hideLoader();\n                throw new Error('Не найден параметр со значением токена в настройках КЭДО. api_key not found');\n            }\n            if (token \u0026\u0026 !token.data.value) {\n                hideLoader();\n                throw new Error('Токен не указан в настройках КЭДО. api_key.value is undefined');\n            }\n            Context.data.token = token.data.value;\n            prepareData();\n        }\n        async function prepareData() {\n            showLoader();\n            await get_documents_types();\n            searchContainter();\n            hideLoader();\n        }\n        function generateGuid() {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r \u0026 0x3 | 0x8);\n                return v.toString(16);\n            });\n        }\n        function searchContainter() {\n            const list = document.querySelector(`#list-container-${Context.data.container_id}`);\n            if (list) {\n                createTree(list);\n            }\n            else {\n                window.setTimeout(searchContainter, 500);\n            }\n        }\n        function createTree(container) {\n            var _a, _b, _c;\n            const clearSelect = (node) =\u003e {\n                node.setSelected(false);\n                Context.data.selected_element = undefined;\n            };\n            const structure = Context.data.solution_structure;\n            sometree_js_1.TreeConfig.leaf_icon = `\u003ci _ngcontent-ubh-c693=\"\" class=\"elma-icons md-20\"\u003efile_type_text\u003c/i\u003e`;\n            sometree_js_1.TreeConfig.open_icon = `\u003ci _ngcontent-upa-c222=\"\" class=\"default elma-icons ng-star-inserted\" style=\"transform: rotate(90deg);\"\u003earrow_right\u003c/i\u003e`;\n            sometree_js_1.TreeConfig.close_icon = `\u003ci _ngcontent-upa-c222=\"\" class=\"default elma-icons ng-star-inserted\"\u003earrow_right\u003c/i\u003e`;\n            var root = new sometree_js_1.TreeNode(\"Список доступных решений\");\n            root.on(\"select\", clearSelect);\n            const selected_element = {\n                select: () =\u003e { },\n                namespace: (_a = Context.data.selected_element) === null || _a === void 0 ? void 0 : _a.namespace,\n                name: (_b = Context.data.selected_element) === null || _b === void 0 ? void 0 : _b.name,\n                code: (_c = Context.data.selected_element) === null || _c === void 0 ? void 0 : _c.code,\n            };\n            for (const solution of structure) {\n                const node = new sometree_js_1.TreeNode(solution.name, {\n                    name: solution.name,\n                    code: solution.code,\n                    icon: solution.icon,\n                });\n                solution.apps.forEach((app) =\u003e {\n                    const child = new sometree_js_1.TreeNode(app.name, {\n                        name: app.name,\n                        code: app.code,\n                    });\n                    child.on(\"select\", (node) =\u003e {\n                        const options = node.getOptions();\n                        Context.data.selected_element = {\n                            namespace: solution.code,\n                            name: `${solution.name} -\u003e ${options.name}`,\n                            code: options.code,\n                        };\n                    });\n                    if (selected_element.code \u0026\u0026 selected_element.code == app.code) {\n                        selected_element.select = () =\u003e {\n                            root.setExpanded(true);\n                            node.setExpanded(true);\n                            child.setSelected(true);\n                        };\n                    }\n                    node.addChild(child);\n                    leafs.push(child);\n                });\n                node.on(\"select\", clearSelect);\n                root.addChild(node);\n            }\n            tree = new sometree_js_1.TreeView(root, container);\n            tree.collapseAllNodes();\n            root.setExpanded(true);\n            selected_element.select();\n            tree.reload();\n        }\n        async function get_documents_types() {\n            const solutions = await getSolutionsRequest();\n            if (solutions.find(f =\u003e f.code == \"komandirovki\")) {\n                namespaces.push({\n                    name: 'Командировки',\n                    code: 'business_trips',\n                    icon: `\u003ci class=\"elma-icons\"\u003evehicle_plane\u003c/i\u003e`,\n                });\n            }\n            if (solutions.find(f =\u003e f.code == \"otpuska\")) {\n                namespaces.push({\n                    name: 'Отпуска',\n                    code: 'absences',\n                    icon: `\u003ci class=\"elma-icons\"\u003esystem_brightness\u003c/i\u003e`,\n                });\n                namespaces.push({\n                    name: 'УРВ',\n                    code: 'time_tracking',\n                    icon: `\u003ci class=\"elma-icons\"\u003esystem_time\u003c/i\u003e`,\n                });\n            }\n            Context.data.solution_structure = await get_apps(namespaces);\n        }\n        async function getSolutionsRequest() {\n            let solutions = [];\n            try {\n                const request = await fetch(`${System.getBaseUrl()}/pub/v1/scheme/solutions`, {\n                    method: \"GET\",\n                    headers: {\n                        \"Authorization\": `Bearer ${Context.data.token}`\n                    }\n                });\n                if (!request.ok) {\n                    throw new Error(JSON.stringify(request));\n                }\n                const response = await request.json();\n                solutions = response.result.result;\n                return solutions;\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n        }\n        async function get_apps(namespaces) {\n            const solution_structure = [];\n            try {\n                const requests = namespaces.map(f =\u003e fetch(`${System.getBaseUrl()}/pub/v1/scheme/namespaces/${f.code}/apps`, {\n                    method: \"GET\",\n                    headers: {\n                        \"Authorization\": `Bearer ${Context.data.token}`\n                    }\n                }));\n                await Promise.all(requests)\n                    .then(responses =\u003e Promise.all(responses.map(r =\u003e r.json())))\n                    .then(data =\u003e data.forEach((d, index) =\u003e {\n                    const apps = d.result.result\n                        .filter((f) =\u003e f.type == \"DOCUMENT\" \u0026\u0026 f.__deletedAt == null)\n                        .map((f) =\u003e {\n                        return {\n                            name: f.name,\n                            code: f.code,\n                        };\n                    });\n                    const namespace = namespaces[index];\n                    solution_structure.push({\n                        name: namespace.name,\n                        code: namespace.code,\n                        icon: namespace.icon,\n                        apps: apps\n                    });\n                }));\n                return solution_structure;\n            }\n            catch (error) {\n                throw new Error(`Произошла ошибка во время выполнения запроса: ${JSON.stringify({ name: error.name, message: error.message, stack: error.stack })}`);\n            }\n        }\n        async function selectNode() {\n            collapseNodes();\n            if (!Context.data.selected_element) {\n                return;\n            }\n            const root = tree.getRoot();\n            const selected_namespace = root.getChildren().find((f) =\u003e f.getOptions().code == Context.data.selected_element.namespace);\n            const selected_app = selected_namespace.getChildren().find((f) =\u003e f.getOptions().code == Context.data.selected_element.code);\n            root.setExpanded(true);\n            selected_namespace.setExpanded(true);\n            selected_app.setSelected(true);\n            tree.reload();\n        }\n        async function collapseNodes() {\n            leafs.forEach(f =\u003e f.setSelected(false));\n            tree.collapseAllNodes();\n            tree.getRoot().setExpanded(true);\n            tree.reload();\n        }\n        return {\n            showLoader,\n            hideLoader,\n            onInit,\n            prepareData,\n            generateGuid,\n            searchContainter,\n            createTree,\n            get_documents_types,\n            getSolutionsRequest,\n            get_apps,\n            selectNode,\n            collapseNodes\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [\n            function (sometree_js_1_1) {\n                sometree_js_1 = sometree_js_1_1;\n            }\n        ],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "showLoader",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "hideLoader",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "onInit",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "prepareData",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "generateGuid",
        "parameters": [],
        "type": ""
      },
      {
        "name": "searchContainter",
        "parameters": [],
        "type": ""
      },
      {
        "name": "createTree",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "get_documents_types",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "getSolutionsRequest",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "get_apps",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "selectNode",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "collapseNodes",
        "parameters": [],
        "type": "[object Object]"
      }
    ]
  },
  "__createdAt": "2024-04-23T10:16:48.81820848Z",
  "__createdBy": "099fd2a1-8125-406b-aaff-0db06d81aa40",
  "__updatedAt": "2024-04-23T10:16:48.81820848Z",
  "__updatedBy": "099fd2a1-8125-406b-aaff-0db06d81aa40",
  "__deletedAt": null
}
