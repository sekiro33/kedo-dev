{
  "__id": "018f09b8-d167-7f07-9fd7-1c6b5f90ca40",
  "namespace": "kedo_ext.work_with_candidate",
  "code": "_page",
  "__name": "Работа с кандидатом",
  "description": "",
  "extensionZoneCode": "",
  "sort": 0,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 31,
  "hidden": true,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "types": ["page"],
    "template": {
      "id": "2e97b551-8a84-4554-bb15-04af9f7d8995",
      "descriptor": "portal-page",
      "content": {
        "": [
          {
            "id": "fef3f954-3db5-4cc7-9996-d161f5348805",
            "descriptor": "portal-page-header",
            "values": {
              "__canRender": false
            },
            "content": {
              "[title]": []
            }
          },
          {
            "id": "45b7e13c-78d1-446b-b9a1-2a8696b0f39d",
            "descriptor": "portal-page-body",
            "content": {
              "": [
                {
                  "id": "16bd3896-cb88-415a-be6f-0ad73cdf05b9",
                  "descriptor": "portal-left-page-sidebar",
                  "values": {
                    "__canRender": false
                  },
                  "content": {
                    "": []
                  }
                },
                {
                  "id": "0f6b1a39-e16a-46ac-836a-2110af6ede86",
                  "descriptor": "portal-page-content",
                  "content": {
                    "": [
                      {
                        "id": "03b5bf62-6fd2-4d38-a6cc-f7c19ac4f9a3",
                        "descriptor": "code",
                        "values": {
                          "contentPlaceholder": "imports",
                          "html": "\u003clink rel=\"stylesheet\" href=\"\u003c%= UI.widget.filePath %\u003e/dark.min.css\"\u003e\u003c/link\u003e\n\u003clink rel=\"stylesheet\" href=\"\u003c%= UI.widget.filePath %\u003e/light.min.css\"\u003e\u003c/link\u003e\n\u003clink rel=\"stylesheet\" href=\"\u003c%= UI.widget.filePath %\u003e/vanilla-calendar.min.css\"\u003e\u003c/link\u003e\n\n\u003cscript type=\"text/javascript\" src=\"\u003c%= UI.widget.filePath %\u003e/vanilla-calendar.min.js\"\u003e\u003c/script\u003e",
                          "hideContent": true
                        }
                      },
                      {
                        "id": "b8e21529-c86c-4388-abc1-7547caa4bd79",
                        "descriptor": "code",
                        "values": {
                          "contentPlaceholder": "HTML",
                          "html": "\u003cscript type=\"text/javascript\"\u003e\n    function sendComment() {\n        \n    }\n\u003c/script\u003e\n\n\u003cdiv class=\"unemployed kedo-hidden\" id=\"empty-staff\"\u003e\n    \u003cdiv class=\"unemployed-text\"\u003e\n        \u003ch2\u003eВы еще не зарегистрированы в системе ELMA365 КЭДО\u003c/h2\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"kedo-modal kedo-hidden\"\u003e\n    \n\u003c/div\u003e\n\n\u003cdiv class=\"kedo_portal-container\"\u003e\n    \u003cdiv class=\"kedo_portal-header\"\u003e\n        \u003cdiv class=\"kedo_portal-header_logo\"\u003e\n            \u003csvg width=\"197\" height=\"22\" viewBox=\"0 0 197 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                \u003cpath d=\"M13.4283 17.9618H10.6641L14.0087 21.3065C18.0955 21.0072 21.3289 17.5898 21.3289 13.4282V10.6639H17.962V13.4282C17.962 15.9275 15.9277 17.9618 13.4283 17.9618Z\" fill=\"#5082E6\"/\u003e\n                \u003cpath d=\"M17.962 7.90257V10.6648L21.3067 7.32019C21.0074 3.23544 17.5899 0 13.4283 0H10.6641V3.36688H13.4283C15.9277 3.36688 17.962 5.40117 17.962 7.90257Z\" fill=\"#FABE00\"/\u003e\n                \u003cpath d=\"M7.90257 3.36709H10.6648L7.32019 0.0244751C3.23544 0.321732 0 3.74119 0 7.90278V10.6671H3.36688V7.90278C3.36688 5.40138 5.40117 3.36709 7.90257 3.36709Z\" fill=\"#E62D32\"/\u003e\n                \u003cpath d=\"M3.36606 13.4283V10.6641L0.0234375 14.0087C0.322716 18.0955 3.74015 21.3289 7.90175 21.3289H10.666V17.962H7.90175C5.40034 17.962 3.36606 15.9277 3.36606 13.4283Z\" fill=\"#5AD2FF\"/\u003e\n                \u003cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M155.357 16.9598C156.101 17.2627 156.968 17.4141 157.959 17.4141C158.992 17.4141 159.955 17.2214 160.85 16.8359C161.759 16.4504 162.551 15.9203 163.225 15.2457C163.9 14.5711 164.43 13.7864 164.815 12.8915C165.201 11.9828 165.394 11.0122 165.394 9.97961C165.394 8.94704 165.201 7.98331 164.815 7.08842C164.43 6.17975 163.9 5.38812 163.225 4.7135C162.551 4.03889 161.759 3.50884 160.85 3.12334C159.955 2.73785 158.992 2.5451 157.959 2.5451C156.968 2.5451 156.101 2.70343 155.357 3.02009C154.627 3.33674 154.022 3.68093 153.54 4.05266C152.962 4.49322 152.473 4.98886 152.074 5.53956L153.106 6.46887C153.437 6.00077 153.836 5.58775 154.304 5.22979C154.703 4.91313 155.206 4.6309 155.811 4.38308C156.417 4.1215 157.133 3.9907 157.959 3.9907C158.758 3.9907 159.494 4.12838 160.169 4.40373C160.843 4.66532 161.435 5.03016 161.945 5.49826C162.454 5.95259 162.867 6.49641 163.184 7.12972C163.514 7.76303 163.735 8.43764 163.845 9.15356H156.204V10.5992H163.845C163.762 11.3426 163.556 12.0448 163.225 12.7056C162.909 13.3527 162.489 13.924 161.966 14.4197C161.456 14.9015 160.857 15.2801 160.169 15.5555C159.494 15.8308 158.758 15.9685 157.959 15.9685C157.133 15.9685 156.41 15.8446 155.791 15.5968C155.171 15.3352 154.655 15.0461 154.242 14.7294C153.76 14.3715 153.347 13.9585 153.003 13.4904L151.97 14.4197C152.397 14.9841 152.906 15.4867 153.498 15.9272C154.008 16.2989 154.627 16.6431 155.357 16.9598ZM141.533 2.75162H139.984V17.2076H141.533V12.9741L144.424 9.87636L149.587 17.2076H151.446L145.457 8.74053L150.93 2.75162H148.968L141.533 10.9089V2.75162ZM166.232 15.762H167.058C167.54 15.2664 167.967 14.6193 168.338 13.8208C168.655 13.1324 168.951 12.2444 169.226 11.1567C169.502 10.0553 169.639 8.69923 169.639 7.08842V2.75162H178.519V15.762H180.275V20.3053H178.726V17.2076H167.781V20.3053H166.232V15.762ZM176.971 15.762V4.19722H171.188V7.08842C171.188 8.67169 171.057 10.0071 170.796 11.0948C170.548 12.1824 170.266 13.0773 169.949 13.7795C169.591 14.5918 169.178 15.2526 168.71 15.762H176.971ZM186.655 16.8359C187.564 17.2214 188.535 17.4141 189.567 17.4141C190.6 17.4141 191.563 17.2214 192.458 16.8359C193.367 16.4504 194.159 15.9203 194.833 15.2457C195.508 14.5711 196.038 13.7864 196.423 12.8915C196.809 11.9828 197.002 11.0122 197.002 9.97961C197.002 8.94704 196.809 7.98331 196.423 7.08842C196.038 6.17975 195.508 5.38812 194.833 4.7135C194.159 4.03889 193.367 3.50884 192.458 3.12334C191.563 2.73785 190.6 2.5451 189.567 2.5451C188.535 2.5451 187.564 2.73785 186.655 3.12334C185.76 3.50884 184.976 4.03889 184.301 4.7135C183.626 5.38812 183.096 6.17975 182.711 7.08842C182.325 7.98331 182.133 8.94704 182.133 9.97961C182.133 11.0122 182.325 11.9828 182.711 12.8915C183.096 13.7864 183.626 14.5711 184.301 15.2457C184.976 15.9203 185.76 16.4504 186.655 16.8359ZM191.88 15.5142C191.164 15.8171 190.393 15.9685 189.567 15.9685C188.741 15.9685 187.97 15.8171 187.254 15.5142C186.538 15.2113 185.912 14.7914 185.375 14.2545C184.852 13.7175 184.439 13.0842 184.136 12.3545C183.833 11.6248 183.681 10.8332 183.681 9.97961C183.681 9.12602 183.833 8.33438 184.136 7.6047C184.439 6.87502 184.852 6.24171 185.375 5.70477C185.912 5.16783 186.538 4.74792 187.254 4.44503C187.97 4.14215 188.741 3.9907 189.567 3.9907C190.393 3.9907 191.164 4.14215 191.88 4.44503C192.596 4.74792 193.216 5.16783 193.739 5.70477C194.276 6.24171 194.696 6.87502 194.998 7.6047C195.301 8.33438 195.453 9.12602 195.453 9.97961C195.453 10.8332 195.301 11.6248 194.998 12.3545C194.696 13.0842 194.276 13.7175 193.739 14.2545C193.216 14.7914 192.596 15.2113 191.88 15.5142ZM103.047 10.161C102.922 10.1124 102.825 10.0812 102.755 10.0673L102.984 9.98398C103.144 9.91455 103.328 9.79998 103.536 9.64029C103.752 9.47365 103.97 9.27229 104.193 9.03622C104.415 8.80015 104.602 8.48424 104.755 8.08847C104.915 7.69271 104.994 7.25181 104.994 6.76578C104.994 5.66875 104.574 4.73835 103.734 3.97459C102.894 3.20389 101.821 2.81854 100.516 2.81854C99.9606 2.81854 99.4225 2.89492 98.9018 3.04767C98.381 3.19348 97.9609 3.35664 97.6416 3.53717C97.3222 3.71075 97.0236 3.9121 96.7459 4.14123C96.4681 4.37036 96.2911 4.53005 96.2147 4.62032C96.1383 4.71058 96.0793 4.78348 96.0377 4.83903L97.1 6.01591L97.2458 5.84927C97.3361 5.73124 97.4749 5.5889 97.6624 5.42226C97.8568 5.24868 98.0825 5.07857 98.3394 4.91193C98.5963 4.73835 98.9191 4.59601 99.3079 4.48492C99.7037 4.36689 100.106 4.30787 100.516 4.30787C101.398 4.30787 102.096 4.54047 102.609 5.00567C103.13 5.47086 103.391 6.05757 103.391 6.76578C103.391 7.57814 103.134 8.22734 102.62 8.71336C102.113 9.19245 101.412 9.43199 100.516 9.43199H99.0163V10.9213H100.516C101.564 10.9213 102.412 11.2025 103.057 11.7649C103.71 12.3273 104.036 13.0078 104.036 13.8062C104.036 14.6255 103.72 15.3095 103.089 15.858C102.457 16.4065 101.599 16.6807 100.516 16.6807C100.016 16.6807 99.5371 16.6183 99.0788 16.4933C98.6275 16.3614 98.2595 16.2155 97.9748 16.0559C97.6902 15.8892 97.4263 15.7052 97.1833 15.5039C96.9403 15.2956 96.7841 15.1498 96.7146 15.0664C96.6452 14.9762 96.5966 14.9102 96.5688 14.8686L95.4961 15.9309L95.6731 16.1704C95.7981 16.3232 96.003 16.5106 96.2876 16.7328C96.5723 16.955 96.8986 17.1737 97.2666 17.389C97.6416 17.5973 98.1172 17.7812 98.6935 17.9409C99.2698 18.0937 99.8773 18.1701 100.516 18.1701C102.009 18.1701 103.217 17.7396 104.14 16.8786C105.064 16.0107 105.526 14.9866 105.526 13.8062C105.526 13.223 105.425 12.6988 105.224 12.2336C105.029 11.7615 104.81 11.4004 104.567 11.1504C104.324 10.9005 104.043 10.6852 103.724 10.5047C103.404 10.3173 103.179 10.2027 103.047 10.161ZM116.774 9.77568C115.822 8.8314 114.628 8.35926 113.191 8.35926C112.538 8.35926 112.007 8.43216 111.597 8.57797L115.118 3.02684H113.514L109.035 10.0673L108.754 10.4526C108.588 10.7234 108.414 11.1261 108.233 11.6608C108.06 12.1885 107.973 12.7231 107.973 13.2647C107.973 14.6603 108.456 15.8267 109.421 16.7641C110.386 17.7014 111.608 18.1701 113.087 18.1701C114.566 18.1701 115.788 17.7014 116.753 16.7641C117.725 15.8267 118.211 14.6637 118.211 13.2751C118.211 11.8795 117.732 10.713 116.774 9.77568ZM116.607 13.2751C116.607 14.2957 116.288 15.1185 115.649 15.7434C115.01 16.3683 114.156 16.6807 113.087 16.6807C112.025 16.6807 111.17 16.3683 110.525 15.7434C109.886 15.1185 109.567 14.2957 109.567 13.2751C109.567 12.2475 109.886 11.4212 110.525 10.7963C111.17 10.1714 112.025 9.859 113.087 9.859C114.156 9.859 115.01 10.1714 115.649 10.7963C116.288 11.4212 116.607 12.2475 116.607 13.2751ZM125.991 8.35926C127.428 8.35926 128.622 8.8314 129.574 9.77568C130.525 10.713 131 11.876 131 13.2647C131 14.7158 130.532 15.8962 129.594 16.8057C128.657 17.7153 127.421 18.1701 125.887 18.1701C125.276 18.1701 124.686 18.0937 124.116 17.9409C123.547 17.7812 123.078 17.5973 122.71 17.389C122.349 17.1737 122.03 16.955 121.752 16.7328C121.474 16.5106 121.28 16.3232 121.169 16.1704L120.981 15.9309L122.044 14.8686C122.071 14.9102 122.12 14.9762 122.189 15.0664C122.266 15.1498 122.422 15.2956 122.658 15.5039C122.901 15.7052 123.158 15.8892 123.429 16.0559C123.7 16.2155 124.054 16.3614 124.491 16.4933C124.935 16.6183 125.401 16.6807 125.887 16.6807C126.956 16.6807 127.81 16.3683 128.449 15.7434C129.088 15.1185 129.407 14.2923 129.407 13.2647C129.407 12.2579 129.088 11.4386 128.449 10.8068C127.817 10.1749 126.998 9.859 125.991 9.859C125.324 9.859 124.713 9.99439 124.158 10.2652C123.602 10.536 123.217 10.7963 123.002 11.0463L122.679 11.4525H121.512L122.044 3.02684H130.042V4.52658H123.429L123.106 9.21328C123.189 9.15773 123.307 9.08136 123.46 8.98415C123.613 8.88 123.936 8.75155 124.429 8.5988C124.929 8.4391 125.449 8.35926 125.991 8.35926ZM43.073 17.9623V15.156H35.1634V11.9189H41.1662V9.11051H35.1634V6.18888H42.8561V3.36835H31.9922V17.9623H43.073ZM46.5859 3.36835V17.9603H56.6049V15.1519H49.7571V3.36835H46.5859ZM72.5103 3.36835H75.3112V17.9623H72.1502V8.23301L67.4037 14.2057L62.6673 8.27345V17.9623H59.4961V3.36835H62.3481L67.4037 9.72921L72.5103 3.36835ZM81.0067 17.9623L82.2732 14.5231H87.9691L89.2355 17.9623H92.6134L86.8049 3.36835H83.4373L77.6289 17.9623H81.0067ZM83.3248 11.8158L85.1273 7.0219L86.9195 11.8158H83.3248Z\" fill=\"#233255\"/\u003e\n                \u003c/svg\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"kedo_portal-header_logout\"\u003e\n            Выйти\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"kedo_portal-main_section\"\u003e\n        \u003cdiv class=\"kedo_portal-main_section-background\"\u003e\n            \u003cdiv class=\"kedo_portal-main_section-path\"\u003e\n                \u003c!-- mock --\u003e\n                \u003cdiv class=\"kedo_portal-main_section-path_part active wait_section\"\u003e\n                    \n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-path_part\"\u003e\n                    \u003cp class=\"path_part-text\"\u003eШаг 1 Заполнение анкеты\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-path_part wait_section\"\u003e\n                    \n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-path_part\"\u003e\n                    \u003cp class=\"path_part-text\"\u003eШаг 2 Прохождение медосмотра\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-path_part wait_section\"\u003e\n                    \n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-path_part\"\u003e\n                    \u003cp class=\"path_part-text\"\u003eШаг 3 Предложение о работе\u003c/p\u003e\n                \u003c/div\u003e\n                \u003c!-- mock end --\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"kedo_portal-main_section-container\"\u003e\n                \u003cdiv class=\"kedo_portal-main_section-container_title\" \u003e\n                    \u003ch3 class=\"kedo_portal-main_section-container_title-text common-title\"\u003e\n\n                    \u003c/h3\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-container_title-descriptor\"\u003e\n                    \u003cp class=\"kedo_portal-main_section-container_title-descriptor-text common-descriptor\"\u003e\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"wizard_container kedo-hidden\"\u003e\n        \n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-container_main-info\"\u003e\n\n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-container_footer\"\u003e\n                    \u003cdiv class=\"kedo_portal-main_section-container_footer-buttons common-button-container\"\u003e\n                        \n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"kedo_portal-main_section-side_panel\"\u003e\n            \u003cdiv class=\"kedo_portal-main_section-side_panel-info_card common_info_card\"\u003e\n                \u003ch3 class=\"kedo_portal-main_section-side_panel-info_card-title common-title\"\u003e\n                    Возникли вопросы?\n                \u003c/h3\u003e\n                \u003cdiv class=\"kedo_portal-main_section-side_panel-info_card-user_info\"\u003e\n                    \u003cimg class=\"user-avatar\"/\u003e\n                    \u003cdiv class=\"kedo_portal-main_section-side_panel-info_card-user_info-name\"\u003e\n                        \u003ch4 class=\"user-name\"\u003e\n                            \n                        \u003c/h4\u003e\n                        \u003cp class=\"user-position\"\u003e\n                            \n                        \u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"kedo_portal-main_section-side_panel-info_card-user_info-contacts\"\u003e\n                        \u003cdiv class=\"contacts phone\"\u003e\n                            \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                                \u003cg clip-path=\"url(#clip0_3636_1436)\"\u003e\n                                    \u003cpath d=\"M15.1328 10.312L11.9581 8.95109C11.6731 8.82989 11.3565 8.80427 11.0558 8.87807C10.755 8.95187 10.4862 9.12112 10.2897 9.36046L9.26782 10.6105C7.62856 9.71703 6.28124 8.37047 5.38688 6.73171L6.63688 5.70984C6.87622 5.51309 7.04544 5.24416 7.11924 4.94324C7.19303 4.64233 7.16743 4.32562 7.04626 4.04046L5.68751 0.867965C5.55636 0.559222 5.32057 0.306597 5.02159 0.154506C4.72261 0.00241575 4.37958 -0.0394032 4.05282 0.0364024L1.10938 0.71484C0.793553 0.786515 0.511568 0.963658 0.309905 1.21707C0.108243 1.47048 -0.00106152 1.78504 7.7714e-06 2.1089C7.7714e-06 9.80453 6.24001 16.0027 13.8925 15.9995C14.2163 16.0005 14.5308 15.8911 14.7841 15.6894C15.0374 15.4877 15.2144 15.2056 15.2859 14.8898L15.9641 11.9455C16.0388 11.6189 15.9965 11.2766 15.8446 10.978C15.6927 10.6795 15.4408 10.4438 15.1328 10.312ZM13.8331 14.5023C7.03376 14.4711 1.53126 8.96828 1.50001 2.16515L4.33407 1.51203L5.64938 4.5814L3.52157 6.32234C4.97126 9.41609 6.59001 11.0295 9.67782 12.4786L11.4181 10.3502L14.4866 11.6661L13.8331 14.5023Z\" fill=\"#8C8C8C\"/\u003e\n                                \u003c/g\u003e\n                                \u003cdefs\u003e\n                                    \u003cclipPath id=\"clip0_3636_1436\"\u003e\n                                        \u003crect width=\"16\" height=\"16\" fill=\"white\"/\u003e\n                                    \u003c/clipPath\u003e\n                                \u003c/defs\u003e\n                            \u003c/svg\u003e\n                            \u003cp class=\"contacts-info phone-info\"\u003e\n                                \n                            \u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"contacts email\"\u003e\n                            \u003csvg width=\"17\" height=\"18\" viewBox=\"0 0 17 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                                \u003cpath d=\"M15.4062 2.625H1.59375C0.713535 2.625 0 3.33854 0 4.21875V13.7812C0 14.6615 0.713535 15.375 1.59375 15.375H15.4062C16.2865 15.375 17 14.6615 17 13.7812V4.21875C17 3.33854 16.2865 2.625 15.4062 2.625ZM15.4062 4.21875V5.5736C14.6618 6.17986 13.4749 7.12256 10.9375 9.1094C10.3784 9.54925 9.27071 10.6059 8.5 10.5936C7.72942 10.6061 6.6214 9.54908 6.06246 9.1094C3.52551 7.12286 2.33833 6.17996 1.59375 5.5736V4.21875H15.4062ZM1.59375 13.7812V7.61868C2.35457 8.22467 3.4335 9.07504 5.07802 10.3628C5.80374 10.934 7.07466 12.1951 8.5 12.1875C9.91834 12.1951 11.1732 10.9523 11.9217 10.3631C13.5662 9.07534 14.6454 8.22474 15.4062 7.61872V13.7812H1.59375Z\" fill=\"#8C8C8C\"/\u003e\n                            \u003c/svg\u003e\n                            \u003ca href=\"\" class=\"contacts-info email-info\"\u003e\n                                \n                            \u003c/a\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"kedo_portal-main_section-side_panel-additional_card common_info_card kedo-hidden\"\u003e\n                \u003ch3 class=\"kedo_portal-main_section-side_panel-additional_card-title common-title\"\u003e\n                    Полезная информация\n                \u003c/h3\u003e\n                \u003cp class=\"kedo_portal-main_section-side_panel-additional_card-description common-descriptor\"\u003e\n\n                \u003c/p\u003e\n                \u003cdiv class=\"kedo_portal-main_section-side_panel-additional_card-file common-file-field kedo-hidden\"\u003e\n                    \u003csvg class=\"file-svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                        \u003cpath d=\"M4.16406 15.8333V18.3333H15.8307V15.8333\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                        \u003cpath d=\"M15.8307 8.33332V5.83332L12.4974 1.66666H4.16406V8.33332\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                        \u003cpath d=\"M11.6641 1.66666V5.83332H15.8307\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                        \u003cpath d=\"M17.4974 8.33334H2.4974C2.03716 8.33334 1.66406 8.70644 1.66406 9.16668V15C1.66406 15.4602 2.03716 15.8333 2.4974 15.8333H17.4974C17.9576 15.8333 18.3307 15.4602 18.3307 15V9.16668C18.3307 8.70644 17.9576 8.33334 17.4974 8.33334Z\" stroke=\"#5082E6\" stroke-linejoin=\"round\"/\u003e\n                        \u003cpath d=\"M8.75 10.4167V13.75\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n                        \u003cpath d=\"M4.16406 10.4167V13.75\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n                        \u003cpath d=\"M13.334 13.75V10.4167H15.4173\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                        \u003cpath d=\"M13.334 12.5H15.4173\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                        \u003cpath d=\"M4.16406 10.4167H5.6224C6.19769 10.4167 6.66406 10.883 6.66406 11.4583C6.66406 12.0336 6.19769 12.5 5.6224 12.5H4.16406\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                        \u003cpath d=\"M8.75 10.4167H9.58333C10.5038 10.4167 11.25 11.1629 11.25 12.0833C11.25 13.0038 10.5038 13.75 9.58333 13.75H8.75\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                        \u003cpath d=\"M6.66406 5H8.33073\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n                    \u003c/svg\u003e\n                    \u003ca class=\"position_info-container-file_name common-link\"\u003e\n                        Памятка для кандидата\n                    \u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n            \n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003ctemplate class=\"loader_spinner-container-template\"\u003e\n    \u003cdiv class=\"loader_spinner-container\"\u003e\n        \u003csvg class=\"loader_spinner\" _ngcontent-ng-c2751611588=\"\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 26 26\" data-test=\"spinner\"\u003e\n            \u003cstyle _ngcontent-ng-c2751611588=\"\" type=\"text/css\"\u003e\n                .st0{opacity:0.6;}\n                .st1{opacity:0.5;}\n                .st2{opacity:0.4;}\n                .st3{opacity:0.3;}\n                .st4{opacity:0.8;}\n                .st5{opacity:0.9;}\n                .st6{opacity:0.1;}\n                .st7{opacity:0.2;}\n            \u003c/style\u003e\n            \u003cpath _ngcontent-ng-c2751611588=\"\" d=\"M13 3v-2c-2.7 0-5.4.9-7.7 2.8l-.8.7 1.4 1.4c2-1.9 4.5-2.9 7.1-2.9z\" class=\"st0\"\u003e\u003c/path\u003e\u003cpath _ngcontent-ng-c2751611588=\"\" d=\"M5.9 5.9l-1.4-1.4c-2.3 2.3-3.5 5.4-3.5 8.5h2c0-2.6 1-5.1 2.9-7.1z\" class=\"st1\"\u003e\u003c/path\u003e\u003cpath _ngcontent-ng-c2751611588=\"\" d=\"M3 13h-2c0 2.7.9 5.4 2.8 7.7l.7.8 1.4-1.4c-1.9-2-2.9-4.5-2.9-7.1z\" class=\"st2\"\u003e\u003c/path\u003e\u003cpath _ngcontent-ng-c2751611588=\"\" d=\"M5.9 20.1l-1.4 1.4c2.3 2.3 5.4 3.5 8.5 3.5v-2c-2.6 0-5.1-1-7.1-2.9z\" class=\"st3\"\u003e\u003c/path\u003e\u003cpath _ngcontent-ng-c2751611588=\"\" d=\"M20.1 5.9l1.4-1.4c-2.3-2.3-5.4-3.5-8.5-3.5v2c2.6 0 5.1 1 7.1 2.9z\" class=\"st4\"\u003e\u003c/path\u003e\u003cpath _ngcontent-ng-c2751611588=\"\" d=\"M23 13h2c0-2.7-.9-5.4-2.8-7.7l-.7-.8-1.4 1.4c1.9 2 2.9 4.5 2.9 7.1z\" class=\"st5\"\u003e\u003c/path\u003e\u003cpath _ngcontent-ng-c2751611588=\"\" d=\"M20.1 20.1l1.4 1.4c2.3-2.3 3.5-5.4 3.5-8.5h-2c0 2.6-1 5.1-2.9 7.1z\" class=\"st6\"\u003e\u003c/path\u003e\u003cpath _ngcontent-ng-c2751611588=\"\" d=\"M20.7 22.2l.8-.7-1.4-1.4c-2 2-4.5 2.9-7.1 2.9v2c2.7 0 5.4-.9 7.7-2.8z\" class=\"st7\"\u003e\n            \u003c/path\u003e\n        \u003c/svg\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"electronic_agreement_container-template\"\u003e\n    \u003cdiv class=\"electronic_agreement_container modal-container\"\u003e\n        \u003cdiv class=\"electronic_agreement_container-title modal-title common-title\"\u003e\n            Согласие на обработку персональных данных\n        \u003c/div\u003e\n        \u003cdiv class=\"electronic_agreement_container-descriptor\"\u003e\n            \u003cp class=\"electronic_agreement_container-descriptor-text common-descriptor\"\u003e\n                Для дальнейшего взаимодействия на портале КЭДО необходимо дать согласие на обработку персональных данных и ознакомиться с \u003ca class=\"electronic_agreement_container-license common-link\"\u003eлицензионным соглашением\u003c/a\u003e\n            \u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"electronic_agreement_container-checker\"\u003e\n            \u003cdiv class=\"electronic_agreement_container-checkbox common-checkbox\" onclick=\"setChecked(this)\"\u003e\n\n            \u003c/div\u003e\n            \u003cp class=\"electronic_agreement_container-checker-descriptor common-descriptor\"\u003e\n                Я даю \u003ca class=\"electronic_agreement_container-checker-agreement common-link inactive\"\u003eсогласие\u003c/a\u003e на обработку персональных данных в соответствии с \u003ca class=\"electronic_agreement_container-checker-agreement common-link inactive\"\u003eполитикой конфиденциальности\u003c/a\u003e\n            \u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"electronic_agreement_container-buttons common-button-container\"\u003e\n            \u003cbutton data-index=\"2\" onclick=\"\u003c%= Scripts %\u003e.closeContainer(this, 'electronic_agreement_container', true)\" class=\"electronic_agreement_container-button common-button primary\"\u003eОтправить\u003c/button\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"staff_correction_container-template\"\u003e\n    \u003cdiv class=\"staff_correction_container modal-container\"\u003e\n        \u003cdiv onclick=\"\u003c%= Scripts %\u003e.closeContainer(this, 'staff_correction_container', true)\" class=\"staff_correction_container-cross\"\u003e✖\u003c/div\u003e\n        \u003cdiv class=\"staff_correction_container-title modal-title common-title\"\u003e\n            Требуется уточнение\n        \u003c/div\u003e\n        \u003cdiv class=\"staff_correction_container-descriptor\"\u003e\n            \u003cp class=\"staff_correction_container-descriptor-text common-descriptor\"\u003e\n                Уточните Ваш вопрос и представитель компании свяжется с Вами для ответа\n            \u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"staff_correction_container-comment_section\"\u003e\n            \u003ctextarea placeholder=\"Ваш комментарий\" class=\"staff_correction-comment_section-input\"\u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"staff_correction_container-buttons common-button-container\"\u003e\n            \u003cbutton class=\"staff_correction_container-button common-button primary\"\u003eОтправить\u003c/button\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"position_info-container-template\"\u003e\n    \u003cdiv class=\"position_info-container common-form-container\"\u003e\n        \u003cdiv class=\"position_info-container-file common-file-field kedo-hidden\"\u003e\n            \u003csvg class=\"file-svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                \u003cpath d=\"M4.16406 15.8333V18.3333H15.8307V15.8333\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                \u003cpath d=\"M15.8307 8.33332V5.83332L12.4974 1.66666H4.16406V8.33332\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                \u003cpath d=\"M11.6641 1.66666V5.83332H15.8307\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                \u003cpath d=\"M17.4974 8.33334H2.4974C2.03716 8.33334 1.66406 8.70644 1.66406 9.16668V15C1.66406 15.4602 2.03716 15.8333 2.4974 15.8333H17.4974C17.9576 15.8333 18.3307 15.4602 18.3307 15V9.16668C18.3307 8.70644 17.9576 8.33334 17.4974 8.33334Z\" stroke=\"#5082E6\" stroke-linejoin=\"round\"/\u003e\n                \u003cpath d=\"M8.75 10.4167V13.75\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n                \u003cpath d=\"M4.16406 10.4167V13.75\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n                \u003cpath d=\"M13.334 13.75V10.4167H15.4173\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                \u003cpath d=\"M13.334 12.5H15.4173\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                \u003cpath d=\"M4.16406 10.4167H5.6224C6.19769 10.4167 6.66406 10.883 6.66406 11.4583C6.66406 12.0336 6.19769 12.5 5.6224 12.5H4.16406\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                \u003cpath d=\"M8.75 10.4167H9.58333C10.5038 10.4167 11.25 11.1629 11.25 12.0833C11.25 13.0038 10.5038 13.75 9.58333 13.75H8.75\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n                \u003cpath d=\"M6.66406 5H8.33073\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n            \u003c/svg\u003e\n            \u003ca class=\"position_info-container-file_name common-link\"\u003e\n                Описание позиции positionName\n            \u003c/a\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"position_info-container-description common-descriptor-container\"\u003e\n            \u003ch4 class=\"position_info-container-desctiption_title\"\u003e\n                Описание позиции \"positionName\"\n            \u003c/h4\u003e\n            \u003cp class=\"position_info-container-description_text common-descriptor\"\u003e\n\n            \u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"file_line-template\"\u003e\n    \u003cdiv class=\"file_line-file common-file-field kedo-hidden\"\u003e\n        \u003csvg class=\"file-svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n            \u003cpath d=\"M4.16406 15.8333V18.3333H15.8307V15.8333\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n            \u003cpath d=\"M15.8307 8.33332V5.83332L12.4974 1.66666H4.16406V8.33332\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n            \u003cpath d=\"M11.6641 1.66666V5.83332H15.8307\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n            \u003cpath d=\"M17.4974 8.33334H2.4974C2.03716 8.33334 1.66406 8.70644 1.66406 9.16668V15C1.66406 15.4602 2.03716 15.8333 2.4974 15.8333H17.4974C17.9576 15.8333 18.3307 15.4602 18.3307 15V9.16668C18.3307 8.70644 17.9576 8.33334 17.4974 8.33334Z\" stroke=\"#5082E6\" stroke-linejoin=\"round\"/\u003e\n            \u003cpath d=\"M8.75 10.4167V13.75\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n            \u003cpath d=\"M4.16406 10.4167V13.75\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n            \u003cpath d=\"M13.334 13.75V10.4167H15.4173\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n            \u003cpath d=\"M13.334 12.5H15.4173\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n            \u003cpath d=\"M4.16406 10.4167H5.6224C6.19769 10.4167 6.66406 10.883 6.66406 11.4583C6.66406 12.0336 6.19769 12.5 5.6224 12.5H4.16406\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n            \u003cpath d=\"M8.75 10.4167H9.58333C10.5038 10.4167 11.25 11.1629 11.25 12.0833C11.25 13.0038 10.5038 13.75 9.58333 13.75H8.75\" stroke=\"#5082E6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/\u003e\n            \u003cpath d=\"M6.66406 5H8.33073\" stroke=\"#5082E6\" stroke-linecap=\"round\"/\u003e\n        \u003c/svg\u003e\n        \u003ca class=\"file_line-file_name common-link\"\u003e\n            \n        \u003c/a\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003c!-- \u003ctemplate class=\"final_step-container-template\"\u003e\n    \u003cdiv class=\"final_step-container common-form-container\"\u003e\n        \u003cp class=\"final_step-container-position_name\"\u003e\n            Кандидат на позицию - positionName\n        \u003c/p\u003e\n        \u003cdiv class=\"final_step-container-file common-file-field kedo-hidden\"\u003e\n\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e --\u003e\n\n\u003ctemplate class=\"common_field-template\"\u003e\n    \u003cdiv class=\"common_field\"\u003e\n        \u003cp class=\"common_field-label\"\u003e\n\n        \u003c/p\u003e\n        \u003cdiv class=\"common_field-input-container\"\u003e\n            \u003cinput class=\"common_field-input\" autocomplete=\"no\" type=\"text\"/\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"simple_field-template\"\u003e\n    \u003cdiv class=\"simple_field\"\u003e\n        \u003cp class=\"simple_field-text\"\u003e\n\n        \u003c/p\u003e\n        \u003cp class=\"simple_field-description common-descriptor\"\u003e\n\n        \u003c/p\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"common_date-template\"\u003e\n    \u003cdiv class=\"common_date\"\u003e\n        \u003csvg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n            \u003cg clip-path=\"url(#clip0_4486_1930)\"\u003e\n                \u003cpath d=\"M14.7857 2H13.0714V0.375C13.0714 0.16875 12.8786 0 12.6429 0H11.2143C10.9786 0 10.7857 0.16875 10.7857 0.375V2H6.21429V0.375C6.21429 0.16875 6.02143 0 5.78571 0H4.35714C4.12143 0 3.92857 0.16875 3.92857 0.375V2H2.21429C1.26786 2 0.5 2.67188 0.5 3.5V14.5C0.5 15.3281 1.26786 16 2.21429 16H14.7857C15.7321 16 16.5 15.3281 16.5 14.5V3.5C16.5 2.67188 15.7321 2 14.7857 2ZM14.5714 14.5H2.42857C2.31071 14.5 2.21429 14.4156 2.21429 14.3125V5H14.7857V14.3125C14.7857 14.4156 14.6893 14.5 14.5714 14.5Z\" fill=\"#8C8C8C\"/\u003e\n            \u003c/g\u003e\n            \u003cdefs\u003e\n                \u003cclipPath id=\"clip0_4486_1930\"\u003e\n                    \u003crect width=\"16\" height=\"16\" fill=\"white\" transform=\"translate(0.5)\"/\u003e\n                \u003c/clipPath\u003e\n            \u003c/defs\u003e\n        \u003c/svg\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"common_category-container-template\"\u003e\n    \u003cdiv class=\"common_category-container kedo-hidden\"\u003e\n\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"common_file-container-template\"\u003e\n    \u003cdiv class=\"common_file-container\"\u003e\n        \u003cinput class=\"file_input\" type=\"file\" hidden/\u003e\n        \u003clabel class=\"common_file-field\"\u003e\n            +Файл\n        \u003c/label\u003e\n        \u003cdiv class=\"file_input-name kedo-hidden\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"file_input-delete kedo-hidden\"\u003e\n            \u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                \u003cpath d=\"M14.8929 18.875H15.5357C15.621 18.875 15.7027 18.8421 15.763 18.7835C15.8233 18.7249 15.8571 18.6454 15.8571 18.5625V7.9375C15.8571 7.85462 15.8233 7.77513 15.763 7.71653C15.7027 7.65792 15.621 7.625 15.5357 7.625H14.8929C14.8076 7.625 14.7259 7.65792 14.6656 7.71653C14.6053 7.77513 14.5714 7.85462 14.5714 7.9375V18.5625C14.5714 18.6454 14.6053 18.7249 14.6656 18.7835C14.7259 18.8421 14.8076 18.875 14.8929 18.875ZM8.46429 18.875H9.10714C9.19239 18.875 9.27415 18.8421 9.33443 18.7835C9.39471 18.7249 9.42857 18.6454 9.42857 18.5625V7.9375C9.42857 7.85462 9.39471 7.77513 9.33443 7.71653C9.27415 7.65792 9.19239 7.625 9.10714 7.625H8.46429C8.37904 7.625 8.29728 7.65792 8.237 7.71653C8.17672 7.77513 8.14286 7.85462 8.14286 7.9375V18.5625C8.14286 18.6454 8.17672 18.7249 8.237 18.7835C8.29728 18.8421 8.37904 18.875 8.46429 18.875ZM20.6786 4.5H16.5L15.15 2.75C14.9704 2.51713 14.7374 2.32813 14.4696 2.19795C14.2018 2.06777 13.9065 2 13.6071 2L10.3929 2C10.0935 2 9.79817 2.06777 9.53037 2.19795C9.26258 2.32813 9.02964 2.51713 8.85 2.75L7.5 4.5H3.32143C3.23618 4.5 3.15442 4.53292 3.09414 4.59153C3.03386 4.65013 3 4.72962 3 4.8125V5.4375C3 5.52038 3.03386 5.59987 3.09414 5.65847C3.15442 5.71708 3.23618 5.75 3.32143 5.75H4.28571V20.125C4.28571 20.6223 4.4889 21.0992 4.85058 21.4508C5.21226 21.8025 5.7028 22 6.21429 22H17.7857C18.2972 22 18.7877 21.8025 19.1494 21.4508C19.5111 21.0992 19.7143 20.6223 19.7143 20.125V5.75H20.6786C20.7638 5.75 20.8456 5.71708 20.9059 5.65847C20.9661 5.59987 21 5.52038 21 5.4375V4.8125C21 4.72962 20.9661 4.65013 20.9059 4.59153C20.8456 4.53292 20.7638 4.5 20.6786 4.5ZM9.87857 3.5C9.93867 3.4226 10.0164 3.35976 10.1056 3.31639C10.1948 3.27302 10.2931 3.2503 10.3929 3.25H13.6071C13.7069 3.2503 13.8052 3.27302 13.8944 3.31639C13.9836 3.35976 14.0613 3.4226 14.1214 3.5L14.8929 4.5H9.10714L9.87857 3.5ZM18.4286 20.125C18.4286 20.2908 18.3608 20.4497 18.2403 20.5669C18.1197 20.6842 17.9562 20.75 17.7857 20.75H6.21429C6.04379 20.75 5.88028 20.6842 5.75972 20.5669C5.63916 20.4497 5.57143 20.2908 5.57143 20.125V5.75H18.4286V20.125ZM11.6786 18.875H12.3214C12.4067 18.875 12.4884 18.8421 12.5487 18.7835C12.609 18.7249 12.6429 18.6454 12.6429 18.5625V7.9375C12.6429 7.85462 12.609 7.77513 12.5487 7.71653C12.4884 7.65792 12.4067 7.625 12.3214 7.625H11.6786C11.5933 7.625 11.5116 7.65792 11.4513 7.71653C11.391 7.77513 11.3571 7.85462 11.3571 7.9375V18.5625C11.3571 18.6454 11.391 18.7249 11.4513 18.7835C11.5116 18.8421 11.5933 18.875 11.6786 18.875Z\" fill=\"#E62D32\"/\u003e\n            \u003c/svg\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"common_category-item-template\"\u003e\n    \u003cdiv class=\"common_category-item\"\u003e\n\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"wizard_container-template\"\u003e\n    \u003cdiv class=\"wizard_container\"\u003e\n        \n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"wizard_step-template\"\u003e\n    \u003cdiv class=\"wizard_step\"\u003e\n        \u003cdiv class=\"wizard_step-icon\"\u003e\n            \n        \u003c/div\u003e\n        \u003cp class=\"wizard_step-label\"\u003e\n\n        \u003c/p\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"wizard_step-connect-template\"\u003e\n    \u003cdiv class=\"wizard_step-connect\"\u003e\n\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"info_svg-template\"\u003e\n    \u003cdiv class=\"info_svg_container\"\u003e\n        \u003csvg class=\"info_svg\" width=\"145\" height=\"145\" viewBox=\"0 0 145 145\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n            \u003ccircle cx=\"72.5\" cy=\"72.5\" r=\"71.8349\" fill=\"#FAFAFA\" stroke=\"#D9D9D9\" stroke-width=\"1.33028\"/\u003e\n            \u003crect x=\"29.4902\" y=\"43.3208\" width=\"91.5094\" height=\"66.8019\" rx=\"4.57547\" fill=\"#D9D9D9\"/\u003e\n            \u003crect x=\"24.4575\" y=\"36.4575\" width=\"90.5943\" height=\"65.8868\" rx=\"4.11792\" fill=\"white\" stroke=\"#D9D9D9\" stroke-width=\"0.915094\"/\u003e\n            \u003ccircle cx=\"32.2355\" cy=\"43.3205\" r=\"2.74528\" fill=\"#D9D9D9\"/\u003e\n            \u003ccircle cx=\"39.5558\" cy=\"43.3205\" r=\"2.74528\" fill=\"#D9D9D9\"/\u003e\n            \u003ccircle cx=\"46.8781\" cy=\"43.3205\" r=\"2.74528\" fill=\"#D9D9D9\"/\u003e\n            \u003crect x=\"30\" y=\"55\" width=\"40\" height=\"34\" rx=\"4.57547\" fill=\"#D9D9D9\"/\u003e\n            \u003crect width=\"32.0283\" height=\"3.66038\" rx=\"1.83019\" transform=\"matrix(-1 0 0 1 107.273 58)\" fill=\"#D9D9D9\"/\u003e\n            \u003crect width=\"21.0472\" height=\"3.66038\" rx=\"1.83019\" transform=\"matrix(-1 0 0 1 96.293 66.2358)\" fill=\"#D9D9D9\"/\u003e\n            \u003crect width=\"31.1132\" height=\"3.66038\" rx=\"1.83019\" transform=\"matrix(-1 0 0 1 106.359 74)\" fill=\"#D9D9D9\"/\u003e\n            \u003crect width=\"21.0472\" height=\"3.66038\" rx=\"1.83019\" transform=\"matrix(-1 0 0 1 96.293 82.2358)\" fill=\"#D9D9D9\"/\u003e\n            \u003ccircle cx=\"49.5\" cy=\"67.5\" r=\"6.5\" fill=\"white\"/\u003e\n            \u003cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M36.4609 88.9999H63.4994C63.1629 81.8245 57.2388 76.1104 49.9802 76.1104C42.7215 76.1104 36.7975 81.8245 36.4609 88.9999Z\" fill=\"white\"/\u003e\n        \u003c/svg\u003e\n    \u003c/div\u003e\n\n\u003c/template\u003e\n\n\u003cstyle\u003e\n    *, p, h1, h2, h3, h4, h5 {\n        margin: 0;\n        padding: 0;\n        font-family: \"SF Pro Display\";\n        font-size: 16px;\n        --main-color: #5082E6;\n        --main-color-hover: #548dff;\n        --error-color: #E62D32;\n        --error-color-hover: #f9393c;\n        --inactive: #D9D9D9;\n        --default-delay: .3s;\n    }\n\n    .content-body__inner {\n        padding: 0 !important;\n    }\n\n    .loader_spinner-container {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background-color: #FFF;\n        top: 0;\n        left: 0;\n    }\n\n    .loader_spinner {\n        width: 24px;\n        height: 24px;\n        animation: spin 1s linear infinite;\n    }\n\n    @keyframes spin {\n        from {\n            transform: rotateZ(0deg)\n        }\n        to {\n            transform: rotateZ(360deg)\n        }\n    }\n\n    .kedo-hidden {\n        display: none;\n    }\n\n    .common-title {\n        color: black;\n        font-size: 20px;\n        font-weight: 600;\n        text-align: center;\n        line-height: 30px;\n    }\n\n    .common-descriptor {\n        font-weight: 400;\n        font-size: 15px;\n    }\n\n    .common-link {\n        font-weight: 500;\n        font-size: 15px;\n        color: var(--main-color);\n    }\n\n    .common-link:hover {\n        text-decoration: none;\n        color: var(--main-color-hover);\n        cursor: pointer;\n    }\n\n    .common-link.inactive {\n        color: black;\n        pointer-events: none;\n    }\n\n    .common-checkbox {\n        min-width: 16px;\n        min-height: 16px;\n        border: 1px solid #D9D9D9;\n        border-radius: 2px;\n        position: relative;\n    }\n\n    .common-checkbox:hover {\n        cursor: pointer;\n    }\n\n    .common-checkbox.checked::before {\n        top: 2px;\n        left: 3px;\n        position: absolute;\n        content: \"\";\n        min-width: 10px;\n        min-height: 7px;\n        border-left: 2px solid var(--main-color);\n        border-bottom: 2px solid var(--main-color);\n        transform: rotateZ(-45deg);\n    }\n\n    .common-button-container {\n        display: flex;\n        gap: 2rem;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .common-button {\n        border-radius: 4px;\n        padding: 8px 16px;\n        font-size: 17px;\n        font-weight: 600;\n        border: none;\n        color: white;\n        height: 4rem;\n        transition: color, background-color var(--default-delay) linear;\n    }\n\n    .common-button.primary {\n        background-color: var(--main-color);\n    }\n\n    .common-button.primary:hover {\n        background-color: var(--main-color-hover);\n    }\n\n    .common-button.common {\n        font-size: 15px;\n        font-weight: 400;\n        background-color: white;\n        color: var(--main-color);\n    }\n\n    .common-button.common:hover {\n        background-color: var(--main-color);\n        color: white;\n    }\n\n    .common-button.danger {\n        background-color: var(--error-color);\n    }\n\n    .common-button.danger:hover {\n        background-color: var(--error-color-hover);\n    }\n\n    .common-button.inactive {\n        background-color: var(--inactive);\n        pointer-events: none;\n    }\n\n    .common-button.inactive:hover {\n        background-color: var(--inactive);\n    }\n\n    .common-form-container {\n        display: flex;\n        flex-direction: column;\n        gap: 2rem;\n    }\n\n    .common-descriptor-container {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n    }\n\n    .common_info_card {\n        border: 1px solid #D9D9D9;\n        display: flex;\n        flex-direction: column;\n        padding: 2rem;\n        border-radius: 5px;\n        gap: 2rem;\n        position: relative;\n    }\n    \n    .common_info_card.kedo-hidden {\n        display: none;\n    }\n\n    .common-file-field {\n        display: flex;\n        gap: .5rem;\n    }\n\n    .common-file-field.kedo-hidden {\n        display: none;\n    }\n\n    .file-svg {\n        fill: none;\n    }\n\n    .common_field {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        width: 100%;\n        gap: 1rem;\n        position: relative;\n    }\n\n    .common_field * {\n        font-size: 15px;\n        font-weight: 400;\n    }\n\n    .common_field-label {\n        position: relative;\n        color: black;\n        flex-basis: 30%;\n    }\n\n    .common_field.required .common_field-label:after {\n        /* position: absolute;\n        content: \"*\";\n        color: var(--error-color);\n        top: 0;\n        right: -1rem; */\n    }\n\n    .required_field {\n        color: var(--error-color);\n    }\n\n    .common_field-input {\n        border: 1px solid var(--inactive);\n        border-radius: 4px;\n        padding: 5px 9px;\n        transition: box-shadow var(--default-delay) linear;\n    }\n\n    .common_field-input-container {\n        flex-grow: 1;\n        max-width: 415px;\n        position: relative;\n        width: 100%;\n    }\n\n    .common_field-input:focus {\n        box-shadow: 0px 0px 20px -5px rgba(84,141,255,1);\n    }\n\n    .common_field-input:invalid {\n        box-shadow: 0px 0px 5px 0px var(--error-color);\n        border: 1px solid red;\n    }\n\n    .common_field-input::placeholder {\n        color: var(--inactive);\n        text-align: start;\n    }\n\n    .simple_field {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: space-between;\n        gap: 2rem;\n    }\n\n    .simple_field-text {\n        font-size: 16px;\n        font-weight: 700;\n    }\n\n    .common_field-calendar_container {\n        position: absolute;\n        transform: rotateZ(0deg);\n        transition: transform var(--default-delay);\n        top: 3.2rem;\n        /* right: 0; */\n        max-width: 415px;\n        background-color: white;\n        z-index: 10;\n        border: 1px solid var(--inactive);\n        height: 30rem;\n        /* border-top: none; */\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n        visibility: visible;\n        transform-origin: top;\n        width: fit-content;\n    }\n\n    .vanilla-calendar-content {\n        display: flex;\n        flex-grow: 1;\n        flex-direction: column;\n        align-items: center\n    }\n\n\n    .vanilla-calendar-days {\n        display: grid;\n        flex-grow: 1;\n        grid-template-columns: repeat(7, 4rem);\n        align-items: center;\n        justify-items: center;\n    }\n\n    .vanilla-calendar-week {\n        margin-bottom: .5rem;\n        display: grid;\n        grid-template-columns: repeat(7, 4rem);\n        justify-items: center;\n    }\n\n    .common_field-calendar_container.hidden {\n        transform: rotateX(90deg);\n        visibility: visible;\n    }\n\n    .common_boolean {\n        justify-content: start;\n    }\n\n    .common_date {\n        position: absolute;\n        left: 103px;\n        top: 0;\n        width: auto;\n        height: 100%;\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: background-color var(--default-delay);\n        border-radius: 4px;\n    }\n    \n    .common_date:hover {\n        cursor: pointer;\n        background-color: var(--inactive);\n    }\n\n    .common_date-field .common_field-input {\n        max-width: 140px;\n    }\n\n    .common_field.common_category .common_field-input-container:after {\n        position: absolute;\n        content: url('data:image/svg+xml,\u003csvg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cg clip-path=\"url(%23clip0_4486_745)\"\u003e\u003cpath d=\"M16.3906 15.05L12.3594 11.0188C12.2875 10.9469 12.1938 10.9094 12.0938 10.9094H11.7719C12.8438 9.75 13.5 8.20312 13.5 6.5C13.5 2.90937 10.5906 0 7 0C3.40937 0 0.5 2.90937 0.5 6.5C0.5 10.0906 3.40937 13 7 13C8.70312 13 10.25 12.3438 11.4094 11.275V11.5938C11.4094 11.6938 11.45 11.7875 11.5188 11.8594L15.55 15.8906C15.6969 16.0375 15.9344 16.0375 16.0813 15.8906L16.3906 15.5813C16.5375 15.4344 16.5375 15.1969 16.3906 15.05ZM7 12C3.95937 12 1.5 9.54062 1.5 6.5C1.5 3.45937 3.95937 1 7 1C10.0406 1 12.5 3.45937 12.5 6.5C12.5 9.54062 10.0406 12 7 12Z\" fill=\"%238C8C8C\"/\u003e\u003c/g\u003e\u003cdefs\u003e\u003cclipPath id=\"clip0_4486_745\"\u003e\u003crect width=\"16\" height=\"16\" fill=\"white\" transform=\"translate(0.5)\"/\u003e\u003c/clipPath\u003e\u003c/defs\u003e\u003c/svg\u003e');\n        right: 1rem;\n        top: 25%;\n    }\n\n    .common_radio {\n        display: flex;\n        width: 100%;\n        max-width: 415px;\n    }\n\n    .common_radio-variant {\n        background-color: transparent;\n        color: #8C8C8C;\n        transition: background-color var(--default-delay);\n        padding: .5rem 1rem;\n        user-select: none;\n        border: 1px solid #8C8C8C;\n    }\n\n    .common_radio-variant:hover {\n        background-color: #fbfafa;\n        cursor: pointer;\n    }\n\n    .common_radio-variant.checked {\n        background-color: #F5F5F5;\n        color: black;\n    }\n\n    .common_radio-variant:last-child {\n        border-top-right-radius: 4px;\n        border-bottom-right-radius: 4px;\n        border-left: none;\n    }\n\n    .common_radio-variant:first-child {\n        border-top-left-radius: 4px;\n        border-bottom-left-radius: 4px;\n    }\n\n    .common_category-container {\n        transform: rotateX(0deg);\n        transform-origin: top;\n        transition: transform var(--default-delay);\n        display: flex;\n        flex-direction: column;\n        position: absolute;\n        right: 0;\n        max-width: 415px;\n        max-height: 20rem;\n        width: 100%;\n        overflow: auto;\n        top: 3rem;\n        z-index: 10;\n        border: 1px solid var(--inactive);\n        border-top: none;\n        border-radius: 5px;\n    }\n\n    .common_category-container.kedo-hidden {\n        transform: rotateX(90deg);\n    }\n\n    .common_category-item {\n        padding: 1rem 2rem;\n        background-color: white;\n        transition: background-color var(--default-delay);\n        user-select: none;\n        display: block;\n    }\n\n    .common_category-item:hover {\n        background-color: var(--inactive);\n        cursor: pointer;\n    }\n\n    .common_category-item.kedo-hidden {\n        display: none;\n    }\n\n    .common_file-container {\n        border-radius: 4px;\n        background-color: #FFF;\n        border: 2px dashed var(--inactive);\n        transition: border-color var(--default-delay);\n        display: flex;\n        align-items: center;\n        justify-content: flex-start;\n        width: 100%;\n        max-width: 415px;\n        gap: 1rem;\n    }\n\n    .common_file-container.hovered {\n        border-color: var(--main-color);\n    }\n\n    .common_file-container.hovered .common_file-field {\n        color: var(--main-color);\n    }\n\n    .common_file-container:not(.kedo-hidden):hover {\n        border-color: var(--main-color);\n    }\n\n    .common_file-container:not(.kedo-hidden):hover .common_file-field {\n        color: var(--main-color);\n    }\n\n    .common_file-container.kedo-hidden {\n        border: none;\n    }\n    \n    .common_file-container.kedo-hidden .common_file-field {\n        display: none;\n    }\n\n    .common_file-field {\n        margin-bottom: 0;\n        color: var(--inactive);\n        transition: color var(--default-delay);\n        width: 100%;\n        padding: .5rem;\n    }\n\n    .file_input.hidden {\n        display: none;\n    }\n\n    .file_input-name {\n        color: black;\n        transition: color: var(--default-delay);\n    }\n\n    .file_input-name:hover {\n        cursor: pointer;\n        user-select: none;\n        color: var(--main-color);\n    }\n\n    .file_input-name.kedo-hidden {\n        display: none;\n    }\n\n    .file_input-delete {\n        pointer-events: all;\n    };\n\n    .file_input-delete svg {\n        transition: fill var(--default-delay);\n    }\n\n    .file_input-delete:hover {\n        cursor: pointer;\n        pointer-events: all;\n    }\n\n    .file_input-delete:hover path {\n        fill: var(--error-color-hover);\n    }\n\n    .file_input-delete.kedo-hidden {\n        display: none;\n    }\n\n    .wizard_container {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .wizard_step {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        align-items: center;\n    }\n\n    .wizard_step-icon {\n        min-width: 24px;\n        min-height: 24px;\n        width: 24px;\n        height: 24px;\n        border-radius: 50%;\n        position: relative;\n        border: 1px solid var(--inactive);\n        transition: background-color var(--default-delay);\n    }\n\n    .wizard_step.active .wizard_step-icon {\n        background-color: var(--main-color);\n        border: none;\n    }\n\n    .wizard_step.active .wizard_step-icon:after {\n        position: absolute;\n        content: \"\";\n        border-color: white;\n        border-left: 2px solid white;\n        border-bottom: 2px solid white;\n        transform: rotateZ(-45deg);\n        min-width: 11.5px;\n        min-height: 7.5px;\n        top: 7px;\n        left: 6px;\n    }\n\n    .wizard_step-label {\n        font-size: 12px;\n        font-weight: 400;\n        color: var (--inactive);\n    }\n\n    .wizard_step.active .wizard_step-label {\n        color: black;\n    }\n\n    .wizard_step-connect {\n        flex-grow: 1;\n        height: 0;\n        border-bottom: 1px solid var(--inactive);\n        transition: border-color var(--default-delay);\n        position: relative;\n        align-self: start;\n        padding: .5rem 0;\n        max-width: 15rem;\n    }\n\n    .wizard_step-connect.active {\n        border-color: var(--main-color);\n    }\n\n    .wizard_step-connect:not(:last-child):after {\n        content: \"\";\n        margin: 0;\n        right: 0;\n        position: absolute;\n        min-width: 8px;\n        min-height: 8px;\n        top: 65%;\n        transform: rotateZ(-45deg);\n        border-right: 1px solid var(--inactive);\n        border-bottom: 1px solid var(--inactive);\n        transition: border-color var(--default-delay);\n    }\n\n    .wizard_step-connect.active:not(:last-child):after {\n        border-color: var(--main-color);\n    }\n\n    .unemployed {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 100;\n        background-color: #FFF;\n    }\n\n    .unemployed.kedo-hidden {\n        display: none;\n    }\n\n    .kedo-modal {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: #00000033;\n        z-index: 100;\n    }\n\n    .kedo-modal.kedo-hidden {\n        display: none;\n    }\n\n    .modal-container {\n        padding: 3rem;\n        border-radius: 5px;\n        display: flex;\n        flex-direction: column;\n        gap: 1.5rem;\n        max-width: 500px;\n        background-color: white;\n    }\n\n    .modal-title {\n        color: black;\n        font-size: 19px;\n    }\n\n    .electronic_agreement_container-checker {\n        display: flex;\n        gap: 1rem;\n        align-items: flex-start;\n    }\n\n    .staff_correction_container {\n        position: relative;\n    }\n\n    .staff_correction_container-cross {\n        top: 1rem;\n        right: 1rem;\n        position: absolute;\n        color: #0000004D;\n        transition: color var(--default-delay);\n    }\n\n    .staff_correction_container-cross:hover {\n        cursor: pointer;\n        color: var(--main-color);\n    }\n\n    .staff_correction_container-buttons {\n        justify-content: flex-start;\n    }\n\n    .kedo_portal-container {\n        display: flex;\n        flex-direction: column;\n        gap: 2rem;\n    }\n\n    .kedo_portal-header {\n        display: flex;\n        justify-content: space-between;\n        padding: 2rem;\n        background-color: #f5f5f5;\n        align-items: center;\n    }\n\n    .kedo_portal-header_logout {\n        color: var(--main-color);\n    }\n\n    .kedo_portal-header_logout:hover {\n        color: var(--main-color-hover);\n        cursor: pointer;\n    }\n\n    .kedo_portal-main_section {\n        padding: 2rem 2rem 0 2rem;\n        display: flex;\n        gap: 2rem;\n    }\n\n    .kedo_portal-main_section-background {\n        background-color: #D5E8F44D;\n        padding: 4rem;\n        display: flex;\n        flex-direction: column;\n        border-radius: 5px;\n        flex-grow: 1;\n        flex-basis: 80%;\n    }\n\n    .info_svg_container {\n        width: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .kedo_portal-main_section-container {\n        background-color: #FFF;\n        padding: 3rem 15%;\n        display: flex;\n        flex-direction: column;\n        gap: 2rem;\n        min-height: 60rem;\n    }\n\n    .kedo_portal-main_section-container.wait {\n        justify-content: center;\n    }\n\n    .kedo_portal-main_section-path {\n        display: flex;\n        gap: 1rem;\n    }\n\n    .kedo_portal-main_section-container_main-info {\n        display: flex;\n        flex-direction: column;\n        gap: 2rem;\n        align-items: center;\n    }\n\n    .kedo_portal-main_section-container_title-descriptor-text {\n        text-align: center;\n    }\n\n    .kedo_portal-main_section-side_panel {\n        max-width: 30%;\n        display: flex;\n        gap: 2rem;\n        flex-direction: column;\n    }\n\n    .kedo_portal-main_section-side_panel-info_card-title {\n        color: var(--main-color);\n        font-size: 24px;\n    }\n\n    .kedo_portal-main_section-side_panel-info_card-user_info {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n    }\n\n    .kedo_portal-main_section-side_panel-info_card-user_info-name {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        font-size: 18px;\n    }\n\n    .user-avatar {\n        width: 64px;\n        min-width: 64px;\n        height: 64px;\n        border-radius: 50%;\n        object-fit: cover;\n    }\n\n    .user-name {\n        font-size: 18px;\n    }\n\n    .user-position {\n        color: #8C8C8C;\n        font-weight: 300;\n    }\n\n    .contacts {\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n    }\n\n    .email-info {\n        color: var(--main-color);\n    }\n\n    .email-info:hover {\n        text-decoration: none;\n    }\n\n    .kedo_portal-main_section-side_panel-info_card-user_info-contacts {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n    }\n\n    .kedo_portal-main_section-path_part {\n        flex-basis: 5rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid;\n        border-color: #B8BFC5;\n        display: flex;\n        align-items: flex-end;\n        flex-grow: 1;\n    }\n\n    .wait_section {\n        flex-grow: 0;\n    }\n\n    .kedo_portal-main_section-path_part.active {\n        border-color: var(--main-color);\n    }\n\n    .kedo_portal-main_section-path_part.active p {\n        color: var(--main-color);\n    }\n\n    .path_part-text {\n        color: #B8BFC5;\n        font-weight: 600;\n        font-size: 14px;\n    }\n\n    @media (max-width: 1000px) {\n        .kedo_portal-main_section-side_panel-info_card-user_info {\n            flex-direction: column;\n        }\n    }\n\n    @media (max-width: 700px) {\n        .kedo_portal-main_section {\n            flex-direction: column;\n        }\n\n        .kedo_portal-main_section-path_part:not(.active) {\n            display: none;\n        }\n\n        .kedo_portal-main_section-path_part.active {\n            flex-grow: 1;\n            justify-content: center;\n        }\n\n        .kedo_portal-main_section-path_part.active p {\n            font-size: 10px;\n        }\n    }\n\n\u003c/style\u003e",
                          "hideContent": true
                        }
                      }
                    ]
                  }
                },
                {
                  "id": "a76ac29a-6911-4023-9a42-c9a6a387e5cb",
                  "descriptor": "portal-right-page-sidebar",
                  "values": {
                    "__canRender": false
                  },
                  "content": {
                    "": []
                  }
                }
              ]
            }
          },
          {
            "id": "1711d809-3296-406c-b59a-c5473ae56ba6",
            "descriptor": "portal-page-footer",
            "values": {
              "__canRender": false
            },
            "content": {
              "": []
            }
          }
        ]
      }
    },
    "fields": [
      {
        "code": "staff",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "staff",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Сотрудник",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "candidate",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "candidate_database",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Кандидат",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "file_field",
        "type": "FILE",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Поле для создания файла",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "settings_app",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "settings",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Приложение Настройки",
          "data": {},
          "input": true,
          "output": true
        }
      }
    ],
    "fieldVisibilityConditions": {
      "staff": {
        "enabled": false,
        "conditions": []
      },
      "__hidden": {
        "enabled": false,
        "conditions": []
      },
      "__outlet": {
        "enabled": false,
        "conditions": []
      },
      "__styles": {
        "enabled": false,
        "conditions": []
      },
      "__baseURL": {
        "enabled": false,
        "conditions": []
      },
      "__classes": {
        "enabled": false,
        "conditions": []
      },
      "candidate": {
        "enabled": false,
        "conditions": []
      },
      "__readOnly": {
        "enabled": false,
        "conditions": []
      },
      "file_field": {
        "enabled": false,
        "conditions": []
      },
      "settings_app": {
        "enabled": false,
        "conditions": []
      },
      "__relativeURL": {
        "enabled": false,
        "conditions": []
      },
      "__onMouseEnter": {
        "enabled": false,
        "conditions": []
      },
      "__onMouseLeave": {
        "enabled": false,
        "conditions": []
      },
      "__isConstValues": {
        "enabled": false,
        "conditions": []
      },
      "__renderContentAsync": {
        "enabled": false,
        "conditions": []
      },
      "__renderContentOnDemand": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {},
    "clientScripts": "declare const console: any, document: any, window: any, File: any, DataTransfer: any, FileReader: any, URL: any, VanillaCalendar: any;;\n\nenum FormId {\n    START = \"start\",\n    FILL_DATA = \"fill_data\"\n};\n\nenum ButtonType {\n    PRIMARY = \"primary\",\n    DANGER = \"danger\",\n    COMMON = \"common\"\n};\n\nenum FieldTypeEnum {\n    STRING = \"string\",\n    EMAIL = \"email\",\n    DATE = \"date\",\n    PHONE = \"phone\",\n    BOOLEAN = \"boolean\",\n    FILE = \"file\",\n    CATEGORY = \"category\",\n    SIMPLE = \"simple\"\n};\n\ntype candidateDataKey = keyof typeof CandidateDataManager.prototype.candidate.data;\n\ntype docData = {\n    docId: string,\n    docName: string,\n    required: boolean,\n    file?: FileItem,\n    fileName?: string\n};\n\ntype ButtonComponent = {\n    btnType: ButtonType,\n    text: string,\n    action: Function\n};\n\ntype KedoFormData = {\n    index: string\n    title?: string,\n    description?: string,\n    addData?: Function,\n    buttons?: ButtonComponent[],\n    replace?: Function,\n    wizard?: Wizard,\n    validate?: Function,\n    fields?: KedoFieldType[]\n};\n\ntype BoolVariants = {\n    name: string,\n    code: boolean\n};\n\ntype CategoryVariants = {\n    name: string,\n    code: string\n};\n\ntype KedoFieldType = {\n    typeCode: FieldTypeEnum,\n    required: boolean,\n    label: string,\n    appFieldCode?: string,\n    maxLength?: number,\n    regex?: string,\n    variants?: BoolVariants[] | CategoryVariants[],\n    placeholder?: string,\n    docId?: string,\n    id?: string,\n    replace?: Function,\n    needReplace?: boolean\n};\n\ntype WizardStep = {\n    label: string,\n    index: number,\n    isFinal: boolean,\n    fields?: KedoFieldType[],\n    title: string,\n    description: string,\n    buttons?: ButtonComponent[]\n    validate: Function\n};\n\ntype Wizard = {\n    steps: WizardStep[],\n};\n\nconst formDataObj: KedoFormData[] = [\n    {\n        index: \"1\",\n        title: \"Добро пожаловать на портал! В рамках трудоустройства в компанию companyName Вам необходимо заполнить анкету кандидата и приложить необходимые документы\",\n        description: \"После совершения всех действий нажмите «Продолжить» для перехода к следующему шагу\",\n        buttons: [\n            {\n                btnType: ButtonType.PRIMARY, text: \"Продолжить\",  async action() {\n                    await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.filling_out_questionnaire);\n                    await domManager.refreshForm(\"2\");\n                }\n            }\n        ],\n        replace: function (data: {replaceFrom: string, replaceTo: string, field: string}) {\n            return this[data.field].replace(data.replaceFrom, data.replaceTo);\n        },\n        addData: async function() {\n            if (!candidateDataManager.relatedPosition.data.description_position \u0026\u0026 !candidateDataManager.relatedPosition.data.description_position_file) {\n                console.log(\"no positon data\")\n                return;\n            };\n\n            function setPositionFile() {\n                positionFileLink.classList.toggle(\"kedo-hidden\");\n                candidateDataManager.relatedPosition.data.description_position_file!.getDownloadUrl().then(url =\u003e {\n                    positionLink.href = url;\n                });\n                positionLink.textContent = positionLink.textContent.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n            };\n\n            function setPositionDescription() {\n                positionDescription.innerHTML = candidateDataManager.relatedPosition.data.description_position;\n                positionTitle.textContent = positionTitle.textContent.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n            };\n\n            const positionInfoTemplate = domManager.positionTemplate.content.cloneNode(true);\n            const positionLink = positionInfoTemplate.querySelector(\".common-link\");\n            const positionFileLink = positionInfoTemplate.querySelector(\".common-file-field\");\n            const positionDescription = positionInfoTemplate.querySelector(\".common-descriptor\");\n            const positionTitle = positionInfoTemplate.querySelector(\".position_info-container-desctiption_title\");\n\n            candidateDataManager.relatedPosition.data.description_position_file \u0026\u0026 setPositionFile();\n\n            candidateDataManager.relatedPosition.data.description_position \u0026\u0026 setPositionDescription();\n\n            document.querySelector(\".kedo_portal-main_section-container_main-info\").appendChild(positionInfoTemplate);\n        }\n    },\n    {\n        index: \"2\",\n        wizard: {\n            steps: [\n                {\n                    label: \"Основное\",\n                    title: \"Персональные данные\",\n                    description: \"Проверьте и заполните недостающие данные\",\n                    index: 1,\n                    isFinal: false,\n                    fields: [\n                        {\n                            typeCode: FieldTypeEnum.STRING,\n                            required: true,\n                            label: \"Фамилия\",\n                            appFieldCode: \"lastname\"\n                        },\n                        {\n                            typeCode: FieldTypeEnum.STRING,\n                            required: true,\n                            label: \"Имя\",\n                            appFieldCode: \"firstname\"\n                        },\n                        {\n                            typeCode: FieldTypeEnum.STRING,\n                            required: false,\n                            label: \"Отчество\",\n                            appFieldCode: \"middlename\"\n                        },\n                        {\n                            typeCode: FieldTypeEnum.DATE,\n                            required: true,\n                            label: \"Дата рождения\",\n                            appFieldCode: \"date_of_birth\",\n                            regex: \"(0[1-9]|[12][0-9]|3[01])\\\\.(0[1-9]|1[012])\\\\.(19|20)\\\\d\\\\d\",\n                            placeholder: \"ДД.ММ.ГГГГ\",\n                            maxLength: 10\n                        },\n                        {\n                            typeCode: FieldTypeEnum.BOOLEAN,\n                            required: true,\n                            label: \"Пол\",\n                            appFieldCode: \"sex\",\n                            variants: [\n                                {\n                                    name: \"Мужской\",\n                                    code: true\n                                },\n                                {\n                                    name: \"Женский\",\n                                    code: false\n                                }\n                            ]\n                        },\n                        {\n                            typeCode: FieldTypeEnum.EMAIL,\n                            required: true,\n                            label: \"E-mail\",\n                            appFieldCode: \"email\",\n                            regex: \"([a-zA-Z0-9._\\\\-]+@[a-zA-Z0-9._\\\\-]+\\\\.[a-zA-Z0-9_\\\\-]+)\"\n                        },\n                        {\n                            typeCode: FieldTypeEnum.PHONE,\n                            required: true,\n                            label: \"Телефон\",\n                            appFieldCode: \"phone\",\n                            placeholder: \"Номер телефона в формате XXXXXXXXXXX (11 цифр)\",\n                            regex: \"(\\\\+7|8)\\\\d{10}\"\n                        }\n                    ],\n                    buttons: [\n                        {\n                            btnType: ButtonType.PRIMARY,\n                            text: \"Продолжить\",\n                            async action() {\n                                const fieldsToUpgrade = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(wizard =\u003e wizard.index === 1);\n                                const wizardStep = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(wizard =\u003e wizard.index === 2);\n                                await candidateDataManager.saveCandidateData(fieldsToUpgrade!.fields!.filter(field =\u003e field.typeCode !== FieldTypeEnum.SIMPLE \u0026\u0026 field.typeCode !== FieldTypeEnum.FILE));\n                                await domManager.getWizardForm(2, wizardStep!);\n                            }\n                        }\n                    ],\n                    validate: function(): boolean {\n                        let requiredFields: any[] = [];\n                        let field: KedoFieldType;\n\n                        for (field of this.fields) {\n                            const relatedNode = document.querySelector(`.required[data-app_code=${field.appFieldCode}]`);\n                            relatedNode \u0026\u0026 relatedNode.querySelector(\"input\") \u0026\u0026 requiredFields.push(relatedNode);\n                        };\n\n                        const genderVariant = document.querySelector(\".common_radio-variant.checked\");\n\n                        return requiredFields.every((node: any) =\u003e {\n                            const nodeInput = node.querySelector(\"input\");\n                            return nodeInput.validity.valid \u0026\u0026 nodeInput.value;\n                        }) \u0026\u0026 !!genderVariant;\n                    }\n                },\n                {\n                    title: \"Адрес регистрации\",\n                    buttons: [\n                        {\n                            btnType: ButtonType.COMMON,\n                            text: \"\u003c Назад\",\n                            async action() {\n                                const wizardStep = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(wizard =\u003e wizard.index === 1)\n                                await domManager.getWizardForm(1, wizardStep!);\n                            }\n                        },\n                        {\n                            btnType: ButtonType.PRIMARY,\n                            text: \"Продолжить\",\n                            async action() {\n                                const fieldsToUpgrade = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(wizard =\u003e wizard.index === 2);\n                                const wizardStep = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(wizard =\u003e wizard.index === 3);\n                                await candidateDataManager.saveCandidateData(fieldsToUpgrade!.fields!);\n                                await domManager.getWizardForm(3, wizardStep!);\n                            }\n                        }\n                    ],\n                    description: \"Заполните адрес регистрации\",\n                    label: \"Адрес регистрации\",\n                    index: 2,\n                    isFinal: false,\n                    fields: [\n                        {\n                            typeCode: FieldTypeEnum.CATEGORY,\n                            required: false,\n                            label: \"Регион\",\n                            appFieldCode: \"directory_of_regions\",\n                            variants: []\n                        },\n                        {\n                            typeCode: FieldTypeEnum.STRING,\n                            required: true,\n                            label: \"Город (посёлок, село)\",\n                            appFieldCode: \"city\"\n                        },\n                        {\n                            typeCode: FieldTypeEnum.STRING,\n                            required: true,\n                            label: \"Улица\",\n                            appFieldCode: \"street\"\n                        },\n                        {\n                            typeCode: FieldTypeEnum.STRING,\n                            required: true,\n                            label: \"Дом\",\n                            appFieldCode: \"home\"\n                        },\n                        {\n                            typeCode: FieldTypeEnum.STRING,\n                            required: false,\n                            label: \"Корпус\",\n                            appFieldCode: \"housing\"\n                        },\n                        {\n                            typeCode: FieldTypeEnum.STRING,\n                            required: false,\n                            label: \"Квартира\",\n                            appFieldCode: \"apartment\"\n                        },\n                    ],\n                    validate() {\n                        let requiredFields: any[] = [];\n                        let field: KedoFieldType;\n\n                        for (field of this.fields) {\n                            const relatedNode = document.querySelector(`.required[data-app_code=${field.appFieldCode}]`);\n                            relatedNode \u0026\u0026 relatedNode.querySelector(\"input\") \u0026\u0026 requiredFields.push(relatedNode);\n                        };\n\n                        return requiredFields.every((node: any) =\u003e {\n                            const nodeInput = node.querySelector(\"input\");\n                            return nodeInput.validity.valid \u0026\u0026 nodeInput.value;\n                        });\n                    }\n                },\n                {\n                    title: \"Документы\",\n                    label: \"Документы\",\n                    description: \"Пожалуйста отсканируйте или сфотографируйте необходимые для загрузки документы и прикрепите файлы. Обратите внимание, что сканы/фото документов должны быть хорошего качества\",\n                    index: 3,\n                    isFinal: true,\n                    fields: [\n                        \n                    ],\n                    buttons: [\n                        {\n                            btnType: ButtonType.COMMON,\n                            text: \"\u003c Назад\",\n                            async action() {\n                                const wizardStep = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(wizard =\u003e wizard.index === 2);\n                                await domManager.getWizardForm(2, wizardStep!);\n                            }\n                        },\n                        {\n                            btnType: ButtonType.PRIMARY,\n                            text: \"Продолжить\",\n                            async action() {\n                                const fieldsToUpgrade = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(wizard =\u003e wizard.index === 3);\n                                await candidateDataManager.saveCandidateData(fieldsToUpgrade!.fields!);\n                                await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.questionnaire_completed);\n                                await domManager.refreshForm(\"3\");\n                            }\n                        }\n                    ],\n                    validate() {\n                        let requiredFields = Array.from(document.querySelectorAll(\".required\"));\n\n                        return requiredFields.every((field: any) =\u003e {\n                            const fileField = field.querySelector(\".file_input\");\n\n                            if (!fileField) {\n                                const inputField = field.querySelector(\"input\");\n                                return inputField.validity.valid \u0026\u0026 inputField.value; \n                            };\n\n                            return fileField.files.length \u003e 0\n                        }) || requiredFields.length \u003c 1;\n                    }\n                },\n            ]\n        }\n    },{\n        index: \"3\",\n        title: \"Данные были отправлены на проверку\",\n        description: \"Дождитесь положительного результата. Оповещение придёт вам на почту или по СМС. Система автоматически переведет вас на следующий шаг\",\n        addData() {\n            const infoSvg = document.querySelector(\".info_svg-template\").content.cloneNode(true).querySelector(\".info_svg_container\");\n            domManager.formContainer.prepend(infoSvg)\n        }\n    },{\n        index: \"4\",\n        title: \"Медицинский осмотр\",\n        description: \"В случае получения результатов медосмотра в день прохождения укажите ту же дату\",\n        fields: [\n            {\n                label: \"Дата прохождения\",\n                required: true,\n                appFieldCode: \"medical_request_date\",\n                typeCode: FieldTypeEnum.DATE,\n                maxLength: 10,\n                placeholder: \"ДД.ММ.ГГГГ\"\n            },{\n                label: \"Дата получения медкнижки\",\n                required: true,\n                appFieldCode: \"medical_book_date\",\n                typeCode: FieldTypeEnum.DATE,\n                maxLength: 10,\n                placeholder: \"ДД.ММ.ГГГГ\"\n            },{\n                label: \"Результаты медосмотра\",\n                required: true,\n                appFieldCode: \"results_medical_examination\",\n                typeCode: FieldTypeEnum.FILE\n            }\n        ],\n        buttons: [\n            {\n                btnType: ButtonType.PRIMARY,\n                text: \"Продолжить\",\n                async action() {\n                    await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.medical_examination_completed);\n                    await domManager.refreshForm(\"5\")\n                }\n            }\n        ],\n        validate() {\n            const requiredFields = Array.from(document.querySelectorAll(\".required\"));\n            console.log(requiredFields)\n            \n            return requiredFields.length \u003c 1 || requiredFields.every((field: any) =\u003e {\n                const fieldInput = field.querySelector(\".common_field-input\");\n\n                if (fieldInput) {\n                    console.log(`checking input: `, field)\n                    return fieldInput.validity \u0026\u0026 fieldInput.validity.valid \u0026\u0026 fieldInput.value;\n                };\n\n                const fileInput = field.querySelector(\".file_input\");    \n                return fileInput.files \u0026\u0026 fileInput.files.length \u003e 0;\n            });\n        },\n        addData() {\n            const fileLine = document.querySelector(\".file_line-template\").content.cloneNode(true).querySelector(\".file_line-file\");\n            fileLine.querySelector(\".file_line-file_name\").textContent = \"Направление на медосмотр\";\n            domManager.mainInfoContainer.prepend(fileLine)\n        }\n    },{\n        index: \"5\",\n        title: \"Данные были отправлены на проверку\",\n        description: \"Дождитесь положительного результата. Оповещение придёт вам на почту или по СМС. Система автоматически переведет вас на следующий шаг\",\n        addData() {\n            const infoSvg = document.querySelector(\".info_svg-template\").content.cloneNode(true).querySelector(\".info_svg_container\");\n            domManager.formContainer.prepend(infoSvg);\n        }\n    },{\n        index: \"6\",\n        buttons: [\n            {\n                btnType: ButtonType.PRIMARY,\n                text: \"Подтвердить\",\n                async action() {\n                    await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.approved);\n                    await domManager.refreshForm(\"6\");\n                }\n            },\n            {\n                btnType: ButtonType.COMMON,\n                text: \"Требуется уточнение\",\n                async action() {\n                    const staffCorrectionContainer = document.querySelector(\".staff_correction_container-template\").content.cloneNode(true).querySelector(\".staff_correction_container\");\n                    const correctionButton = staffCorrectionContainer.querySelector(\".staff_correction_container-button\");\n                    correctionButton.addEventListener(\"click\", async () =\u003e {\n                        const correctionText = staffCorrectionContainer.querySelector(\".staff_correction-comment_section-input\").value;\n                        candidateDataManager.candidate.data.correction_comment = correctionText;\n                        await candidateDataManager.candidate.save();\n                        closeContainer(correctionButton, 'staff_correction_container', true);\n                        await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.clarifying_job_offer);\n                        await domManager.refreshForm(\"8\");\n                    });\n                    domManager.kedoModal.append(staffCorrectionContainer);\n                    domManager.kedoModal.classList.toggle(\"kedo-hidden\");\n                    \n                }\n            }\n        ],\n        title: \"Предложение о работе\",\n        description: \"Поздравляем Вас с Предложением о работе. Пожалуйста, ознакомьтесь с условиями ниже и дайте Ваш ответ в течение delay В случае необходимости изменения даты трудоустройства или уточнения условий нажмите 'Требуется уточнение'\",\n        fields: [\n            {\n                typeCode: FieldTypeEnum.SIMPLE,\n                label: \"Кандидат на позицию - positionName\",\n                appFieldCode: \"\",\n                required: false,\n                replace() {\n                    return this.label.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n                },\n                needReplace: false\n            },{\n                typeCode: FieldTypeEnum.DATE,\n                label: \"Дата выхода на работу\",\n                appFieldCode: \"date_employment\",\n                required: true,\n                placeholder: \"ДД.ММ.ГГГГ\",\n                maxLength: 10\n            },{\n                typeCode: FieldTypeEnum.SIMPLE,\n                label: 'Описание позиции positionName',\n                appFieldCode: \"\",\n                required: false,\n                id: \"position_field\",\n                replace() {\n                    return this.label.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n                },\n                needReplace: false\n            },{\n                typeCode: FieldTypeEnum.SIMPLE,\n                label: 'Распечатайте файл, подпишите Предложение о работе и приложите фото/скан подписанного предложения',\n                appFieldCode: \"\",\n                required: false,\n                id: \"file_info\"\n            },{\n                typeCode: FieldTypeEnum.FILE,\n                label: 'Подписанное предложение',\n                appFieldCode: \"signed_job_offer\",\n                required: false\n            }\n        ],\n        async addData() {\n            const positionInfo = candidateDataManager.relatedPosition.data.description_position;\n            const positionInfoContainer = document.createElement(\"p\");\n            const fileInfoContainer = document.querySelector(\"#file_info\");\n            const positionField = domManager.mainInfoContainer.querySelector(\"#position_field\")\n            const fileLine = document.querySelector(\".file_line-template\").content.cloneNode(true).querySelector(\".common-file-field\");\n            fileLine.querySelector(\".file_line-file_name\").textContent = \"Предложение о работе\";\n            fileLine.href = candidateDataManager.candidate.data.job_offer_candidate ? await candidateDataManager.candidate.data.job_offer_candidate.getDownloadUrl() : \"\";\n            positionInfoContainer.className = \"common-descriptor\";\n            positionInfoContainer.innerHTML = positionInfo;\n            fileInfoContainer.after(fileLine);\n            positionField.after(positionInfoContainer);\n        }\n    },\n    {\n        index: \"7\",\n        title: \"Поздравляем, Вы подтвердили предложение о работе!\",\n        fields: [\n            {\n                typeCode: FieldTypeEnum.SIMPLE,\n                required: false,\n                label: \"Дата оформления\",\n                replace() {\n                    return candidateDataManager.candidate.data.issue_date ? candidateDataManager.candidate.data.issue_date.format(\"DD.MM.YYYY\") : \"\"\n                },\n                needReplace: true\n            },\n            {\n                typeCode: FieldTypeEnum.SIMPLE,\n                required: false,\n                label: \"Дата первого рабочего дня\",\n                replace() {\n                    return candidateDataManager.candidate.data.date_employment ? candidateDataManager.candidate.data.date_employment.format(\"DD.MM.YYYY\") : \"\"\n                },\n                needReplace: true\n            },\n            {\n                typeCode: FieldTypeEnum.SIMPLE,\n                required: false,\n                label: \"Должность\",\n                replace() {\n                    return candidateDataManager.relatedPosition ? candidateDataManager.relatedPosition.data.__name : \"\"\n                },\n                needReplace: true\n            },\n            {\n                typeCode: FieldTypeEnum.SIMPLE,\n                label: 'Описание позиции positionName',\n                appFieldCode: \"\",\n                required: false,\n                id: \"position_field\",\n                replace() {\n                    return this.label.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n                },\n                needReplace: false\n            },\n            {\n                typeCode: FieldTypeEnum.SIMPLE,\n                label: 'Документы',\n                required: false,\n                id: \"documents_field\",\n                needReplace: false\n            },\n            {\n                typeCode: FieldTypeEnum.SIMPLE,\n                label: 'Дополнительная информация',\n                required: false,\n                id: \"additional_info\"\n            },\n        ],\n        async addData() {\n            const positionInfo = candidateDataManager.relatedPosition.data.description_position;\n            const positionInfoContainer = document.createElement(\"p\");\n            const positionField = domManager.mainInfoContainer.querySelector(\"#position_field\")\n            const documentsField = document.querySelector(\"#documents_field\");\n\n\n            positionInfoContainer.className = \"common-descriptor\";\n            positionInfoContainer.innerHTML = positionInfo;\n\n            positionField.after(positionInfoContainer);\n            \n            if (candidateDataManager.candidate.data.memo_for_candidate) {\n                const positionMemoFile = document.querySelector(\".file_line-template\").content.cloneNode(true).querySelector(\".common-file-field\");\n                positionMemoFile.href = await candidateDataManager.candidate.data.memo_for_candidate.getDownloadUrl();\n                positionMemoFile.querySelector(\".file_line-file_name\").textContent = \"Памятка о трудоустройстве\";\n                documentsField.after(positionMemoFile);\n            };\n\n            if (candidateDataManager.candidate.data.job_offer_candidate) {\n                const jobOfferFile = document.querySelector(\".file_line-template\").content.cloneNode(true).querySelector(\".common-file-field\");\n                jobOfferFile.href = await candidateDataManager.candidate.data.job_offer_candidate.getDownloadUrl();\n                jobOfferFile.querySelector(\".file_line-file_name\").textContent = \"Предложение о работе\";\n\n                documentsField.after(jobOfferFile);\n            };\n        }\n    },\n    {\n        index: \"8\",\n        title: \"Данные были отправлены на уточнение\",\n        description: \"Вы запросили уточнение. Пожалуйста, ожидайте, когда к Вам вернутся с ответом. Вам придет оповещение\",\n        addData() {\n            const infoSvg = document.querySelector(\".info_svg-template\").content.cloneNode(true).querySelector(\".info_svg_container\");\n            domManager.formContainer.prepend(infoSvg);\n        }\n    }\n];\n\nclass DomManager {\n    formContainer: any;\n    mainInfoContainer: any;\n    formFooter: any;\n    kedoModal: any;\n    formPath: any;\n    positionTemplate: any;\n    wizardContainer: any;\n    wizardStepTemplate: any;\n    wizardStepConnect: any;\n    textFieldTemplate: any;\n    simpleFieldTemplate: any;\n    nextButton: any;\n    sidePanelInfoCard: any;\n    frontIndex = 1;\n    formIndex = \"0\";\n    wizardIndex = 1;\n\n    setDate(event: any) {\n        const inputField = event.target.closest(\".common_field-input-container\").querySelector(\"input\");\n        const calendarContainer = event.target.closest(\".common_field-calendar_container\");\n        const [year, month, day] = [...event.target.dataset.calendarDay.split(\"-\")];\n\n        inputField.value = `${day}.${month}.${year}`;\n        calendarContainer.classList.toggle(\"hidden\");\n    };\n\n    formatIssuerCode(input:any) {\n        if (!input.value || input.value.includes(\"-\")) {\n            return;\n        };\n        \n        input.value = input.value.replace(/(\\d{3})/, \"$1-\");\n    };\n\n    formatSnils(input: any) {\n        if (!input.value) {\n            return;\n        };\n\n        switch (input.value.replace(/\\-/g, \"\").replace(\"\\s\", \"\").length) {\n            case 3:\n                input.value = input.value.replace(/(\\d{3})/, '$1-');\n                break;\n            case 6:\n                input.value = input.value.replace(/(\\d{3})\\-(\\d{3})/, '$1-$2-');\n                break;\n            case 9:\n                input.value = input.value.replace(/(\\d{3})\\-(\\d{3})\\-(\\d{3})/, '$1-$2-$3 ');\n                break;\n        };\n    };\n\n    formatDate(input: any) {\n        if (!input.value) {\n            return;\n        };\n\n        switch (input.value.replace(\".\", \"\").length) {\n            case 2:\n                input.value = input.value.replace(/(\\d{2})/, '$1.');\n                break;\n            case 4:\n                input.value = input.value.replace(/(\\d{2})\\.(\\d{2})/, '$1.$2.');\n                break;\n        };\n    };\n\n    async deleteFile(e: any) {\n        const target = e.target.classList.contains(\".file_input-delete\") ? e.target : e.target.closest(\".file_input-delete\");\n        const fileInput = target.parentElement.querySelector(\".file_input\");\n        const fileContainer = target.closest(\".common_file-container\");\n        const fileName = target.parentElement.querySelector(\".file_input-name\");\n        const fileId = target.parentElement.querySelector(\"input\").id.replace(\"id-\", \"\");\n        const table = candidateDataManager.candidate.data.table_personal_documents!;\n        const relatedRow = table.find(row =\u003e row.document_type.id === fileId);\n        //@ts-ignore\n        relatedRow!.file_document = undefined;\n        candidateDataManager.candidate.data.table_personal_documents = table;\n        await candidateDataManager.candidate.save();\n        fileContainer.classList.remove(\"kedo-hidden\");\n        fileName.classList.add(\"kedo-hidden\");\n        target.classList.add(\"kedo-hidden\");\n        fileInput.value = \"\";\n    }\n\n    downloadFile(e: any) {\n        const fileInput = e.target.parentElement.querySelector(\".file_input\");\n        const url = URL.createObjectURL(fileInput.files[0]);\n        const mockLink = document.createElement(\"a\");\n        mockLink.target = \"_blank\";\n        mockLink.href = url;\n        mockLink.download = fileInput.files[0].name || 'download';\n        mockLink.click();\n    };\n\n    async refreshForm(index: string) {\n        const currentForm = formDataObj.find(form =\u003e form.index === index);\n\n        if (currentForm) {\n            this.frontIndex = Number(index);\n            await this.renderForm(currentForm)\n        };\n    };\n\n    refreshMainContainer() {\n        this.formContainer.querySelector(\".kedo_portal-main_section-container_main-info\").innerHTML = \"\";\n        this.formContainer.querySelector(\".common-title\").innerHTML = \"\";\n        this.formContainer.querySelector(\".common-descriptor\").innerHTML = \"\";\n        this.formContainer.querySelector(\".common-button-container\").innerHTML = \"\";\n        this.mainInfoContainer.innerHTML = \"\";\n    };\n\n    renderButton(button: ButtonComponent) {\n        const newButton = document.createElement(\"button\");\n        newButton.classList.add(\"common-button\");\n        newButton.classList.add(button.btnType);\n        newButton.textContent = button.text;\n        button.action \u0026\u0026 newButton.addEventListener(\"click\", button.action);\n        if ([2, 4].indexOf(this.frontIndex) !== -1 \u0026\u0026 button.btnType === ButtonType.PRIMARY) {\n            newButton.classList.add(\"inactive\");\n            this.nextButton = newButton;\n        };\n        this.formFooter.querySelector(\".common-button-container\").appendChild(newButton);\n    };\n\n    async renderForm(currentForm: KedoFormData, dataToReplace?: {replaceFrom: string, replaceTo: string}) {\n        this.wizardContainer.innerHTML = \"\";\n        this.refreshMainContainer();\n\n        if (!currentForm.buttons) {\n            this.formContainer.classList.add(\"wait\")\n        } else {\n            this.formContainer.classList.remove(\"wait\");\n        };\n\n        if (currentForm.title) {\n            this.formContainer.querySelector(\".common-title\").textContent = currentForm.replace \u0026\u0026 dataToReplace ? currentForm.replace({...dataToReplace, field: \"title\"}) : currentForm.title;\n        };\n\n        if (currentForm.description) {\n            this.formContainer.querySelector(\".common-descriptor\").textContent = currentForm.replace \u0026\u0026 dataToReplace ? currentForm.replace({...dataToReplace, field: \"description\"}) : currentForm.description;\n        };\n\n        !this.wizardContainer.classList.contains(\"kedo-hidden\") \u0026\u0026 this.wizardContainer.classList.add(\"kedo-hidden\");\n        currentForm.wizard \u0026\u0026 await this.processWizard(currentForm.wizard);\n\n\n        const formSteps: any[] = Array.from(document.querySelectorAll(\".kedo_portal-main_section-path_part\"));\n\n        if (currentForm.fields) {\n            for (let field of currentForm.fields) {\n                let validate: Function | undefined;\n\n                if (currentForm.validate) {\n                    validate = currentForm.validate.bind(currentForm)\n                };\n\n                await this.renderField(field, validate);\n            };\n        };\n\n        currentForm.addData \u0026\u0026 currentForm.addData();\n        currentForm.buttons \u0026\u0026 currentForm.buttons.forEach(button =\u003e this.renderButton(button));\n\n        for (let i = 0; i + 1 \u003c= this.frontIndex; i++) {\n            formSteps[i] \u0026\u0026 !formSteps[i].classList.contains(\"active\") \u0026\u0026 formSteps[i].classList.toggle(\"active\");\n        };\n\n        formSteps.slice(this.frontIndex).forEach((node: any) =\u003e {\n            node.classList.contains(\"active\") \u0026\u0026 node.classList.remove(\"active\");\n        });\n\n        if (currentForm.validate) {\n            const fieldsIsValid = currentForm.validate();\n            fieldsIsValid \u0026\u0026 this.enableNextButton();\n            !fieldsIsValid \u0026\u0026 this.disableNextButton();\n        };\n\n        currentForm.validate \u0026\u0026 currentForm.validate();\n    };\n\n    async processWizard(wizard: Wizard) {\n        this.wizardContainer.classList.contains(\"kedo-hidden\") \u0026\u0026 this.wizardContainer.classList.remove(\"kedo-hidden\");\n\n        for (let step of wizard.steps) {\n            const wizardStep = this.getStep(step);\n            wizardStep.dataset[\"wizard_index\"] = step.index;\n            this.wizardContainer.append(wizardStep);\n\n            if (!step.isFinal) {\n                const stepConnect = this.wizardStepConnect.content.cloneNode(true);\n                this.wizardContainer.append(stepConnect);\n            };\n        };\n\n        let stepIndex = 0;\n\n        for (let step of wizard.steps) {\n            if (candidateDataManager.checkCandidateFields(step.fields!)) {\n                stepIndex++;\n            };\n        };\n\n        await this.getWizardForm(stepIndex + 1, wizard.steps[stepIndex]);\n    };\n\n    async renderField(field: KedoFieldType, validate?: Function) {\n        const simpleField = field.typeCode === FieldTypeEnum.SIMPLE;\n        const newFieldNode = simpleField ? this.simpleFieldTemplate.content.cloneNode(true).querySelector(\".simple_field\") : this.textFieldTemplate.content.cloneNode(true).querySelector(\".common_field\");\n\n        if (field.id) {\n            newFieldNode.id = field.id;\n        };\n\n        const label = simpleField ? newFieldNode.querySelector(\".simple_field-text\") : newFieldNode.querySelector(\".common_field-label\");\n        const inputContainer = newFieldNode.querySelector(\".common_field-input-container\");\n        const input = newFieldNode.querySelector(\".common_field-input\");\n\n        if (candidateDataManager.candidate.data[field.appFieldCode as candidateDataKey]) {\n            switch (field.typeCode) {\n                case FieldTypeEnum.CATEGORY:\n                    input.value = candidateDataManager.region!.data.__name;\n                    break;\n                case FieldTypeEnum.DATE:\n                    input.value = (\u003cTDate\u003ecandidateDataManager.candidate.data[field.appFieldCode as candidateDataKey]).format(\"DD.MM.YYYY\");\n                    break;\n                case FieldTypeEnum.EMAIL:\n                    input.value = candidateDataManager.candidate.data.email!.email;\n                    break;\n                case FieldTypeEnum.PHONE:\n                    input.value = candidateDataManager.candidate.data.phone!.tel;\n                    break;\n                case FieldTypeEnum.STRING:\n                    input.value = candidateDataManager.candidate.data[field.appFieldCode as candidateDataKey];\n                    break;\n            }\n        }\n\n        let fieldsIsValid = false;\n\n        !simpleField \u0026\u0026[\"change\", \"input\", \"paste\", \"blur\"].forEach(action =\u003e input.addEventListener(action, () =\u003e {\n            if (validate) {\n                fieldsIsValid = validate();\n                fieldsIsValid \u0026\u0026 this.enableNextButton();\n                !fieldsIsValid \u0026\u0026 this.disableNextButton();\n            };\n        }));\n        const booleanField = field.typeCode === FieldTypeEnum.BOOLEAN;\n\n        if (field.typeCode === FieldTypeEnum.DATE) {\n            let elementPrototype = Object.getPrototypeOf(input);\n            if (elementPrototype.hasOwnProperty(\"value\")) {\n                let descriptor = Object.getOwnPropertyDescriptor(elementPrototype, \"value\");\n                Object.defineProperty(input, \"value\", {\n                    get: function() {\n                        return descriptor!.get!.apply(this, arguments);\n                    },\n                    set: function () {\n                        descriptor!.set!.apply(this, arguments);\n                        if (validate) {\n                            fieldsIsValid = validate();\n                            fieldsIsValid \u0026\u0026 domManager.enableNextButton();\n                            !fieldsIsValid \u0026\u0026 domManager.disableNextButton();\n                        };\n                    }\n                });\n            }\n            const newCalendarNode = document.createElement(\"div\");\n            newCalendarNode.className = \"common_field-calendar_container\";\n            newCalendarNode.classList.add(\"hidden\");\n            const calendarButton = document.querySelector(\".common_date-template\").content.cloneNode(true).querySelector(\".common_date\");\n            calendarButton.addEventListener(\"click\", (e: any) =\u003e {\n                newCalendarNode.classList.toggle(\"hidden\");\n            }, false);\n            const newCalendar = new VanillaCalendar(newCalendarNode, options);\n            inputContainer.append(newCalendarNode);\n            inputContainer.append(calendarButton);\n            inputContainer.classList.add(\"common_date-field\");\n            newCalendar.init();\n            input.addEventListener(\"input\", (e: any) =\u003e {\n                this.formatDate(e.target);\n            });\n        } else {\n            newFieldNode.classList.add(`common_${field.typeCode}`);\n        };\n\n        if (field.variants) {\n            booleanField \u0026\u0026 inputContainer.remove();\n            let variantsContainer: any;\n            let newVariant: any;\n\n            switch (field.typeCode) {\n                case FieldTypeEnum.CATEGORY:\n                    input.addEventListener(\"focus\", (e: any) =\u003e {\n                        e.target.nextElementSibling.classList.remove(\"kedo-hidden\");\n                    });\n                    input.addEventListener(\"input\", () =\u003e {\n                        const variants = document.querySelectorAll(\".common_category-item\");\n                        variants.forEach((variant: any) =\u003e {\n                            if (!variant.textContent.toLowerCase().includes(input.value.toLowerCase()) \u0026\u0026 !variant.classList.contains(\"kedo-hidden\")) {\n                                variant.classList.add(\"kedo-hidden\")\n                            } else if (variant.textContent.toLowerCase().includes(input.value.toLowerCase()) \u0026\u0026 variant.classList.contains(\"kedo-hidden\") || !input.value) {\n                                variant.classList.remove(\"kedo-hidden\");\n                            };\n                        });\n                    });\n                    variantsContainer = document.querySelector(\".common_category-container-template\").content.cloneNode(true).querySelector(\".common_category-container\");\n                    (field.variants as CategoryVariants[]).forEach(variant =\u003e {\n                        newVariant = document.querySelector(\".common_category-item-template\").content.cloneNode(true).querySelector(\".common_category-item\");\n                        newVariant.textContent = variant.name;\n                        newVariant.dataset[\"variant_code\"] = variant.code;\n                        newVariant.addEventListener(\"click\", () =\u003e {\n                            input.value = variant.name;\n                            input.dataset[\"variant_code\"] = variant.code;\n                            newVariant.parentElement.classList.toggle(\"kedo-hidden\");\n                        });\n                        variantsContainer.append(newVariant);\n                    });\n                    break;\n                case FieldTypeEnum.BOOLEAN:\n                    const existingValue = \u003cboolean\u003ecandidateDataManager.candidate.data[field.appFieldCode as candidateDataKey];\n\n                    variantsContainer = document.createElement(\"div\");\n                    variantsContainer.className = \"common_radio\";\n                    (field.variants as BoolVariants[]).forEach(variant =\u003e {\n                        newVariant = document.createElement(\"div\");\n                        newVariant.className = \"common_radio-variant\";\n                        newVariant.textContent = variant.name;\n                        newVariant.dataset[\"variant_code\"] = variant.code;\n                        newVariant.addEventListener(\"click\", (e: any) =\u003e {\n                            commonRadioSelect(e.target);\n                            if (validate) {\n                                fieldsIsValid = validate();\n                                fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                            };\n                        });\n                        variantsContainer.append(newVariant);\n                        if (variant.code === existingValue) {\n                            commonRadioSelect(newVariant);\n                        };\n                    });\n            };\n\n            field.typeCode === FieldTypeEnum.CATEGORY \u0026\u0026 inputContainer.append(variantsContainer);\n            field.typeCode === FieldTypeEnum.BOOLEAN \u0026\u0026 newFieldNode.append(variantsContainer);\n        };\n\n        if (field.typeCode === FieldTypeEnum.FILE) {\n            inputContainer.remove();\n            const fileContainer = document.querySelector(\".common_file-container-template\").content.cloneNode(true).querySelector(\".common_file-container\");\n            const hiddenInput = fileContainer.querySelector(\"input\");\n            const actualInput = fileContainer.querySelector(\"label\");\n            hiddenInput.id = `id-${field.docId}`;\n            actualInput.htmlFor = `id-${field.docId}`;\n\n            actualInput.addEventListener(\"dragenter\", (e: any) =\u003e {\n                e.stopPropagation();\n                e.preventDefault();\n                e.target.parentElement.classList.toggle(\"hovered\");\n            });\n\n            actualInput.addEventListener(\"dragleave\", (e: any) =\u003e {\n                e.stopPropagation();\n                e.preventDefault();\n                e.target.parentElement.classList.toggle(\"hovered\");\n            });\n\n            actualInput.addEventListener(\"dragover\", (e: any) =\u003e {\n                e.stopPropagation();\n                e.preventDefault();\n            });\n\n            hiddenInput.addEventListener(\"change\", (e: any) =\u003e {\n                const files = e.target.files;\n                const reader = new FileReader();\n                reader.onload = async (e: any) =\u003e {\n                    const fileInputName = fileContainer.querySelector(\".file_input-name\");\n                    const fileInputDelete = fileContainer.querySelector(\".file_input-delete\");\n                    [fileInputDelete, fileInputName].forEach((node: any) =\u003e node.classList.remove(\"kedo-hidden\"));\n                    fileInputName.textContent = files[0].name;\n                    fileInputName.addEventListener(\"click\", (e: any) =\u003e {\n                        this.downloadFile(e);\n                    });\n                    fileInputDelete.addEventListener(\"click\", (e: any) =\u003e {\n                        this.deleteFile(e).then(_ =\u003e {\n                            if (validate) {\n                                fieldsIsValid = validate();\n                                fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                            };\n                        });\n                    });\n                    fileContainer.classList.add(\"kedo-hidden\");\n                    if (validate) {\n                        fieldsIsValid = validate();\n                        console.log(\"validate file: \", fieldsIsValid)\n                        fieldsIsValid \u0026\u0026 this.enableNextButton();\n                        !fieldsIsValid \u0026\u0026 this.disableNextButton();      \n                    };\n                };\n                reader.readAsArrayBuffer(files[0]);\n            })\n\n            actualInput.addEventListener(\"drop\", (e: any) =\u003e {\n                e.stopPropagation();\n                e.preventDefault();\n                const dt = e.dataTransfer;\n                const files = dt.files;\n                e.target.parentElement.classList.toggle(\"hovered\");\n                const reader = new FileReader();\n                reader.onload = async (e: any) =\u003e {\n                    const fileBuffer: ArrayBuffer = e.target.result;\n                    const table = candidateDataManager.candidate.data.table_personal_documents!\n                    const relatedTableRow = table.find(row =\u003e row.document_type.id === field.docId);\n                    if (relatedTableRow) {\n                        relatedTableRow!.file_document = await Context.fields.file_field.create(files[0].name, fileBuffer);\n                        candidateDataManager.candidate.data.table_personal_documents = table;\n                    } else {\n                        candidateDataManager.candidate.data[field.appFieldCode as candidateDataKey] = await Context.fields.file_field.create(files[0].name, fileBuffer);\n                    };\n                    const fileInputName = fileContainer.querySelector(\".file_input-name\");\n                    const fileInputDelete = fileContainer.querySelector(\".file_input-delete\");\n                    [fileInputDelete, fileInputName].forEach((node: any) =\u003e node.classList.remove(\"kedo-hidden\"));\n                    fileInputName.textContent = files[0].name;\n                    fileInputName.addEventListener(\"click\", (e: any) =\u003e {\n                        this.downloadFile(e);\n                    });\n                    fileInputDelete.addEventListener(\"click\", (e: any) =\u003e {\n                        this.deleteFile(e).then(_ =\u003e {\n                            if (validate) {\n                                fieldsIsValid = validate();\n                                fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                            };\n                        });\n                    });\n                    fileContainer.classList.add(\"kedo-hidden\");\n                    await candidateDataManager.candidate.save();\n                    hiddenInput.files = files;\n                    if (validate) {\n                        fieldsIsValid = validate();\n                        console.log(\"validate file: \", fieldsIsValid)\n                        fieldsIsValid \u0026\u0026 this.enableNextButton();\n                        !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                    };\n                };\n                reader.readAsArrayBuffer(files[0]);\n            });\n\n            const relatedFileObj = candidateDataManager.docsTable.find(file =\u003e file.docId === field.docId);\n\n            if (relatedFileObj \u0026\u0026 relatedFileObj.file) {\n                const fileBuffer = await fetch(await relatedFileObj.file.getDownloadUrl()).then(res =\u003e res.arrayBuffer());\n                const newFile = new File([fileBuffer], relatedFileObj.fileName);\n                const dataTransfer = new DataTransfer();\n                dataTransfer.items.add(newFile);\n                hiddenInput.files = dataTransfer.files;\n                const fileInputName = fileContainer.querySelector(\".file_input-name\");\n                const fileInputDelete = fileContainer.querySelector(\".file_input-delete\");\n                [fileInputDelete, fileInputName].forEach((node: any) =\u003e node.classList.remove(\"kedo-hidden\"));\n                fileInputName.textContent = relatedFileObj.fileName;\n                fileInputName.addEventListener(\"click\", (e: any) =\u003e {\n                    this.downloadFile(e);\n                });\n                fileInputDelete.addEventListener(\"click\", (e: any) =\u003e {\n                    this.deleteFile(e).then(_ =\u003e {\n                        if (validate) {\n                            fieldsIsValid = validate();\n                            fieldsIsValid \u0026\u0026 this.enableNextButton();\n                            !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                        };\n                    });\n                });\n                fileContainer.classList.add(\"kedo-hidden\");\n            };\n\n            newFieldNode.append(fileContainer)\n        };\n\n        label.textContent = field.replace \u0026\u0026 !field.needReplace ? field.replace() : field.label;\n\n        if (field.required) {\n            label.innerHTML = `${field.label}\u003cspan class=\"required_field\"\u003e *\u003c/span\u003e`;\n        };\n\n        if (field.typeCode === FieldTypeEnum.SIMPLE \u0026\u0026 field.replace \u0026\u0026 field.needReplace) {\n            newFieldNode.querySelector(\".simple_field-description\").textContent = field.replace();\n        };\n\n        newFieldNode.dataset[\"app_code\"] = field.appFieldCode;\n\n        if (field.regex) {\n            input.pattern = field.regex;\n        };\n\n        if (field.label === \"СНИЛС\") {\n            input.addEventListener(\"input\", (e: any) =\u003e {\n                if (e.inputType === \"deleteContentBackward\" || (input.value \u0026\u0026 input.value.endsWith(\"-\"))) {\n                    return;\n                };\n                this.formatSnils(e.target);\n            });\n            input.addEventListener(\"paste\", (e: any) =\u003e {\n                const data = e.clipboardData.getData('text/plain');\n                switch (data.replace(/\\-/g, \"\").replace(\"\\s\", \"\").length) {\n                    case 3:\n                        input.value = data.replace(/(\\d{3})/, '$1-');\n                        break;\n                    case 6:\n                        input.value = data.replace(/(\\d{3})\\-(\\d{3})/, '$1-$2-');\n                        break;\n                    case 9:\n                        input.value = data.replace(/(\\d{3})\\-(\\d{3})\\-(\\d{3})/, '$1-$2-$3 ');\n                        break;\n                    default:\n                        input.value = data.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1-$2-$3 $4');\n                };\n            });\n        };\n\n        if (field.label === \"Код подразделения\") {\n            input.addEventListener(\"input\", (e: any) =\u003e {\n                if (e.inputType === \"deleteContentBackward\" || (input.value \u0026\u0026 input.value.endsWith(\"-\"))) {\n                    return;\n                };\n                this.formatIssuerCode(e.target);\n            });\n            input.addEventListener(\"paste\", (e: any) =\u003e {\n                const data = e.clipboardData.getData('text/plain');\n                input.value = data.replace(/(\\d{3})/, '$1-');\n            });\n        }\n        \n        if (field.maxLength) {\n            input.maxLength = field.maxLength;\n        };\n\n        if (field.placeholder) {\n            input.placeholder = field.placeholder;\n        };\n\n        field.replace \u0026\u0026 field.replace()\n        field.required \u0026\u0026 newFieldNode.classList.add(\"required\");\n\n        this.mainInfoContainer.append(newFieldNode);\n    };\n\n    async getWizardForm(index: number, wizardStep: WizardStep) {\n        this.refreshMainContainer();\n        const wizardSteps: any = Array.from(document.querySelectorAll(\".wizard_step\"));\n        this.formContainer.querySelector(\".common-title\").textContent = wizardStep.title;\n        this.formContainer.querySelector(\".common-descriptor\").textContent = wizardStep.description;\n        let fieldsIsValid = false;\n\n        for (let field of wizardStep.fields!) {\n            const validate = wizardStep.validate.bind(wizardStep);\n            await this.renderField(field, validate);\n        };\n\n        fieldsIsValid = wizardStep.validate();\n\n        if (wizardStep.buttons) {\n            wizardStep.buttons.forEach(button =\u003e this.renderButton(button));\n        };\n\n        for (let i = 0; i \u003c index; i++) {\n            !wizardSteps[i].classList.contains(\"active\") \u0026\u0026 wizardSteps[i].classList.toggle(\"active\");\n            wizardSteps[i].nextElementSibling \u0026\u0026 wizardSteps[i].nextElementSibling.classList.contains(\"wizard_step-connect\") \u0026\u0026 wizardSteps[i].nextElementSibling.classList.add(\"active\");\n        };\n\n        wizardSteps.slice(index).forEach((node: any) =\u003e {\n            node.classList.contains(\"active\") \u0026\u0026 node.classList.remove(\"active\");\n            node.nextElementSibling \u0026\u0026 node.nextElementSibling.classList.contains(\"active\") \u0026\u0026 node.nextElementSibling.classList.remove(\"active\");\n        });\n        \n        fieldsIsValid \u0026\u0026 this.enableNextButton();\n        !fieldsIsValid \u0026\u0026 this.disableNextButton();\n    };\n\n    getStep(step: WizardStep): any {\n        const newStep = this.wizardStepTemplate.content.cloneNode(true).querySelector(\".wizard_step\");\n        newStep.querySelector(\".wizard_step-label\").textContent = step.label;\n        return newStep;\n    };\n\n    disableNextButton() {\n        !this.nextButton.classList.contains(\"inactive\") \u0026\u0026 this.nextButton.classList.add(\"inactive\");\n    };\n\n    enableNextButton() {\n        this.nextButton.classList.contains(\"inactive\") \u0026\u0026 this.nextButton.classList.remove(\"inactive\");\n    };\n\n    handleLoader(node: any) {\n        if (node.querySelector(\".loader_spinner-container\")) {\n            node.querySelector(\".loader_spinner-container\").remove();\n        } else {\n            const loaderTemplate = document.querySelector(\".loader_spinner-container-template\").content.cloneNode(true).querySelector(\".loader_spinner-container\");\n            node.append(loaderTemplate)\n        };\n    };\n\n    async setHrData(): Promise\u003cvoid\u003e {\n        const hr = candidateDataManager.createdBy\n        const hrName = this.sidePanelInfoCard.querySelector(\".user-name\");\n        const hrPosition = this.sidePanelInfoCard.querySelector(\".user-position\");\n        const hrAvatar = this.sidePanelInfoCard.querySelector(\".user-avatar\");\n        const hrPhone = this.sidePanelInfoCard.querySelector(\".phone-info\");\n        const hrEmail = this.sidePanelInfoCard.querySelector(\".email-info\");\n\n        const staff = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.ext_user.eq(hr)\n        )).first();\n\n        const userAvatarLink = hr.data.avatar ? await hr.data.avatar.getDownloadUrl() : \"\";\n        hrName.textContent = hr.data.__name\n        hrAvatar.src = userAvatarLink;\n\n        if (staff \u0026\u0026 staff.data.position) {\n            const positionName = await staff.data.position.fetch().then(position =\u003e position.data.__name);\n            hrPosition.textContent = positionName;\n        };\n\n        if (hr.data.workPhone || hr.data.mobilePhone) {\n            hrPhone.textContent = hr.data.workPhone \u0026\u0026 hr.data.workPhone.tel ? hr.data.workPhone.tel : hr.data.mobilePhone \u0026\u0026 hr.data.mobilePhone.tel ? hr.data.mobilePhone.tel : \"\";\n        };\n\n        if (hr.data.email) {\n            hrEmail.textContent = hr.data.email;\n        };\n    };\n};\n\nclass CandidateDataManager {\n    user: UserItem;\n    candidate: ApplicationItem\u003cApplication$kedo$candidate_database$Data, any\u003e;\n    relatedPosition: ApplicationItem\u003cApplication$kedo$position$Data, any\u003e;\n    organization: ApplicationItem\u003cApplication$kedo$organization$Data, any\u003e | undefined;\n    region: ApplicationItem\u003cApplication$kedo$directory_of_regions$Data, any\u003e | undefined;\n    medicalRequest: ApplicationItem\u003cApplication$kedo$medical_request$Data, any\u003e | undefined;\n    createdBy: UserItem;\n    docsTable: docData[] = [];\n\n    async setStatus(status: TStatus\u003cStatusItem$kedo$candidate_database$__default, StatusGroups$kedo$candidate_database\u003e): Promise\u003cvoid\u003e {\n        await this.candidate.setStatus(status);\n    };\n\n    async saveCandidateData(fields: KedoFieldType[]) {\n        //todo фильтрация по типу file и simple\n        for (let field of fields) {\n            const relatedNode = document.querySelector(`.common_field[data-app_code=\"${field.appFieldCode}\"]`);\n            console.log(`.common_field[data-app_code=\"${field.appFieldCode}\"]`);\n            let actualValue: any;\n            let relatedInput: any;\n\n            switch (field.typeCode) {\n                case FieldTypeEnum.BOOLEAN:\n                    const stringValue = document.querySelector(\".common_radio-variant.checked\").dataset[\"variant_code\"];\n                    actualValue = stringValue === \"true\" ?? false;\n                    break;\n                case FieldTypeEnum.CATEGORY:\n                    relatedInput = relatedNode.querySelector(\"input\"); \n                    const regionId = relatedInput.dataset[\"variant_code\"].trim();\n                    console.log(regionId);\n                    actualValue = await this.candidate.fields.directory_of_regions.app.search().where(f =\u003e f.__id.eq(regionId)).first();\n                    break;\n                case FieldTypeEnum.DATE:\n                    relatedInput = relatedNode.querySelector(\"input\"); \n                    const [day, month, year]: number[] = [...relatedInput.value.split(\".\").map(Number)];\n                    actualValue = new TDate(year, month, day);\n                    break;\n                case FieldTypeEnum.EMAIL:\n                    relatedInput = relatedNode.querySelector(\"input\"); \n                    actualValue = this.candidate.fields.email.create(relatedInput.value);\n                    break;\n                case FieldTypeEnum.PHONE:\n                    relatedInput = relatedNode.querySelector(\"input\");\n                    actualValue = this.candidate.fields.phone.create(relatedInput.value);\n                    break;\n                case FieldTypeEnum.STRING:\n                    relatedInput = relatedNode.querySelector(\"input\");\n                    actualValue = relatedInput.value;\n                    break;\n            };\n\n            this.candidate.data[field.appFieldCode as keyof typeof this.candidate.data] = actualValue;\n        }\n\n        await this.candidate.save();\n    };\n\n    checkCandidateFields(portalFields: KedoFieldType[]): boolean {\n        let stepFilled = true\n        portalFields.filter(field =\u003e !!field.appFieldCode).map(field =\u003e field.appFieldCode).forEach(field =\u003e {\n            //сравнение с undefined, потому что булевое поле в значении false считает за соответствие условию\n            if (candidateDataManager.candidate.data[field as candidateDataKey] === undefined) {\n                stepFilled = false;\n            };\n        });\n        return stepFilled;\n    }\n\n    async getCandidateData(): Promise\u003cvoid\u003e {\n        this.region = this.candidate.data.directory_of_regions ? await this.candidate.data.directory_of_regions.fetch() : undefined;\n        this.relatedPosition = await this.candidate.data.planned_position!.fetch();\n        this.organization = this.candidate.data.organization ? await this.candidate.data.organization.fetch() : undefined;\n        this.medicalRequest = this.candidate.data.medical_request ? await this.candidate.data.medical_request.fetch() : undefined;\n        this.docsTable = this.candidate.data.table_personal_documents ? await Promise.all(this.candidate.data.table_personal_documents.map(async row =\u003e {\n            const doc = await row.document_type.fetch();\n            const file = row.file_document ? await row.file_document.fetch() : undefined;\n\n            return {\n                docId: doc.id,\n                docName: doc.data.__name,\n                fileName: file \u0026\u0026 file.data.__name,\n                required: doc.data.required ?? false,\n                file\n            }\n        })) : [];\n\n        this.docsTable.length \u003e 0 \u0026\u0026 this.synchronizeDocStep();\n        this.createdBy = await this.candidate.data.__createdBy.fetch();\n    };\n\n    synchronizeDocStep() {\n        const wizardStep = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(step =\u003e step.index === 3);\n        const documentRecognition = systemDataManager.documentRecognition;\n        let passportExists = false;\n        let innExists = false;\n        let snilsExists = false;\n        let snilsRequired = false;\n        let passportRequired = false;\n        let innRequired = false;\n\n        for (let doc of this.docsTable) {\n            wizardStep!.fields!.push({\n                label: doc.docName,\n                required: doc.required,\n                typeCode: FieldTypeEnum.FILE,\n                docId: doc.docId\n            });\n\n            if (doc.docName.toLowerCase().includes(\"инн\")) {\n                innExists = true;\n                innRequired = doc.required;\n            }\n            if (doc.docName.toLowerCase().includes(\"паспорт\")) {\n                passportExists = true;\n                passportRequired = doc.required;\n            }\n            if (doc.docName.toLowerCase().includes(\"снилс\")) {\n                snilsExists = true;\n                snilsRequired = doc.required;\n            };\n        };\n\n        if (passportExists \u0026\u0026 !documentRecognition) {\n            wizardStep!.fields! = wizardStep!.fields!.concat([\n                {\n                    label: \"Серия\",\n                    required: passportRequired,\n                    typeCode: FieldTypeEnum.STRING,\n                    regex: \"\\\\d{4}\",\n                    placeholder: \"XXXX\",\n                    appFieldCode: \"passport_series\",\n                    maxLength: 4\n                },{\n                    label: \"Номер\",\n                    required: passportRequired,\n                    typeCode: FieldTypeEnum.STRING,\n                    regex: \"\\\\d{6}\",\n                    placeholder: \"XXXXXX\",\n                    appFieldCode: \"passport_number\",\n                    maxLength: 6\n                },{\n                    label: \"Дата выдачи\",\n                    required: passportRequired,\n                    typeCode: FieldTypeEnum.DATE,\n                    regex: \"(0[1-9]|[12][0-9]|3[01])\\\\.(0[1-9]|1[012])\\\\.(19|20)\\\\d\\\\d\",\n                    placeholder: \"ДД.ММ.ГГГГ\",\n                    appFieldCode: \"date_of_issue\",\n                    maxLength: 10\n                },{\n                    label: \"Кем выдан\",\n                    required: passportRequired,\n                    typeCode: FieldTypeEnum.STRING,\n                    appFieldCode: \"issued_by\"\n                },{\n                    label: \"Код подразделения\",\n                    required: passportRequired,\n                    typeCode: FieldTypeEnum.STRING,\n                    appFieldCode: \"passport_department_code\",\n                    regex: \"\\\\d{3}\\-\\\\d{3}\",\n                    maxLength: 7\n                }\n            ])\n        };\n\n        if (innExists \u0026\u0026 !documentRecognition) {\n            wizardStep!.fields!.push({\n                label: \"ИНН\",\n                required: innRequired,\n                typeCode: FieldTypeEnum.STRING,\n                placeholder: \"XXXXXXXXXXXX\",\n                regex: \"\\\\d{12}\",\n                maxLength: 12\n            });\n        };\n\n        if (snilsExists \u0026\u0026 !documentRecognition) {\n            wizardStep!.fields!.push({\n                label: \"СНИЛС\",\n                required: snilsRequired,\n                typeCode: FieldTypeEnum.STRING,\n                placeholder: \"XXX-XXX-XXX XX\",\n                regex: \"\\\\d{3}-\\\\d{3}-\\\\d{3}\\\\s\\\\d{2}\",\n                maxLength: 14\n            });\n\n        }\n    };\n};\n\nclass SystemDataManager {\n    regions: ApplicationItem\u003cApplication$kedo$directory_of_regions$Data, any\u003e[];\n    documentRecognition = false;\n\n    async setRegions(): Promise\u003cvoid\u003e {\n        this.regions = await Context.fields.staff.app.fields.directory_of_regions.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(1000).all();\n        this.synchronizeRegions();\n    };\n\n    async getRecognitionSettings(): Promise\u003cvoid\u003e {\n        const recognitionSetting = await Context.fields.settings_app.app.search().where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.code.eq(\"document_recognition\")\n        )).first();\n        this.documentRecognition = recognitionSetting ? recognitionSetting.data.status ?? false : false;\n    };\n\n    synchronizeRegions() {\n        const wizardStep = formDataObj.find(form =\u003e form.index === \"2\")!.wizard!.steps.find(step =\u003e step.index === 2);\n        const regionField = wizardStep!.fields!.find(field =\u003e field.typeCode === FieldTypeEnum.CATEGORY);\n\n        for (let region of this.regions) {\n            (regionField!.variants! as CategoryVariants[]).push({name: region.data.__name, code: region.id});\n        };\n    };\n};\n\nconst options = {\n    actions: {\n        clickDay(event: any, self: any) {\n            domManager.setDate(event)\n        }\n    },\n    settings: {\n        lang: \"ru-RU\"\n    }\n};\nconst domManager = new DomManager();\nconst candidateDataManager = new CandidateDataManager();\nconst systemDataManager = new SystemDataManager();\n\nfunction mock() {\n    console.log(\"test button\");\n};\n\nfunction commonRadioSelect(target: any) {\n    target.parentElement.querySelectorAll(\".common_radio-variant\").forEach((variant: any) =\u003e {\n        if (variant.classList.contains(\"checked\")) {\n            variant.classList.remove(\"checked\");\n        };\n    });\n    target.classList.add(\"checked\");\n}\n\nfunction refreshForm(target: any) {\n    const formIndex = target.dataset[\"index\"].trim();\n    domManager.frontIndex = formIndex;\n    const currentForm = formDataObj.find(form =\u003e form.index === formIndex);\n    if (currentForm) {\n        domManager.renderForm(currentForm);\n    }\n};\n\nfunction setChecked(target: any, cls?: string, id?: string) {\n    target.classList.toggle(\"checked\");\n\n    cls \u0026\u0026 document.querySelector(`.${cls}`).classList.toggle(\"inactive\");\n    id \u0026\u0026 document.querySelector(`#${id}`).classList.toggle(\"inactive\");\n};\n\nfunction closeContainer(target: any, cls: string, withModal = false, func?: Function) {\n    target.closest(`.${cls}`).remove();\n    withModal \u0026\u0026 document.querySelector(\".kedo-modal\").classList.toggle(\"kedo-hidden\");\n    func \u0026\u0026 func();\n};\n\nasync function sendComment(): Promise\u003cvoid\u003e {\n    // await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.)\n};\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    const user = await System.users.getCurrentUser();\n    const candidate = await Context.fields.candidate.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.candidate.eq(user)\n    )).first();\n    candidateDataManager.candidate = candidate!;\n\n    await Promise.all([\n        systemDataManager.getRecognitionSettings(),\n        systemDataManager.setRegions(),\n        candidateDataManager.getCandidateData()\n    ]);\n\n    if (!candidate) {\n        const waitForTemplate = window.setInterval(() =\u003e {\n            const emptyTemplate = document.querySelector(\".unemployed\");\n\n            if (!emptyTemplate) {\n                return;\n            };\n\n            window.clearInterval(waitForTemplate);\n            emptyTemplate.classList.toggle(\"kedo-hidden\");\n\n        }, 200)\n        return;\n    };\n};\n\nfunction checkRootComponents(): boolean {\n    domManager.formContainer = document.querySelector(\".kedo_portal-main_section-container\");\n    domManager.kedoModal = document.querySelector(\".kedo-modal\");\n    domManager.formPath = document.querySelector(\".kedo_portal-main_section-path\");\n    domManager.formFooter = document.querySelector(\".kedo_portal-main_section-container_footer\");\n    domManager.positionTemplate = document.querySelector(\".position_info-container-template\");\n    domManager.wizardContainer = document.querySelector(\".wizard_container\");\n    domManager.wizardStepTemplate = document.querySelector(\".wizard_step-template\");\n    domManager.wizardStepConnect = document.querySelector(\".wizard_step-connect-template\");\n    domManager.textFieldTemplate = document.querySelector(\".common_field-template\");\n    domManager.simpleFieldTemplate = document.querySelector(\".simple_field-template\");\n    domManager.mainInfoContainer = document.querySelector(\".kedo_portal-main_section-container_main-info\");\n    domManager.sidePanelInfoCard = document.querySelector(\".kedo_portal-main_section-side_panel-info_card\");\n\n    return [\n        domManager.formContainer,\n        domManager.kedoModal,\n        domManager.formPath,\n        domManager.formFooter,\n        domManager.formFooter,\n        domManager.wizardContainer,\n        domManager.wizardStepTemplate,\n        domManager.wizardStepConnect,\n        domManager.textFieldTemplate,\n        domManager.simpleFieldTemplate,\n        domManager.mainInfoContainer,\n        domManager.sidePanelInfoCard,\n        VanillaCalendar\n    ].every((node: any) =\u003e node);\n}\n\nasync function onLoad(): Promise\u003cvoid\u003e {\n    if (!candidateDataManager.candidate) {\n        return;\n    };\n\n    const statusVariants = candidateDataManager.candidate.fields.__status.variants;\n    let replaceObj: {replaceFrom: string, replaceTo: string};\n\n    switch (candidateDataManager.candidate.data.__status!.code) {\n        case statusVariants.invited.code:\n            domManager.frontIndex = 1;\n            replaceObj = {replaceFrom: \"companyName\", replaceTo: candidateDataManager.organization ? candidateDataManager.organization.data.__name : \"\"};\n            break;\n        case statusVariants.filling_out_questionnaire.code:\n            domManager.frontIndex = 2;\n            break;\n        case statusVariants.questionnaire_completed.code:\n        case statusVariants.secutiry_check.code:\n        case statusVariants.security_agreed.code:\n            domManager.frontIndex = 3;\n            break;\n        case statusVariants.passing_medical_examination.code:\n            domManager.frontIndex = 4;\n            break;\n        case statusVariants.medical_examination_completed.code:\n            domManager.frontIndex = 5;\n            break;\n        case statusVariants.signing_job_offer.code:\n            domManager.frontIndex = 6;\n            break;\n        case statusVariants.job_offer_signed.code:\n            domManager.frontIndex = 7;\n            break;\n        case statusVariants.clarifying_job_offer.code:\n            domManager.frontIndex = 8;\n            break;\n    };\n\n    domManager.formIndex = String(domManager.frontIndex);\n\n    const currentForm = formDataObj.find(form =\u003e form.index === domManager.formIndex);\n    const additionalInfoCard = document.querySelector(\".kedo_portal-main_section-side_panel-additional_card\");\n\n    if (candidateDataManager.candidate.data.info_candidate) {\n        additionalInfoCard.classList.contains(\"kedo-hidden\") \u0026\u0026 additionalInfoCard.classList.remove(\"kedo-hidden\");\n        const cardDescription = additionalInfoCard.querySelector(\".common-descriptor\");\n        cardDescription.innerHTML = candidateDataManager.candidate.data.info_candidate;\n    };\n\n    if (candidateDataManager.candidate.data.memo_for_candidate) {\n        additionalInfoCard.classList.contains(\"kedo-hidden\") \u0026\u0026 additionalInfoCard.classList.remove(\"kedo-hidden\");\n        const fileField = additionalInfoCard.querySelector(\".common-file-field\");\n        fileField.classList.remove(\"kedo-hidden\");\n        const fileLink = additionalInfoCard.querySelector(\".common-link\");\n        fileLink.href = await candidateDataManager.candidate.data.memo_for_candidate.getDownloadUrl();\n    };\n\n    if (!checkRootComponents()) {\n        const waitForRoot = window.setInterval(async () =\u003e {\n            if (!checkRootComponents()) {\n                return;\n            };\n            window.clearInterval(waitForRoot);\n\n            domManager.handleLoader(domManager.sidePanelInfoCard);\n            domManager.setHrData().then(_ =\u003e {\n                domManager.handleLoader(domManager.sidePanelInfoCard);\n            });\n\n            if (currentForm) {\n                await domManager.renderForm(currentForm, replaceObj!);\n            };\n        }, 200)\n    } else if (checkRootComponents() \u0026\u0026 currentForm) {\n        domManager.handleLoader(domManager.sidePanelInfoCard);\n        domManager.setHrData().then(_ =\u003e {\n            domManager.handleLoader(domManager.sidePanelInfoCard);\n        });\n        await domManager.renderForm(currentForm, replaceObj!);\n    };\n\n    window.setInterval(() =\u003e {\n        switch (candidateDataManager.candidate.data.__status!.code) {\n            case statusVariants.invited.code:\n                domManager.frontIndex = 1;\n                replaceObj = {replaceFrom: \"companyName\", replaceTo: candidateDataManager.organization ? candidateDataManager.organization.data.__name : \"\"};\n                break;\n            case statusVariants.filling_out_questionnaire.code:\n                domManager.frontIndex = 2;\n                break;\n            case statusVariants.questionnaire_completed.code:\n            case statusVariants.secutiry_check.code:\n            case statusVariants.security_agreed.code:\n                domManager.frontIndex = 3;\n                break;\n            case statusVariants.passing_medical_examination.code:\n                domManager.frontIndex = 4;\n                break;\n            case statusVariants.medical_examination_completed.code:\n                domManager.frontIndex = 5;\n                break;\n            case statusVariants.signing_job_offer.code:\n                domManager.frontIndex = 6;\n                break;\n            case statusVariants.job_offer_signed.code:\n                domManager.frontIndex = 7;\n                break;\n            case statusVariants.clarifying_job_offer.code:\n                domManager.frontIndex = 8;\n                break;\n        };\n        const currentForm = formDataObj.find(form =\u003e form.index === domManager.formIndex);\n        domManager.refreshForm(currentForm!.index)\n    }, 60000)\n};",
    "clientScriptOptions": {
      "allowServer": true
    },
    "serverScripts": "/* Server scripts module */\n",
    "serverScriptOptions": {}
  },
  "dataNamespace": "",
  "dataCode": "",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        ;\n        let FormId;\n        (function (FormId) {\n            FormId[\"START\"] = \"start\";\n            FormId[\"FILL_DATA\"] = \"fill_data\";\n        })(FormId || (FormId = {}));\n        ;\n        let ButtonType;\n        (function (ButtonType) {\n            ButtonType[\"PRIMARY\"] = \"primary\";\n            ButtonType[\"DANGER\"] = \"danger\";\n            ButtonType[\"COMMON\"] = \"common\";\n        })(ButtonType || (ButtonType = {}));\n        ;\n        let FieldTypeEnum;\n        (function (FieldTypeEnum) {\n            FieldTypeEnum[\"STRING\"] = \"string\";\n            FieldTypeEnum[\"EMAIL\"] = \"email\";\n            FieldTypeEnum[\"DATE\"] = \"date\";\n            FieldTypeEnum[\"PHONE\"] = \"phone\";\n            FieldTypeEnum[\"BOOLEAN\"] = \"boolean\";\n            FieldTypeEnum[\"FILE\"] = \"file\";\n            FieldTypeEnum[\"CATEGORY\"] = \"category\";\n            FieldTypeEnum[\"SIMPLE\"] = \"simple\";\n        })(FieldTypeEnum || (FieldTypeEnum = {}));\n        ;\n        const formDataObj = [\n            {\n                index: \"1\",\n                title: \"Добро пожаловать на портал! В рамках трудоустройства в компанию companyName Вам необходимо заполнить анкету кандидата и приложить необходимые документы\",\n                description: \"После совершения всех действий нажмите «Продолжить» для перехода к следующему шагу\",\n                buttons: [\n                    {\n                        btnType: ButtonType.PRIMARY, text: \"Продолжить\", async action() {\n                            await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.filling_out_questionnaire);\n                            await domManager.refreshForm(\"2\");\n                        }\n                    }\n                ],\n                replace: function (data) {\n                    return this[data.field].replace(data.replaceFrom, data.replaceTo);\n                },\n                addData: async function () {\n                    if (!candidateDataManager.relatedPosition.data.description_position \u0026\u0026 !candidateDataManager.relatedPosition.data.description_position_file) {\n                        console.log(\"no positon data\");\n                        return;\n                    }\n                    ;\n                    function setPositionFile() {\n                        positionFileLink.classList.toggle(\"kedo-hidden\");\n                        candidateDataManager.relatedPosition.data.description_position_file.getDownloadUrl().then(url =\u003e {\n                            positionLink.href = url;\n                        });\n                        positionLink.textContent = positionLink.textContent.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n                    }\n                    ;\n                    function setPositionDescription() {\n                        positionDescription.innerHTML = candidateDataManager.relatedPosition.data.description_position;\n                        positionTitle.textContent = positionTitle.textContent.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n                    }\n                    ;\n                    const positionInfoTemplate = domManager.positionTemplate.content.cloneNode(true);\n                    const positionLink = positionInfoTemplate.querySelector(\".common-link\");\n                    const positionFileLink = positionInfoTemplate.querySelector(\".common-file-field\");\n                    const positionDescription = positionInfoTemplate.querySelector(\".common-descriptor\");\n                    const positionTitle = positionInfoTemplate.querySelector(\".position_info-container-desctiption_title\");\n                    candidateDataManager.relatedPosition.data.description_position_file \u0026\u0026 setPositionFile();\n                    candidateDataManager.relatedPosition.data.description_position \u0026\u0026 setPositionDescription();\n                    document.querySelector(\".kedo_portal-main_section-container_main-info\").appendChild(positionInfoTemplate);\n                }\n            },\n            {\n                index: \"2\",\n                wizard: {\n                    steps: [\n                        {\n                            label: \"Основное\",\n                            title: \"Персональные данные\",\n                            description: \"Проверьте и заполните недостающие данные\",\n                            index: 1,\n                            isFinal: false,\n                            fields: [\n                                {\n                                    typeCode: FieldTypeEnum.STRING,\n                                    required: true,\n                                    label: \"Фамилия\",\n                                    appFieldCode: \"lastname\"\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.STRING,\n                                    required: true,\n                                    label: \"Имя\",\n                                    appFieldCode: \"firstname\"\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.STRING,\n                                    required: false,\n                                    label: \"Отчество\",\n                                    appFieldCode: \"middlename\"\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.DATE,\n                                    required: true,\n                                    label: \"Дата рождения\",\n                                    appFieldCode: \"date_of_birth\",\n                                    regex: \"(0[1-9]|[12][0-9]|3[01])\\\\.(0[1-9]|1[012])\\\\.(19|20)\\\\d\\\\d\",\n                                    placeholder: \"ДД.ММ.ГГГГ\",\n                                    maxLength: 10\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.BOOLEAN,\n                                    required: true,\n                                    label: \"Пол\",\n                                    appFieldCode: \"sex\",\n                                    variants: [\n                                        {\n                                            name: \"Мужской\",\n                                            code: true\n                                        },\n                                        {\n                                            name: \"Женский\",\n                                            code: false\n                                        }\n                                    ]\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.EMAIL,\n                                    required: true,\n                                    label: \"E-mail\",\n                                    appFieldCode: \"email\",\n                                    regex: \"([a-zA-Z0-9._\\\\-]+@[a-zA-Z0-9._\\\\-]+\\\\.[a-zA-Z0-9_\\\\-]+)\"\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.PHONE,\n                                    required: true,\n                                    label: \"Телефон\",\n                                    appFieldCode: \"phone\",\n                                    placeholder: \"Номер телефона в формате XXXXXXXXXXX (11 цифр)\",\n                                    regex: \"(\\\\+7|8)\\\\d{10}\"\n                                }\n                            ],\n                            buttons: [\n                                {\n                                    btnType: ButtonType.PRIMARY,\n                                    text: \"Продолжить\",\n                                    async action() {\n                                        const fieldsToUpgrade = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(wizard =\u003e wizard.index === 1);\n                                        const wizardStep = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(wizard =\u003e wizard.index === 2);\n                                        await candidateDataManager.saveCandidateData(fieldsToUpgrade.fields.filter(field =\u003e field.typeCode !== FieldTypeEnum.SIMPLE \u0026\u0026 field.typeCode !== FieldTypeEnum.FILE));\n                                        await domManager.getWizardForm(2, wizardStep);\n                                    }\n                                }\n                            ],\n                            validate: function () {\n                                let requiredFields = [];\n                                let field;\n                                for (field of this.fields) {\n                                    const relatedNode = document.querySelector(`.required[data-app_code=${field.appFieldCode}]`);\n                                    relatedNode \u0026\u0026 relatedNode.querySelector(\"input\") \u0026\u0026 requiredFields.push(relatedNode);\n                                }\n                                ;\n                                const genderVariant = document.querySelector(\".common_radio-variant.checked\");\n                                return requiredFields.every((node) =\u003e {\n                                    const nodeInput = node.querySelector(\"input\");\n                                    return nodeInput.validity.valid \u0026\u0026 nodeInput.value;\n                                }) \u0026\u0026 !!genderVariant;\n                            }\n                        },\n                        {\n                            title: \"Адрес регистрации\",\n                            buttons: [\n                                {\n                                    btnType: ButtonType.COMMON,\n                                    text: \"\u003c Назад\",\n                                    async action() {\n                                        const wizardStep = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(wizard =\u003e wizard.index === 1);\n                                        await domManager.getWizardForm(1, wizardStep);\n                                    }\n                                },\n                                {\n                                    btnType: ButtonType.PRIMARY,\n                                    text: \"Продолжить\",\n                                    async action() {\n                                        const fieldsToUpgrade = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(wizard =\u003e wizard.index === 2);\n                                        const wizardStep = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(wizard =\u003e wizard.index === 3);\n                                        await candidateDataManager.saveCandidateData(fieldsToUpgrade.fields);\n                                        await domManager.getWizardForm(3, wizardStep);\n                                    }\n                                }\n                            ],\n                            description: \"Заполните адрес регистрации\",\n                            label: \"Адрес регистрации\",\n                            index: 2,\n                            isFinal: false,\n                            fields: [\n                                {\n                                    typeCode: FieldTypeEnum.CATEGORY,\n                                    required: false,\n                                    label: \"Регион\",\n                                    appFieldCode: \"directory_of_regions\",\n                                    variants: []\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.STRING,\n                                    required: true,\n                                    label: \"Город (посёлок, село)\",\n                                    appFieldCode: \"city\"\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.STRING,\n                                    required: true,\n                                    label: \"Улица\",\n                                    appFieldCode: \"street\"\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.STRING,\n                                    required: true,\n                                    label: \"Дом\",\n                                    appFieldCode: \"home\"\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.STRING,\n                                    required: false,\n                                    label: \"Корпус\",\n                                    appFieldCode: \"housing\"\n                                },\n                                {\n                                    typeCode: FieldTypeEnum.STRING,\n                                    required: false,\n                                    label: \"Квартира\",\n                                    appFieldCode: \"apartment\"\n                                },\n                            ],\n                            validate() {\n                                let requiredFields = [];\n                                let field;\n                                for (field of this.fields) {\n                                    const relatedNode = document.querySelector(`.required[data-app_code=${field.appFieldCode}]`);\n                                    relatedNode \u0026\u0026 relatedNode.querySelector(\"input\") \u0026\u0026 requiredFields.push(relatedNode);\n                                }\n                                ;\n                                return requiredFields.every((node) =\u003e {\n                                    const nodeInput = node.querySelector(\"input\");\n                                    return nodeInput.validity.valid \u0026\u0026 nodeInput.value;\n                                });\n                            }\n                        },\n                        {\n                            title: \"Документы\",\n                            label: \"Документы\",\n                            description: \"Пожалуйста отсканируйте или сфотографируйте необходимые для загрузки документы и прикрепите файлы. Обратите внимание, что сканы/фото документов должны быть хорошего качества\",\n                            index: 3,\n                            isFinal: true,\n                            fields: [],\n                            buttons: [\n                                {\n                                    btnType: ButtonType.COMMON,\n                                    text: \"\u003c Назад\",\n                                    async action() {\n                                        const wizardStep = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(wizard =\u003e wizard.index === 2);\n                                        await domManager.getWizardForm(2, wizardStep);\n                                    }\n                                },\n                                {\n                                    btnType: ButtonType.PRIMARY,\n                                    text: \"Продолжить\",\n                                    async action() {\n                                        const fieldsToUpgrade = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(wizard =\u003e wizard.index === 3);\n                                        await candidateDataManager.saveCandidateData(fieldsToUpgrade.fields);\n                                        await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.questionnaire_completed);\n                                        await domManager.refreshForm(\"3\");\n                                    }\n                                }\n                            ],\n                            validate() {\n                                let requiredFields = Array.from(document.querySelectorAll(\".required\"));\n                                return requiredFields.every((field) =\u003e {\n                                    const fileField = field.querySelector(\".file_input\");\n                                    if (!fileField) {\n                                        const inputField = field.querySelector(\"input\");\n                                        return inputField.validity.valid \u0026\u0026 inputField.value;\n                                    }\n                                    ;\n                                    return fileField.files.length \u003e 0;\n                                }) || requiredFields.length \u003c 1;\n                            }\n                        },\n                    ]\n                }\n            }, {\n                index: \"3\",\n                title: \"Данные были отправлены на проверку\",\n                description: \"Дождитесь положительного результата. Оповещение придёт вам на почту или по СМС. Система автоматически переведет вас на следующий шаг\",\n                addData() {\n                    const infoSvg = document.querySelector(\".info_svg-template\").content.cloneNode(true).querySelector(\".info_svg_container\");\n                    domManager.formContainer.prepend(infoSvg);\n                }\n            }, {\n                index: \"4\",\n                title: \"Медицинский осмотр\",\n                description: \"В случае получения результатов медосмотра в день прохождения укажите ту же дату\",\n                fields: [\n                    {\n                        label: \"Дата прохождения\",\n                        required: true,\n                        appFieldCode: \"medical_request_date\",\n                        typeCode: FieldTypeEnum.DATE,\n                        maxLength: 10,\n                        placeholder: \"ДД.ММ.ГГГГ\"\n                    }, {\n                        label: \"Дата получения медкнижки\",\n                        required: true,\n                        appFieldCode: \"medical_book_date\",\n                        typeCode: FieldTypeEnum.DATE,\n                        maxLength: 10,\n                        placeholder: \"ДД.ММ.ГГГГ\"\n                    }, {\n                        label: \"Результаты медосмотра\",\n                        required: true,\n                        appFieldCode: \"results_medical_examination\",\n                        typeCode: FieldTypeEnum.FILE\n                    }\n                ],\n                buttons: [\n                    {\n                        btnType: ButtonType.PRIMARY,\n                        text: \"Продолжить\",\n                        async action() {\n                            await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.medical_examination_completed);\n                            await domManager.refreshForm(\"5\");\n                        }\n                    }\n                ],\n                validate() {\n                    const requiredFields = Array.from(document.querySelectorAll(\".required\"));\n                    console.log(requiredFields);\n                    return requiredFields.length \u003c 1 || requiredFields.every((field) =\u003e {\n                        const fieldInput = field.querySelector(\".common_field-input\");\n                        if (fieldInput) {\n                            console.log(`checking input: `, field);\n                            return fieldInput.validity \u0026\u0026 fieldInput.validity.valid \u0026\u0026 fieldInput.value;\n                        }\n                        ;\n                        const fileInput = field.querySelector(\".file_input\");\n                        return fileInput.files \u0026\u0026 fileInput.files.length \u003e 0;\n                    });\n                },\n                addData() {\n                    const fileLine = document.querySelector(\".file_line-template\").content.cloneNode(true).querySelector(\".file_line-file\");\n                    fileLine.querySelector(\".file_line-file_name\").textContent = \"Направление на медосмотр\";\n                    domManager.mainInfoContainer.prepend(fileLine);\n                }\n            }, {\n                index: \"5\",\n                title: \"Данные были отправлены на проверку\",\n                description: \"Дождитесь положительного результата. Оповещение придёт вам на почту или по СМС. Система автоматически переведет вас на следующий шаг\",\n                addData() {\n                    const infoSvg = document.querySelector(\".info_svg-template\").content.cloneNode(true).querySelector(\".info_svg_container\");\n                    domManager.formContainer.prepend(infoSvg);\n                }\n            }, {\n                index: \"6\",\n                buttons: [\n                    {\n                        btnType: ButtonType.PRIMARY,\n                        text: \"Подтвердить\",\n                        async action() {\n                            await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.approved);\n                            await domManager.refreshForm(\"6\");\n                        }\n                    },\n                    {\n                        btnType: ButtonType.COMMON,\n                        text: \"Требуется уточнение\",\n                        async action() {\n                            const staffCorrectionContainer = document.querySelector(\".staff_correction_container-template\").content.cloneNode(true).querySelector(\".staff_correction_container\");\n                            const correctionButton = staffCorrectionContainer.querySelector(\".staff_correction_container-button\");\n                            correctionButton.addEventListener(\"click\", async () =\u003e {\n                                const correctionText = staffCorrectionContainer.querySelector(\".staff_correction-comment_section-input\").value;\n                                candidateDataManager.candidate.data.correction_comment = correctionText;\n                                await candidateDataManager.candidate.save();\n                                closeContainer(correctionButton, 'staff_correction_container', true);\n                                await candidateDataManager.setStatus(candidateDataManager.candidate.fields.__status.variants.clarifying_job_offer);\n                                await domManager.refreshForm(\"8\");\n                            });\n                            domManager.kedoModal.append(staffCorrectionContainer);\n                            domManager.kedoModal.classList.toggle(\"kedo-hidden\");\n                        }\n                    }\n                ],\n                title: \"Предложение о работе\",\n                description: \"Поздравляем Вас с Предложением о работе. Пожалуйста, ознакомьтесь с условиями ниже и дайте Ваш ответ в течение delay В случае необходимости изменения даты трудоустройства или уточнения условий нажмите 'Требуется уточнение'\",\n                fields: [\n                    {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        label: \"Кандидат на позицию - positionName\",\n                        appFieldCode: \"\",\n                        required: false,\n                        replace() {\n                            return this.label.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n                        },\n                        needReplace: false\n                    }, {\n                        typeCode: FieldTypeEnum.DATE,\n                        label: \"Дата выхода на работу\",\n                        appFieldCode: \"date_employment\",\n                        required: true,\n                        placeholder: \"ДД.ММ.ГГГГ\",\n                        maxLength: 10\n                    }, {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        label: 'Описание позиции positionName',\n                        appFieldCode: \"\",\n                        required: false,\n                        id: \"position_field\",\n                        replace() {\n                            return this.label.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n                        },\n                        needReplace: false\n                    }, {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        label: 'Распечатайте файл, подпишите Предложение о работе и приложите фото/скан подписанного предложения',\n                        appFieldCode: \"\",\n                        required: false,\n                        id: \"file_info\"\n                    }, {\n                        typeCode: FieldTypeEnum.FILE,\n                        label: 'Подписанное предложение',\n                        appFieldCode: \"signed_job_offer\",\n                        required: false\n                    }\n                ],\n                async addData() {\n                    const positionInfo = candidateDataManager.relatedPosition.data.description_position;\n                    const positionInfoContainer = document.createElement(\"p\");\n                    const fileInfoContainer = document.querySelector(\"#file_info\");\n                    const positionField = domManager.mainInfoContainer.querySelector(\"#position_field\");\n                    const fileLine = document.querySelector(\".file_line-template\").content.cloneNode(true).querySelector(\".common-file-field\");\n                    fileLine.querySelector(\".file_line-file_name\").textContent = \"Предложение о работе\";\n                    fileLine.href = candidateDataManager.candidate.data.job_offer_candidate ? await candidateDataManager.candidate.data.job_offer_candidate.getDownloadUrl() : \"\";\n                    positionInfoContainer.className = \"common-descriptor\";\n                    positionInfoContainer.innerHTML = positionInfo;\n                    fileInfoContainer.after(fileLine);\n                    positionField.after(positionInfoContainer);\n                }\n            },\n            {\n                index: \"7\",\n                title: \"Поздравляем, Вы подтвердили предложение о работе!\",\n                fields: [\n                    {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        required: false,\n                        label: \"Дата оформления\",\n                        replace() {\n                            return candidateDataManager.candidate.data.issue_date ? candidateDataManager.candidate.data.issue_date.format(\"DD.MM.YYYY\") : \"\";\n                        },\n                        needReplace: true\n                    },\n                    {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        required: false,\n                        label: \"Дата первого рабочего дня\",\n                        replace() {\n                            return candidateDataManager.candidate.data.date_employment ? candidateDataManager.candidate.data.date_employment.format(\"DD.MM.YYYY\") : \"\";\n                        },\n                        needReplace: true\n                    },\n                    {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        required: false,\n                        label: \"Должность\",\n                        replace() {\n                            return candidateDataManager.relatedPosition ? candidateDataManager.relatedPosition.data.__name : \"\";\n                        },\n                        needReplace: true\n                    },\n                    {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        label: 'Описание позиции positionName',\n                        appFieldCode: \"\",\n                        required: false,\n                        id: \"position_field\",\n                        replace() {\n                            return this.label.replace(\"positionName\", candidateDataManager.relatedPosition.data.__name);\n                        },\n                        needReplace: false\n                    },\n                    {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        label: 'Документы',\n                        required: false,\n                        id: \"documents_field\",\n                        needReplace: false\n                    },\n                    {\n                        typeCode: FieldTypeEnum.SIMPLE,\n                        label: 'Дополнительная информация',\n                        required: false,\n                        id: \"additional_info\"\n                    },\n                ],\n                async addData() {\n                    const positionInfo = candidateDataManager.relatedPosition.data.description_position;\n                    const positionInfoContainer = document.createElement(\"p\");\n                    const positionField = domManager.mainInfoContainer.querySelector(\"#position_field\");\n                    const documentsField = document.querySelector(\"#documents_field\");\n                    positionInfoContainer.className = \"common-descriptor\";\n                    positionInfoContainer.innerHTML = positionInfo;\n                    positionField.after(positionInfoContainer);\n                    if (candidateDataManager.candidate.data.memo_for_candidate) {\n                        const positionMemoFile = document.querySelector(\".file_line-template\").content.cloneNode(true).querySelector(\".common-file-field\");\n                        positionMemoFile.href = await candidateDataManager.candidate.data.memo_for_candidate.getDownloadUrl();\n                        positionMemoFile.querySelector(\".file_line-file_name\").textContent = \"Памятка о трудоустройстве\";\n                        documentsField.after(positionMemoFile);\n                    }\n                    ;\n                    if (candidateDataManager.candidate.data.job_offer_candidate) {\n                        const jobOfferFile = document.querySelector(\".file_line-template\").content.cloneNode(true).querySelector(\".common-file-field\");\n                        jobOfferFile.href = await candidateDataManager.candidate.data.job_offer_candidate.getDownloadUrl();\n                        jobOfferFile.querySelector(\".file_line-file_name\").textContent = \"Предложение о работе\";\n                        documentsField.after(jobOfferFile);\n                    }\n                    ;\n                }\n            },\n            {\n                index: \"8\",\n                title: \"Данные были отправлены на уточнение\",\n                description: \"Вы запросили уточнение. Пожалуйста, ожидайте, когда к Вам вернутся с ответом. Вам придет оповещение\",\n                addData() {\n                    const infoSvg = document.querySelector(\".info_svg-template\").content.cloneNode(true).querySelector(\".info_svg_container\");\n                    domManager.formContainer.prepend(infoSvg);\n                }\n            }\n        ];\n        class DomManager {\n            constructor() {\n                this.frontIndex = 1;\n                this.formIndex = \"0\";\n                this.wizardIndex = 1;\n            }\n            setDate(event) {\n                const inputField = event.target.closest(\".common_field-input-container\").querySelector(\"input\");\n                const calendarContainer = event.target.closest(\".common_field-calendar_container\");\n                const [year, month, day] = [...event.target.dataset.calendarDay.split(\"-\")];\n                inputField.value = `${day}.${month}.${year}`;\n                calendarContainer.classList.toggle(\"hidden\");\n            }\n            ;\n            formatIssuerCode(input) {\n                if (!input.value || input.value.includes(\"-\")) {\n                    return;\n                }\n                ;\n                input.value = input.value.replace(/(\\d{3})/, \"$1-\");\n            }\n            ;\n            formatSnils(input) {\n                if (!input.value) {\n                    return;\n                }\n                ;\n                switch (input.value.replace(/\\-/g, \"\").replace(\"\\s\", \"\").length) {\n                    case 3:\n                        input.value = input.value.replace(/(\\d{3})/, '$1-');\n                        break;\n                    case 6:\n                        input.value = input.value.replace(/(\\d{3})\\-(\\d{3})/, '$1-$2-');\n                        break;\n                    case 9:\n                        input.value = input.value.replace(/(\\d{3})\\-(\\d{3})\\-(\\d{3})/, '$1-$2-$3 ');\n                        break;\n                }\n                ;\n            }\n            ;\n            formatDate(input) {\n                if (!input.value) {\n                    return;\n                }\n                ;\n                switch (input.value.replace(\".\", \"\").length) {\n                    case 2:\n                        input.value = input.value.replace(/(\\d{2})/, '$1.');\n                        break;\n                    case 4:\n                        input.value = input.value.replace(/(\\d{2})\\.(\\d{2})/, '$1.$2.');\n                        break;\n                }\n                ;\n            }\n            ;\n            async deleteFile(e) {\n                const target = e.target.classList.contains(\".file_input-delete\") ? e.target : e.target.closest(\".file_input-delete\");\n                const fileInput = target.parentElement.querySelector(\".file_input\");\n                const fileContainer = target.closest(\".common_file-container\");\n                const fileName = target.parentElement.querySelector(\".file_input-name\");\n                const fileId = target.parentElement.querySelector(\"input\").id.replace(\"id-\", \"\");\n                const table = candidateDataManager.candidate.data.table_personal_documents;\n                const relatedRow = table.find(row =\u003e row.document_type.id === fileId);\n                relatedRow.file_document = undefined;\n                candidateDataManager.candidate.data.table_personal_documents = table;\n                await candidateDataManager.candidate.save();\n                fileContainer.classList.remove(\"kedo-hidden\");\n                fileName.classList.add(\"kedo-hidden\");\n                target.classList.add(\"kedo-hidden\");\n                fileInput.value = \"\";\n            }\n            downloadFile(e) {\n                const fileInput = e.target.parentElement.querySelector(\".file_input\");\n                const url = URL.createObjectURL(fileInput.files[0]);\n                const mockLink = document.createElement(\"a\");\n                mockLink.target = \"_blank\";\n                mockLink.href = url;\n                mockLink.download = fileInput.files[0].name || 'download';\n                mockLink.click();\n            }\n            ;\n            async refreshForm(index) {\n                const currentForm = formDataObj.find(form =\u003e form.index === index);\n                if (currentForm) {\n                    this.frontIndex = Number(index);\n                    await this.renderForm(currentForm);\n                }\n                ;\n            }\n            ;\n            refreshMainContainer() {\n                this.formContainer.querySelector(\".kedo_portal-main_section-container_main-info\").innerHTML = \"\";\n                this.formContainer.querySelector(\".common-title\").innerHTML = \"\";\n                this.formContainer.querySelector(\".common-descriptor\").innerHTML = \"\";\n                this.formContainer.querySelector(\".common-button-container\").innerHTML = \"\";\n                this.mainInfoContainer.innerHTML = \"\";\n            }\n            ;\n            renderButton(button) {\n                const newButton = document.createElement(\"button\");\n                newButton.classList.add(\"common-button\");\n                newButton.classList.add(button.btnType);\n                newButton.textContent = button.text;\n                button.action \u0026\u0026 newButton.addEventListener(\"click\", button.action);\n                if ([2, 4].indexOf(this.frontIndex) !== -1 \u0026\u0026 button.btnType === ButtonType.PRIMARY) {\n                    newButton.classList.add(\"inactive\");\n                    this.nextButton = newButton;\n                }\n                ;\n                this.formFooter.querySelector(\".common-button-container\").appendChild(newButton);\n            }\n            ;\n            async renderForm(currentForm, dataToReplace) {\n                this.wizardContainer.innerHTML = \"\";\n                this.refreshMainContainer();\n                if (!currentForm.buttons) {\n                    this.formContainer.classList.add(\"wait\");\n                }\n                else {\n                    this.formContainer.classList.remove(\"wait\");\n                }\n                ;\n                if (currentForm.title) {\n                    this.formContainer.querySelector(\".common-title\").textContent = currentForm.replace \u0026\u0026 dataToReplace ? currentForm.replace(Object.assign(Object.assign({}, dataToReplace), { field: \"title\" })) : currentForm.title;\n                }\n                ;\n                if (currentForm.description) {\n                    this.formContainer.querySelector(\".common-descriptor\").textContent = currentForm.replace \u0026\u0026 dataToReplace ? currentForm.replace(Object.assign(Object.assign({}, dataToReplace), { field: \"description\" })) : currentForm.description;\n                }\n                ;\n                !this.wizardContainer.classList.contains(\"kedo-hidden\") \u0026\u0026 this.wizardContainer.classList.add(\"kedo-hidden\");\n                currentForm.wizard \u0026\u0026 await this.processWizard(currentForm.wizard);\n                const formSteps = Array.from(document.querySelectorAll(\".kedo_portal-main_section-path_part\"));\n                if (currentForm.fields) {\n                    for (let field of currentForm.fields) {\n                        let validate;\n                        if (currentForm.validate) {\n                            validate = currentForm.validate.bind(currentForm);\n                        }\n                        ;\n                        await this.renderField(field, validate);\n                    }\n                    ;\n                }\n                ;\n                currentForm.addData \u0026\u0026 currentForm.addData();\n                currentForm.buttons \u0026\u0026 currentForm.buttons.forEach(button =\u003e this.renderButton(button));\n                for (let i = 0; i + 1 \u003c= this.frontIndex; i++) {\n                    formSteps[i] \u0026\u0026 !formSteps[i].classList.contains(\"active\") \u0026\u0026 formSteps[i].classList.toggle(\"active\");\n                }\n                ;\n                formSteps.slice(this.frontIndex).forEach((node) =\u003e {\n                    node.classList.contains(\"active\") \u0026\u0026 node.classList.remove(\"active\");\n                });\n                if (currentForm.validate) {\n                    const fieldsIsValid = currentForm.validate();\n                    fieldsIsValid \u0026\u0026 this.enableNextButton();\n                    !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                }\n                ;\n                currentForm.validate \u0026\u0026 currentForm.validate();\n            }\n            ;\n            async processWizard(wizard) {\n                this.wizardContainer.classList.contains(\"kedo-hidden\") \u0026\u0026 this.wizardContainer.classList.remove(\"kedo-hidden\");\n                for (let step of wizard.steps) {\n                    const wizardStep = this.getStep(step);\n                    wizardStep.dataset[\"wizard_index\"] = step.index;\n                    this.wizardContainer.append(wizardStep);\n                    if (!step.isFinal) {\n                        const stepConnect = this.wizardStepConnect.content.cloneNode(true);\n                        this.wizardContainer.append(stepConnect);\n                    }\n                    ;\n                }\n                ;\n                let stepIndex = 0;\n                for (let step of wizard.steps) {\n                    if (candidateDataManager.checkCandidateFields(step.fields)) {\n                        stepIndex++;\n                    }\n                    ;\n                }\n                ;\n                await this.getWizardForm(stepIndex + 1, wizard.steps[stepIndex]);\n            }\n            ;\n            async renderField(field, validate) {\n                const simpleField = field.typeCode === FieldTypeEnum.SIMPLE;\n                const newFieldNode = simpleField ? this.simpleFieldTemplate.content.cloneNode(true).querySelector(\".simple_field\") : this.textFieldTemplate.content.cloneNode(true).querySelector(\".common_field\");\n                if (field.id) {\n                    newFieldNode.id = field.id;\n                }\n                ;\n                const label = simpleField ? newFieldNode.querySelector(\".simple_field-text\") : newFieldNode.querySelector(\".common_field-label\");\n                const inputContainer = newFieldNode.querySelector(\".common_field-input-container\");\n                const input = newFieldNode.querySelector(\".common_field-input\");\n                if (candidateDataManager.candidate.data[field.appFieldCode]) {\n                    switch (field.typeCode) {\n                        case FieldTypeEnum.CATEGORY:\n                            input.value = candidateDataManager.region.data.__name;\n                            break;\n                        case FieldTypeEnum.DATE:\n                            input.value = candidateDataManager.candidate.data[field.appFieldCode].format(\"DD.MM.YYYY\");\n                            break;\n                        case FieldTypeEnum.EMAIL:\n                            input.value = candidateDataManager.candidate.data.email.email;\n                            break;\n                        case FieldTypeEnum.PHONE:\n                            input.value = candidateDataManager.candidate.data.phone.tel;\n                            break;\n                        case FieldTypeEnum.STRING:\n                            input.value = candidateDataManager.candidate.data[field.appFieldCode];\n                            break;\n                    }\n                }\n                let fieldsIsValid = false;\n                !simpleField \u0026\u0026 [\"change\", \"input\", \"paste\", \"blur\"].forEach(action =\u003e input.addEventListener(action, () =\u003e {\n                    if (validate) {\n                        fieldsIsValid = validate();\n                        fieldsIsValid \u0026\u0026 this.enableNextButton();\n                        !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                    }\n                    ;\n                }));\n                const booleanField = field.typeCode === FieldTypeEnum.BOOLEAN;\n                if (field.typeCode === FieldTypeEnum.DATE) {\n                    let elementPrototype = Object.getPrototypeOf(input);\n                    if (elementPrototype.hasOwnProperty(\"value\")) {\n                        let descriptor = Object.getOwnPropertyDescriptor(elementPrototype, \"value\");\n                        Object.defineProperty(input, \"value\", {\n                            get: function () {\n                                return descriptor.get.apply(this, arguments);\n                            },\n                            set: function () {\n                                descriptor.set.apply(this, arguments);\n                                if (validate) {\n                                    fieldsIsValid = validate();\n                                    fieldsIsValid \u0026\u0026 domManager.enableNextButton();\n                                    !fieldsIsValid \u0026\u0026 domManager.disableNextButton();\n                                }\n                                ;\n                            }\n                        });\n                    }\n                    const newCalendarNode = document.createElement(\"div\");\n                    newCalendarNode.className = \"common_field-calendar_container\";\n                    newCalendarNode.classList.add(\"hidden\");\n                    const calendarButton = document.querySelector(\".common_date-template\").content.cloneNode(true).querySelector(\".common_date\");\n                    calendarButton.addEventListener(\"click\", (e) =\u003e {\n                        newCalendarNode.classList.toggle(\"hidden\");\n                    }, false);\n                    const newCalendar = new VanillaCalendar(newCalendarNode, options);\n                    inputContainer.append(newCalendarNode);\n                    inputContainer.append(calendarButton);\n                    inputContainer.classList.add(\"common_date-field\");\n                    newCalendar.init();\n                    input.addEventListener(\"input\", (e) =\u003e {\n                        this.formatDate(e.target);\n                    });\n                }\n                else {\n                    newFieldNode.classList.add(`common_${field.typeCode}`);\n                }\n                ;\n                if (field.variants) {\n                    booleanField \u0026\u0026 inputContainer.remove();\n                    let variantsContainer;\n                    let newVariant;\n                    switch (field.typeCode) {\n                        case FieldTypeEnum.CATEGORY:\n                            input.addEventListener(\"focus\", (e) =\u003e {\n                                e.target.nextElementSibling.classList.remove(\"kedo-hidden\");\n                            });\n                            input.addEventListener(\"input\", () =\u003e {\n                                const variants = document.querySelectorAll(\".common_category-item\");\n                                variants.forEach((variant) =\u003e {\n                                    if (!variant.textContent.toLowerCase().includes(input.value.toLowerCase()) \u0026\u0026 !variant.classList.contains(\"kedo-hidden\")) {\n                                        variant.classList.add(\"kedo-hidden\");\n                                    }\n                                    else if (variant.textContent.toLowerCase().includes(input.value.toLowerCase()) \u0026\u0026 variant.classList.contains(\"kedo-hidden\") || !input.value) {\n                                        variant.classList.remove(\"kedo-hidden\");\n                                    }\n                                    ;\n                                });\n                            });\n                            variantsContainer = document.querySelector(\".common_category-container-template\").content.cloneNode(true).querySelector(\".common_category-container\");\n                            field.variants.forEach(variant =\u003e {\n                                newVariant = document.querySelector(\".common_category-item-template\").content.cloneNode(true).querySelector(\".common_category-item\");\n                                newVariant.textContent = variant.name;\n                                newVariant.dataset[\"variant_code\"] = variant.code;\n                                newVariant.addEventListener(\"click\", () =\u003e {\n                                    input.value = variant.name;\n                                    input.dataset[\"variant_code\"] = variant.code;\n                                    newVariant.parentElement.classList.toggle(\"kedo-hidden\");\n                                });\n                                variantsContainer.append(newVariant);\n                            });\n                            break;\n                        case FieldTypeEnum.BOOLEAN:\n                            const existingValue = candidateDataManager.candidate.data[field.appFieldCode];\n                            variantsContainer = document.createElement(\"div\");\n                            variantsContainer.className = \"common_radio\";\n                            field.variants.forEach(variant =\u003e {\n                                newVariant = document.createElement(\"div\");\n                                newVariant.className = \"common_radio-variant\";\n                                newVariant.textContent = variant.name;\n                                newVariant.dataset[\"variant_code\"] = variant.code;\n                                newVariant.addEventListener(\"click\", (e) =\u003e {\n                                    commonRadioSelect(e.target);\n                                    if (validate) {\n                                        fieldsIsValid = validate();\n                                        fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                        !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                                    }\n                                    ;\n                                });\n                                variantsContainer.append(newVariant);\n                                if (variant.code === existingValue) {\n                                    commonRadioSelect(newVariant);\n                                }\n                                ;\n                            });\n                    }\n                    ;\n                    field.typeCode === FieldTypeEnum.CATEGORY \u0026\u0026 inputContainer.append(variantsContainer);\n                    field.typeCode === FieldTypeEnum.BOOLEAN \u0026\u0026 newFieldNode.append(variantsContainer);\n                }\n                ;\n                if (field.typeCode === FieldTypeEnum.FILE) {\n                    inputContainer.remove();\n                    const fileContainer = document.querySelector(\".common_file-container-template\").content.cloneNode(true).querySelector(\".common_file-container\");\n                    const hiddenInput = fileContainer.querySelector(\"input\");\n                    const actualInput = fileContainer.querySelector(\"label\");\n                    hiddenInput.id = `id-${field.docId}`;\n                    actualInput.htmlFor = `id-${field.docId}`;\n                    actualInput.addEventListener(\"dragenter\", (e) =\u003e {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        e.target.parentElement.classList.toggle(\"hovered\");\n                    });\n                    actualInput.addEventListener(\"dragleave\", (e) =\u003e {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        e.target.parentElement.classList.toggle(\"hovered\");\n                    });\n                    actualInput.addEventListener(\"dragover\", (e) =\u003e {\n                        e.stopPropagation();\n                        e.preventDefault();\n                    });\n                    hiddenInput.addEventListener(\"change\", (e) =\u003e {\n                        const files = e.target.files;\n                        const reader = new FileReader();\n                        reader.onload = async (e) =\u003e {\n                            const fileInputName = fileContainer.querySelector(\".file_input-name\");\n                            const fileInputDelete = fileContainer.querySelector(\".file_input-delete\");\n                            [fileInputDelete, fileInputName].forEach((node) =\u003e node.classList.remove(\"kedo-hidden\"));\n                            fileInputName.textContent = files[0].name;\n                            fileInputName.addEventListener(\"click\", (e) =\u003e {\n                                this.downloadFile(e);\n                            });\n                            fileInputDelete.addEventListener(\"click\", (e) =\u003e {\n                                this.deleteFile(e).then(_ =\u003e {\n                                    if (validate) {\n                                        fieldsIsValid = validate();\n                                        fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                        !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                                    }\n                                    ;\n                                });\n                            });\n                            fileContainer.classList.add(\"kedo-hidden\");\n                            if (validate) {\n                                fieldsIsValid = validate();\n                                console.log(\"validate file: \", fieldsIsValid);\n                                fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                            }\n                            ;\n                        };\n                        reader.readAsArrayBuffer(files[0]);\n                    });\n                    actualInput.addEventListener(\"drop\", (e) =\u003e {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        const dt = e.dataTransfer;\n                        const files = dt.files;\n                        e.target.parentElement.classList.toggle(\"hovered\");\n                        const reader = new FileReader();\n                        reader.onload = async (e) =\u003e {\n                            const fileBuffer = e.target.result;\n                            const table = candidateDataManager.candidate.data.table_personal_documents;\n                            const relatedTableRow = table.find(row =\u003e row.document_type.id === field.docId);\n                            if (relatedTableRow) {\n                                relatedTableRow.file_document = await Context.fields.file_field.create(files[0].name, fileBuffer);\n                                candidateDataManager.candidate.data.table_personal_documents = table;\n                            }\n                            else {\n                                candidateDataManager.candidate.data[field.appFieldCode] = await Context.fields.file_field.create(files[0].name, fileBuffer);\n                            }\n                            ;\n                            const fileInputName = fileContainer.querySelector(\".file_input-name\");\n                            const fileInputDelete = fileContainer.querySelector(\".file_input-delete\");\n                            [fileInputDelete, fileInputName].forEach((node) =\u003e node.classList.remove(\"kedo-hidden\"));\n                            fileInputName.textContent = files[0].name;\n                            fileInputName.addEventListener(\"click\", (e) =\u003e {\n                                this.downloadFile(e);\n                            });\n                            fileInputDelete.addEventListener(\"click\", (e) =\u003e {\n                                this.deleteFile(e).then(_ =\u003e {\n                                    if (validate) {\n                                        fieldsIsValid = validate();\n                                        fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                        !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                                    }\n                                    ;\n                                });\n                            });\n                            fileContainer.classList.add(\"kedo-hidden\");\n                            await candidateDataManager.candidate.save();\n                            hiddenInput.files = files;\n                            if (validate) {\n                                fieldsIsValid = validate();\n                                console.log(\"validate file: \", fieldsIsValid);\n                                fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                            }\n                            ;\n                        };\n                        reader.readAsArrayBuffer(files[0]);\n                    });\n                    const relatedFileObj = candidateDataManager.docsTable.find(file =\u003e file.docId === field.docId);\n                    if (relatedFileObj \u0026\u0026 relatedFileObj.file) {\n                        const fileBuffer = await fetch(await relatedFileObj.file.getDownloadUrl()).then(res =\u003e res.arrayBuffer());\n                        const newFile = new File([fileBuffer], relatedFileObj.fileName);\n                        const dataTransfer = new DataTransfer();\n                        dataTransfer.items.add(newFile);\n                        hiddenInput.files = dataTransfer.files;\n                        const fileInputName = fileContainer.querySelector(\".file_input-name\");\n                        const fileInputDelete = fileContainer.querySelector(\".file_input-delete\");\n                        [fileInputDelete, fileInputName].forEach((node) =\u003e node.classList.remove(\"kedo-hidden\"));\n                        fileInputName.textContent = relatedFileObj.fileName;\n                        fileInputName.addEventListener(\"click\", (e) =\u003e {\n                            this.downloadFile(e);\n                        });\n                        fileInputDelete.addEventListener(\"click\", (e) =\u003e {\n                            this.deleteFile(e).then(_ =\u003e {\n                                if (validate) {\n                                    fieldsIsValid = validate();\n                                    fieldsIsValid \u0026\u0026 this.enableNextButton();\n                                    !fieldsIsValid \u0026\u0026 this.disableNextButton();\n                                }\n                                ;\n                            });\n                        });\n                        fileContainer.classList.add(\"kedo-hidden\");\n                    }\n                    ;\n                    newFieldNode.append(fileContainer);\n                }\n                ;\n                label.textContent = field.replace \u0026\u0026 !field.needReplace ? field.replace() : field.label;\n                if (field.required) {\n                    label.innerHTML = `${field.label}\u003cspan class=\"required_field\"\u003e *\u003c/span\u003e`;\n                }\n                ;\n                if (field.typeCode === FieldTypeEnum.SIMPLE \u0026\u0026 field.replace \u0026\u0026 field.needReplace) {\n                    newFieldNode.querySelector(\".simple_field-description\").textContent = field.replace();\n                }\n                ;\n                newFieldNode.dataset[\"app_code\"] = field.appFieldCode;\n                if (field.regex) {\n                    input.pattern = field.regex;\n                }\n                ;\n                if (field.label === \"СНИЛС\") {\n                    input.addEventListener(\"input\", (e) =\u003e {\n                        if (e.inputType === \"deleteContentBackward\" || (input.value \u0026\u0026 input.value.endsWith(\"-\"))) {\n                            return;\n                        }\n                        ;\n                        this.formatSnils(e.target);\n                    });\n                    input.addEventListener(\"paste\", (e) =\u003e {\n                        const data = e.clipboardData.getData('text/plain');\n                        switch (data.replace(/\\-/g, \"\").replace(\"\\s\", \"\").length) {\n                            case 3:\n                                input.value = data.replace(/(\\d{3})/, '$1-');\n                                break;\n                            case 6:\n                                input.value = data.replace(/(\\d{3})\\-(\\d{3})/, '$1-$2-');\n                                break;\n                            case 9:\n                                input.value = data.replace(/(\\d{3})\\-(\\d{3})\\-(\\d{3})/, '$1-$2-$3 ');\n                                break;\n                            default:\n                                input.value = data.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1-$2-$3 $4');\n                        }\n                        ;\n                    });\n                }\n                ;\n                if (field.label === \"Код подразделения\") {\n                    input.addEventListener(\"input\", (e) =\u003e {\n                        if (e.inputType === \"deleteContentBackward\" || (input.value \u0026\u0026 input.value.endsWith(\"-\"))) {\n                            return;\n                        }\n                        ;\n                        this.formatIssuerCode(e.target);\n                    });\n                    input.addEventListener(\"paste\", (e) =\u003e {\n                        const data = e.clipboardData.getData('text/plain');\n                        input.value = data.replace(/(\\d{3})/, '$1-');\n                    });\n                }\n                if (field.maxLength) {\n                    input.maxLength = field.maxLength;\n                }\n                ;\n                if (field.placeholder) {\n                    input.placeholder = field.placeholder;\n                }\n                ;\n                field.replace \u0026\u0026 field.replace();\n                field.required \u0026\u0026 newFieldNode.classList.add(\"required\");\n                this.mainInfoContainer.append(newFieldNode);\n            }\n            ;\n            async getWizardForm(index, wizardStep) {\n                this.refreshMainContainer();\n                const wizardSteps = Array.from(document.querySelectorAll(\".wizard_step\"));\n                this.formContainer.querySelector(\".common-title\").textContent = wizardStep.title;\n                this.formContainer.querySelector(\".common-descriptor\").textContent = wizardStep.description;\n                let fieldsIsValid = false;\n                for (let field of wizardStep.fields) {\n                    const validate = wizardStep.validate.bind(wizardStep);\n                    await this.renderField(field, validate);\n                }\n                ;\n                fieldsIsValid = wizardStep.validate();\n                if (wizardStep.buttons) {\n                    wizardStep.buttons.forEach(button =\u003e this.renderButton(button));\n                }\n                ;\n                for (let i = 0; i \u003c index; i++) {\n                    !wizardSteps[i].classList.contains(\"active\") \u0026\u0026 wizardSteps[i].classList.toggle(\"active\");\n                    wizardSteps[i].nextElementSibling \u0026\u0026 wizardSteps[i].nextElementSibling.classList.contains(\"wizard_step-connect\") \u0026\u0026 wizardSteps[i].nextElementSibling.classList.add(\"active\");\n                }\n                ;\n                wizardSteps.slice(index).forEach((node) =\u003e {\n                    node.classList.contains(\"active\") \u0026\u0026 node.classList.remove(\"active\");\n                    node.nextElementSibling \u0026\u0026 node.nextElementSibling.classList.contains(\"active\") \u0026\u0026 node.nextElementSibling.classList.remove(\"active\");\n                });\n                fieldsIsValid \u0026\u0026 this.enableNextButton();\n                !fieldsIsValid \u0026\u0026 this.disableNextButton();\n            }\n            ;\n            getStep(step) {\n                const newStep = this.wizardStepTemplate.content.cloneNode(true).querySelector(\".wizard_step\");\n                newStep.querySelector(\".wizard_step-label\").textContent = step.label;\n                return newStep;\n            }\n            ;\n            disableNextButton() {\n                !this.nextButton.classList.contains(\"inactive\") \u0026\u0026 this.nextButton.classList.add(\"inactive\");\n            }\n            ;\n            enableNextButton() {\n                this.nextButton.classList.contains(\"inactive\") \u0026\u0026 this.nextButton.classList.remove(\"inactive\");\n            }\n            ;\n            handleLoader(node) {\n                if (node.querySelector(\".loader_spinner-container\")) {\n                    node.querySelector(\".loader_spinner-container\").remove();\n                }\n                else {\n                    const loaderTemplate = document.querySelector(\".loader_spinner-container-template\").content.cloneNode(true).querySelector(\".loader_spinner-container\");\n                    node.append(loaderTemplate);\n                }\n                ;\n            }\n            ;\n            async setHrData() {\n                const hr = candidateDataManager.createdBy;\n                const hrName = this.sidePanelInfoCard.querySelector(\".user-name\");\n                const hrPosition = this.sidePanelInfoCard.querySelector(\".user-position\");\n                const hrAvatar = this.sidePanelInfoCard.querySelector(\".user-avatar\");\n                const hrPhone = this.sidePanelInfoCard.querySelector(\".phone-info\");\n                const hrEmail = this.sidePanelInfoCard.querySelector(\".email-info\");\n                const staff = await Context.fields.staff.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(hr))).first();\n                const userAvatarLink = hr.data.avatar ? await hr.data.avatar.getDownloadUrl() : \"\";\n                hrName.textContent = hr.data.__name;\n                hrAvatar.src = userAvatarLink;\n                if (staff \u0026\u0026 staff.data.position) {\n                    const positionName = await staff.data.position.fetch().then(position =\u003e position.data.__name);\n                    hrPosition.textContent = positionName;\n                }\n                ;\n                if (hr.data.workPhone || hr.data.mobilePhone) {\n                    hrPhone.textContent = hr.data.workPhone \u0026\u0026 hr.data.workPhone.tel ? hr.data.workPhone.tel : hr.data.mobilePhone \u0026\u0026 hr.data.mobilePhone.tel ? hr.data.mobilePhone.tel : \"\";\n                }\n                ;\n                if (hr.data.email) {\n                    hrEmail.textContent = hr.data.email;\n                }\n                ;\n            }\n            ;\n        }\n        ;\n        class CandidateDataManager {\n            constructor() {\n                this.docsTable = [];\n            }\n            async setStatus(status) {\n                await this.candidate.setStatus(status);\n            }\n            ;\n            async saveCandidateData(fields) {\n                var _a;\n                for (let field of fields) {\n                    const relatedNode = document.querySelector(`.common_field[data-app_code=\"${field.appFieldCode}\"]`);\n                    console.log(`.common_field[data-app_code=\"${field.appFieldCode}\"]`);\n                    let actualValue;\n                    let relatedInput;\n                    switch (field.typeCode) {\n                        case FieldTypeEnum.BOOLEAN:\n                            const stringValue = document.querySelector(\".common_radio-variant.checked\").dataset[\"variant_code\"];\n                            actualValue = (_a = stringValue === \"true\") !== null \u0026\u0026 _a !== void 0 ? _a : false;\n                            break;\n                        case FieldTypeEnum.CATEGORY:\n                            relatedInput = relatedNode.querySelector(\"input\");\n                            const regionId = relatedInput.dataset[\"variant_code\"].trim();\n                            console.log(regionId);\n                            actualValue = await this.candidate.fields.directory_of_regions.app.search().where(f =\u003e f.__id.eq(regionId)).first();\n                            break;\n                        case FieldTypeEnum.DATE:\n                            relatedInput = relatedNode.querySelector(\"input\");\n                            const [day, month, year] = [...relatedInput.value.split(\".\").map(Number)];\n                            actualValue = new TDate(year, month, day);\n                            break;\n                        case FieldTypeEnum.EMAIL:\n                            relatedInput = relatedNode.querySelector(\"input\");\n                            actualValue = this.candidate.fields.email.create(relatedInput.value);\n                            break;\n                        case FieldTypeEnum.PHONE:\n                            relatedInput = relatedNode.querySelector(\"input\");\n                            actualValue = this.candidate.fields.phone.create(relatedInput.value);\n                            break;\n                        case FieldTypeEnum.STRING:\n                            relatedInput = relatedNode.querySelector(\"input\");\n                            actualValue = relatedInput.value;\n                            break;\n                    }\n                    ;\n                    this.candidate.data[field.appFieldCode] = actualValue;\n                }\n                await this.candidate.save();\n            }\n            ;\n            checkCandidateFields(portalFields) {\n                let stepFilled = true;\n                portalFields.filter(field =\u003e !!field.appFieldCode).map(field =\u003e field.appFieldCode).forEach(field =\u003e {\n                    if (candidateDataManager.candidate.data[field] === undefined) {\n                        stepFilled = false;\n                    }\n                    ;\n                });\n                return stepFilled;\n            }\n            async getCandidateData() {\n                this.region = this.candidate.data.directory_of_regions ? await this.candidate.data.directory_of_regions.fetch() : undefined;\n                this.relatedPosition = await this.candidate.data.planned_position.fetch();\n                this.organization = this.candidate.data.organization ? await this.candidate.data.organization.fetch() : undefined;\n                this.medicalRequest = this.candidate.data.medical_request ? await this.candidate.data.medical_request.fetch() : undefined;\n                this.docsTable = this.candidate.data.table_personal_documents ? await Promise.all(this.candidate.data.table_personal_documents.map(async (row) =\u003e {\n                    var _a;\n                    const doc = await row.document_type.fetch();\n                    const file = row.file_document ? await row.file_document.fetch() : undefined;\n                    return {\n                        docId: doc.id,\n                        docName: doc.data.__name,\n                        fileName: file \u0026\u0026 file.data.__name,\n                        required: (_a = doc.data.required) !== null \u0026\u0026 _a !== void 0 ? _a : false,\n                        file\n                    };\n                })) : [];\n                this.docsTable.length \u003e 0 \u0026\u0026 this.synchronizeDocStep();\n                this.createdBy = await this.candidate.data.__createdBy.fetch();\n            }\n            ;\n            synchronizeDocStep() {\n                const wizardStep = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(step =\u003e step.index === 3);\n                const documentRecognition = systemDataManager.documentRecognition;\n                let passportExists = false;\n                let innExists = false;\n                let snilsExists = false;\n                let snilsRequired = false;\n                let passportRequired = false;\n                let innRequired = false;\n                for (let doc of this.docsTable) {\n                    wizardStep.fields.push({\n                        label: doc.docName,\n                        required: doc.required,\n                        typeCode: FieldTypeEnum.FILE,\n                        docId: doc.docId\n                    });\n                    if (doc.docName.toLowerCase().includes(\"инн\")) {\n                        innExists = true;\n                        innRequired = doc.required;\n                    }\n                    if (doc.docName.toLowerCase().includes(\"паспорт\")) {\n                        passportExists = true;\n                        passportRequired = doc.required;\n                    }\n                    if (doc.docName.toLowerCase().includes(\"снилс\")) {\n                        snilsExists = true;\n                        snilsRequired = doc.required;\n                    }\n                    ;\n                }\n                ;\n                if (passportExists \u0026\u0026 !documentRecognition) {\n                    wizardStep.fields = wizardStep.fields.concat([\n                        {\n                            label: \"Серия\",\n                            required: passportRequired,\n                            typeCode: FieldTypeEnum.STRING,\n                            regex: \"\\\\d{4}\",\n                            placeholder: \"XXXX\",\n                            appFieldCode: \"passport_series\",\n                            maxLength: 4\n                        }, {\n                            label: \"Номер\",\n                            required: passportRequired,\n                            typeCode: FieldTypeEnum.STRING,\n                            regex: \"\\\\d{6}\",\n                            placeholder: \"XXXXXX\",\n                            appFieldCode: \"passport_number\",\n                            maxLength: 6\n                        }, {\n                            label: \"Дата выдачи\",\n                            required: passportRequired,\n                            typeCode: FieldTypeEnum.DATE,\n                            regex: \"(0[1-9]|[12][0-9]|3[01])\\\\.(0[1-9]|1[012])\\\\.(19|20)\\\\d\\\\d\",\n                            placeholder: \"ДД.ММ.ГГГГ\",\n                            appFieldCode: \"date_of_issue\",\n                            maxLength: 10\n                        }, {\n                            label: \"Кем выдан\",\n                            required: passportRequired,\n                            typeCode: FieldTypeEnum.STRING,\n                            appFieldCode: \"issued_by\"\n                        }, {\n                            label: \"Код подразделения\",\n                            required: passportRequired,\n                            typeCode: FieldTypeEnum.STRING,\n                            appFieldCode: \"passport_department_code\",\n                            regex: \"\\\\d{3}\\-\\\\d{3}\",\n                            maxLength: 7\n                        }\n                    ]);\n                }\n                ;\n                if (innExists \u0026\u0026 !documentRecognition) {\n                    wizardStep.fields.push({\n                        label: \"ИНН\",\n                        required: innRequired,\n                        typeCode: FieldTypeEnum.STRING,\n                        placeholder: \"XXXXXXXXXXXX\",\n                        regex: \"\\\\d{12}\",\n                        maxLength: 12\n                    });\n                }\n                ;\n                if (snilsExists \u0026\u0026 !documentRecognition) {\n                    wizardStep.fields.push({\n                        label: \"СНИЛС\",\n                        required: snilsRequired,\n                        typeCode: FieldTypeEnum.STRING,\n                        placeholder: \"XXX-XXX-XXX XX\",\n                        regex: \"\\\\d{3}-\\\\d{3}-\\\\d{3}\\\\s\\\\d{2}\",\n                        maxLength: 14\n                    });\n                }\n            }\n            ;\n        }\n        ;\n        class SystemDataManager {\n            constructor() {\n                this.documentRecognition = false;\n            }\n            async setRegions() {\n                this.regions = await Context.fields.staff.app.fields.directory_of_regions.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(1000).all();\n                this.synchronizeRegions();\n            }\n            ;\n            async getRecognitionSettings() {\n                var _a;\n                const recognitionSetting = await Context.fields.settings_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"document_recognition\"))).first();\n                this.documentRecognition = recognitionSetting ? (_a = recognitionSetting.data.status) !== null \u0026\u0026 _a !== void 0 ? _a : false : false;\n            }\n            ;\n            synchronizeRegions() {\n                const wizardStep = formDataObj.find(form =\u003e form.index === \"2\").wizard.steps.find(step =\u003e step.index === 2);\n                const regionField = wizardStep.fields.find(field =\u003e field.typeCode === FieldTypeEnum.CATEGORY);\n                for (let region of this.regions) {\n                    regionField.variants.push({ name: region.data.__name, code: region.id });\n                }\n                ;\n            }\n            ;\n        }\n        ;\n        const options = {\n            actions: {\n                clickDay(event, self) {\n                    domManager.setDate(event);\n                }\n            },\n            settings: {\n                lang: \"ru-RU\"\n            }\n        };\n        const domManager = new DomManager();\n        const candidateDataManager = new CandidateDataManager();\n        const systemDataManager = new SystemDataManager();\n        function mock() {\n            console.log(\"test button\");\n        }\n        ;\n        function commonRadioSelect(target) {\n            target.parentElement.querySelectorAll(\".common_radio-variant\").forEach((variant) =\u003e {\n                if (variant.classList.contains(\"checked\")) {\n                    variant.classList.remove(\"checked\");\n                }\n                ;\n            });\n            target.classList.add(\"checked\");\n        }\n        function refreshForm(target) {\n            const formIndex = target.dataset[\"index\"].trim();\n            domManager.frontIndex = formIndex;\n            const currentForm = formDataObj.find(form =\u003e form.index === formIndex);\n            if (currentForm) {\n                domManager.renderForm(currentForm);\n            }\n        }\n        ;\n        function setChecked(target, cls, id) {\n            target.classList.toggle(\"checked\");\n            cls \u0026\u0026 document.querySelector(`.${cls}`).classList.toggle(\"inactive\");\n            id \u0026\u0026 document.querySelector(`#${id}`).classList.toggle(\"inactive\");\n        }\n        ;\n        function closeContainer(target, cls, withModal = false, func) {\n            target.closest(`.${cls}`).remove();\n            withModal \u0026\u0026 document.querySelector(\".kedo-modal\").classList.toggle(\"kedo-hidden\");\n            func \u0026\u0026 func();\n        }\n        ;\n        async function sendComment() {\n        }\n        ;\n        async function onInit() {\n            const user = await System.users.getCurrentUser();\n            const candidate = await Context.fields.candidate.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.candidate.eq(user))).first();\n            candidateDataManager.candidate = candidate;\n            await Promise.all([\n                systemDataManager.getRecognitionSettings(),\n                systemDataManager.setRegions(),\n                candidateDataManager.getCandidateData()\n            ]);\n            if (!candidate) {\n                const waitForTemplate = window.setInterval(() =\u003e {\n                    const emptyTemplate = document.querySelector(\".unemployed\");\n                    if (!emptyTemplate) {\n                        return;\n                    }\n                    ;\n                    window.clearInterval(waitForTemplate);\n                    emptyTemplate.classList.toggle(\"kedo-hidden\");\n                }, 200);\n                return;\n            }\n            ;\n        }\n        ;\n        function checkRootComponents() {\n            domManager.formContainer = document.querySelector(\".kedo_portal-main_section-container\");\n            domManager.kedoModal = document.querySelector(\".kedo-modal\");\n            domManager.formPath = document.querySelector(\".kedo_portal-main_section-path\");\n            domManager.formFooter = document.querySelector(\".kedo_portal-main_section-container_footer\");\n            domManager.positionTemplate = document.querySelector(\".position_info-container-template\");\n            domManager.wizardContainer = document.querySelector(\".wizard_container\");\n            domManager.wizardStepTemplate = document.querySelector(\".wizard_step-template\");\n            domManager.wizardStepConnect = document.querySelector(\".wizard_step-connect-template\");\n            domManager.textFieldTemplate = document.querySelector(\".common_field-template\");\n            domManager.simpleFieldTemplate = document.querySelector(\".simple_field-template\");\n            domManager.mainInfoContainer = document.querySelector(\".kedo_portal-main_section-container_main-info\");\n            domManager.sidePanelInfoCard = document.querySelector(\".kedo_portal-main_section-side_panel-info_card\");\n            return [\n                domManager.formContainer,\n                domManager.kedoModal,\n                domManager.formPath,\n                domManager.formFooter,\n                domManager.formFooter,\n                domManager.wizardContainer,\n                domManager.wizardStepTemplate,\n                domManager.wizardStepConnect,\n                domManager.textFieldTemplate,\n                domManager.simpleFieldTemplate,\n                domManager.mainInfoContainer,\n                domManager.sidePanelInfoCard,\n                VanillaCalendar\n            ].every((node) =\u003e node);\n        }\n        async function onLoad() {\n            if (!candidateDataManager.candidate) {\n                return;\n            }\n            ;\n            const statusVariants = candidateDataManager.candidate.fields.__status.variants;\n            let replaceObj;\n            switch (candidateDataManager.candidate.data.__status.code) {\n                case statusVariants.invited.code:\n                    domManager.frontIndex = 1;\n                    replaceObj = { replaceFrom: \"companyName\", replaceTo: candidateDataManager.organization ? candidateDataManager.organization.data.__name : \"\" };\n                    break;\n                case statusVariants.filling_out_questionnaire.code:\n                    domManager.frontIndex = 2;\n                    break;\n                case statusVariants.questionnaire_completed.code:\n                case statusVariants.secutiry_check.code:\n                case statusVariants.security_agreed.code:\n                    domManager.frontIndex = 3;\n                    break;\n                case statusVariants.passing_medical_examination.code:\n                    domManager.frontIndex = 4;\n                    break;\n                case statusVariants.medical_examination_completed.code:\n                    domManager.frontIndex = 5;\n                    break;\n                case statusVariants.signing_job_offer.code:\n                    domManager.frontIndex = 6;\n                    break;\n                case statusVariants.job_offer_signed.code:\n                    domManager.frontIndex = 7;\n                    break;\n                case statusVariants.clarifying_job_offer.code:\n                    domManager.frontIndex = 8;\n                    break;\n            }\n            ;\n            domManager.formIndex = String(domManager.frontIndex);\n            const currentForm = formDataObj.find(form =\u003e form.index === domManager.formIndex);\n            const additionalInfoCard = document.querySelector(\".kedo_portal-main_section-side_panel-additional_card\");\n            if (candidateDataManager.candidate.data.info_candidate) {\n                additionalInfoCard.classList.contains(\"kedo-hidden\") \u0026\u0026 additionalInfoCard.classList.remove(\"kedo-hidden\");\n                const cardDescription = additionalInfoCard.querySelector(\".common-descriptor\");\n                cardDescription.innerHTML = candidateDataManager.candidate.data.info_candidate;\n            }\n            ;\n            if (candidateDataManager.candidate.data.memo_for_candidate) {\n                additionalInfoCard.classList.contains(\"kedo-hidden\") \u0026\u0026 additionalInfoCard.classList.remove(\"kedo-hidden\");\n                const fileField = additionalInfoCard.querySelector(\".common-file-field\");\n                fileField.classList.remove(\"kedo-hidden\");\n                const fileLink = additionalInfoCard.querySelector(\".common-link\");\n                fileLink.href = await candidateDataManager.candidate.data.memo_for_candidate.getDownloadUrl();\n            }\n            ;\n            if (!checkRootComponents()) {\n                const waitForRoot = window.setInterval(async () =\u003e {\n                    if (!checkRootComponents()) {\n                        return;\n                    }\n                    ;\n                    window.clearInterval(waitForRoot);\n                    domManager.handleLoader(domManager.sidePanelInfoCard);\n                    domManager.setHrData().then(_ =\u003e {\n                        domManager.handleLoader(domManager.sidePanelInfoCard);\n                    });\n                    if (currentForm) {\n                        await domManager.renderForm(currentForm, replaceObj);\n                    }\n                    ;\n                }, 200);\n            }\n            else if (checkRootComponents() \u0026\u0026 currentForm) {\n                domManager.handleLoader(domManager.sidePanelInfoCard);\n                domManager.setHrData().then(_ =\u003e {\n                    domManager.handleLoader(domManager.sidePanelInfoCard);\n                });\n                await domManager.renderForm(currentForm, replaceObj);\n            }\n            ;\n            window.setInterval(() =\u003e {\n                switch (candidateDataManager.candidate.data.__status.code) {\n                    case statusVariants.invited.code:\n                        domManager.frontIndex = 1;\n                        replaceObj = { replaceFrom: \"companyName\", replaceTo: candidateDataManager.organization ? candidateDataManager.organization.data.__name : \"\" };\n                        break;\n                    case statusVariants.filling_out_questionnaire.code:\n                        domManager.frontIndex = 2;\n                        break;\n                    case statusVariants.questionnaire_completed.code:\n                    case statusVariants.secutiry_check.code:\n                    case statusVariants.security_agreed.code:\n                        domManager.frontIndex = 3;\n                        break;\n                    case statusVariants.passing_medical_examination.code:\n                        domManager.frontIndex = 4;\n                        break;\n                    case statusVariants.medical_examination_completed.code:\n                        domManager.frontIndex = 5;\n                        break;\n                    case statusVariants.signing_job_offer.code:\n                        domManager.frontIndex = 6;\n                        break;\n                    case statusVariants.job_offer_signed.code:\n                        domManager.frontIndex = 7;\n                        break;\n                    case statusVariants.clarifying_job_offer.code:\n                        domManager.frontIndex = 8;\n                        break;\n                }\n                ;\n                const currentForm = formDataObj.find(form =\u003e form.index === domManager.formIndex);\n                domManager.refreshForm(currentForm.index);\n            }, 60000);\n        }\n        ;\n        return {\n            mock,\n            commonRadioSelect,\n            refreshForm,\n            setChecked,\n            closeContainer,\n            sendComment,\n            onInit,\n            checkRootComponents,\n            onLoad\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "mock",
        "parameters": [],
        "type": ""
      },
      {
        "name": "commonRadioSelect",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "refreshForm",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "setChecked",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "closeContainer",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": ""
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "sendComment",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "onInit",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkRootComponents",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "onLoad",
        "parameters": [],
        "type": "[object Object]"
      }
    ]
  },
  "__createdAt": "2024-04-23T06:50:58.268594047Z",
  "__createdBy": "94adcae0-28df-46b4-8a18-783b348c61c3",
  "__updatedAt": "2024-04-23T14:07:51.320022647Z",
  "__updatedBy": "94adcae0-28df-46b4-8a18-783b348c61c3",
  "__deletedAt": null
}
