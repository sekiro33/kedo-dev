{"__id":"018e89f9-6c91-7077-94d4-42c85d00fbe5","namespace":"ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed","code":"related_documents_widget","__name":"Связанные документы","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":11,"hidden":false,"draft":false,"readonly":false,"descriptor":{"icon":"system_file_many","template":{"id":"1dad3dff-60e7-4090-bfcd-7056d6d26005","descriptor":"component","values":{"systemFunctions":{}},"content":{"":[{"id":"21aea8e1-a98f-4281-a186-51f3d49e0150","descriptor":"row-layout","values":{"elementsAlignEnum":[{"code":"left","name":"shared.common.row-layout@widget-elements-align-left"}],"__renderContentAsync":false,"__hidden":true,"__outlet":"","__styles":"font-style: italic; color: #9b9b9b; padding: 7px;","__baseURL":"","__relativeURL":"","__isConstValues":[]},"content":{"":[{"id":"e226c935-a8c2-4089-a6d6-e5fcfb58202d","descriptor":"label","values":{"__relativeURL":"","__isConstValues":[],"text":"Связанные документы","__outlet":"","__styles":"","__baseURL":""}}]}},{"id":"97fd1664-bf79-4601-bd8e-3e7abf49280b","descriptor":"code","values":{"html":"\u003c% if (Context.data.display_type.code == \"list\") { %\u003e\n\u003cdiv class=\"list-wrapper\"\u003e\n    \u003c% if (Context.data.documents_list \u0026\u0026 Context.data.documents_list.length \u003e 0) { %\u003e\n        \u003cul\u003e\n            \u003c% for (const doc of Context.data.documents_list) { %\u003e\n                \u003cli class=\"list-element\"\u003e\n                    \u003ci _ngcontent-wal-c692=\"\" class=\"elma-icons md-16\"\u003efile_type_text\u003c/i\u003e\n                    \u003ca href=\"\u003c%= doc.href %\u003e\"\u003e\u003c%= doc.name%\u003e\u003c/a\u003e\n                \u003c/li\u003e\n            \u003c% } %\u003e\n        \u003c/ul\u003e\n        \u003cdiv class=\"service-container\"\u003e\n            \u003c!-- Лоадер при подготовке файлов для скачивания --\u003e\n            \u003c% if (Context.data.loader == true) { %\u003e\n                \u003cdiv class=\"loader-container\"\u003e\n                    \u003cspan class=\"loader\"\u003e\u003c/span\u003e\n                    \u003cspan\u003eИдет подготовка файлов...\u003c/span\u003e\n                \u003c/div\u003e\n            \u003c% } else { %\u003e\n                \u003c!-- Иконка для кнопки --\u003e\n                \u003cspan class=\"download-button\" onclick=\"\u003c%-Scripts%\u003e.downloadFiles()\"\u003eСкачать документы\n                    \u003ci _ngcontent-wgq-c815=\"\" class=\"elma-icons ng-star-inserted\"\u003e system_download \u003c/i\u003e\n                \u003c/span\u003e\n            \u003c% } %\u003e\n        \u003c/div\u003e\n    \u003c% } else { %\u003e\n        \u003cspan class=\"custom-title\"\u003eСвязанных документов нет\u003c/span\u003e\n    \u003c% } %\u003e\n\u003c/div\u003e\n\n\u003cstyle\u003e\n    .list-wrapper {\n        overflow: auto;\n        max-height: 30vh;\n    }\n\n    .list-wrapper ul {\n        padding: 0;\n    }\n\n    .list-element {\n        display: grid;\n        grid-template-columns: max-content auto;\n        column-gap: 1.5rem;\n        min-height: 3rem;\n        padding: 1rem;\n        list-style: none;\n        align-items: baseline;\n    }\n\n    .custom-title {\n        font-style: italic; \n        color: #9b9b9b; \n        padding: 7px;\n    }\n\n    .service-container {\n        display : flex;\n        justify-content: flex-end;\n        margin-right: 15px;\n        cursor: pointer;\n    }\n\n    .loader-container {\n        display: flex;\n        gap : 10px;\n        padding: 10px;\n    }\n\n    .loader {\n        width: 24px;\n        height: 24px;\n        border: 3px solid #FFF;\n        border-bottom-color: #1e6599;\n        border-radius: 50%;\n        display: inline-block;\n        box-sizing: border-box;\n        animation: rotation 1s linear infinite;\n        }\n\n        @keyframes rotation {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }   \n    }\n\n    .download-button {\n        color: #1e6599;\n    }\n\n    .download-button:hover {\n        cursor: pointer;\n        text-decoration: underline #1e6599;\n    }\n\u003c/style\u003e\n\u003c% } %\u003e","hideContent":true,"contentPlaceholder":"Отображение в виде списка"}},{"id":"a57a30b7-a8fe-4a32-9afb-9581b6e973e0","descriptor":"code","values":{"html":"\u003c% if (Context.data.display_type.code == \"table\") { %\u003e\n    \u003c% if (Context.data.documents_list \u0026\u0026 Context.data.documents_list.length \u003e 0) { %\u003e\n        \u003cdiv class=\"service-container\"\u003e\n            \u003c!-- Лоадер при подготовке файлов для скачивания --\u003e\n            \u003c% if (Context.data.loader == true) { %\u003e\n                \u003cdiv class=\"loader-container\"\u003e\n                    \u003cspan class=\"loader\"\u003e\u003c/span\u003e\n                    \u003cspan\u003eИдет подготовка файлов...\u003c/span\u003e\n                \u003c/div\u003e\n            \u003c% } else { %\u003e\n                \u003cbutton class=\"btn btn-primary\" onclick=\"\u003c%-Scripts%\u003e.downloadFiles()\"\u003e\n                    \u003c!-- Иконка для кнопки --\u003e\n                    \u003ci _ngcontent-wgq-c815=\"\" class=\"elma-icons ng-star-inserted\"\u003e system_download \u003c/i\u003e\n                    Скачать документы\n                \u003c/button\u003e\n            \u003c% } %\u003e\n        \u003c/div\u003e\n        \u003ctable class=\"table\"\u003e\n            \u003cthead\u003e\n                \u003cth\u003eНазвание\u003c/th\u003e\n                \u003cth\u003eДата создания\u003c/th\u003e\n            \u003c/thead\u003e\n            \u003ctbody\u003e\n                \u003c% for (const doc of Context.data.documents_list) { %\u003e\n                    \u003ctr\u003e\n                        \u003ctd\u003e\u003ca href=\"\u003c%= doc.href %\u003e\"\u003e\u003c%= doc.name%\u003e\u003c/a\u003e\u003c/td\u003e\n                        \u003ctd\u003e\u003c%= doc.__createdAt%\u003e\u003c/td\u003e\n                    \u003c/tr\u003e\n                \u003c% } %\u003e\n            \u003c/tbody\u003e\n        \u003c/table\u003e\n    \u003c% } else { %\u003e\n        \u003cspan class=\"custom-title\"\u003eСвязанных документов нет\u003c/span\u003e\n    \u003c% } %\u003e\n\n    \u003cstyle\u003e\n        .custom-title {\n            font-style: italic; \n            color: #9b9b9b; \n            padding: 7px;\n        }\n\n        .table tr {\n            padding : 10px;\n        }\n\n        .service-container {\n            display : flex;\n            justify-content: flex-end;\n            margin-bottom: 10px;\n        }\n\n        .loader-container {\n            display: flex;\n            gap : 10px;\n            padding: 10px;\n        }\n\n        .loader {\n            width: 24px;\n            height: 24px;\n            border: 3px solid #FFF;\n            border-bottom-color: #1e6599;\n            border-radius: 50%;\n            display: inline-block;\n            box-sizing: border-box;\n            animation: rotation 1s linear infinite;\n            }\n\n            @keyframes rotation {\n            0% {\n                transform: rotate(0deg);\n            }\n            100% {\n                transform: rotate(360deg);\n            }\n        } \n    \u003c/style\u003e\n\u003c% } %\u003e","hideContent":true,"contentPlaceholder":"Отображение в виде таблицы"}}]}},"fields":[{"code":"app","type":"REF_ITEM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Элемент","data":{},"output":false}},{"code":"display_type","type":"ENUM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"enumItems":[{"code":"list","name":"Список","checked":true},{"code":"table","name":"Таблица","checked":false}]},"view":{"name":"Вид отображения","data":{},"output":false}},{"code":"documents_list","type":"JSON","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Список документов","data":{},"input":false,"output":false}},{"code":"archive_file","type":"FILE","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"archive_file","data":{},"input":false,"output":false}},{"code":"loader","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"loader","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":false,"output":false}}],"fieldVisibilityConditions":{"app":{"enabled":false,"conditions":[]},"loader":{"enabled":false,"conditions":[]},"archive_file":{"enabled":false,"conditions":[]},"display_type":{"enabled":false,"conditions":[]},"documents_list":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"import JSZip from \"jszip.js\"\n\n/* Client scripts module */\n\ndeclare const console: any;\ndeclare const window: any;\ndeclare const document: any;\n\nconst DATETIME_FORMAT = `D MMMM YYYY г., HH:mm`;\nconst CHUNK_SIZE = 20;\n\ninterface IRelatedDocuments {\n    namespace: string,\n    code: string,\n    documents: IDocument[],\n}\n\ninterface IDocument {\n    namespace: string,\n    code: string,\n    related_field_code: string,\n}\n\ninterface IElement {\n    name: string,\n    href: string,\n    __createdAt: string,\n    ref: {\n        namespace: string,\n        code: string,\n        id: string,\n    }\n}\n\nclass CustomFilter {\n    constructor(private filter: any) {\n    }\n\n    json() {\n        return this.filter;\n    }\n}\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    if (!Context.data.app) {\n        console.error(\"Context.data.app is undefined\");\n        return;\n    }\n\n    const json = await Namespace.storage.getItem(\"related_documents\");\n\n    if (!json) {\n        console.error(\"item 'related_documents' is undefined in module storage\");\n        return;\n    }\n\n    const related_documents: IRelatedDocuments[] = JSON.parse(json);\n\n    const relate = related_documents.find(f =\u003e f.namespace == Context.data.app!.namespace \u0026\u0026 f.code == Context.data.app!.code);\n\n    if (!relate) {\n        console.error(`not found row in related documents table. app namespace: ${Context.data.app.namespace}; app code: ${Context.data.app.code}`)\n        return;\n    }\n\n    Promise.all([\n        getRelatedDocuments(relate, Context.data.app)\n    ]);\n}\n\nfunction getFilter(field_code: string, field_type: string, app: RefItem): any {\n    switch (field_type) {\n        case \"SYS_COLLECTION\": {\n            return {\n                \"and\": [\n                    {\n                        \"link\": [\n                            { \"field\": field_code },\n                            { \"list\": [app.id] },\n                        ]\n                    }\n                ]\n            }\n        }\n\n        case \"REF_ITEM\": {\n            return {\n                \"tf\": {\n                    [`${field_code}`]: {\n                        \"id\": app.id,\n                        \"code\": app.code,\n                        \"namespace\": app.namespace,\n                    }\n                }\n            }\n        }\n\n        default: {\n            return undefined;\n        }\n    }\n\n}\n\nasync function searchDocuments(namespace: string, code: string, related_field_code: string, app: RefItem): Promise\u003cany\u003e {\n    const field_type = (Namespace as any).factory.Global.ns[namespace].app[code].fields[related_field_code].type;\n\n    return (Namespace as any).factory.Global.ns[namespace].app[code].search()\n        .where((f: any) =\u003e f.__deletedAt.eq(null))\n        .where((f: any) =\u003e new CustomFilter(getFilter(related_field_code, field_type, app)))\n        .size(100)\n        .all();\n}\n\nasync function getRelatedDocuments(relate: IRelatedDocuments, app: RefItem) {\n    const documents = relate.documents;\n\n    console.log(\"documents\", documents);\n\n    if (documents.length == 0) {\n        console.log(\"not found related documents\");\n        return;\n    }\n\n    const apps = documents\n        .filter(doc =\u003e {\n            return (Namespace as any).factory.Global.ns[doc.namespace] != undefined\n                \u0026\u0026 (Namespace as any).factory.Global.ns[doc.namespace].app[doc.code] != undefined;\n        })\n        .map((doc) =\u003e searchDocuments(doc.namespace, doc.code, doc.related_field_code, app));\n\n\n    const docs = await Promise.all(apps);\n\n    const flat_array = docs.reduce(function (prev, next) {\n        return prev.concat(next);\n    });\n\n    console.log('flat_array', flat_array);\n\n    let document_list: IElement[] = [];\n\n    document_list = flat_array\n        .sort((doc1: any, doc2: any) =\u003e doc2.data.__createdAt.asDate() - doc1.data.__createdAt.asDate())\n        .map((f: any) =\u003e {\n            let name: string = f.data.__name;\n\n            if (!name || name.trim() == \"\") {\n                name = \"Без названия\";\n            }\n\n            return {\n                ref: {\n                    namespace: f.namespace,\n                    code: f.code,\n                    id: f.id,\n                },\n                href: `${System.getBaseUrl()}/${relate.namespace}/${relate.code}(p:item/${f.namespace}/${f.code}/${f.id})`,\n                name: name,\n                __createdAt: f.data.__createdAt.format(DATETIME_FORMAT),\n            }\n        });\n\n    Context.data.documents_list = document_list;\n}\n\ninterface IAppData {\n    name: string,\n    file: FileItem,\n    signFiles?: FileItem[],\n    xmlFile?: FileItem,\n}\n\nasync function getSignFiles(app: any): Promise\u003cFileItem[] | undefined\u003e {\n    if (!app.getSignHistory) return;\n\n    try {\n        const sign_history: EntityVersion[] = await app.getSignHistory();\n\n        if (!sign_history || sign_history.length == 0) return;\n\n        const signs = sign_history[0].signs;\n        const signFiles = await Promise.all(signs.map(f =\u003e f.createSignFile()));\n        return signFiles;\n    } catch (err) {\n        return;\n    }\n}\n\nasync function getAppData(ref: RefItem): Promise\u003cIAppData | undefined\u003e {\n    const app = await ref.fetch();\n\n    if (!app.data.__file) return;\n\n    const file: FileItem = await app.data.__file.fetch();\n    const signs = await getSignFiles(app);\n\n    let xml_file: FileItem | undefined;\n\n    if (app.data.xml_file) {\n        xml_file = await app.data.xml_file.fetch();\n    }\n\n    return \u003cIAppData\u003e{\n        name: app.data.__name,\n        file: file,\n        xmlFile: xml_file,\n        signFiles: signs,\n    };\n}\n\ninterface IFileData {\n    name: string,\n    binaryData: ArrayBuffer,\n}\n\nasync function getFileContent(file: FileItem): Promise\u003cIFileData\u003e {\n    console.log(file);\n\n    const file_download_url = await file.getDownloadUrl();\n    const response = await fetch(file_download_url);\n    const binary_content = await response.arrayBuffer();\n\n    return \u003cIFileData\u003e{\n        name: file.data.__name,\n        binaryData: binary_content,\n    };\n}\n\nasync function downloadFiles(): Promise\u003cvoid\u003e {\n    Context.data.loader = true;\n\n    const files: IElement[] = Context.data.documents_list;\n\n    var jszip = new JSZip();\n\n    if (!files || files.length == 0) {\n        return;\n    }\n\n    for (let i = 0; i \u003c files.length; i += CHUNK_SIZE) {\n        const files_pack = files.slice(i, i + CHUNK_SIZE);\n\n        await Promise.all(files_pack.map(async (f) =\u003e {\n            const ref = new RefItem(f.ref.namespace, f.ref.code, f.ref.id);\n            const app_data = await getAppData(ref);\n\n            if (!app_data) return;\n\n            const files = [\n                app_data.file,\n                ...(app_data.signFiles ?? []),\n            ];\n\n            if (app_data.xmlFile) files.push(app_data.xmlFile);\n\n            const files_data = await Promise.all(files\n                .filter(f =\u003e f != undefined)\n                .map(f =\u003e getFileContent(f))\n            );\n\n            const folder = jszip.folder(app_data.name);\n\n            console.log(folder);\n\n            files_data.forEach(f =\u003e folder.file(f.name, f.binaryData, { binary: true }));\n        }))\n\n        // await Promise.all(files_pack.map(async (f) =\u003e {\n        //     const app_ref = new RefItem(f.ref.namespace, f.ref.code, f.ref.id);\n        //     const app = await app_ref.fetch();\n\n        //     if (!app.data.__file) return;\n\n        //     const app_file = await app.data.__file.fetch();\n\n        //     const res = await fetch(await app_file.getDownloadUrl());\n        //     const content = await res.arrayBuffer();\n\n        //     let file_name = ''\n        //     if (app_file.data.__name.includes('.pdf') || app_file.data.__name.includes('.docx')) {\n        //         file_name = app_file.data.__name;\n        //     }\n        //     else {\n\n        //         file_name = app_file.data.__name + app_file.data.line_file_name!.substring(app_file.data.line_file_name!.lastIndexOf('.'), app_file.data.line_file_name!.length);\n        //     }\n        //     jszip.file(file_name, content);\n\n        // }));\n    }\n\n    await jszip.generateAsync({ type: \"uint8array\" })\n        .then(async function (content: any) {\n            const file = await Context.fields.archive_file.create(`documents_${new Datetime(new Date()).getDate().format('DD.MM.YYYY')}.zip`, content);\n            Context.data.archive_file = file;\n            window.location.href = await Context.data.archive_file.getDownloadUrl();\n            Context.data.loader = false;\n        })\n        .catch((error: any) =\u003e {\n            //TODO: вывод информации о ошибке\n            Context.data.loader = false;\n        });\n}","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([\"jszip.js\"], function (exports_1, context_1) {\n    \"use strict\";\n    var jszip_js_1;\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        const DATETIME_FORMAT = `D MMMM YYYY г., HH:mm`;\n        const CHUNK_SIZE = 20;\n        class CustomFilter {\n            constructor(filter) {\n                this.filter = filter;\n            }\n            json() {\n                return this.filter;\n            }\n        }\n        async function onInit() {\n            if (!Context.data.app) {\n                console.error(\"Context.data.app is undefined\");\n                return;\n            }\n            const json = await Namespace.storage.getItem(\"related_documents\");\n            if (!json) {\n                console.error(\"item 'related_documents' is undefined in module storage\");\n                return;\n            }\n            const related_documents = JSON.parse(json);\n            const relate = related_documents.find(f =\u003e f.namespace == Context.data.app.namespace \u0026\u0026 f.code == Context.data.app.code);\n            if (!relate) {\n                console.error(`not found row in related documents table. app namespace: ${Context.data.app.namespace}; app code: ${Context.data.app.code}`);\n                return;\n            }\n            Promise.all([\n                getRelatedDocuments(relate, Context.data.app)\n            ]);\n        }\n        function getFilter(field_code, field_type, app) {\n            switch (field_type) {\n                case \"SYS_COLLECTION\": {\n                    return {\n                        \"and\": [\n                            {\n                                \"link\": [\n                                    { \"field\": field_code },\n                                    { \"list\": [app.id] },\n                                ]\n                            }\n                        ]\n                    };\n                }\n                case \"REF_ITEM\": {\n                    return {\n                        \"tf\": {\n                            [`${field_code}`]: {\n                                \"id\": app.id,\n                                \"code\": app.code,\n                                \"namespace\": app.namespace,\n                            }\n                        }\n                    };\n                }\n                default: {\n                    return undefined;\n                }\n            }\n        }\n        async function searchDocuments(namespace, code, related_field_code, app) {\n            const field_type = Namespace.factory.Global.ns[namespace].app[code].fields[related_field_code].type;\n            return Namespace.factory.Global.ns[namespace].app[code].search()\n                .where((f) =\u003e f.__deletedAt.eq(null))\n                .where((f) =\u003e new CustomFilter(getFilter(related_field_code, field_type, app)))\n                .size(100)\n                .all();\n        }\n        async function getRelatedDocuments(relate, app) {\n            const documents = relate.documents;\n            console.log(\"documents\", documents);\n            if (documents.length == 0) {\n                console.log(\"not found related documents\");\n                return;\n            }\n            const apps = documents\n                .filter(doc =\u003e {\n                return Namespace.factory.Global.ns[doc.namespace] != undefined\n                    \u0026\u0026 Namespace.factory.Global.ns[doc.namespace].app[doc.code] != undefined;\n            })\n                .map((doc) =\u003e searchDocuments(doc.namespace, doc.code, doc.related_field_code, app));\n            const docs = await Promise.all(apps);\n            const flat_array = docs.reduce(function (prev, next) {\n                return prev.concat(next);\n            });\n            console.log('flat_array', flat_array);\n            let document_list = [];\n            document_list = flat_array\n                .sort((doc1, doc2) =\u003e doc2.data.__createdAt.asDate() - doc1.data.__createdAt.asDate())\n                .map((f) =\u003e {\n                let name = f.data.__name;\n                if (!name || name.trim() == \"\") {\n                    name = \"Без названия\";\n                }\n                return {\n                    ref: {\n                        namespace: f.namespace,\n                        code: f.code,\n                        id: f.id,\n                    },\n                    href: `${System.getBaseUrl()}/${relate.namespace}/${relate.code}(p:item/${f.namespace}/${f.code}/${f.id})`,\n                    name: name,\n                    __createdAt: f.data.__createdAt.format(DATETIME_FORMAT),\n                };\n            });\n            Context.data.documents_list = document_list;\n        }\n        async function getSignFiles(app) {\n            if (!app.getSignHistory)\n                return;\n            try {\n                const sign_history = await app.getSignHistory();\n                if (!sign_history || sign_history.length == 0)\n                    return;\n                const signs = sign_history[0].signs;\n                const signFiles = await Promise.all(signs.map(f =\u003e f.createSignFile()));\n                return signFiles;\n            }\n            catch (err) {\n                return;\n            }\n        }\n        async function getAppData(ref) {\n            const app = await ref.fetch();\n            if (!app.data.__file)\n                return;\n            const file = await app.data.__file.fetch();\n            const signs = await getSignFiles(app);\n            let xml_file;\n            if (app.data.xml_file) {\n                xml_file = await app.data.xml_file.fetch();\n            }\n            return {\n                name: app.data.__name,\n                file: file,\n                xmlFile: xml_file,\n                signFiles: signs,\n            };\n        }\n        async function getFileContent(file) {\n            console.log(file);\n            const file_download_url = await file.getDownloadUrl();\n            const response = await fetch(file_download_url);\n            const binary_content = await response.arrayBuffer();\n            return {\n                name: file.data.__name,\n                binaryData: binary_content,\n            };\n        }\n        async function downloadFiles() {\n            Context.data.loader = true;\n            const files = Context.data.documents_list;\n            var jszip = new jszip_js_1.default();\n            if (!files || files.length == 0) {\n                return;\n            }\n            for (let i = 0; i \u003c files.length; i += CHUNK_SIZE) {\n                const files_pack = files.slice(i, i + CHUNK_SIZE);\n                await Promise.all(files_pack.map(async (f) =\u003e {\n                    var _a;\n                    const ref = new RefItem(f.ref.namespace, f.ref.code, f.ref.id);\n                    const app_data = await getAppData(ref);\n                    if (!app_data)\n                        return;\n                    const files = [\n                        app_data.file,\n                        ...((_a = app_data.signFiles) !== null \u0026\u0026 _a !== void 0 ? _a : []),\n                    ];\n                    if (app_data.xmlFile)\n                        files.push(app_data.xmlFile);\n                    const files_data = await Promise.all(files\n                        .filter(f =\u003e f != undefined)\n                        .map(f =\u003e getFileContent(f)));\n                    const folder = jszip.folder(app_data.name);\n                    console.log(folder);\n                    files_data.forEach(f =\u003e folder.file(f.name, f.binaryData, { binary: true }));\n                }));\n            }\n            await jszip.generateAsync({ type: \"uint8array\" })\n                .then(async function (content) {\n                const file = await Context.fields.archive_file.create(`documents_${new Datetime(new Date()).getDate().format('DD.MM.YYYY')}.zip`, content);\n                Context.data.archive_file = file;\n                window.location.href = await Context.data.archive_file.getDownloadUrl();\n                Context.data.loader = false;\n            })\n                .catch((error) =\u003e {\n                Context.data.loader = false;\n            });\n        }\n        return {\n            onInit,\n            getFilter,\n            searchDocuments,\n            getRelatedDocuments,\n            getSignFiles,\n            getAppData,\n            getFileContent,\n            downloadFiles\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [\n            function (jszip_js_1_1) {\n                jszip_js_1 = jszip_js_1_1;\n            }\n        ],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"getFilter","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"searchDocuments","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getRelatedDocuments","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"getSignFiles","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getAppData","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getFileContent","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"downloadFiles","parameters":[],"type":"[object Object]"}],"clientDependencies":{"applications":[],"collections":[],"pages":[]}},"__createdAt":"2024-03-29T11:30:08.65529172Z","__createdBy":"d78f4b2f-13a2-4903-aeeb-fdb72d5b9d0c","__updatedAt":"2024-04-15T06:55:53.988108271Z","__updatedBy":"8c6e1940-a6f3-4603-aff7-7cdf41cc9799","__deletedAt":null}
