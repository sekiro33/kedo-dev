{"__id":"018c8758-52b8-7ec3-a3b9-92e50920ebc7","namespace":"ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed","code":"goskey_zip_file_generate","__name":"Виджет для формирования zip-файла для Госключа","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":3,"hidden":false,"draft":false,"readonly":false,"descriptor":{"template":{"id":"bd11d518-08c7-43fc-b374-7592149faf2c","descriptor":"component","content":{"":[{"id":"e2bf4cc2-cff4-4f51-85fd-c3400723a5e3","descriptor":"code","values":{"html":"\u003cscript\u003e\r\n    \u003c% if (Context.data.all_docs_signed) { %\u003e\r\n        \u003c%= Scripts %\u003e.createZip();\r\n    \u003c% } %\u003e\r\n\u003c/script\u003e","hideContent":true,"contentPlaceholder":"generate zip function"}}]}},"fields":[{"code":"all_docs_signed","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Все документы подписаны","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"output":false}},{"code":"zip_file","type":"FILE","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Zip-файл","data":{},"input":false}},{"code":"goskey_docs","type":"REF_ITEM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Документы для Госключа","data":{},"input":true,"output":false}},{"code":"goskey_files_app","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"goskey_files","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Приложение Документы для Госключа","data":{},"input":false,"output":false}}],"fieldVisibilityConditions":{"zip_file":{"enabled":false,"conditions":[]},"goskey_docs":{"enabled":false,"conditions":[]},"all_docs_signed":{"enabled":false,"conditions":[]},"goskey_files_app":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"declare const console: any;\n\nimport JSZip from \"jszip-actual.min.js\"\n\nasync function createZip(): Promise\u003cvoid\u003e {\n    let docMeta: ApplicationItem\u003cApplication$kedo_tests$goskey_files_test$Data, any\u003e\n    let docForSend: ApplicationItem\u003cApplication$kedo_tests$goskey_files_test$Data, any\u003e\n    for (let item of Context.data.goskey_docs!) {\n        const doc = await Context.fields.goskey_files_app.app.search().where(f =\u003e f.__id.eq(item.id)).first();\n        if (doc) {\n            console.log(doc);\n            if (doc.data.__name.includes(\"xml\")) {\n                docMeta = doc;\n            } else {\n                docForSend = doc;\n            };\n        };\n    };\n    let metaSignHistory: EntityVersion[]\n    let docSignHistory: EntityVersion[];\n    try {\n        metaSignHistory = await docMeta!.getSignHistory();\n        docSignHistory = await docForSend!.getSignHistory();\n    } catch (err) {\n        console.log(err);\n        Context.data.error = err.message;\n        Context.data.error_exists = true;\n        return;\n    };\n    const metaSign = metaSignHistory[0].signs[0].sign;\n    const fileSign = docSignHistory[0].signs[0].sign;\n    const newZip = new JSZip();\n    const docFile = await docForSend!.data.__file!.fetch();\n    const docFileBuffer = await fetch(await docFile.getDownloadUrl()).then(r =\u003e r.arrayBuffer());\n    const metaFile = await docMeta!.data.__file!.fetch();\n    const metaFileBuffer = await fetch(await metaFile!.getDownloadUrl()).then(r =\u003e r.arrayBuffer());\n    \n    newZip.file(`${docFile.data.__name}.sig`, fileSign, {base64: true});\n    newZip.file(`${metaFile.data.__name}.sig`, metaSign, {base64: true});\n    newZip.file(`${docFile.data.__name}`, docFileBuffer, {binary: true});\n    newZip.file(`${metaFile.data.__name}`, metaFileBuffer, {binary: true});\n    const zipBuffer = await newZip.generate({type: \"arrayBuffer\"});\n    const zipFile = await Context.fields.zip_file.create(\"test.zip\", zipBuffer);\n    console.log(zipFile);\n    Context.data.zip_file = zipFile;\n};","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([\"jszip-actual.min.js\"], function (exports_1, context_1) {\n    \"use strict\";\n    var jszip_actual_min_js_1;\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server) {\n        async function createZip() {\n            let docMeta;\n            let docForSend;\n            for (let item of Context.data.goskey_docs) {\n                const doc = await Context.fields.goskey_files_app.app.search().where(f =\u003e f.__id.eq(item.id)).first();\n                if (doc) {\n                    console.log(doc);\n                    if (doc.data.__name.includes(\"xml\")) {\n                        docMeta = doc;\n                    }\n                    else {\n                        docForSend = doc;\n                    }\n                    ;\n                }\n                ;\n            }\n            ;\n            let metaSignHistory;\n            let docSignHistory;\n            try {\n                metaSignHistory = await docMeta.getSignHistory();\n                docSignHistory = await docForSend.getSignHistory();\n            }\n            catch (err) {\n                console.log(err);\n                Context.data.error = err.message;\n                Context.data.error_exists = true;\n                return;\n            }\n            ;\n            const metaSign = metaSignHistory[0].signs[0].sign;\n            const fileSign = docSignHistory[0].signs[0].sign;\n            const newZip = new jszip_actual_min_js_1.default();\n            const docFile = await docForSend.data.__file.fetch();\n            const docFileBuffer = await fetch(await docFile.getDownloadUrl()).then(r =\u003e r.arrayBuffer());\n            const metaFile = await docMeta.data.__file.fetch();\n            const metaFileBuffer = await fetch(await metaFile.getDownloadUrl()).then(r =\u003e r.arrayBuffer());\n            newZip.file(`${docFile.data.__name}.sig`, fileSign, { base64: true });\n            newZip.file(`${metaFile.data.__name}.sig`, metaSign, { base64: true });\n            newZip.file(`${docFile.data.__name}`, docFileBuffer, { binary: true });\n            newZip.file(`${metaFile.data.__name}`, metaFileBuffer, { binary: true });\n            const zipBuffer = await newZip.generate({ type: \"arrayBuffer\" });\n            const zipFile = await Context.fields.zip_file.create(\"test.zip\", zipBuffer);\n            console.log(zipFile);\n            Context.data.zip_file = zipFile;\n        }\n        ;\n        return {\n            createZip\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [\n            function (jszip_actual_min_js_1_1) {\n                jszip_actual_min_js_1 = jszip_actual_min_js_1_1;\n            }\n        ],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"createZip","parameters":[],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:21.718571745Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:09:31.913909027Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
