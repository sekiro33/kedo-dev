{"__id":"018fb8c3-b3c5-7975-8de2-6a129696626c","namespace":"ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed","code":"vacations_summary","__name":"__oldОтпуска - сводная","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":4,"hidden":false,"draft":false,"readonly":false,"descriptor":{"template":{"id":"16549c82-560d-48ec-98b2-fb3b74c507f8","descriptor":"component","content":{"":[{"id":"fbab73c9-0c77-42c5-b6e8-73b8ef46dd6d","descriptor":"code","values":{"html":"\u003cdiv class=\"my-vacations my-vacations--disabled\"\u003e\n    \u003cdiv class=\"my-vacations__title-container\"\u003e\n        \u003cp class=\"my-vacations__title\"\u003eМои отпуска\u003c/p\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"my-vacations__card vacations-card\"\u003e\n    \u003cdiv class=\"vacations-card__title-container\"\u003e\n        \u003cdiv class=\"vacations-card__icon-container\"\u003e\n            \u003cdiv class=\"vacations-card__icon\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cp class=\"vacations-card__title\"\u003eЕжегодный оплачиваемый отпуск\u003c/p\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"vacation-card__info-container\"\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"vacation-card__additional-info-container\"\u003eОсталось дней отпуска: \u003c/div\u003e\n    \u003cdiv class=\"vacation-card__actions-container\"\u003e\n        \u003ca href=\"\" class=\"vacation-card__button vacation-card__button--main\"\u003eОформить отпуск\u003c/a\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\u003cscript\u003e\n    Array.from(document.querySelectorAll(\".my-vacations .vacation-card__button--main\")).forEach((el) =\u003e {\n        el.href = `${window.location.href}(p:item/absences/vacations;values=%7B\"data\":%7B\"type_vacation\":%5B%7B\"code\":\"basic\",\"name\":\"Ежегодный%20оплачиваемый%20отпуск\"%7D%5D%7D%7D)`\n    })\n\u003c/script\u003e\n","hideContent":true,"contentPlaceholder":"HTML"}},{"id":"c779c33e-e7a0-4d5e-82c3-44705ab286cb","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    .my-vacations {\n        padding: 24px 20px;\n    }\n    .my-vacations--disabled {\n        display: none;\n    }\n    .my-vacations__title-container {\n        margin-bottom: 17px;\n    }\n    .my-vacations__title {\n        font-size: 24px;\n        line-height: 32px;\n        font-weight: 600;\n        margin: 0;\n    }\n    .vacations-card {\n        max-width: 333px;\n        background: none;\n        border: 1px solid #5082E6;\n        border-radius: 4px;\n        padding: 24px 24px 32px 24px;\n    }\n    .vacations-card__title-container {\n        margin-bottom: 18px;\n        display: flex;\n        align-items: center;\n    }\n    .vacations-card__icon-container {\n        min-width: 42px;\n        height: 42px;\n        background: #e2ecf3;\n        margin-right: 16px;\n        border-radius: 10px;\n\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    .vacations-card__icon {\n        width: 24px;\n        height: 24px;\n        background-repeat: no-repeat;\n        background-position: center;\n        background-image: url(\"data:image/svg+xml,%3Csvg width='24' height='19' viewBox='0 0 24 19' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M16.6305 0.670937C15.3664 0.215605 14.0741 0 12.8029 0C9.41025 0 6.17138 1.53818 4.04888 4.1685C3.79763 4.47984 3.94875 4.94928 4.32713 5.08547L12.9214 8.18076L9.5565 17.2188H0.6C0.2685 17.2188 0 17.4845 0 17.8125V18.4062C0 18.7343 0.2685 19 0.6 19H21C21.3315 19 21.6 18.7343 21.6 18.4062V17.8125C21.6 17.4845 21.3315 17.2188 21 17.2188H11.4754L14.613 8.79047L23.1878 11.8787C23.2564 11.9036 23.3265 11.9151 23.3951 11.9151C23.7053 11.9151 23.9888 11.6794 23.9966 11.3532C24.1103 6.72719 21.2678 2.34123 16.6305 0.670937ZM16.9718 7.74436L11.5275 5.7835C12.0619 4.84611 12.6728 4.02859 13.3335 3.40961C14.2838 2.51787 15.2096 2.14195 15.8614 2.37908C16.5188 2.61584 16.9804 3.48939 17.1304 4.77709C17.2343 5.6718 17.1712 6.68637 16.9718 7.74436ZM6.67313 4.03527C8.2815 2.67484 10.341 1.87402 12.4688 1.79646C12.3011 1.936 11.0865 2.85223 9.83288 5.17342L6.67313 4.03527ZM18.6664 8.3548C18.9431 7.05338 19.1186 5.49479 18.8205 3.96551C20.5369 5.38605 21.7133 7.36732 22.0781 9.5835L18.6664 8.3548Z' fill='%235082E6'/%3E%3C/svg%3E\");\n    }\n    .vacations-card__title {\n        color: #323232;\n        font-weight: 600;\n        font-size: 20px;\n        line-height: 130%;\n        margin: 0;\n    }\n    .vacation-card__info-container {\n        margin-bottom: 24px;\n        display: flex;\n        flex-direction: column;\n        gap-y: 8px;\n    }\n    .vacation-card__actions-container {\n        display: flex;\n        gap: 16px;\n    }\n\n    .vacation-card__additional-info-container {\n        margin-bottom: 16px;\n        font-weight: 600;\n        font-size: 16px;\n        line-height: 22px;\n        color: #323232;\n    }\n    .vacation-card__info-item {\n        display: block;\n        font-size: 14px;\n        color: #5082E6;\n        cursor: pointer;\n    }\n    \n    .vacation-card__button {\n        border: 1px solid #5082E6;\n        border-radius: 4px;\n        color: #5082E6;\n        padding: 4px 11px;\n        font-weight: 400;\n        font-size: 15px;\n        line-height: 22px;\n        transition-duration: .3s;\n    } \n    \n    .vacation-card__button--main {\n        background: #5082E6;\n        color: #fff;\n    }\n\n    .vacation-card__button--main:hover {\n        background: #fff;\n        color: #5082E6;\n        text-decoration: none;\n    }\n\n    .vacation-card__button--secondary {\n        background: #fff;\n        color: #5082E6;\n    }\n\n    .vacation-card__button--secondary:hover {\n        background: #5082E6;\n        color: #fff;\n    }\n\n    .vacation-card__info-text {\n        margin: 0;\n        font-size: 16px;\n        line-height: 20px;\n        color: #323232;\n    }\n\u003c/style\u003e\n","hideContent":true,"contentPlaceholder":"CSS"}},{"id":"7b8ab186-5b1f-4910-831d-b9cc40ff91ed","descriptor":"code","values":{"hideContent":true,"contentPlaceholder":"RENDER WIDGET","html":"\u003c%\n    if (!!Context.data.user_application \u0026\u0026 Context.data.is_vacations_active) { \n        Scripts.init() \n    } \n%\u003e\n\n"}}]}},"fields":[{"code":"is_vacations_active","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Отпуска активны ","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"output":false}},{"code":"hide_vacations","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Скрыть отпуска","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"output":false}},{"code":"user_application","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"staff","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Приложение пользователя","data":{},"output":false}},{"code":"current_user","type":"SYS_USER","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"filter":{"value":{"tf":{}},"enabled":false}},"view":{"name":"Текущий пользователь","data":{},"output":false}},{"code":"vacation_contract","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"holidays","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Отпуска контракт","data":{},"input":false,"output":false}},{"code":"debug","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"debug","data":{"additionalType":"string"}}}],"fieldVisibilityConditions":{"debug":{"enabled":false,"conditions":[]},"current_user":{"enabled":false,"conditions":[]},"hide_vacations":{"enabled":false,"conditions":[]},"user_application":{"enabled":false,"conditions":[]},"vacation_contract":{"enabled":false,"conditions":[]},"is_vacations_active":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"/* Client scripts module */\ndeclare const document: any, console: any, window: any;\nimport moment from 'moment.js';\n\nasync function init() {\n    let i = 0;\n    let waitForRoot = window.setInterval(async () =\u003e {\n        const root = document.querySelector(getQuery('.my-vacations'));\n        if (!root) {\n            i++;\n            if (i \u003e 50) {\n                window.clearInterval(waitForRoot)\n            }\n            return;\n        };\n        window.clearInterval(waitForRoot);\n        let currentDate = new TDate();\n        root.classList.remove('my-vacations--disabled')\n\n        const vacations = await getData();\n        const domList = root.querySelector(getQuery(\".vacation-card__info-container\"))\n        const userApp = await Context.data.user_application!.fetch();\n        const user = await userApp.data.ext_user!.fetch();\n        const offset = user.timezone.offset;\n        const fullOffset = new Duration(offset + -(new Date().getTimezoneOffset() / 60), \"hours\")\n        let gtmRegEx = /GMT\\+(?\u003cgmt\u003e\\d{2})\\d{2}/\n        let days_left: number =  userApp.data.remaining_vacation_days ? Math.floor(userApp.data.remaining_vacation_days) : 0\n        let currentVacationsCounter = 0\n\n        for (let i = 0; i \u003c vacations.length; i++) {\n            const typeCode = vacations[i].data.type_of?.code \n            const shouldRender = typeCode === 'basic' || typeCode === 'additional' || typeCode === 'scheduled'\n            if(!shouldRender) continue;\n\n            if (!vacations[i].data.start || !vacations[i].data.end) {\n                continue;\n            };\n\n\n            //@ts-ignore\n            const offsetAmount = Number(String(vacations[i].data.start!.ts._d).match(gtmRegEx)[1]);\n            const offsetToAdd = offset - offsetAmount\n            const startDate = vacations[i].data.start_string\n            const endDate = vacations[i].data.end_string;\n\n            if (currentDate.before(vacations[i].data.end!)) {\n                currentVacationsCounter++\n                const element = document.createElement('a')\n                element.classList.add('vacation-card__info-item');\n\n                element.href = `${window.location.href}(p:item/absences/vacations/${vacations[i].data.__id})`;\n\n                element.innerText = \n                    `${startDate} - ${endDate} (${getDaysAmountFormatted(vacations[i].data.amount_of_days!)})`\n                \n                domList.append(element)\n            }\n\n        }\n\n        if (!vacations || !currentVacationsCounter) {\n            const element = document.createElement('p')\n            element.classList.add('vacation-card__info-text');\n            element.innerText = \"У вас не составлен график отпусков на текущий год\"\n            domList.append(element)\n        }\n        const daysElement = root.querySelector(getQuery('.vacation-card__additional-info-container'))\n        daysElement.innerText += \" \" + (days_left \u003e 0 ? days_left : 0);\n    }, 1000)\n}\n\nfunction getQuery(query: string): string {\n    return Context.data.__classes ? `.${Context.data.__classes} ${query}` : query\n}\n\nfunction getDaysAmountFormatted(duration: number): string {\n    if (duration \u003e 10 \u0026\u0026 duration \u003c 20) {\n        return `${duration} дней`\n    }\n\n    let resultString = duration + ' ';\n\n    const lastDigit = String(duration).slice(-1);\n\n    switch(lastDigit) {\n        case '1':\n            resultString += 'день';\n            break;\n        case '2':\n            resultString += 'дня';\n            break;\n        case '3':\n            resultString += 'дня';\n            break;\n        case '4':\n            resultString += 'дня';\n            break;\n        default:\n            resultString += 'дней';\n    }\n    return  resultString\n}\n\nasync function getDate(user: UserItem, firstDate: TDate, secondDate: TDate): Promise\u003cvoid\u003e {\n    // const timeZoneCompanyOffset = System.timezones.default.offset;\n    // utcOffset() возвращает смещение в минутах, поэтому переводим в часы.\n    // const timeZoneUserOffset = moment().utcOffset() / 60;\n\n    // console.log(timeZoneCompanyOffset);\n    // console.log(timeZoneUserOffset);\n    // console.log(user.timezone.offset);\n\n    // let delta = user.timezone.offset - timeZoneCompanyOffset;\n\n    // Корректировку выполняем только для внутренних пользователей - у внешних всё без корректировки ок.\n    // if (user.data.groupIds \u0026\u0026 user.data.groupIds.find(f =\u003e f.id === 'f25906e4-41c3-5a89-8ec2-06648dd1f614')) {\n    //     delta = timeZoneUserOffset - timeZoneCompanyOffset;\n    // };\n\n    // Context.data.from_utc = timeZoneUserOffset;\n\n    //await convert_date(delta);\n    // let fromDate = firstDate.asDatetime(new TTime()).add(new Duration(delta, 'hours')).format(\"DD.MM.YYYY\");\n    // let toDate = secondDate.asDatetime(new TTime()).add(new Duration(delta, 'hours')).format(\"DD.MM.YYYY\");\n    // console.log(delta)\n    // console.log(fromDate)\n    // console.log(toDate)\n};\n\nasync function getData() {\n    const currentDate = new TDate();\n\n    let personalDocsAppsArr = await Context.fields.vacation_contract.app\n        .search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.staff_user.eq(Context.data.current_user!),\n            f.start.gte(currentDate),\n        ))\n        .sort(\"__createdAt\")\n        .size(8000)\n        .all()\n    console.log(\"vacations summary: \", personalDocsAppsArr);\n    personalDocsAppsArr = personalDocsAppsArr.filter((vacation) =\u003e {\n        let vacationStatus = vacation.data.status;\n        if (!!vacationStatus) {\n            return !vacationStatus.includes(\"new\") || !vacationStatus.includes(\"cancelled\");\n        };\n    });\n\n    return personalDocsAppsArr\n}","clientScriptOptions":{"allowServer":true},"serverScripts":"async function getDataFromServer(): Promise\u003cvoid\u003e {\n    const currentDate = new Datetime()\n\n    let personalDocsAppsArr = await Context.fields.vacation_contract.app\n        .search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.staff_user.eq(Context.data.current_user!),\n            f.__createdAt.gt(new Datetime(`01.01.${currentDate.year}`, 'DD.MM.YYYY')),\n        ))\n        .sort(\"__createdAt\")\n        .size(8000)\n        .all()\n\n    personalDocsAppsArr = personalDocsAppsArr.filter((vacation) =\u003e {\n        let vacationStatus = vacation.data.status;\n        if (!!vacationStatus) {\n            return !vacationStatus.includes(\"new\") || !vacationStatus.includes(\"cancelled\");\n        };\n    });\n\n    Context.data.debug = JSON.stringify(personalDocsAppsArr.map(item =\u003e {\n        if (!item.data.start || !item.data.end) {\n            return;\n        };\n        return {\n            start: item.data.start.format(\"DD.MM.YYYY\"),\n            end: item.data.end.format(\"DD.MM.YYYY\"),\n            id: item.data.__id\n        };\n    }));\n}","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        async function init() {\n            let i = 0;\n            let waitForRoot = window.setInterval(async () =\u003e {\n                var _a;\n                const root = document.querySelector(getQuery('.my-vacations'));\n                if (!root) {\n                    i++;\n                    if (i \u003e 50) {\n                        window.clearInterval(waitForRoot);\n                    }\n                    return;\n                }\n                ;\n                window.clearInterval(waitForRoot);\n                let currentDate = new TDate();\n                root.classList.remove('my-vacations--disabled');\n                const vacations = await getData();\n                const domList = root.querySelector(getQuery(\".vacation-card__info-container\"));\n                const userApp = await Context.data.user_application.fetch();\n                const user = await userApp.data.ext_user.fetch();\n                const offset = user.timezone.offset;\n                const fullOffset = new Duration(offset + -(new Date().getTimezoneOffset() / 60), \"hours\");\n                let gtmRegEx = /GMT\\+(?\u003cgmt\u003e\\d{2})\\d{2}/;\n                let days_left = userApp.data.remaining_vacation_days ? Math.floor(userApp.data.remaining_vacation_days) : 0;\n                let currentVacationsCounter = 0;\n                for (let i = 0; i \u003c vacations.length; i++) {\n                    const typeCode = (_a = vacations[i].data.type_of) === null || _a === void 0 ? void 0 : _a.code;\n                    const shouldRender = typeCode === 'basic' || typeCode === 'additional' || typeCode === 'scheduled';\n                    if (!shouldRender)\n                        continue;\n                    if (!vacations[i].data.start || !vacations[i].data.end) {\n                        continue;\n                    }\n                    ;\n                    const offsetAmount = Number(String(vacations[i].data.start.ts._d).match(gtmRegEx)[1]);\n                    const offsetToAdd = offset - offsetAmount;\n                    const startDate = vacations[i].data.start_string;\n                    const endDate = vacations[i].data.end_string;\n                    if (currentDate.before(vacations[i].data.end)) {\n                        currentVacationsCounter++;\n                        const element = document.createElement('a');\n                        element.classList.add('vacation-card__info-item');\n                        element.href = `${window.location.href}(p:item/absences/vacations/${vacations[i].data.__id})`;\n                        element.innerText =\n                            `${startDate} - ${endDate} (${getDaysAmountFormatted(vacations[i].data.amount_of_days)})`;\n                        domList.append(element);\n                    }\n                }\n                if (!vacations || !currentVacationsCounter) {\n                    const element = document.createElement('p');\n                    element.classList.add('vacation-card__info-text');\n                    element.innerText = \"У вас не составлен график отпусков на текущий год\";\n                    domList.append(element);\n                }\n                const daysElement = root.querySelector(getQuery('.vacation-card__additional-info-container'));\n                daysElement.innerText += \" \" + (days_left \u003e 0 ? days_left : 0);\n            }, 1000);\n        }\n        function getQuery(query) {\n            return Context.data.__classes ? `.${Context.data.__classes} ${query}` : query;\n        }\n        function getDaysAmountFormatted(duration) {\n            if (duration \u003e 10 \u0026\u0026 duration \u003c 20) {\n                return `${duration} дней`;\n            }\n            let resultString = duration + ' ';\n            const lastDigit = String(duration).slice(-1);\n            switch (lastDigit) {\n                case '1':\n                    resultString += 'день';\n                    break;\n                case '2':\n                    resultString += 'дня';\n                    break;\n                case '3':\n                    resultString += 'дня';\n                    break;\n                case '4':\n                    resultString += 'дня';\n                    break;\n                default:\n                    resultString += 'дней';\n            }\n            return resultString;\n        }\n        async function getDate(user, firstDate, secondDate) {\n        }\n        ;\n        async function getData() {\n            const currentDate = new TDate();\n            let personalDocsAppsArr = await Context.fields.vacation_contract.app\n                .search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff_user.eq(Context.data.current_user), f.start.gte(currentDate)))\n                .sort(\"__createdAt\")\n                .size(8000)\n                .all();\n            console.log(\"vacations summary: \", personalDocsAppsArr);\n            personalDocsAppsArr = personalDocsAppsArr.filter((vacation) =\u003e {\n                let vacationStatus = vacation.data.status;\n                if (!!vacationStatus) {\n                    return !vacationStatus.includes(\"new\") || !vacationStatus.includes(\"cancelled\");\n                }\n                ;\n            });\n            return personalDocsAppsArr;\n        }\n        return {\n            init,\n            getQuery,\n            getDaysAmountFormatted,\n            getDate,\n            getData\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"init","parameters":[],"type":""},{"name":"getQuery","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getDaysAmountFormatted","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getDate","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getData","parameters":[],"type":""}],"serverScripts":"async function getDataFromServer() {\n    const currentDate = new Datetime();\n    let personalDocsAppsArr = await Context.fields.vacation_contract.app\n        .search()\n        .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.staff_user.eq(Context.data.current_user), f.__createdAt.gt(new Datetime(`01.01.${currentDate.year}`, 'DD.MM.YYYY'))))\n        .sort(\"__createdAt\")\n        .size(8000)\n        .all();\n    personalDocsAppsArr = personalDocsAppsArr.filter((vacation) =\u003e {\n        let vacationStatus = vacation.data.status;\n        if (!!vacationStatus) {\n            return !vacationStatus.includes(\"new\") || !vacationStatus.includes(\"cancelled\");\n        }\n        ;\n    });\n    Context.data.debug = JSON.stringify(personalDocsAppsArr.map(item =\u003e {\n        if (!item.data.start || !item.data.end) {\n            return;\n        }\n        ;\n        return {\n            start: item.data.start.format(\"DD.MM.YYYY\"),\n            end: item.data.end.format(\"DD.MM.YYYY\"),\n            id: item.data.__id\n        };\n    }));\n}\n","serverFnDeclarations":[{"name":"getDataFromServer","parameters":[],"type":"[object Object]"}]},"__createdAt":"2024-05-27T06:36:24.387510319Z","__createdBy":"59e0911f-230a-4b6d-becf-6b302a91977a","__updatedAt":"2024-05-29T14:06:58.979951314Z","__updatedBy":"59e0911f-230a-4b6d-becf-6b302a91977a","__deletedAt":null}
