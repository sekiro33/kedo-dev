{"__id":"4c23ec9b-c9f5-41da-9ce3-d5703e6924cb","namespace":"ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed","code":"xlsx_widget","__name":"Виджет для конвертации отпуска в xls","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":15,"hidden":false,"draft":false,"readonly":false,"descriptor":{"template":{"id":"64cbe778-857e-4a7f-80c0-09a8d426254d","descriptor":"component","content":{"":[{"id":"d08f91e7-5224-475f-8517-dd9e1190720c","descriptor":"button","values":{"action":null,"onClick":{"kind":"Function","name":"getExcelFile","type":"client"},"__hidden":{"path":["multiple_vacations"]},"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"label":"Скачать данные отпуска","runInPopover":null,"__isConstValues":[],"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"view":"default"}},{"id":"0d357707-c6a3-4759-8af3-44067752f0f3","descriptor":"code","values":{"html":"\u003cscript\u003e\n    \u003c% if (Context.data.multiple_vacations) { %\u003e\n        \u003c%= Scripts %\u003e.generateMultipleVacations();\n    \u003c% } %\u003e\n\u003c/script\u003e","hideContent":true,"contentPlaceholder":"function init"}}]}},"fields":[{"code":"staff","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"staff","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Сотрудник","data":{},"output":false}},{"code":"vacation","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"vacations","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"absences","isDependent":false,"linkedFieldCode":""},"view":{"name":"Отпуск","data":{},"output":false}},{"code":"created","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"createdДата создания задачи","data":{"additionalType":"datetime","defaultTimeType":"startOfDay"},"output":false}},{"code":"confirmed_at","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Дата подтверждения задачи","data":{"additionalType":"datetime","defaultTimeType":"startOfDay"},"output":false}},{"code":"multiple_vacations","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Выгрузка нескольких графиков","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"output":false}},{"code":"vacations_json","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Данные отпусков","data":{"additionalType":"string"},"output":false}},{"code":"excel_file","type":"FILE","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Excel файл","data":{},"input":false}},{"code":"from_date","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"С даты","data":{"additionalType":"date","defaultTimeType":"startOfDay","timeOptional":false},"output":false}},{"code":"to_date","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"По дату","data":{"additionalType":"date","defaultTimeType":"startOfDay","timeOptional":false},"output":false}}],"fieldVisibilityConditions":{"debug":{"enabled":false,"conditions":[]},"staff":{"enabled":false,"conditions":[]},"created":{"enabled":false,"conditions":[]},"to_date":{"enabled":false,"conditions":[]},"vacation":{"enabled":false,"conditions":[]},"from_date":{"enabled":false,"conditions":[]},"excel_file":{"enabled":false,"conditions":[]},"confirmed_at":{"enabled":false,"conditions":[]},"vacations_json":{"enabled":false,"conditions":[]},"multiple_vacations":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"import * as XLSX from \"xlsx.full.min.js\";\ndeclare const console: any;\n\ntype vacationsData = {\n    fullname: string,\n    userId: string,\n    vacationPeriod: string,\n    createdAt: string,\n    confirmedAt?: string,\n    rejectedAt?: string,\n    taskId?: string\n}[];\n\nasync function getExcelFile(): Promise\u003cvoid\u003e {\n    const staff = await Context.data.staff!.fetch(); \n    const fullName = staff.data.__name;\n    const userId = staff.id;\n    const vacation = await Context.data.vacation!.fetch();\n    const vacationPeriod = `${vacation.data.start_string} - ${vacation.data.end_string}`;\n    // const currentProcess = await Context.fetch();\n    // const createdAt = currentProcess!.data.__createdAt.format(\"DD.MM.YY\");\n    const createdAt = Context.data.created?.format(\"DD.MM.YY\")\n    const vacationName = `Отпуск с ${vacation.data.start_string} по ${vacation.data.end_string} (${fullName}).xlsx`;\n    const jsonData: any[] = [{\n        \"ФИО сотрудника\": fullName,\n        \"Идентификатор сотрудника\": userId,\n        \"Период запланированного отпуска по графику\": vacationPeriod,\n        \"Уведомление направлено сотруднику\": createdAt\n    }];\n\n    if (Context.data.confirmed_at) {\n        jsonData[0][\"Дата подтверждения\"] = Context.data.confirmed_at.format(\"DD.MM.YY\");\n    };\n\n    const workSheet = XLSX.utils.json_to_sheet(jsonData);\n    const workBook = XLSX.utils.book_new();\n    workSheet[\"!cols\"] = [\n        {wch: fullName.length},\n        {wch: userId.length},\n        {wch: 43},\n        {wch: 14},\n        {wch: 19}\n    ];\n    XLSX.utils.book_append_sheet(workBook, workSheet, \"Отпуск\");\n    XLSX.writeFile(workBook, vacationName);\n};\n\nasync function generateMultipleVacations(): Promise\u003cvoid\u003e {\n    const jsonData: vacationsData = JSON.parse(Context.data.vacations_json!);\n    console.log(jsonData)\n    const formattedData = jsonData.map(vacation =\u003e {\n        return {\n            \"ФИО сотрудника\": vacation.fullname,\n            \"Идентификатор сотрудника\": vacation.userId,\n            \"Период по графику\": vacation.vacationPeriod,\n            \"Уведомление направлено сотруднику\": vacation.createdAt,\n            \"Подтверждение отпуска\": vacation.confirmedAt || \"\",\n            \"Перенос отпуска\": vacation.rejectedAt || \"\",\n            \"Идентификатор задачи 'уведомление по отпуску'\": vacation.taskId\n        };\n    });\n    const worksheet = XLSX.utils.json_to_sheet(formattedData);\n    const workBook = XLSX.utils.book_new();\n    worksheet[\"!cols\"] = [\n        {wch: Math.max(...jsonData.map(item =\u003e item.fullname.length))},\n        {wch: Math.max(...jsonData.map(item =\u003e item.userId.length))},\n        {wch: 43},\n        {wch: 27},\n        {wch: 19},\n        {wch: 19},\n        {wch: 46}\n    ];\n    XLSX.utils.book_append_sheet(workBook, worksheet, \"Данные об уведомлениях\");\n    const excelData: ArrayBuffer = XLSX.write(workBook, {type: \"array\", bookType: \"xlsx\"});\n    const excelFile = await Context.fields.excel_file.create(`Информация об отпусках за период с ${Context.data.from_date!.format(\"DD.MM.YY\")} по ${Context.data.to_date!.format(\"DD.MM.YY\")}.xlsx`, excelData);\n    Context.data.excel_file = excelFile;\n};","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([\"xlsx.full.min.js\"], function (exports_1, context_1) {\n    \"use strict\";\n    var XLSX;\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server) {\n        async function getExcelFile() {\n            var _a;\n            const staff = await Context.data.staff.fetch();\n            const fullName = staff.data.__name;\n            const userId = staff.id;\n            const vacation = await Context.data.vacation.fetch();\n            const vacationPeriod = `${vacation.data.start_string} - ${vacation.data.end_string}`;\n            const createdAt = (_a = Context.data.created) === null || _a === void 0 ? void 0 : _a.format(\"DD.MM.YY\");\n            const vacationName = `Отпуск с ${vacation.data.start_string} по ${vacation.data.end_string} (${fullName}).xlsx`;\n            const jsonData = [{\n                    \"ФИО сотрудника\": fullName,\n                    \"Идентификатор сотрудника\": userId,\n                    \"Период запланированного отпуска по графику\": vacationPeriod,\n                    \"Уведомление направлено сотруднику\": createdAt\n                }];\n            if (Context.data.confirmed_at) {\n                jsonData[0][\"Дата подтверждения\"] = Context.data.confirmed_at.format(\"DD.MM.YY\");\n            }\n            ;\n            const workSheet = XLSX.utils.json_to_sheet(jsonData);\n            const workBook = XLSX.utils.book_new();\n            workSheet[\"!cols\"] = [\n                { wch: fullName.length },\n                { wch: userId.length },\n                { wch: 43 },\n                { wch: 14 },\n                { wch: 19 }\n            ];\n            XLSX.utils.book_append_sheet(workBook, workSheet, \"Отпуск\");\n            XLSX.writeFile(workBook, vacationName);\n        }\n        ;\n        async function generateMultipleVacations() {\n            const jsonData = JSON.parse(Context.data.vacations_json);\n            console.log(jsonData);\n            const formattedData = jsonData.map(vacation =\u003e {\n                return {\n                    \"ФИО сотрудника\": vacation.fullname,\n                    \"Идентификатор сотрудника\": vacation.userId,\n                    \"Период по графику\": vacation.vacationPeriod,\n                    \"Уведомление направлено сотруднику\": vacation.createdAt,\n                    \"Подтверждение отпуска\": vacation.confirmedAt || \"\",\n                    \"Перенос отпуска\": vacation.rejectedAt || \"\",\n                    \"Идентификатор задачи 'уведомление по отпуску'\": vacation.taskId\n                };\n            });\n            const worksheet = XLSX.utils.json_to_sheet(formattedData);\n            const workBook = XLSX.utils.book_new();\n            worksheet[\"!cols\"] = [\n                { wch: Math.max(...jsonData.map(item =\u003e item.fullname.length)) },\n                { wch: Math.max(...jsonData.map(item =\u003e item.userId.length)) },\n                { wch: 43 },\n                { wch: 27 },\n                { wch: 19 },\n                { wch: 19 },\n                { wch: 46 }\n            ];\n            XLSX.utils.book_append_sheet(workBook, worksheet, \"Данные об уведомлениях\");\n            const excelData = XLSX.write(workBook, { type: \"array\", bookType: \"xlsx\" });\n            const excelFile = await Context.fields.excel_file.create(`Информация об отпусках за период с ${Context.data.from_date.format(\"DD.MM.YY\")} по ${Context.data.to_date.format(\"DD.MM.YY\")}.xlsx`, excelData);\n            Context.data.excel_file = excelFile;\n        }\n        ;\n        return {\n            getExcelFile,\n            generateMultipleVacations\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [\n            function (XLSX_1) {\n                XLSX = XLSX_1;\n            }\n        ],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"getExcelFile","parameters":[],"type":"[object Object]"},{"name":"generateMultipleVacations","parameters":[],"type":"[object Object]"}],"serverScripts":"","serverFnDeclarations":null,"hasTranslations":false,"clientDependencies":null},"__createdAt":"2023-08-09T12:05:14.843404733Z","__createdBy":"b1815b65-1548-40d4-a2c2-8c2edb60ebe9","__updatedAt":"2023-10-31T19:17:03.813675463Z","__updatedBy":"9f782bcc-80b2-4de6-834e-8548cf63c9bb","__deletedAt":null}
