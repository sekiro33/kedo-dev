{"__id":"018c8758-5576-7ee7-8330-4b30b4f8b54c","namespace":"ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed","code":"unpack_zip","__name":"Виджет для разбора zip-файла из Работы в России","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":3,"hidden":false,"draft":false,"readonly":false,"descriptor":{"template":{"id":"f5d6fe6f-2b50-4658-8589-31ed766be5ef","descriptor":"component","content":{"":[{"id":"8cae8c8f-a583-49bf-897d-a834bb57011e","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    .btn.disabled {\n        pointer-events: none;\n        color: #afafaf;\n        background-color: #d6d6d6;\n        transition: all 0.5s;\n    }\n\u003c/style\u003e\n\u003cscript\u003e\n    if (!window.confirmButton) {\n        let findConfirmButton = window.setInterval(() =\u003e {\n            console.log(\"no confirm button outer\");\n\n            let confirmButton = document.querySelector(\".modal-footer .btn\")\n            if (!confirmButton) {\n                return;\n            };\n            window.clearInterval(findConfirmButton);\n            window.confirmButton = document.querySelector(\".modal-footer .btn\");\n\n        }, 100);\n    };\n\u003c/script\u003e","hideContent":true,"contentPlaceholder":"css and js"}},{"id":"9546f87d-0ea6-4d73-97e7-10ea900669b8","descriptor":"code","values":{"html":"\n\u003ctemplate class=\"my-spinner\"\u003e\n  \u003csvg\n  width=\"25\"\n  height=\"25\"\n  viewBox=\"0 0 200 200\"\n  color=\"black\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  class=\"spinner-svg\"\n\u003e\n  \u003cg stroke=\"currentColor\" stroke-width=\"8\"\u003e\n    \u003cpath opacity=\"1\" d=\"M 191 70 A 96 96 0 0 1 196 100\" /\u003e\n    \u003cpath opacity=\"0.95\" d=\"M 178 44 A 96 96 0 0 1 191 70\" /\u003e\n    \u003cpath opacity=\"0.90\" d=\"M 156 22 A 96 96 0 0 1 178 44\" /\u003e\n    \u003cpath opacity=\"0.85\" d=\"M 130 9 A 96 96 0 0 1 156 22\" /\u003e\n    \u003cpath opacity=\"0.80\" d=\"M 100 4 A 96 96 0 0 1 130 9\" /\u003e\n    \u003cpath opacity=\"0.75\" d=\"M 70 9 A 96 96 0 0 1 100 4\" /\u003e\n    \u003cpath opacity=\"0.70\" d=\"M 44 22 A 96 96 0 0 1 70 9\" /\u003e\n    \u003cpath opacity=\"0.65\" d=\"M 22 44 A 96 96 0 0 1 44 22\" /\u003e\n    \u003cpath opacity=\"0.60\" d=\"M 9 70 A 96 96 0 0 1 22 44\" /\u003e\n    \u003cpath opacity=\"0.55\" d=\"M 4 100 A 96 96 0 0 1 9 70\" /\u003e\n    \u003cpath opacity=\"0.50\" d=\"M 9 130 A 96 96 0 0 1 4 100\" /\u003e\n    \u003cpath opacity=\"0.45\" d=\"M 22 156 A 96 96 0 0 1 9 130\" /\u003e\n    \u003cpath opacity=\"0.40\" d=\"M 44 178 A 96 96 0 0 1 22 156\" /\u003e\n    \u003cpath opacity=\"0.35\" d=\"M 70 191 A 96 96 0 0 1 44 178\" /\u003e\n    \u003cpath opacity=\"0.30\" d=\"M 100 196 A 96 96 0 0 1 70 191\" /\u003e\n    \u003cpath opacity=\"0.25\" d=\"M 130 191 A 96 96 0 0 1 100 196\" /\u003e\n    \u003cpath opacity=\"0.20\" d=\"M 156 178 A 96 96 0 0 1 130 191\" /\u003e\n    \u003cpath opacity=\"0.15\" d=\"M 178 156 A 96 96 0 0 1 156 178\" /\u003e\n    \u003cpath opacity=\"0.10\" d=\"M 191 130 A 96 96 0 0 1 178 156\" /\u003e\n    \u003cpath opacity=\"0.05\" d=\"M 196 100 A 96 96 0 0 1 191 130\" /\u003e\n  \u003c/g\u003e\n\u003c/svg\u003e\n\u003c/template\u003e\n\n\u003cstyle\u003e\n  .spinner-svg {\n    animation: spin 1s linear infinite;\n  }\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"loader template"}},{"id":"8f2f259c-c7d1-482a-b55e-27138302ca57","descriptor":"button","values":{"label":"Подтвердить подпись документа","action":null,"onClick":{"kind":"Function","name":"getFileWithSigns","type":"client"},"__classes":"sign-confirm","runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"__isConstValues":[],"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"view":"primary","runInPopover":null,"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}}}}]}},"fields":[{"code":"doc","type":"REF_ITEM","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Документ","data":{},"output":false}},{"code":"file_base64","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Файл base64","data":{"additionalType":"string"},"input":false,"output":false}},{"code":"zip_file","type":"FILE","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Zip-файл","data":{},"output":false}},{"code":"user","type":"SYS_USER","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"filter":{"value":{"tf":{}},"enabled":false}},"view":{"name":"Пользователь","data":{},"output":false}},{"code":"doc_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Идентификатор документа","data":{"additionalType":"string"},"output":false}},{"code":"api_token","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Ключ доступа","data":{"additionalType":"string"},"output":false}},{"code":"user_id","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Идентификатор пользователя","data":{"additionalType":"string"},"output":false}},{"code":"response","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Ответ сервера","data":{"additionalType":"string"}}},{"code":"debug","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"debug","data":{"additionalType":"string"}}}],"fieldVisibilityConditions":{"doc":{"enabled":false,"conditions":[]},"user":{"enabled":false,"conditions":[]},"debug":{"enabled":false,"conditions":[]},"doc_id":{"enabled":false,"conditions":[]},"user_id":{"enabled":false,"conditions":[]},"response":{"enabled":false,"conditions":[]},"zip_file":{"enabled":false,"conditions":[]},"api_token":{"enabled":false,"conditions":[]},"file_base64":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"import zip from \"zip.min.js\";\ndeclare const document: any;\ndeclare const window: any;\ndeclare const console: any;\n\nlet confirmButton: any;\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    let waitForButton = window.setInterval(() =\u003e {\n        confirmButton = window.confirmButton;\n        if (!confirmButton) {\n            console.log(\"no confirm button inner\")\n            return;\n        };\n        window.clearInterval(waitForButton);\n        window.confirmButton = undefined;\n        confirmButton.classList.add(\"disabled\");\n    }, 100);\n};\n\nasync function getFileWithSigns(): Promise\u003cvoid\u003e {\n    let spinnerSvg: any;\n    try {\n        const signConfirm = document.querySelector(\".sign-confirm\");\n        const loader = document.querySelector(\".my-spinner\").content.cloneNode(true);\n        signConfirm.append(loader)\n        spinnerSvg = document.querySelector(\".spinner-svg\");\n        await Server.rpc.getFileWithSigns();\n        const fileBase64 = Context.data.file_base64;\n        let reader = new zip.Data64URIReader(fileBase64)\n        let zipReader = new zip.ZipReader(reader)\n        let entries = await zipReader.getEntries();\n        // let innerZip = entries.find((f: any) =\u003e f.filename.includes(\"zip\"));\n        // let innerBlob = new zip.BlobReader(await innerZip.getData(new zip.BlobWriter()))\n        // let innerFiles = new zip.ZipReader(innerBlob)\n        // let innerEntries = await innerFiles.getEntries();\n        let simpleSign = entries.find((f: any) =\u003e f.filename.includes(\"xml\"));\n        console.log(entries)\n        if (!simpleSign) {\n            console.log(\"no sign\");\n            spinnerSvg.remove();\n            return;\n        };\n        console.log(\"sign loaded\")\n        let sign = await simpleSign.getData(new zip.Data64URIWriter());\n        let signbase64 = sign.split(\",\")[1];\n        let doc = await Context.data.doc!.fetch();\n        let fetchedDoc: any;\n        if (doc.data.__sourceRef) {\n            fetchedDoc = await doc.data.__sourceRef.fetch();\n        } else {\n            fetchedDoc = doc;\n        }\n        const fileSigns = await fetchedDoc.getSignHistory();\n        const signs = fileSigns[0].signs.filter((s: any) =\u003e s.data.type === \"file\");\n        const userId = Context.data.user!.id\n        if (signs.find((s: any) =\u003e s.data.__createdBy.id === userId)) {\n            console.log(\"sign already attached\");\n            spinnerSvg.remove();\n            return;\n        };\n\n        let body = (await fetchedDoc.getDataSigns()).find((s: any) =\u003e s.type === \"file\")!.body;\n        let newSign: NewSign = {\n            body,\n            sign: signbase64,\n            codeProvider: \"Работа в России ПЭП\"\n        };\n        console.log(newSign)\n        confirmButton.classList.remove(\"disabled\");\n        await fetchedDoc.uploadSign(newSign);\n        await fetchedDoc.save();\n        spinnerSvg.remove()\n    } catch (e) {\n        console.log(e.message);\n        spinnerSvg.remove()\n    };\n};\n\nfunction base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binary_string = atob(base64);\n    const len = binary_string.length;\n    let bytes = new Uint8Array(len);\n\n    for (let i = 0; i \u003c len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    };\n\n    return bytes.buffer;\n}","clientScriptOptions":{"allowServer":true},"serverScripts":"async function getFile(): Promise\u003cvoid\u003e {\n    const fileLink = await Context.data.zip_file!.getDownloadUrl();\n    const fileBuffer = await (await fetch(fileLink)).arrayBuffer();\n    const base64String = _arrayBufferToBase64(fileBuffer);\n    Context.data.file_base64 = base64String;\n};\n\nasync function getFileWithSigns(): Promise\u003cvoid\u003e {\n    const baseUrl = \"https://ekd-integration.trudvsem.ru\";\n    const accessToken = Context.data.api_token;\n    const userId = Context.data.user_id;\n    const docId = Context.data.doc_id;\n    const response = await fetch(`${baseUrl}/docs/${docId}/signedFile?userId=${userId}`, {\n        headers: {\n            \"Authorization\": `Basic ${accessToken}`\n        }\n    });\n\n    if (!response.ok) {\n        throw new Error(await response.text());\n    };\n\n    const responseJson = await response.json();\n\n    const fileName = responseJson.fileName;\n    const zipFileBase64 = responseJson.file;\n    const zipFileBuffer = base64ToArrayBuffer(zipFileBase64);\n    const zipFile = await Context.fields.zip_file.create(fileName, zipFileBuffer);\n    Context.data.zip_file = zipFile;\n    Context.data.response = fileName;\n    Context.data.file_base64 = zipFileBase64;\n}\n\nfunction _arrayBufferToBase64(buffer: ArrayBuffer) {\n    let binary = '';\n    let bytes = new Uint8Array( buffer );\n    let len = bytes.byteLength;\n    for (let i = 0; i \u003c len; i++) {\n        binary += String.fromCharCode( bytes[ i ] );\n    };\n    return btoa(binary);\n};\n\nfunction base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binary_string = atob(base64);\n    const len = binary_string.length;\n    let bytes = new Uint8Array(len);\n\n    for (let i = 0; i \u003c len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    };\n\n    return bytes.buffer;\n}","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([\"zip.min.js\"], function (exports_1, context_1) {\n    \"use strict\";\n    var zip_min_js_1;\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server) {\n        let confirmButton;\n        async function onInit() {\n            let waitForButton = window.setInterval(() =\u003e {\n                confirmButton = window.confirmButton;\n                if (!confirmButton) {\n                    console.log(\"no confirm button inner\");\n                    return;\n                }\n                ;\n                window.clearInterval(waitForButton);\n                window.confirmButton = undefined;\n                confirmButton.classList.add(\"disabled\");\n            }, 100);\n        }\n        ;\n        async function getFileWithSigns() {\n            let spinnerSvg;\n            try {\n                const signConfirm = document.querySelector(\".sign-confirm\");\n                const loader = document.querySelector(\".my-spinner\").content.cloneNode(true);\n                signConfirm.append(loader);\n                spinnerSvg = document.querySelector(\".spinner-svg\");\n                await Server.rpc.getFileWithSigns();\n                const fileBase64 = Context.data.file_base64;\n                let reader = new zip_min_js_1.default.Data64URIReader(fileBase64);\n                let zipReader = new zip_min_js_1.default.ZipReader(reader);\n                let entries = await zipReader.getEntries();\n                let simpleSign = entries.find((f) =\u003e f.filename.includes(\"xml\"));\n                console.log(entries);\n                if (!simpleSign) {\n                    console.log(\"no sign\");\n                    spinnerSvg.remove();\n                    return;\n                }\n                ;\n                console.log(\"sign loaded\");\n                let sign = await simpleSign.getData(new zip_min_js_1.default.Data64URIWriter());\n                let signbase64 = sign.split(\",\")[1];\n                let doc = await Context.data.doc.fetch();\n                let fetchedDoc;\n                if (doc.data.__sourceRef) {\n                    fetchedDoc = await doc.data.__sourceRef.fetch();\n                }\n                else {\n                    fetchedDoc = doc;\n                }\n                const fileSigns = await fetchedDoc.getSignHistory();\n                const signs = fileSigns[0].signs.filter((s) =\u003e s.data.type === \"file\");\n                const userId = Context.data.user.id;\n                if (signs.find((s) =\u003e s.data.__createdBy.id === userId)) {\n                    console.log(\"sign already attached\");\n                    spinnerSvg.remove();\n                    return;\n                }\n                ;\n                let body = (await fetchedDoc.getDataSigns()).find((s) =\u003e s.type === \"file\").body;\n                let newSign = {\n                    body,\n                    sign: signbase64,\n                    codeProvider: \"Работа в России ПЭП\"\n                };\n                console.log(newSign);\n                confirmButton.classList.remove(\"disabled\");\n                await fetchedDoc.uploadSign(newSign);\n                await fetchedDoc.save();\n                spinnerSvg.remove();\n            }\n            catch (e) {\n                console.log(e.message);\n                spinnerSvg.remove();\n            }\n            ;\n        }\n        ;\n        function base64ToArrayBuffer(base64) {\n            const binary_string = atob(base64);\n            const len = binary_string.length;\n            let bytes = new Uint8Array(len);\n            for (let i = 0; i \u003c len; i++) {\n                bytes[i] = binary_string.charCodeAt(i);\n            }\n            ;\n            return bytes.buffer;\n        }\n        return {\n            onInit,\n            getFileWithSigns,\n            base64ToArrayBuffer\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [\n            function (zip_min_js_1_1) {\n                zip_min_js_1 = zip_min_js_1_1;\n            }\n        ],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"getFileWithSigns","parameters":[],"type":"[object Object]"},{"name":"base64ToArrayBuffer","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"}],"serverScripts":"async function getFile() {\n    const fileLink = await Context.data.zip_file.getDownloadUrl();\n    const fileBuffer = await (await fetch(fileLink)).arrayBuffer();\n    const base64String = _arrayBufferToBase64(fileBuffer);\n    Context.data.file_base64 = base64String;\n}\n;\nasync function getFileWithSigns() {\n    const baseUrl = \"https://ekd-integration.trudvsem.ru\";\n    const accessToken = Context.data.api_token;\n    const userId = Context.data.user_id;\n    const docId = Context.data.doc_id;\n    const response = await fetch(`${baseUrl}/docs/${docId}/signedFile?userId=${userId}`, {\n        headers: {\n            \"Authorization\": `Basic ${accessToken}`\n        }\n    });\n    if (!response.ok) {\n        throw new Error(await response.text());\n    }\n    ;\n    const responseJson = await response.json();\n    const fileName = responseJson.fileName;\n    const zipFileBase64 = responseJson.file;\n    const zipFileBuffer = base64ToArrayBuffer(zipFileBase64);\n    const zipFile = await Context.fields.zip_file.create(fileName, zipFileBuffer);\n    Context.data.zip_file = zipFile;\n    Context.data.response = fileName;\n    Context.data.file_base64 = zipFileBase64;\n}\nfunction _arrayBufferToBase64(buffer) {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n    let len = bytes.byteLength;\n    for (let i = 0; i \u003c len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    ;\n    return btoa(binary);\n}\n;\nfunction base64ToArrayBuffer(base64) {\n    const binary_string = atob(base64);\n    const len = binary_string.length;\n    let bytes = new Uint8Array(len);\n    for (let i = 0; i \u003c len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    ;\n    return bytes.buffer;\n}\n","serverFnDeclarations":[{"name":"getFile","parameters":[],"type":"[object Object]"},{"name":"getFileWithSigns","parameters":[],"type":"[object Object]"},{"name":"_arrayBufferToBase64","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"base64ToArrayBuffer","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:22.419437596Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:09:33.95205348Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
