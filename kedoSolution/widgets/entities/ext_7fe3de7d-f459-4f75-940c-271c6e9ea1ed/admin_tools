{
  "__id": "018f0a74-f165-75f6-a13f-efcd80bed2eb",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "code": "admin_tools",
  "__name": "Инструменты администратора",
  "description": "Инструменты для администрирования ELMA365 КЭДО",
  "extensionZoneCode": "toolbar-extension-zone",
  "sort": 3,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 1,
  "hidden": false,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "icon": "category_bug",
    "template": {
      "id": "85ee9705-86ad-4d02-93a1-f38b603b1365",
      "descriptor": "component",
      "values": {
        "systemFunctions": {
          "canRender": {
            "kind": "Function",
            "name": "needRender",
            "type": "client"
          }
        }
      },
      "content": {
        "": [
          {
            "id": "0165479c-4700-468c-9bdc-fc7e301a5330",
            "descriptor": "button",
            "values": {
              "runProcessSettings": null,
              "label": "Инструменты администратора",
              "__outlet": "",
              "onClick": {
                "kind": "Function",
                "name": "toolButtonOnClick",
                "type": "client"
              },
              "runInPopover": null,
              "runActionEnum": [
                {
                  "code": "undefined",
                  "name": "shared.common.button@widget-runAction-none",
                  "translate": true
                }
              ],
              "__isConstValues": [],
              "createAppItemSettings": null,
              "__renderContentOnDemand": false,
              "icon": "category_bug",
              "__baseURL": "",
              "__relativeURL": "",
              "processPopoverSize": [
                {
                  "code": "default",
                  "name": "shared.common.button@widget-process-popover-size-default",
                  "translate": true
                }
              ],
              "view": "icon",
              "action": null
            }
          },
          {
            "id": "7b409d11-ca0b-4c76-aa6b-01db3c044025",
            "descriptor": "complex-popup",
            "values": {
              "__outlet": "",
              "__baseURL": "",
              "modalSize": [
                {
                  "code": "modal-lg",
                  "name": "shared.common.complex-popup@widget-size-large"
                }
              ],
              "__isConstValues": [],
              "__renderContentOnDemand": false,
              "title": "Инструменты администратора",
              "__hidden": false,
              "__classes": "",
              "__relativeURL": "",
              "sidebarAvailable": false,
              "__renderContentAsync": false,
              "visible": {
                "path": ["show_modal"]
              },
              "__styles": ""
            },
            "content": {
              "[popup-footer]": [
                {
                  "id": "c036bf9c-5356-4307-88c9-e1cf6cfdfaad",
                  "descriptor": "row-layout",
                  "content": {
                    "": []
                  }
                }
              ],
              "[popup-header]": [
                {
                  "id": "61092aa0-4614-4cbf-a968-e7a02c79547e",
                  "descriptor": "button",
                  "values": {
                    "runInPopover": null,
                    "runActionEnum": [
                      {
                        "code": "undefined",
                        "name": "shared.common.button@widget-runAction-none",
                        "translate": true
                      }
                    ],
                    "view": "icon",
                    "__outlet": "",
                    "runProcessSettings": null,
                    "__renderContentOnDemand": false,
                    "label": "Обновить окно",
                    "processPopoverSize": [
                      {
                        "code": "default",
                        "name": "shared.common.button@widget-process-popover-size-default",
                        "translate": true
                      }
                    ],
                    "icon": "sync",
                    "action": null,
                    "onClick": {
                      "kind": "Function",
                      "name": "loadData",
                      "type": "client"
                    },
                    "__baseURL": "",
                    "__relativeURL": "",
                    "__isConstValues": [],
                    "createAppItemSettings": null
                  }
                }
              ],
              "[popup-content]": [
                {
                  "id": "5efffa7d-2015-4eb3-b2a0-7fab47d62683",
                  "descriptor": "modal-body",
                  "content": {
                    "": [
                      {
                        "id": "61e7bdd3-6f4b-4076-a447-e1e9b1a1c9f9",
                        "descriptor": "code",
                        "values": {
                          "html": "\u003clink rel=\"stylesheet\" href=\"\u003c%= UI.widget.filePath %\u003e/lib/notifier/notify.css\"\u003e\u003c/link\u003e\n\u003cscript type=\"text/javascript\" src=\"\u003c%= UI.widget.filePath %\u003e/lib/notifier/notify.js\"\u003e\u003c/script\u003e",
                          "hideContent": true,
                          "contentPlaceholder": "IMPORTS"
                        }
                      },
                      {
                        "id": "9ca0b265-0e27-48f8-86e8-c0dafba964d3",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "bindingMode": false,
                          "displayName": "Элемент приложения",
                          "__relativeURL": "",
                          "control": {
                            "path": ["item"]
                          },
                          "tooltip": null,
                          "__outlet": "",
                          "required": false,
                          "__baseURL": "",
                          "__renderContentOnDemand": false,
                          "hideEmpty": false,
                          "__readOnly": true,
                          "__isConstValues": [],
                          "showDisplayName": true
                        }
                      },
                      {
                        "id": "261a5e95-677a-4bcc-a52f-2e7a491c4ddd",
                        "descriptor": "dynamic-form-row",
                        "values": {
                          "__baseURL": "",
                          "__readOnly": true,
                          "__relativeURL": "",
                          "__renderContentOnDemand": false,
                          "__outlet": "",
                          "__styles": "",
                          "required": false,
                          "hideEmpty": false,
                          "bindingMode": false,
                          "__isConstValues": [],
                          "showDisplayName": true,
                          "control": {
                            "path": ["element_id"]
                          },
                          "tooltip": null
                        }
                      },
                      {
                        "id": "0ba891fc-744f-48b3-ba3e-a3b6ae144c86",
                        "descriptor": "elma-content-navigation",
                        "values": {
                          "__outlet": "",
                          "__baseURL": "",
                          "__relativeURL": "",
                          "__isConstValues": [],
                          "__renderContentAsync": false,
                          "__renderContentOnDemand": false
                        },
                        "content": {
                          "[header]": [
                            {
                              "id": "f759bb28-4a6e-46c3-b955-4b17690daefb",
                              "descriptor": "row-layout",
                              "values": {
                                "title": "Строка"
                              },
                              "content": {
                                "": []
                              }
                            }
                          ],
                          "[tabset]": [
                            {
                              "id": "2d56c12a-8e8a-4d09-bb83-a8a23dc8cb74",
                              "descriptor": "tabset",
                              "values": {
                                "horizontal": true
                              },
                              "content": {
                                "": [
                                  {
                                    "id": "32d68f55-4b0c-43c0-b119-6c9c928de0b3",
                                    "descriptor": "tab",
                                    "values": {
                                      "__isConstValues": [],
                                      "__renderContentAsync": false,
                                      "__renderContentOnDemand": false,
                                      "title": "Связанные процессы",
                                      "__hidden": {
                                        "path": ["is_app"],
                                        "modifier": "not"
                                      },
                                      "__outlet": "",
                                      "__baseURL": "",
                                      "__relativeURL": ""
                                    },
                                    "content": {
                                      "": [
                                        {
                                          "id": "62b72bff-ad09-462d-ae51-995e910a3f82",
                                          "descriptor": "modal-body",
                                          "content": {
                                            "": [
                                              {
                                                "id": "de62ca72-e4a0-4c06-8356-afdd31d3e855",
                                                "descriptor": "code",
                                                "values": {
                                                  "hideContent": true,
                                                  "contentPlaceholder": "Таблица процессов",
                                                  "html": "\u003c% if (Context.data.process_list \u0026\u0026 Context.data.process_list.length \u003e 0) { %\u003e\n\u003ctable class=\"table\"\u003e\n    \u003cthead\u003e\n        \u003cth\u003e\u003c/th\u003e\n        \u003cth\u003eНазвание\u003c/th\u003e\n        \u003cth\u003eРодительский процесс\u003c/th\u003e\n        \u003cth\u003eДата запуска\u003c/th\u003e\n        \u003cth\u003eДата обновления\u003c/th\u003e\n        \u003cth\u003eСтатус\u003c/th\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003c% if (Context.data.process_list) { %\u003e\n            \u003c% for (const process of Context.data.process_list) { %\u003e\n                \u003c% \n                    let class_name = \"\";\n\n                    if (process.state == \"error\") {\n                        class_name = \"process-error\";\n                    }\n\n                    if (process.state == \"done\") {\n                        class_name = \"process-done\"\n                    }\n                %\u003e\n                \u003ctr\u003e\n                    \u003ctd\u003e\u003cinput type=\"checkbox\"\u003e\u003c/td\u003e\n                    \u003ctd\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" class=\"\u003c%-class_name%\u003e\" href=\"\u003c%= process.href %\u003e\"\u003e\u003c%= process.name %\u003e\u003c/a\u003e\u003c/td\u003e\n                    \u003ctd\u003e\n                        \u003c% if (process.parent) { %\u003e\n                            \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"\u003c%= process.parent.href %\u003e\"\u003e\n                                \u003c%= process.parent.name %\u003e\n                            \u003c/a\u003e\n                        \u003c% } else { %\u003e\n                            \u003cp\u003e\u003c/p\u003e\n                        \u003c% } %\u003e\n                    \u003c/td\u003e\n                    \u003ctd\u003e\u003c%= process.createdAt %\u003e\u003c/td\u003e\n                    \u003ctd\u003e\u003c%= process.updatedAt %\u003e\u003c/td\u003e\n                    \u003ctd\u003e\u003c%= process.state_line %\u003e\u003c/td\u003e\n                \u003c/tr\u003e\n            \u003c% } %\u003e\n        \u003c% } %\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c% } else { %\u003e\n\u003ch2\u003eНет запущенных процессов\u003c/h2\u003e\n\u003c% } %\u003e\n\n\u003cstyle\u003e\n    .process-error {\n        color: red;\n    }\n\n    .process-done {\n        text-decoration: line-through;\n    }\n\u003c/style\u003e"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "id": "1a23a037-47bf-453d-b2fd-e3d34ee33768",
                                    "descriptor": "tab",
                                    "values": {
                                      "__baseURL": "",
                                      "__relativeURL": "",
                                      "__isConstValues": [],
                                      "__renderContentAsync": false,
                                      "__renderContentOnDemand": false,
                                      "title": "Действия с задачей",
                                      "__hidden": {
                                        "path": ["is_task"],
                                        "modifier": "not"
                                      },
                                      "__outlet": ""
                                    },
                                    "content": {
                                      "": [
                                        {
                                          "id": "8c8aa602-a54b-431d-bc10-17520b8b878c",
                                          "descriptor": "modal-body",
                                          "content": {
                                            "": [
                                              {
                                                "id": "4f4cbfd5-211c-4279-b569-051048b53f78",
                                                "descriptor": "groupbox",
                                                "values": {
                                                  "__baseURL": "",
                                                  "styleEnum": [
                                                    {
                                                      "code": "simple",
                                                      "name": "Простой"
                                                    }
                                                  ],
                                                  "__renderContentAsync": false,
                                                  "__renderContentOnDemand": false,
                                                  "title": "Переназначение задачи",
                                                  "__outlet": "",
                                                  "expanded": true,
                                                  "collapsible": false,
                                                  "__relativeURL": "",
                                                  "__isConstValues": []
                                                },
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "1602b66a-7191-41e2-9c0e-f2072a029f97",
                                                      "descriptor": "dynamic-form-row",
                                                      "values": {
                                                        "control": {
                                                          "path": ["staff"]
                                                        },
                                                        "required": false,
                                                        "bindingMode": false,
                                                        "showCreateItem": false,
                                                        "__isConstValues": [],
                                                        "showDisplayName": true,
                                                        "tooltip": null,
                                                        "__outlet": "",
                                                        "__baseURL": "",
                                                        "hideEmpty": false,
                                                        "__readOnly": null,
                                                        "__relativeURL": "",
                                                        "__renderContentOnDemand": false
                                                      }
                                                    },
                                                    {
                                                      "id": "27a8e396-17a3-4077-a6c8-cd780c6a9a85",
                                                      "descriptor": "row-layout",
                                                      "values": {
                                                        "__styles": "margin: 0;",
                                                        "__baseURL": "",
                                                        "__relativeURL": "",
                                                        "__isConstValues": [],
                                                        "elementsAlignEnum": [
                                                          {
                                                            "code": "right",
                                                            "name": "По правому краю"
                                                          }
                                                        ],
                                                        "__renderContentAsync": false,
                                                        "__renderContentOnDemand": false,
                                                        "__outlet": ""
                                                      },
                                                      "content": {
                                                        "": [
                                                          {
                                                            "id": "0a8c5729-6e99-4fcb-82b4-f6bb960ca5eb",
                                                            "descriptor": "button",
                                                            "values": {
                                                              "runProcessSettings": null,
                                                              "__renderContentOnDemand": false,
                                                              "__baseURL": "",
                                                              "__relativeURL": "",
                                                              "action": null,
                                                              "runActionEnum": [
                                                                {
                                                                  "code": "undefined",
                                                                  "name": "shared.common.button@widget-runAction-none",
                                                                  "translate": true
                                                                }
                                                              ],
                                                              "runInPopover": null,
                                                              "processPopoverSize": [
                                                                {
                                                                  "code": "default",
                                                                  "name": "shared.common.button@widget-process-popover-size-default",
                                                                  "translate": true
                                                                }
                                                              ],
                                                              "view": "primary",
                                                              "__styles": "min-width: auto;",
                                                              "__outlet": "",
                                                              "__isConstValues": [],
                                                              "createAppItemSettings": null,
                                                              "label": "Переназначить",
                                                              "onClick": {
                                                                "kind": "Function",
                                                                "name": "reassignmentTask",
                                                                "type": "client"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "id": "b595a022-2ddb-4f6c-8d05-e27c7a5d9a1b",
                                    "descriptor": "tab",
                                    "values": {
                                      "__relativeURL": "",
                                      "__isConstValues": [],
                                      "__renderContentAsync": false,
                                      "__renderContentOnDemand": false,
                                      "title": "Действия с элементом",
                                      "__hidden": {
                                        "path": ["is_app"],
                                        "modifier": "not"
                                      },
                                      "__outlet": "",
                                      "__baseURL": ""
                                    },
                                    "content": {
                                      "": [
                                        {
                                          "id": "bd105863-be5e-4348-8e63-a8c84bbfa453",
                                          "descriptor": "modal-body",
                                          "content": {
                                            "": []
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "id": "516fecbd-a364-442f-8e06-797c08aa1e98",
                                    "descriptor": "tab",
                                    "values": {
                                      "title": "Контекст",
                                      "__outlet": "",
                                      "__baseURL": "",
                                      "__relativeURL": "",
                                      "__isConstValues": [],
                                      "__renderContentAsync": false,
                                      "__renderContentOnDemand": false
                                    },
                                    "content": {
                                      "": [
                                        {
                                          "id": "db18dcad-1712-4a2b-a6a1-21324ecbe38d",
                                          "descriptor": "modal-body",
                                          "content": {
                                            "": [
                                              {
                                                "id": "4175842a-164b-4db3-874b-e7e6a388c319",
                                                "descriptor": "tabset",
                                                "values": {
                                                  "__outlet": "",
                                                  "__baseURL": "",
                                                  "__relativeURL": "",
                                                  "__isConstValues": [],
                                                  "__renderContentAsync": false,
                                                  "__renderContentOnDemand": false
                                                },
                                                "content": {
                                                  "": [
                                                    {
                                                      "id": "2c6c327e-48a5-4772-9185-da61ccb3b4df",
                                                      "descriptor": "tab",
                                                      "values": {
                                                        "__renderContentAsync": false,
                                                        "__renderContentOnDemand": false,
                                                        "title": "Текущий контекст",
                                                        "__outlet": "",
                                                        "__baseURL": "",
                                                        "__relativeURL": "",
                                                        "__isConstValues": []
                                                      },
                                                      "content": {
                                                        "": [
                                                          {
                                                            "id": "60d8ff83-7a5a-46fd-afeb-ea1fb379830d",
                                                            "descriptor": "modal-body",
                                                            "content": {
                                                              "": [
                                                                {
                                                                  "id": "c7de3647-d74e-41c5-b54c-e6dfd1b851f3",
                                                                  "descriptor": "code",
                                                                  "values": {
                                                                    "html": "\u003cdiv\u003e\n    \u003cbutton onclick=\"\u003c%-Scripts%\u003e.copyToClipboard('app_context_json')\"\u003eКопировать в буффер обмена\u003c/button\u003e\n    \u003cpre style=\"width: 100%\"\u003e\n    \u003ccode\u003e\n        \u003c%= Context.data.app_context_json %\u003e\n    \u003c/pre\u003e\n    \u003c/code\u003e\n\u003c/div\u003e\n\n\u003cstyle\u003e\n    .custom-icon-button {\n    }\n\n    .custom-icon-button:hover {\n        cursor: pointer;\n    }\n\u003c/style\u003e",
                                                                    "hideContent": false,
                                                                    "contentPlaceholder": ""
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "id": "9c1cf3aa-978b-4598-90bf-27485be1dbad",
                                                      "descriptor": "tab",
                                                      "values": {
                                                        "__isConstValues": [],
                                                        "__renderContentAsync": false,
                                                        "__renderContentOnDemand": false,
                                                        "title": "Редактирование контекста",
                                                        "__hidden": {
                                                          "path": ["is_app"],
                                                          "modifier": "not"
                                                        },
                                                        "__outlet": "",
                                                        "__baseURL": "",
                                                        "__relativeURL": ""
                                                      },
                                                      "content": {
                                                        "": [
                                                          {
                                                            "id": "276c8839-8ab7-4251-a960-03063ed857c7",
                                                            "descriptor": "modal-body",
                                                            "content": {
                                                              "": [
                                                                {
                                                                  "id": "ea9e55e5-070d-4121-a409-03a9094ae24c",
                                                                  "descriptor": "row",
                                                                  "values": {
                                                                    "__isConstValues": [],
                                                                    "__renderContentAsync": false,
                                                                    "__renderContentOnDemand": false,
                                                                    "__outlet": "",
                                                                    "__baseURL": "",
                                                                    "__relativeURL": ""
                                                                  },
                                                                  "content": {
                                                                    "": [
                                                                      {
                                                                        "id": "18045e50-2c15-49ae-abb6-c1e25a2d31ca",
                                                                        "descriptor": "column",
                                                                        "content": {
                                                                          "": [
                                                                            {
                                                                              "id": "5dbea84d-bfc2-4d5f-a4cc-bbd0e0ca0187",
                                                                              "descriptor": "label",
                                                                              "values": {
                                                                                "text": "Запрос",
                                                                                "__outlet": "",
                                                                                "__baseURL": "",
                                                                                "__relativeURL": "",
                                                                                "__isConstValues": [],
                                                                                "__renderContentOnDemand": false
                                                                              }
                                                                            }
                                                                          ]
                                                                        }
                                                                      },
                                                                      {
                                                                        "id": "ef24d8f7-7e35-4b70-80ec-1d7d0b90e277",
                                                                        "descriptor": "column",
                                                                        "content": {
                                                                          "": [
                                                                            {
                                                                              "id": "12add1e1-c839-4494-880a-e19b0e8c3139",
                                                                              "descriptor": "label",
                                                                              "values": {
                                                                                "text": "Результат",
                                                                                "__outlet": "",
                                                                                "__baseURL": "",
                                                                                "__relativeURL": "",
                                                                                "__isConstValues": [],
                                                                                "__renderContentOnDemand": false
                                                                              }
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "id": "d84663d9-8f00-467d-87a3-db59c5e2c566",
                                                                  "descriptor": "row",
                                                                  "values": {
                                                                    "__renderContentOnDemand": false,
                                                                    "__outlet": "",
                                                                    "__baseURL": "",
                                                                    "__relativeURL": "",
                                                                    "__isConstValues": [],
                                                                    "__renderContentAsync": false
                                                                  },
                                                                  "content": {
                                                                    "": [
                                                                      {
                                                                        "id": "047afb5a-bd15-4d68-9dbe-2970d3403f4c",
                                                                        "descriptor": "column",
                                                                        "content": {
                                                                          "": [
                                                                            {
                                                                              "id": "29d8e2c1-8ba3-40d8-8444-0c16d05770d3",
                                                                              "descriptor": "row-layout",
                                                                              "values": {
                                                                                "__baseURL": "",
                                                                                "__relativeURL": "",
                                                                                "__isConstValues": [],
                                                                                "elementsAlignEnum": [
                                                                                  {
                                                                                    "code": "left",
                                                                                    "name": "shared.common.row-layout@widget-elements-align-left"
                                                                                  }
                                                                                ],
                                                                                "__renderContentAsync": false,
                                                                                "__renderContentOnDemand": false,
                                                                                "__outlet": ""
                                                                              },
                                                                              "content": {
                                                                                "": [
                                                                                  {
                                                                                    "id": "3c694a44-5c9a-4a25-ab9b-3b0f20f5be92",
                                                                                    "descriptor": "button",
                                                                                    "values": {
                                                                                      "__outlet": "",
                                                                                      "__baseURL": "",
                                                                                      "__relativeURL": "",
                                                                                      "view": "icon",
                                                                                      "processPopoverSize": [
                                                                                        {
                                                                                          "code": "default",
                                                                                          "name": "shared.common.button@widget-process-popover-size-default",
                                                                                          "translate": true
                                                                                        }
                                                                                      ],
                                                                                      "__renderContentOnDemand": false,
                                                                                      "action": null,
                                                                                      "label": "Форматировать запрос",
                                                                                      "onClick": {
                                                                                        "kind": "Function",
                                                                                        "name": "formatBody",
                                                                                        "type": "client"
                                                                                      },
                                                                                      "__styles": "min-width: none;",
                                                                                      "runInPopover": null,
                                                                                      "runActionEnum": [
                                                                                        {
                                                                                          "code": "undefined",
                                                                                          "name": "shared.common.button@widget-runAction-none",
                                                                                          "translate": true
                                                                                        }
                                                                                      ],
                                                                                      "__isConstValues": [],
                                                                                      "runProcessSettings": null,
                                                                                      "icon": "code",
                                                                                      "createAppItemSettings": null
                                                                                    }
                                                                                  },
                                                                                  {
                                                                                    "id": "2a94f619-ab76-44a6-8511-8851e5e1e213",
                                                                                    "descriptor": "button",
                                                                                    "values": {
                                                                                      "view": "icon",
                                                                                      "label": "Добавить свойство",
                                                                                      "__outlet": "",
                                                                                      "runInPopover": null,
                                                                                      "runProcessSettings": null,
                                                                                      "__renderContentOnDemand": false,
                                                                                      "processPopoverSize": [
                                                                                        {
                                                                                          "code": "default",
                                                                                          "name": "shared.common.button@widget-process-popover-size-default",
                                                                                          "translate": true
                                                                                        }
                                                                                      ],
                                                                                      "createAppItemSettings": null,
                                                                                      "action": null,
                                                                                      "onClick": {
                                                                                        "kind": "Function",
                                                                                        "name": "openPropertyModal",
                                                                                        "type": "client"
                                                                                      },
                                                                                      "__relativeURL": "",
                                                                                      "__isConstValues": [],
                                                                                      "icon": "system_folder_plus",
                                                                                      "__baseURL": "",
                                                                                      "runActionEnum": [
                                                                                        {
                                                                                          "code": "undefined",
                                                                                          "name": "shared.common.button@widget-runAction-none",
                                                                                          "translate": true
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  },
                                                                                  {
                                                                                    "id": "c3a7ccfc-5812-42ed-9653-eeadf633e1b9",
                                                                                    "descriptor": "button",
                                                                                    "values": {
                                                                                      "__isConstValues": [],
                                                                                      "createAppItemSettings": null,
                                                                                      "action": null,
                                                                                      "__outlet": "",
                                                                                      "onClick": {
                                                                                        "kind": "Function",
                                                                                        "name": "refreshBody",
                                                                                        "type": "client"
                                                                                      },
                                                                                      "runInPopover": null,
                                                                                      "processPopoverSize": [
                                                                                        {
                                                                                          "code": "default",
                                                                                          "name": "shared.common.button@widget-process-popover-size-default",
                                                                                          "translate": true
                                                                                        }
                                                                                      ],
                                                                                      "icon": "sync",
                                                                                      "label": "Сбросить поле",
                                                                                      "runActionEnum": [
                                                                                        {
                                                                                          "code": "undefined",
                                                                                          "name": "shared.common.button@widget-runAction-none",
                                                                                          "translate": true
                                                                                        }
                                                                                      ],
                                                                                      "view": "icon",
                                                                                      "__baseURL": "",
                                                                                      "__renderContentOnDemand": false,
                                                                                      "__relativeURL": "",
                                                                                      "runProcessSettings": null
                                                                                    }
                                                                                  },
                                                                                  {
                                                                                    "id": "3d06a49d-55d5-4ff6-816c-d18e9dd97e97",
                                                                                    "descriptor": "button",
                                                                                    "values": {
                                                                                      "label": "Очистить поле",
                                                                                      "__relativeURL": "",
                                                                                      "__isConstValues": [],
                                                                                      "processPopoverSize": [
                                                                                        {
                                                                                          "code": "default",
                                                                                          "name": "shared.common.button@widget-process-popover-size-default",
                                                                                          "translate": true
                                                                                        }
                                                                                      ],
                                                                                      "runProcessSettings": null,
                                                                                      "icon": "system_trash",
                                                                                      "view": "icon",
                                                                                      "__outlet": "",
                                                                                      "runInPopover": null,
                                                                                      "runActionEnum": [
                                                                                        {
                                                                                          "code": "undefined",
                                                                                          "name": "shared.common.button@widget-runAction-none",
                                                                                          "translate": true
                                                                                        }
                                                                                      ],
                                                                                      "action": null,
                                                                                      "onClick": {
                                                                                        "kind": "Function",
                                                                                        "name": "clearBody",
                                                                                        "type": "client"
                                                                                      },
                                                                                      "__renderContentOnDemand": false,
                                                                                      "__styles": "min-width: none; color: red;",
                                                                                      "__baseURL": "",
                                                                                      "createAppItemSettings": null
                                                                                    }
                                                                                  }
                                                                                ]
                                                                              }
                                                                            },
                                                                            {
                                                                              "id": "31fed0a4-f1e4-4eac-b35e-c33b4355195b",
                                                                              "descriptor": "dynamic-form-row",
                                                                              "values": {
                                                                                "hideEmpty": false,
                                                                                "bindingMode": false,
                                                                                "__isConstValues": [],
                                                                                "showDisplayName": false,
                                                                                "control": {
                                                                                  "path": [
                                                                                    "body"
                                                                                  ]
                                                                                },
                                                                                "__styles": "min-height: none;",
                                                                                "required": false,
                                                                                "__baseURL": "",
                                                                                "__renderContentOnDemand": false,
                                                                                "tooltip": null,
                                                                                "__outlet": "",
                                                                                "__readOnly": null,
                                                                                "__relativeURL": ""
                                                                              }
                                                                            },
                                                                            {
                                                                              "id": "21af8de0-29c5-43fc-bbdb-f8fef14c1a45",
                                                                              "descriptor": "code",
                                                                              "values": {
                                                                                "html": "\u003c!-- Доработка, чтобы можно было увеличивать по высоте блок с текстом --\u003e\n\u003cstyle\u003e\n    textarea {\n        max-height: none;\n    }\n\u003c/style\u003e",
                                                                                "hideContent": true,
                                                                                "contentPlaceholder": "textarea CSS"
                                                                              }
                                                                            },
                                                                            {
                                                                              "id": "12e87dd9-6d64-47f6-a965-d4abdad6e5d0",
                                                                              "descriptor": "button",
                                                                              "values": {
                                                                                "view": "default",
                                                                                "onClick": {
                                                                                  "kind": "Function",
                                                                                  "name": "updateContext",
                                                                                  "type": "client"
                                                                                },
                                                                                "__isConstValues": [],
                                                                                "processPopoverSize": [
                                                                                  {
                                                                                    "code": "default",
                                                                                    "name": "shared.common.button@widget-process-popover-size-default",
                                                                                    "translate": true
                                                                                  }
                                                                                ],
                                                                                "__outlet": "",
                                                                                "__styles": "min-width: none;",
                                                                                "__baseURL": "",
                                                                                "runInPopover": null,
                                                                                "runProcessSettings": null,
                                                                                "action": null,
                                                                                "__relativeURL": "",
                                                                                "runActionEnum": [
                                                                                  {
                                                                                    "code": "undefined",
                                                                                    "name": "shared.common.button@widget-runAction-none",
                                                                                    "translate": true
                                                                                  }
                                                                                ],
                                                                                "icon": "exchange",
                                                                                "label": "Выполнить запрос",
                                                                                "createAppItemSettings": null,
                                                                                "__renderContentOnDemand": false
                                                                              }
                                                                            }
                                                                          ]
                                                                        }
                                                                      },
                                                                      {
                                                                        "id": "a195f05b-9c2f-4ecb-8fff-97a5dcc42cd1",
                                                                        "descriptor": "column",
                                                                        "content": {
                                                                          "": [
                                                                            {
                                                                              "id": "e230e02b-c5b4-4229-a140-e2e9f545b293",
                                                                              "descriptor": "code",
                                                                              "values": {
                                                                                "contentPlaceholder": "Результат запроса",
                                                                                "html": "\u003cpre style=\"width: 100%\"\u003e\r\n    \u003ccode\u003e\r\n        \u003c%= Context.data.response %\u003e\r\n    \u003c/pre\u003e\r\n\u003c/code\u003e",
                                                                                "hideContent": true
                                                                              }
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "id": "5bed1f5f-ef44-4e39-9863-e60305db65f6",
                                                                  "descriptor": "complex-popup",
                                                                  "values": {
                                                                    "__renderContentAsync": false,
                                                                    "__renderContentOnDemand": false,
                                                                    "visible": {
                                                                      "path": [
                                                                        "show_add_context_fields_modal"
                                                                      ]
                                                                    },
                                                                    "__hidden": false,
                                                                    "__outlet": "",
                                                                    "__styles": "",
                                                                    "__baseURL": "",
                                                                    "modalSize": [
                                                                      {
                                                                        "code": "modal-md",
                                                                        "name": "Средний"
                                                                      }
                                                                    ],
                                                                    "title": "Добавить свойство",
                                                                    "__classes": "",
                                                                    "__relativeURL": "",
                                                                    "__isConstValues": [],
                                                                    "sidebarAvailable": false
                                                                  },
                                                                  "content": {
                                                                    "[popup-footer]": [
                                                                      {
                                                                        "id": "027f5a15-881b-44da-85c9-b914d55d44de",
                                                                        "descriptor": "row-layout",
                                                                        "content": {
                                                                          "": [
                                                                            {
                                                                              "id": "88deae6e-1211-4ffb-88c3-b0606d7ea9e5",
                                                                              "descriptor": "button",
                                                                              "values": {
                                                                                "action": null,
                                                                                "onClick": {
                                                                                  "kind": "Function",
                                                                                  "name": "addNewProperty",
                                                                                  "type": "client"
                                                                                },
                                                                                "runInPopover": null,
                                                                                "__isConstValues": [],
                                                                                "processPopoverSize": [
                                                                                  {
                                                                                    "code": "default",
                                                                                    "name": "shared.common.button@widget-process-popover-size-default",
                                                                                    "translate": true
                                                                                  }
                                                                                ],
                                                                                "label": "Добавить",
                                                                                "__outlet": "",
                                                                                "view": "primary",
                                                                                "__relativeURL": "",
                                                                                "runProcessSettings": null,
                                                                                "__baseURL": "",
                                                                                "runActionEnum": [
                                                                                  {
                                                                                    "code": "undefined",
                                                                                    "name": "shared.common.button@widget-runAction-none",
                                                                                    "translate": true
                                                                                  }
                                                                                ],
                                                                                "createAppItemSettings": null,
                                                                                "__renderContentOnDemand": false
                                                                              }
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ],
                                                                    "[popup-header]": [],
                                                                    "[popup-content]": [
                                                                      {
                                                                        "id": "417d0c64-f0ea-48c0-9945-95c0a24ca81f",
                                                                        "descriptor": "modal-body",
                                                                        "content": {
                                                                          "": [
                                                                            {
                                                                              "id": "be792ad5-e971-4f0a-be22-e020726ec796",
                                                                              "descriptor": "dynamic-form-row",
                                                                              "values": {
                                                                                "control": {
                                                                                  "path": [
                                                                                    "context_fields"
                                                                                  ]
                                                                                },
                                                                                "tooltip": null,
                                                                                "__readOnly": null,
                                                                                "bindingMode": false,
                                                                                "__renderContentOnDemand": false,
                                                                                "__isConstValues": [],
                                                                                "showDisplayName": true,
                                                                                "__outlet": "",
                                                                                "required": false,
                                                                                "__baseURL": "",
                                                                                "hideEmpty": false,
                                                                                "__relativeURL": ""
                                                                              }
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ],
                                                                    "[popup-sidebar]": [],
                                                                    "[popup-controls]": [],
                                                                    "[popup-upper-header]": []
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "[popup-sidebar]": [],
              "[popup-controls]": [],
              "[popup-upper-header]": []
            }
          }
        ]
      }
    },
    "fields": [
      {
        "code": "item",
        "type": "REF_ITEM",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": false,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": null,
        "view": {
          "name": "Item"
        }
      },
      {
        "code": "kedo_settings",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "settings",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Настройки КЭДО",
          "data": {},
          "input": false,
          "output": false
        }
      },
      {
        "code": "app_context_json",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Контекст приложения (JSON)",
          "data": {
            "additionalType": "string"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "process_list",
        "type": "JSON",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Список процессов",
          "data": {},
          "input": false,
          "output": false
        }
      },
      {
        "code": "kedo_token",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Токен КЭДО",
          "data": {
            "additionalType": "string"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "show_modal",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Отобразить модальное окно?",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "element_id",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "ID элемента",
          "data": {
            "additionalType": "string"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "body",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Запрос",
          "data": {
            "additionalType": "text"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "response",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Результат запроса",
          "data": {
            "additionalType": "markdown"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "context_fields",
        "type": "ENUM",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": false,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "enumItems": []
        },
        "view": {
          "name": "Список полей контекста",
          "data": {},
          "input": false,
          "output": false
        }
      },
      {
        "code": "show_add_context_fields_modal",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Отобразить модальное окно свойств?",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "staff",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "staff",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Сотрудник",
          "data": {},
          "input": false,
          "output": false
        }
      },
      {
        "code": "is_task",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Это задача?",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": false,
          "output": false
        }
      },
      {
        "code": "is_app",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Это элемент приложения?",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": false,
          "output": false
        }
      }
    ],
    "fieldVisibilityConditions": {
      "body": {
        "enabled": false,
        "conditions": []
      },
      "staff": {
        "enabled": false,
        "conditions": []
      },
      "is_app": {
        "enabled": false,
        "conditions": []
      },
      "is_task": {
        "enabled": false,
        "conditions": []
      },
      "response": {
        "enabled": false,
        "conditions": []
      },
      "element_id": {
        "enabled": false,
        "conditions": []
      },
      "kedo_token": {
        "enabled": false,
        "conditions": []
      },
      "show_modal": {
        "enabled": false,
        "conditions": []
      },
      "process_list": {
        "enabled": false,
        "conditions": []
      },
      "kedo_settings": {
        "enabled": false,
        "conditions": []
      },
      "context_fields": {
        "enabled": false,
        "conditions": []
      },
      "app_context_json": {
        "enabled": false,
        "conditions": []
      },
      "show_add_context_fields_modal": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {},
    "clientScripts": "/* Client scripts module */\n\ndeclare const document: any;\n\ninterface IProcessData {\n    name: string,\n    href: string,\n    parent?: IProcessData,\n    createdAt?: string,\n    updatedAt?: string,\n    state?: ProcessInstanceState,\n    state_line?: string,\n}\n\nasync function toolButtonOnClick(): Promise\u003cvoid\u003e {\n    if (!Context.data.kedo_token) {\n        const token = await Context.fields.kedo_settings.app.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.code.eq(\"api_key\")\n            ))\n            .first();\n\n        if (!token || !token.data.value) {\n            error(`Параметр api_key не заполнен в настройках КЭДО.`);\n            throw new Error(\"Параметр api_key не заполнен в настройках КЭДО.\");\n        }\n\n        Context.data.kedo_token = token.data.value;\n    }\n\n    Context.data.show_modal = true;\n\n    loadData();\n}\n\nasync function copyToClipboard(field_code: string): Promise\u003cvoid\u003e {\n    if (!field_code || field_code.trim() === \"\") return;\n\n    if ((Context.fields[field_code] as any).type !== \"STRING\") {\n        return;\n    }\n\n    const value = Context.data[field_code];\n\n    // Create a \"hidden\" input\n    var aux = document.createElement(\"input\");\n\n    // Assign it the value of the specified element\n    aux.setAttribute(\"value\", value);\n\n    // Append it to the body\n    document.body.appendChild(aux);\n\n    // Highlight its content\n    aux.select();\n\n    // Copy the highlighted text\n    document.execCommand(\"copy\");\n\n    // Remove it from the body\n    document.body.removeChild(aux);\n}\n\nasync function loadData(): Promise\u003cvoid\u003e {\n    Context.data.element_id = Context.data.item?.id;\n\n    const item = Context.data.item;\n\n    if (item?.namespace == \"system\" \u0026\u0026 item?.code == \"tasks\") {\n        Context.data.is_task = true;\n    } else {\n        Context.data.is_app = true;\n    }\n\n    await Promise.all([\n        getAppContext(),\n        getRelatedProcess(),\n    ])\n}\n\n/** Получение контекста приложения. */\nasync function getAppContext(): Promise\u003cvoid\u003e {\n    if (!Context.data.item) {\n        return;\n    }\n\n    let app_data = {};\n\n    try {\n        const response = await fetch(`${System.getBaseUrl()}/pub/v1/app/${Context.data.item.namespace}/${Context.data.item.code}/${Context.data.item.id}/get`, {\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${Context.data.kedo_token}`\n            }\n        });\n\n        app_data = await response.json();\n    } catch (error) {\n        error(`Во время выполнения запроса на получение контекста произошла ошибка: ${JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n        })}`);\n\n        throw new Error(JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n        }));\n    }\n\n    Context.data.app_context_json = JSON.stringify(app_data, null, 4);\n}\n\nfunction getState(process_state: ProcessInstanceState | undefined): string {\n    switch (process_state) {\n        case ProcessInstanceState.cancel: {\n            return \"Прерван\";\n        }\n\n        case ProcessInstanceState.error: {\n            return \"Ошибка\";\n        }\n\n        case ProcessInstanceState.done: {\n            return \"Завершен\";\n        }\n\n        case ProcessInstanceState.exec: {\n            return \"Выполняется\";\n        }\n\n        case ProcessInstanceState.wait: {\n            return \"Ожидание\";\n        }\n\n        default: {\n            return \"\";\n        }\n    }\n}\n\nasync function getRelatedProcess(): Promise\u003cvoid\u003e {\n    if (!Context.data.item || Context.data.is_app == false) {\n        return;\n    }\n\n    const process = await System.processes._searchInstances()\n        .where((f, g) =\u003e g.and(\n            (f.__item as any).eq(Context.data.item!)\n        ))\n        .size(1000)\n        .all();\n\n    const parent_process_ids = process\n        .filter(p =\u003e p.data.__parentId != undefined)\n        .map(p =\u003e p.data.__parentId!);\n\n    const parent_process = await System.processes._searchInstances()\n        .where(f =\u003e f.__id.in(parent_process_ids))\n        .size(parent_process_ids.length)\n        .all();\n\n    const process_data: IProcessData[] = process\n        .map(p =\u003e {\n            const parent = parent_process.find(f =\u003e f.data.__id == p.data.__parentId);\n\n            return {\n                name: p.data.__name,\n                href: `${System.getBaseUrl()}/admin/monitor/${p.data.__templateId}(p:history/${p.data.__id})`,\n                createdAt: p.data.__createdAt.format(\"DD.MM.YYYY HH:mm:ss\"),\n                updatedAt: p.data.__updatedAt.format(\"DD.MM.YYYY HH:mm:ss\"),\n                state_line: getState(p.data.__state),\n                state: p.data.__state,\n                parent: parent ? {\n                    name: parent.data.__name,\n                    href: `${System.getBaseUrl()}/admin/monitor/${parent.data.__templateId}(p:history/${parent.data.__id})`,\n                } : undefined,\n            }\n        });\n\n    Context.data.process_list = process_data;\n}\n\nasync function needRender(): Promise\u003cboolean\u003e {\n    const user = await System.users.getCurrentUser();\n\n    // Проверка наличия пользователя в группах \"Администраторы\" или \"Супервизор\"\n    const sys_groups = (user.data.groupIds ?? []).filter(f =\u003e f?.id == \"d6000da0-c9aa-55eb-9882-f118b432730b\" || f?.id == \"331e62d2-072e-58ac-9581-74abcc67f050\");\n\n    if (sys_groups.length \u003e 0) {\n        return true;\n    }\n\n    return false;\n}\n\nasync function formatBody(): Promise\u003cvoid\u003e {\n    if (!Context.data.body) return;\n\n    try {\n        const obj = Context.data.body ? JSON.parse(Context.data.body) : {};\n        Context.data.body = JSON.stringify(obj, undefined, 4);\n    } catch (error) {\n        error(JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n        }));\n        \n        throw new Error(JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n        }))\n    }\n}\n\nasync function clearBody(): Promise\u003cvoid\u003e {\n    Context.data.body = undefined;\n}\n\ndeclare const console: any;\n\nasync function refreshBody(): Promise\u003cvoid\u003e {\n    const app = await Context.data.item!.fetch();\n\n    const context = {};\n\n    const fields = Object.keys(app.fields).filter(f =\u003e !f.includes(\"__\"));\n\n    for (const field of fields) {\n        console.log(field, app.fields[field].__describe());\n        addProperty(context, app.fields[field].__describe());\n    }\n\n    Context.data.body = JSON.stringify(context, undefined, 4);\n}\n\nfunction addProperty(object: any, property: any): void {\n    let defaultValue: any = null;\n\n    switch (property.type) {\n        case DynamicFieldType.Category: {\n            defaultValue = [{ code: \"code\", name: \"name\" }];\n            break;\n        }\n\n        case DynamicFieldType.Application: {\n            defaultValue = [\"00000000-0000-0000-0000-000000000000\"];\n            break;\n        }\n\n        case DynamicFieldType.Boolean: {\n            defaultValue = true;\n            break;\n        }\n\n        case DynamicFieldType.RefItem: {\n            defaultValue = {\n                id: \"\",\n                code: \"\",\n                namespace: \"\",\n            };\n            break;\n        }\n\n        case DynamicFieldType.User: {\n            defaultValue = [\"00000000-0000-0000-0000-000000000000\"];\n            break;\n        }\n\n        case DynamicFieldType.String: {\n            defaultValue = \"example\";\n            break;\n        }\n\n        case DynamicFieldType.Money: {\n            defaultValue = {\n                \"cents\": 36500,\n                \"currency\": \"RUB\"\n            };\n            break;\n        }\n\n        case DynamicFieldType.Float: {\n            defaultValue = 365;\n            break;\n        }\n\n        case DynamicFieldType.File: {\n            defaultValue = [];\n            break;\n        }\n\n        case DynamicFieldType.Datetime: {\n            defaultValue = new Datetime().format();\n            break;\n        }\n\n        case DynamicFieldType.Enum: {\n            defaultValue = [\n                {\n                    \"code\": \"code\",\n                    \"name\": \"name\"\n                }\n            ];\n            break;\n        }\n\n        case DynamicFieldType.Table: {\n            defaultValue = null;\n            break;\n        }\n\n        default: {\n            defaultValue = null;\n            break;\n        }\n    }\n\n    Object.defineProperty(object, property.code, {\n        value: defaultValue,\n        writable: true,\n        enumerable: true,\n        configurable: true,\n    });\n}\n\nasync function openPropertyModal(): Promise\u003cvoid\u003e {\n    const app = await Context.data.item!.fetch();\n    const fields = Object.keys(app.fields).filter(f =\u003e !f.includes(\"__\"));\n\n    const field_names: { name: string, code: string }[] = []\n\n    for (let code of fields) {\n        const name = (app.fields[code] as any).name as string | undefined;\n        if (name) field_names.push({ name, code })\n    }\n\n    console.log(field_names);\n\n    Context.fields.context_fields.data.variants = [];\n    Context.fields.context_fields.data.variants = field_names;\n    Context.data.context_fields = [];\n\n    Context.data.show_add_context_fields_modal = true;\n}\n\nasync function addNewProperty(): Promise\u003cvoid\u003e {\n    const app = await Context.data.item!.fetch();\n    const selected_properties = Context.data.context_fields!;\n    const body = Context.data.body ? JSON.parse(Context.data.body).context : {};\n\n    for (const field of selected_properties) {\n        if (!Object.getOwnPropertyDescriptor(body, field.code)) {\n            addProperty(body, app.fields[field.code].__describe());\n        }\n    }\n\n    Context.data.body = JSON.stringify({ context: body }, undefined, 4);\n    Context.data.show_add_context_fields_modal = false;\n}\n\nasync function updateContext(): Promise\u003cvoid\u003e {\n    if (!Context.data.item) {\n        error(\"Context.data.item is undefined\");\n        throw new Error(\"Context.data.item is undefined\");\n    }\n\n    if (!Context.data.body) {\n        error(\"Отсутствует тело запроса\");\n        throw new Error(\"Отсутствует тело запроса\");\n    }\n\n    try {\n        const response = await fetch(`${System.getBaseUrl()}/pub/v1/app/${Context.data.item.namespace}/${Context.data.item.code}/${Context.data.item.id}/update`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${Context.data.kedo_token}`\n            },\n            body: Context.data.body,\n        });\n\n        if (!response || !response.ok) {\n            error(`Во время выполнения запроса произошла ошибка: ${JSON.stringify(response)}`);\n            throw new Error(`Во время выполнения запроса произошла ошибка: ${JSON.stringify(response)}`);\n        }\n\n        const result = await response.json();\n        Context.data.response = JSON.stringify(result, undefined, 4);\n    } catch (error) {\n        error(`Во время выполнения запроса произошла ошибка: ${JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n        })}`)\n    }\n}\n\nasync function reassignmentTask(): Promise\u003cvoid\u003e {\n    if (!Context.data.staff) return;\n\n    const staff = await Context.data.staff.fetch();\n\n    if (!staff.data.ext_user) {\n        error(\"У сотрудника не указан пользователь\");\n        return;\n    }\n\n    const task = await System.processes._searchTasks().where(f =\u003e f.__id.eq(Context.data.element_id!)).first();\n\n    if (!task) {\n        error(\"Задача не найдена\");\n        return;\n    }\n\n    if (task.data.state == ProcessTaskState.closed || task.data.state == ProcessTaskState.cancel) {\n        error(\"Задача уже выполнена\");\n        return;\n    }\n\n    try {\n        await task.reassign(staff.data.ext_user);\n        success(`Задача успешно переназначена на ${staff.data.__name}`);\n    } catch (error) {\n        error(`При переназначении задачи произошла ошибка: ${JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n        })}`);\n    }\n\n    Context.data.staff = undefined;\n}\n\nenum NotifyType {\n    ERROR,\n    WARNING,\n    SUCCESS,\n}\n\ndeclare const notify: any;\n\nfunction error(text: string): void {\n    alert(text, NotifyType.ERROR, 5000);\n}\n\nfunction success(text: string): void {\n    alert(text, NotifyType.SUCCESS, 3000);\n}\n\nfunction alert(text: string, notify_type: NotifyType, duration: number): void {\n    let notify_type_line = \"success\";\n\n    switch (notify_type) {\n        case NotifyType.ERROR: {\n            notify_type_line = \"danger\";\n            break;\n        }\n\n        case NotifyType.SUCCESS: {\n            notify_type_line = \"success\";\n            break;\n        }\n\n        default: {\n            notify_type_line = \"default\";\n            break;\n        }\n    }\n\n    notify({\n        message: text,\n        color: notify_type_line,\n        timeout: duration,\n    });\n}\n",
    "clientScriptOptions": {
      "allowServer": true
    },
    "serverScripts": "/* Server scripts module */\n",
    "serverScriptOptions": {}
  },
  "dataNamespace": "",
  "dataCode": "",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        async function toolButtonOnClick() {\n            if (!Context.data.kedo_token) {\n                const token = await Context.fields.kedo_settings.app.search()\n                    .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"api_key\")))\n                    .first();\n                if (!token || !token.data.value) {\n                    error(`Параметр api_key не заполнен в настройках КЭДО.`);\n                    throw new Error(\"Параметр api_key не заполнен в настройках КЭДО.\");\n                }\n                Context.data.kedo_token = token.data.value;\n            }\n            Context.data.show_modal = true;\n            loadData();\n        }\n        async function copyToClipboard(field_code) {\n            if (!field_code || field_code.trim() === \"\")\n                return;\n            if (Context.fields[field_code].type !== \"STRING\") {\n                return;\n            }\n            const value = Context.data[field_code];\n            var aux = document.createElement(\"input\");\n            aux.setAttribute(\"value\", value);\n            document.body.appendChild(aux);\n            aux.select();\n            document.execCommand(\"copy\");\n            document.body.removeChild(aux);\n        }\n        async function loadData() {\n            var _a;\n            Context.data.element_id = (_a = Context.data.item) === null || _a === void 0 ? void 0 : _a.id;\n            const item = Context.data.item;\n            if ((item === null || item === void 0 ? void 0 : item.namespace) == \"system\" \u0026\u0026 (item === null || item === void 0 ? void 0 : item.code) == \"tasks\") {\n                Context.data.is_task = true;\n            }\n            else {\n                Context.data.is_app = true;\n            }\n            await Promise.all([\n                getAppContext(),\n                getRelatedProcess(),\n            ]);\n        }\n        async function getAppContext() {\n            if (!Context.data.item) {\n                return;\n            }\n            let app_data = {};\n            try {\n                const response = await fetch(`${System.getBaseUrl()}/pub/v1/app/${Context.data.item.namespace}/${Context.data.item.code}/${Context.data.item.id}/get`, {\n                    method: \"GET\",\n                    headers: {\n                        Authorization: `Bearer ${Context.data.kedo_token}`\n                    }\n                });\n                app_data = await response.json();\n            }\n            catch (error) {\n                error(`Во время выполнения запроса на получение контекста произошла ошибка: ${JSON.stringify({\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack\n                })}`);\n                throw new Error(JSON.stringify({\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack\n                }));\n            }\n            Context.data.app_context_json = JSON.stringify(app_data, null, 4);\n        }\n        function getState(process_state) {\n            switch (process_state) {\n                case ProcessInstanceState.cancel: {\n                    return \"Прерван\";\n                }\n                case ProcessInstanceState.error: {\n                    return \"Ошибка\";\n                }\n                case ProcessInstanceState.done: {\n                    return \"Завершен\";\n                }\n                case ProcessInstanceState.exec: {\n                    return \"Выполняется\";\n                }\n                case ProcessInstanceState.wait: {\n                    return \"Ожидание\";\n                }\n                default: {\n                    return \"\";\n                }\n            }\n        }\n        async function getRelatedProcess() {\n            if (!Context.data.item || Context.data.is_app == false) {\n                return;\n            }\n            const process = await System.processes._searchInstances()\n                .where((f, g) =\u003e g.and(f.__item.eq(Context.data.item)))\n                .size(1000)\n                .all();\n            const parent_process_ids = process\n                .filter(p =\u003e p.data.__parentId != undefined)\n                .map(p =\u003e p.data.__parentId);\n            const parent_process = await System.processes._searchInstances()\n                .where(f =\u003e f.__id.in(parent_process_ids))\n                .size(parent_process_ids.length)\n                .all();\n            const process_data = process\n                .map(p =\u003e {\n                const parent = parent_process.find(f =\u003e f.data.__id == p.data.__parentId);\n                return {\n                    name: p.data.__name,\n                    href: `${System.getBaseUrl()}/admin/monitor/${p.data.__templateId}(p:history/${p.data.__id})`,\n                    createdAt: p.data.__createdAt.format(\"DD.MM.YYYY HH:mm:ss\"),\n                    updatedAt: p.data.__updatedAt.format(\"DD.MM.YYYY HH:mm:ss\"),\n                    state_line: getState(p.data.__state),\n                    state: p.data.__state,\n                    parent: parent ? {\n                        name: parent.data.__name,\n                        href: `${System.getBaseUrl()}/admin/monitor/${parent.data.__templateId}(p:history/${parent.data.__id})`,\n                    } : undefined,\n                };\n            });\n            Context.data.process_list = process_data;\n        }\n        async function needRender() {\n            var _a;\n            const user = await System.users.getCurrentUser();\n            const sys_groups = ((_a = user.data.groupIds) !== null \u0026\u0026 _a !== void 0 ? _a : []).filter(f =\u003e (f === null || f === void 0 ? void 0 : f.id) == \"d6000da0-c9aa-55eb-9882-f118b432730b\" || (f === null || f === void 0 ? void 0 : f.id) == \"331e62d2-072e-58ac-9581-74abcc67f050\");\n            if (sys_groups.length \u003e 0) {\n                return true;\n            }\n            return false;\n        }\n        async function formatBody() {\n            if (!Context.data.body)\n                return;\n            try {\n                const obj = Context.data.body ? JSON.parse(Context.data.body) : {};\n                Context.data.body = JSON.stringify(obj, undefined, 4);\n            }\n            catch (error) {\n                error(JSON.stringify({\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                }));\n                throw new Error(JSON.stringify({\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                }));\n            }\n        }\n        async function clearBody() {\n            Context.data.body = undefined;\n        }\n        async function refreshBody() {\n            const app = await Context.data.item.fetch();\n            const context = {};\n            const fields = Object.keys(app.fields).filter(f =\u003e !f.includes(\"__\"));\n            for (const field of fields) {\n                console.log(field, app.fields[field].__describe());\n                addProperty(context, app.fields[field].__describe());\n            }\n            Context.data.body = JSON.stringify(context, undefined, 4);\n        }\n        function addProperty(object, property) {\n            let defaultValue = null;\n            switch (property.type) {\n                case DynamicFieldType.Category: {\n                    defaultValue = [{ code: \"code\", name: \"name\" }];\n                    break;\n                }\n                case DynamicFieldType.Application: {\n                    defaultValue = [\"00000000-0000-0000-0000-000000000000\"];\n                    break;\n                }\n                case DynamicFieldType.Boolean: {\n                    defaultValue = true;\n                    break;\n                }\n                case DynamicFieldType.RefItem: {\n                    defaultValue = {\n                        id: \"\",\n                        code: \"\",\n                        namespace: \"\",\n                    };\n                    break;\n                }\n                case DynamicFieldType.User: {\n                    defaultValue = [\"00000000-0000-0000-0000-000000000000\"];\n                    break;\n                }\n                case DynamicFieldType.String: {\n                    defaultValue = \"example\";\n                    break;\n                }\n                case DynamicFieldType.Money: {\n                    defaultValue = {\n                        \"cents\": 36500,\n                        \"currency\": \"RUB\"\n                    };\n                    break;\n                }\n                case DynamicFieldType.Float: {\n                    defaultValue = 365;\n                    break;\n                }\n                case DynamicFieldType.File: {\n                    defaultValue = [];\n                    break;\n                }\n                case DynamicFieldType.Datetime: {\n                    defaultValue = new Datetime().format();\n                    break;\n                }\n                case DynamicFieldType.Enum: {\n                    defaultValue = [\n                        {\n                            \"code\": \"code\",\n                            \"name\": \"name\"\n                        }\n                    ];\n                    break;\n                }\n                case DynamicFieldType.Table: {\n                    defaultValue = null;\n                    break;\n                }\n                default: {\n                    defaultValue = null;\n                    break;\n                }\n            }\n            Object.defineProperty(object, property.code, {\n                value: defaultValue,\n                writable: true,\n                enumerable: true,\n                configurable: true,\n            });\n        }\n        async function openPropertyModal() {\n            const app = await Context.data.item.fetch();\n            const fields = Object.keys(app.fields).filter(f =\u003e !f.includes(\"__\"));\n            const field_names = [];\n            for (let code of fields) {\n                const name = app.fields[code].name;\n                if (name)\n                    field_names.push({ name, code });\n            }\n            console.log(field_names);\n            Context.fields.context_fields.data.variants = [];\n            Context.fields.context_fields.data.variants = field_names;\n            Context.data.context_fields = [];\n            Context.data.show_add_context_fields_modal = true;\n        }\n        async function addNewProperty() {\n            const app = await Context.data.item.fetch();\n            const selected_properties = Context.data.context_fields;\n            const body = Context.data.body ? JSON.parse(Context.data.body).context : {};\n            for (const field of selected_properties) {\n                if (!Object.getOwnPropertyDescriptor(body, field.code)) {\n                    addProperty(body, app.fields[field.code].__describe());\n                }\n            }\n            Context.data.body = JSON.stringify({ context: body }, undefined, 4);\n            Context.data.show_add_context_fields_modal = false;\n        }\n        async function updateContext() {\n            if (!Context.data.item) {\n                error(\"Context.data.item is undefined\");\n                throw new Error(\"Context.data.item is undefined\");\n            }\n            if (!Context.data.body) {\n                error(\"Отсутствует тело запроса\");\n                throw new Error(\"Отсутствует тело запроса\");\n            }\n            try {\n                const response = await fetch(`${System.getBaseUrl()}/pub/v1/app/${Context.data.item.namespace}/${Context.data.item.code}/${Context.data.item.id}/update`, {\n                    method: \"POST\",\n                    headers: {\n                        \"Authorization\": `Bearer ${Context.data.kedo_token}`\n                    },\n                    body: Context.data.body,\n                });\n                if (!response || !response.ok) {\n                    error(`Во время выполнения запроса произошла ошибка: ${JSON.stringify(response)}`);\n                    throw new Error(`Во время выполнения запроса произошла ошибка: ${JSON.stringify(response)}`);\n                }\n                const result = await response.json();\n                Context.data.response = JSON.stringify(result, undefined, 4);\n            }\n            catch (error) {\n                error(`Во время выполнения запроса произошла ошибка: ${JSON.stringify({\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                })}`);\n            }\n        }\n        async function reassignmentTask() {\n            if (!Context.data.staff)\n                return;\n            const staff = await Context.data.staff.fetch();\n            if (!staff.data.ext_user) {\n                error(\"У сотрудника не указан пользователь\");\n                return;\n            }\n            const task = await System.processes._searchTasks().where(f =\u003e f.__id.eq(Context.data.element_id)).first();\n            if (!task) {\n                error(\"Задача не найдена\");\n                return;\n            }\n            if (task.data.state == ProcessTaskState.closed || task.data.state == ProcessTaskState.cancel) {\n                error(\"Задача уже выполнена\");\n                return;\n            }\n            try {\n                await task.reassign(staff.data.ext_user);\n                success(`Задача успешно переназначена на ${staff.data.__name}`);\n            }\n            catch (error) {\n                error(`При переназначении задачи произошла ошибка: ${JSON.stringify({\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                })}`);\n            }\n            Context.data.staff = undefined;\n        }\n        let NotifyType;\n        (function (NotifyType) {\n            NotifyType[NotifyType[\"ERROR\"] = 0] = \"ERROR\";\n            NotifyType[NotifyType[\"WARNING\"] = 1] = \"WARNING\";\n            NotifyType[NotifyType[\"SUCCESS\"] = 2] = \"SUCCESS\";\n        })(NotifyType || (NotifyType = {}));\n        function error(text) {\n            alert(text, NotifyType.ERROR, 5000);\n        }\n        function success(text) {\n            alert(text, NotifyType.SUCCESS, 3000);\n        }\n        function alert(text, notify_type, duration) {\n            let notify_type_line = \"success\";\n            switch (notify_type) {\n                case NotifyType.ERROR: {\n                    notify_type_line = \"danger\";\n                    break;\n                }\n                case NotifyType.SUCCESS: {\n                    notify_type_line = \"success\";\n                    break;\n                }\n                default: {\n                    notify_type_line = \"default\";\n                    break;\n                }\n            }\n            notify({\n                message: text,\n                color: notify_type_line,\n                timeout: duration,\n            });\n        }\n        return {\n            toolButtonOnClick,\n            copyToClipboard,\n            loadData,\n            getAppContext,\n            getState,\n            getRelatedProcess,\n            needRender,\n            formatBody,\n            clearBody,\n            refreshBody,\n            addProperty,\n            openPropertyModal,\n            addNewProperty,\n            updateContext,\n            reassignmentTask,\n            error,\n            success,\n            alert\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "toolButtonOnClick",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "copyToClipboard",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "loadData",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "getAppContext",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "getState",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "getRelatedProcess",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "needRender",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "formatBody",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "clearBody",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "refreshBody",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "addProperty",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "openPropertyModal",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "addNewProperty",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "updateContext",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "reassignmentTask",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "error",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "success",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "alert",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      }
    ]
  },
  "__createdAt": "2024-04-23T10:16:27.230884293Z",
  "__createdBy": "099fd2a1-8125-406b-aaff-0db06d81aa40",
  "__updatedAt": "2024-04-23T10:16:27.230884293Z",
  "__updatedBy": "099fd2a1-8125-406b-aaff-0db06d81aa40",
  "__deletedAt": null
}
