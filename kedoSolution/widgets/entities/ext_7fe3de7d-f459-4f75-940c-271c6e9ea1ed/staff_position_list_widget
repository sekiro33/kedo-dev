{"__id":"018fb8c3-afb7-7940-830b-adb4639256aa","namespace":"ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed","code":"staff_position_list_widget","__name":"__oldСписок занятости","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":4,"hidden":false,"draft":false,"readonly":false,"descriptor":{"icon":"poll_people","template":{"id":"2a10916d-97d0-4664-a37c-9acb3b22627e","descriptor":"component","values":{"__outlet":"","__styles":"","__baseURL":"","__relativeURL":"","__isConstValues":[],"systemFunctions":{},"__renderContentAsync":false},"content":{"":[{"id":"61ba5c8f-ffc7-49e5-8b2c-610abc2e91b0","descriptor":"dynamic-form-row","values":{"__baseURL":"","hideEmpty":false,"__readOnly":true,"bindingMode":false,"__relativeURL":"","__outlet":"","onChangeValue":{"kind":"Function","name":"staffOnChange","type":"client"},"tooltip":null,"required":false,"__isConstValues":[],"__hidden":true,"showCreateItem":false,"showDisplayName":true,"control":{"path":["staff"]}}},{"id":"7701625b-4b40-4000-bec2-c21079a2bb30","descriptor":"dynamic-form-row","values":{"__outlet":"","required":{"path":["employment_placement_required"]},"onChangeValue":{"kind":"Function","name":{},"type":"client"},"__isConstValues":[],"__renderContentOnDemand":false,"tooltip":null,"__styles":"","hideEmpty":false,"showCreateItem":false,"__hidden":{"path":["employment_placement_visible"],"modifier":"not"},"__baseURL":"","__readOnly":null,"bindingMode":false,"displayName":"По месту занятости","__relativeURL":"","showDisplayName":{"path":["field_name_visible"]},"control":{"path":["employment_placement"]}}},{"id":"6adeadc2-68e6-4dff-a83e-50ffcaf8e424","descriptor":"label","values":{"text":"Для выбора места занятости укажите сотрудника","__hidden":{"path":["error_visible"],"modifier":"not"},"__outlet":"","__styles":"color: #DC143C;","__baseURL":"","__relativeURL":"","__isConstValues":[]}}]}},"fields":[{"code":"staff","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"staff","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Сотрудник","data":{},"input":true,"output":false}},{"code":"employment_placement","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"employment_directory","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Место занятости","data":{},"input":false,"output":true}},{"code":"employment_placement_required","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":true,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Место занятости обязательно для заполнения?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":false}},{"code":"employment_placement_visible","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Отобразить строку \"Место занятости\"?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":false,"output":false}},{"code":"error_visible","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Отображать ошибку?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":false,"output":false}},{"code":"field_name_visible","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":true,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показывать название поля","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"},"input":true,"output":false}}],"fieldVisibilityConditions":{"staff":{"enabled":false,"conditions":[]},"show_type":{"enabled":false,"conditions":[]},"simple_show":{"enabled":false,"conditions":[]},"error_visible":{"enabled":false,"conditions":[]},"extended_show":{"enabled":false,"conditions":[]},"panel_visible":{"enabled":false,"conditions":[]},"field_name_visible":{"enabled":false,"conditions":[]},"employment_placement":{"enabled":false,"conditions":[]},"employment_placement_visible":{"enabled":false,"conditions":[]},"employment_placement_required":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"/* Client scripts module */\n\ndeclare const console : any;\n\nconst employment_status = Context.fields.employment_placement.app.fields.__status;\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    await staffOnChange();\n}\n\nasync function staffOnChange(): Promise\u003cvoid\u003e {\n    /**\n     * Если поле \"Место занятости\" является обязательным - то выводим ошибку про сотрудника, и скрываем поле \"Место занятости\".\n     * Если не обязательно - то просто ничего не выводим.\n     */\n    if (!Context.data.staff) {\n        Context.data.employment_placement_visible = false;\n        Context.data.error_visible = Context.data.employment_placement_required;\n        return;\n    }\n\n    await getEmploymentPlacement();\n}\n\nasync function getEmploymentPlacement(): Promise\u003cvoid\u003e {\n    Context.data.employment_placement_visible = true;\n    Context.data.error_visible = false;\n\n    Context.fields.employment_placement.data.setFilter((f, c, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.__status.eq(employment_status.variants.actual),\n        f.staff.link(Context.data.staff!)\n    ));\n\n    const staff_employment = await Context.fields.employment_placement.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.__status.eq(employment_status.variants.actual),\n            f.staff.link(Context.data.staff!),\n        ))\n        .size(100)\n        .all();\n\n    if (staff_employment.length == 0) {\n        Context.data.employment_placement = undefined;\n        return;\n    }\n\n    /** Задаем по умолчанию основное место работы сотрудника.\n     * Иначе первое попвашееся место работы.\n     */\n    const main_workplace = staff_employment.find(f =\u003e f.data.type_employment?.code == \"main_workplace\");\n    Context.data.employment_placement = main_workplace ?? (staff_employment.length \u003e 0 ? staff_employment[0] : undefined);\n}","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        const employment_status = Context.fields.employment_placement.app.fields.__status;\n        async function onInit() {\n            await staffOnChange();\n        }\n        async function staffOnChange() {\n            if (!Context.data.staff) {\n                Context.data.employment_placement_visible = false;\n                Context.data.error_visible = Context.data.employment_placement_required;\n                return;\n            }\n            await getEmploymentPlacement();\n        }\n        async function getEmploymentPlacement() {\n            Context.data.employment_placement_visible = true;\n            Context.data.error_visible = false;\n            Context.fields.employment_placement.data.setFilter((f, c, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(employment_status.variants.actual), f.staff.link(Context.data.staff)));\n            const staff_employment = await Context.fields.employment_placement.app.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(employment_status.variants.actual), f.staff.link(Context.data.staff)))\n                .size(100)\n                .all();\n            if (staff_employment.length == 0) {\n                Context.data.employment_placement = undefined;\n                return;\n            }\n            const main_workplace = staff_employment.find(f =\u003e { var _a; return ((_a = f.data.type_employment) === null || _a === void 0 ? void 0 : _a.code) == \"main_workplace\"; });\n            Context.data.employment_placement = main_workplace !== null \u0026\u0026 main_workplace !== void 0 ? main_workplace : (staff_employment.length \u003e 0 ? staff_employment[0] : undefined);\n        }\n        return {\n            onInit,\n            staffOnChange,\n            getEmploymentPlacement\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"staffOnChange","parameters":[],"type":"[object Object]"},{"name":"getEmploymentPlacement","parameters":[],"type":"[object Object]"}],"clientDependencies":{"applications":[{"namespace":"kedo","code":"employment_directory"}],"collections":[{"namespace":"kedo","code":"employment_directory"}],"pages":[]}},"__createdAt":"2024-05-27T06:36:23.34990283Z","__createdBy":"59e0911f-230a-4b6d-becf-6b302a91977a","__updatedAt":"2024-05-29T14:06:56.343240668Z","__updatedBy":"59e0911f-230a-4b6d-becf-6b302a91977a","__deletedAt":null}
