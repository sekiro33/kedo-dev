{"__id":"018e89f9-377b-7d54-ac3c-ab87b3a77197","namespace":"kedo","code":"linked_tasks","__name":"Связанные задачи","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":4,"hidden":false,"draft":false,"readonly":false,"descriptor":{"template":{"id":"2dfc9d7f-5be1-4501-a8a5-08d9e2534b09","descriptor":"component","content":{"":[{"id":"3e6485ad-3dcb-4a4c-a65a-2964f24b796f","descriptor":"code","values":{"html":"\u003cdiv class=\"linked-tasks_container\"\u003e\n    \n\u003c/div\u003e\n\n\u003ctemplate class=\"linked-task_item_template\"\u003e\n    \u003cdiv class=\"linked-task_item\"\u003e\n        \u003cdiv class=\"linked-task_item-img_container\"\u003e\n            \u003cimg class=\"linked-task_item-img\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"linked-task_item-info\"\u003e\n            \u003ca class=\"linked-task_item-info_task-name\"\u003e\u003c/a\u003e\n            \u003ca class=\"linked-task_item-user-name\"\u003e\u003c/a\u003e\n            \u003cp class=\"linked-task_item-info_duedate\"\u003e\u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cstyle\u003e\n    .linked-tasks_container {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        padding: 1rem;\n        background-color: white;\n    }\n\n    .linked-task_item {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n        justify-content: flex-start;\n    }\n\n    .linked-task_item-img_container {\n        min-width: 36px;\n        height: 36px;\n    }\n\n    .linked-task_item-img {\n        width: 36px;\n        height: 36px;\n        object-fit: contain;\n        border-radius: 50%;\n    }\n\n    .linked-task_item-info {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .linked-task_item-info_duedate {\n        font-size: 14px;\n    }\n\n    .linked-task_item-info_name:hover {\n        text-decoration: none;\n    }\n\n    .linked-task_item.closed {\n        text-decoration: line-through;\n    }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"html/css"}}]}},"fields":[{"code":"item_ref","type":"REF_ITEM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Элемент приложения","data":{},"input":true,"output":false}},{"code":"settings","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"settings","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Приложение Настройки","data":{},"input":false,"output":false}},{"code":"api_key","type":"STRING","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Токен","data":{"additionalType":"string"},"input":false,"output":false}}],"fieldVisibilityConditions":{"api_key":{"enabled":false,"conditions":[]},"item_ref":{"enabled":false,"conditions":[]},"settings":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"//new logic\n\ndeclare const console: any;\ndeclare const document: any;\ndeclare const window: any;\n\ntype taskItem = {\n    id: string,\n    user_id: string,\n    task_name: string,\n    user_name: string,\n    avatar_link: string,\n    due_date: string,\n    state: string\n};\n\ntype taskData = {\n    url: string;\n    __id: string;\n    path: string;\n    place: string;\n    state: string;\n    __item: TRefItem;\n    __name: string;\n    branch: string;\n    dueDate: string;\n    openRef: boolean;\n    planEnd?: null;\n    timerId: string;\n    __logged: boolean;\n    __target: string;\n    priority: number;\n    template: string;\n    __context?: (null)[] | null;\n    __percent: number;\n    companies?: null;\n    planStart?: null;\n    performers?: (string)[] | null;\n    reassignes?: (string)[] | null;\n    __createdAt: string;\n    __createdBy: string;\n    __deletedAt?: null;\n    __updatedAt: string;\n    __updatedBy: string;\n    description: string;\n    __targetData?: null;\n    allowReassign: boolean;\n    originalPerformers?: (string)[] | null;\n    externalParticipants?: null;\n};\n\ntype searchRef = {[key: string]: {\n    namespace: string,\n    code: string,\n    id: string\n}};\n\nconst baseUrl = System.getBaseUrl();\n\nconst appToSearchFieldReference: Record\u003cstring, string\u003e = {\n    \"employment_app\": \"__item\",\n    \"electronic_interaction_agreement\": \"employment_app\",\n    \"labor_contract\": \"employment_app\",\n    \"admission_order\": \"employment_app\",\n    \"information_about_labor_activity\": \"employment_app\",\n    \"job_application\": \"employment_app\",\n    \"additional_agreement_to_the_contract\": \"employment_app\",\n    \"additional_agreement\": \"employment_app\",\n    \"consent_processing_personal_data\": \"employment_app\",\n    \"transfer_application\": \"__item\",\n    \"order_for_transfer\": \"application_transfer\",\n    \"transfer_approve\": \"transfer_application\",\n    \"additional_transfer_agreement\": \"transfer_application\",\n    \"execution_duties\": \"__item\",\n    \"memo_execution_responsibilities\": \"execution_dutie\",\n    \"order_execution_responsibilities\": \"execution_dutie\",\n    \"execution_responsibilities_consent\": \"execution_dutie\",\n    \"execution_responsibilities_additional_agreement\": \"execution_duties\",\n    \"dismissal_app\": \"__item\",\n    \"letter_of_resignation\": \"application_dismissal\",\n    \"dismissal_order\": \"application_dismissal\",\n    \"recall_dismissal\": \"application_dismissal\",\n    \"category_assignment\": \"__item\",\n    \"application_category_assignment\": \"category_assignment\",\n    \"employees_personal_data\": \"__item\",\n    \"passport_data_application\": \"staff_personal_data\",\n    \"passport_data_change_order\": \"staff_personal_data\",\n    \"child_personal_data_consent\": \"staff_personal_data\",\n    \"medical_request\": \"__item\",\n    \"medical_examination\": \"med_request\",\n    // \"docs_lna\": \"__item\",\n    \"orders_lna\": \"doc_lna\",\n    \"vacations\": \"__item\",\n    \"vacation_docs\": \"vacation\",\n    \"vacation_orders\": \"vacation\",\n    \"memo_recall_vacation\": \"vacation\",\n    \"consent_recall_vacation\": \"vacation\",\n    \"overtime_work\": \"__item\",\n    \"overtime_requests\": \"overtime_work\",\n    \"overtimeWorkOrders\": \"overtime_work\",\n    \"overtimeWorkNotifications\": \"overtime_work\",\n    \"overtimeWorkConsent\": \"overtime_work\",\n    \"overtime_order\": \"overtime_work\",//businesstrip_requests business_trip\n    \"businesstrip_requests\": \"__item\",\n    \"trip_requests\": \"businesstrip_requests\",\n    \"order_for_a_business_trip\": \"business_trip\",\n    \"avansovyi_otchet\": \"businesstrip_requests\",\n    \"service_assignments\": \"businesstrip_requests\",\n    \"service_note_accountable_funds\": \"business_trip\",\n    \"business_trip_consent\": \"business_trip\",\n    \"business_trip_change_service_note\": \"business_trip\"\n};\n\nconst appToSubAppsReference: {[key: string]: string[]} = {\n    \"employment_app\": [\n        \"employment_app\",\n        \"electronic_interaction_agreement\",\n        \"labor_contract\",\n        \"admission_order\",\n        \"information_about_labor_activity\",\n        \"job_application\",\n        \"additional_agreement_to_the_contract\",\n        \"additional_agreement\",\n        \"consent_processing_personal_data\"\n    ],\n    \"transfer_application\": [\n        \"transfer_application\",\n        \"order_for_transfer\",\n        \"transfer_approve\",\n        \"additional_transfer_agreement\"\n    ],\n    \"execution_duties\": [\n        \"execution_duties\",\n        \"memo_execution_responsibilities\",\n        \"order_execution_responsibilities\",\n        \"execution_responsibilities_consent\",\n        \"execution_responsibilities_additional_agreement\"\n    ],\n    \"dismissal_app\": [\n        \"dismissal_app\",\n        \"letter_of_resignation\",\n        \"dismissal_order\",\n        \"recall_dismissal\"\n    ],\n    \"category_assignment\": [\n        \"category_assignment\",\n        \"application_category_assignment\"\n    ],\n    \"employees_personal_data\": [\n        \"employees_personal_data\",\n        \"passport_data_application\",\n        \"passport_data_change_order\",\n        \"child_personal_data_consent\"\n    ],\n    \"medical_request\": [\n        \"medical_request\",\n        \"medical_examination\"\n    ],\n    \"docs_lna\": [\n        \"docs_lna\",\n        \"orders_lna\"\n    ],\n    \"vacations\": [\n        \"vacations\",\n        \"vacation_docs\",\n        \"vacation_orders\",\n        \"memo_recall_vacation\",\n        \"consent_recall_vacation\",\n        \"offer_vacation_schedule\",\n        \"notification_vacation_schedule\"\n    ],\n    \"overtime_work\": [\n        \"overtime_work\",\n        \"overtime_requests\",\n        \"overtimeWorkOrders\",\n        \"overtimeWorkNotifications\",\n        \"overtimeWorkConsent\",\n        \"overtime_order\"\n    ],\n    \"businesstrip_requests\": [\n        \"businesstrip_requests\",\n        \"trip_requests\",\n        \"order_for_a_business_trip\",\n        \"avansovyi_otchet\",\n        \"service_assignments\",\n        \"service_note_accountable_funds\",\n        \"business_trip_consent\",\n        \"business_trip_change_service_note\"\n    ]\n};\n\nconst additionalNamespaces: {[key: string]: string} = {\n    \"vacations\": \"absences_ext\",\n    \"businesstrip_requests\": \"business_trips_ext_settings\"\n};\n\nlet tasksContainer: any;\nlet users: UserItem[];\nlet serializedTasks: taskItem[] = [];\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    users = await System.users.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const token = await Context.fields.settings.app.search().where(f =\u003e f.code.eq(\"api_key\")).first().then(res =\u003e res!.data.value);\n    Context.data.api_key = token;\n    const waitForContainer = window.setInterval(() =\u003e {\n        tasksContainer = document.querySelector(\".linked-tasks_container\");\n\n        if (!tasksContainer) {\n            return;\n        };\n\n        window.clearInterval(waitForContainer);\n        getNamespaceProcesses().then(_ =\u003e renderTasks(serializedTasks))\n    }, 200);\n};\n\nasync function getNamespaceProcesses(): Promise\u003cvoid\u003e {\n    const token = Context.data.api_key;\n    const appCode = Context.data.item_ref!.code;\n    const appNs = Context.data.item_ref!.namespace;\n    const subAppsCodes = appToSubAppsReference[appCode];\n    \n    if (!subAppsCodes) {\n        console.log(\"wrong app\")\n        return;\n    };\n\n    const appProcessesSchemasCodes: string[] = [].concat.apply([], await Promise.all(subAppsCodes.map(code =\u003e {\n        return fetch(`${baseUrl}/pub/v1/scheme/namespaces/${appNs}/apps/${code}/processes`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }).then(res =\u003e res.json()).then(resJson =\u003e resJson.result.result.map((proc: any) =\u003e proc.code))\n    })));\n\n    if ([\"businesstrip_requests\", \"vacations\"].indexOf(appCode) !== -1) {\n        appProcessesSchemasCodes.push(\"agreement_workflow\");\n    };\n\n    const templatesIds = await fetch(`${baseUrl}/api/worker/query/system/bp_templates/search`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n            offset: 0,\n            limit: 100,\n            order: [],\n            filter: {\n                and: [\n                    {\n                        in :[\n                            {field: \"code\" },\n                            {list: appProcessesSchemasCodes}\n                        ]\n                    }\n                ]\n            }\n        })\n    });\n\n    const templatesJson = await templatesIds.json().then(res =\u003e res.items.map((item: any) =\u003e {\n        console.log(item)\n        const appCode = item.namespace.split(\".\")[1];\n        return {\n            id: item.__id,\n            code: item.code\n        };\n    }));\n\n    const refItemsList = \u003c{id: string, code: string, namespace: string}[]\u003e[].concat.apply([], await Promise.all(subAppsCodes.map(code =\u003e {\n        const fieldRef = appToSearchFieldReference[code];\n\n        if (!fieldRef) {\n            return;\n        };\n\n        let body: string | FormData | ArrayBuffer | undefined = undefined;\n\n        if (fieldRef === \"__item\") {\n            body = JSON.stringify({\n                active: true,\n                filter: {\n                    tf: {\n                        \"__id\": Context.data.item_ref!.id\n                    }\n                }\n            })\n        } else {\n            body = JSON.stringify({\n                active: true,\n                \"filter\": {\n                    \"link\": [\n                        {\"field\": fieldRef},\n                        {\"list\": [Context.data.item_ref!.id]}\n                    ]\n                }\n            })\n        }\n\n        return fetch(`${baseUrl}/pub/v1/app/${appNs}/${code}/list`, {\n            method: \"POST\",\n            body,\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }).then(res =\u003e res.json()).then(resJson =\u003e {\n            if (resJson.error) {\n                console.log(resJson.error);\n                return;\n            };\n\n            // let itemRef: searchRef = {};\n            // itemRef[fieldRef] = {\n            //     \"id\": Context.data.item_ref!.id,\n            //     \"code\": code,\n            //     \"namespace\": appNs\n            // };\n\n            // return resJson.result.result.map((item: any) =\u003e item.__id);\n\n            return resJson.result.result.map((item: any) =\u003e {\n                return {\n                    \"id\": item.__id,\n                    \"code\": code,\n                    \"namespace\": appNs\n                };\n            });\n        });\n    }))).filter((item: any) =\u003e item);\n\n    console.log(\"refItems: \", refItemsList)\n\n    //@ts-ignore\n    // console.log(\"search tasks by __item: \", await System.processes._searchTasks().where(f =\u003e f.__item.in(refItemsList)).size(10000).all())\n\n    const processesList = [].concat.apply([], await Promise.all(templatesJson.map((item: any) =\u003e {\n        // const fieldRef = appToSearchFieldReference[item.code];\n\n        // if (!fieldRef) {\n        //     return;\n        // };\n\n        return fetch(`${baseUrl}/pub/v1/bpm/instance/bytemplateid/${item.id}/list`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                active: true,\n                \"filter\": {\n                    \"in\": [\n                        {\"field\": \"__item\"},\n                        {\"list\": refItemsList}\n                    ]\n                }\n            }),\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }).then(res =\u003e res.json()).then(resJson =\u003e {\n            if (resJson.error) {\n                console.log(resJson.error);\n                return;\n            };\n            return [...resJson.result.result]\n        });\n    }))).filter((item: any) =\u003e item);\n\n    console.log(\"search processes by api: \", processesList)\n\n    const linkedTasks = [].concat.apply([], processesList.map((process: any) =\u003e process.__tasks).filter((tasks: any) =\u003e {\n        return Object.keys(tasks).length \u003e 0\n    }).map((tasks: any) =\u003e Object.keys(tasks).map(key =\u003e tasks[key]))).sort((a: taskData, b: taskData) =\u003e {\n        const aDateObj = new Datetime(a.__createdAt);\n        const bDateObj = new Datetime(b.__createdAt);\n\n        if (aDateObj.before(bDateObj)) {\n            return 1;\n        };\n\n        if (aDateObj.after(bDateObj)) {\n            return -1;\n        };\n\n        return 0;\n    });\n\n    console.log(linkedTasks)\n\n    serializedTasks = [].concat.apply([], await Promise.all(linkedTasks.map(serializeTask))).filter((task: taskItem) =\u003e task);\n};\n\nasync function serializeTask(taskData: taskData): Promise\u003ctaskItem[] | any\u003e {\n    const performers = taskData.performers;\n\n    if (!performers || performers.length \u003c 1 || taskData.state === \"cancel\") {\n        console.log(\"no performers or task cancelled\");\n        return;\n    };\n\n    const taskName = taskData.__name;\n    const dueDate = `Сделать до: ${taskData.dueDate ? new Datetime(taskData.dueDate).format(\"DD.MM.YYYY HH:MM:SS\") : \"без срока\"}`;\n    const taskItems = await Promise.all(performers.map(async id =\u003e {\n        const user = users.find(user =\u003e user.id === id);\n\n        if (user) {\n            return \u003ctaskItem\u003e{\n                id: taskData.__id,\n                name: taskName,\n                user_name: user.data.__name,\n                due_date: dueDate,\n                task_name: taskName,\n                avatar_link: user.data.avatar ? await user.data.avatar.getDownloadUrl() : \"\",\n                user_id: user.id,\n                state: taskData.state\n            }\n        };\n    })).then(res =\u003e res.filter(task =\u003e task));\n\n    return taskItems;\n};\n\nfunction renderTasks(tasks: taskItem[]) {\n    const taskNodeTemplate = document.querySelector(\".linked-task_item_template\");\n\n    for (let task of tasks) {\n        const taskElementContent = taskNodeTemplate.content.cloneNode(true);\n        const taskImg = taskElementContent.querySelector(\".linked-task_item-img\");\n        const taskNameElement = taskElementContent.querySelector(\".linked-task_item-info_task-name\");\n        const userNameElement = taskElementContent.querySelector(\".linked-task_item-user-name\");\n        const taskDuedateElement = taskElementContent.querySelector(\".linked-task_item-info_duedate\");\n        const taskElement = taskElementContent.querySelector(\".linked-task_item\");\n\n        task.state === \"closed\" \u0026\u0026 taskElement.classList.add(\"closed\");\n\n\n        taskImg.src = task.avatar_link;\n        taskNameElement.textContent = task.task_name;\n        userNameElement.textContent = task.user_name;\n        taskDuedateElement.textContent = task.due_date;\n        taskNameElement.href = `${window.location.href.replace(/\\(.*/, \"\")}(p:task/${task.id})`;\n        userNameElement.href = `${window.location.href.replace(/\\(.*/, \"\")}(p:user/${task.user_id})`;\n        taskNameElement.target = \"_blank\";\n        userNameElement.target = \"_blank\";\n\n        tasksContainer.append(taskElementContent)\n    };\n};","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        const baseUrl = System.getBaseUrl();\n        const appToSearchFieldReference = {\n            \"employment_app\": \"__item\",\n            \"electronic_interaction_agreement\": \"employment_app\",\n            \"labor_contract\": \"employment_app\",\n            \"admission_order\": \"employment_app\",\n            \"information_about_labor_activity\": \"employment_app\",\n            \"job_application\": \"employment_app\",\n            \"additional_agreement_to_the_contract\": \"employment_app\",\n            \"additional_agreement\": \"employment_app\",\n            \"consent_processing_personal_data\": \"employment_app\",\n            \"transfer_application\": \"__item\",\n            \"order_for_transfer\": \"application_transfer\",\n            \"transfer_approve\": \"transfer_application\",\n            \"additional_transfer_agreement\": \"transfer_application\",\n            \"execution_duties\": \"__item\",\n            \"memo_execution_responsibilities\": \"execution_dutie\",\n            \"order_execution_responsibilities\": \"execution_dutie\",\n            \"execution_responsibilities_consent\": \"execution_dutie\",\n            \"execution_responsibilities_additional_agreement\": \"execution_duties\",\n            \"dismissal_app\": \"__item\",\n            \"letter_of_resignation\": \"application_dismissal\",\n            \"dismissal_order\": \"application_dismissal\",\n            \"recall_dismissal\": \"application_dismissal\",\n            \"category_assignment\": \"__item\",\n            \"application_category_assignment\": \"category_assignment\",\n            \"employees_personal_data\": \"__item\",\n            \"passport_data_application\": \"staff_personal_data\",\n            \"passport_data_change_order\": \"staff_personal_data\",\n            \"child_personal_data_consent\": \"staff_personal_data\",\n            \"medical_request\": \"__item\",\n            \"medical_examination\": \"med_request\",\n            \"orders_lna\": \"doc_lna\",\n            \"vacations\": \"__item\",\n            \"vacation_docs\": \"vacation\",\n            \"vacation_orders\": \"vacation\",\n            \"memo_recall_vacation\": \"vacation\",\n            \"consent_recall_vacation\": \"vacation\",\n            \"overtime_work\": \"__item\",\n            \"overtime_requests\": \"overtime_work\",\n            \"overtimeWorkOrders\": \"overtime_work\",\n            \"overtimeWorkNotifications\": \"overtime_work\",\n            \"overtimeWorkConsent\": \"overtime_work\",\n            \"overtime_order\": \"overtime_work\",\n            \"businesstrip_requests\": \"__item\",\n            \"trip_requests\": \"businesstrip_requests\",\n            \"order_for_a_business_trip\": \"business_trip\",\n            \"avansovyi_otchet\": \"businesstrip_requests\",\n            \"service_assignments\": \"businesstrip_requests\",\n            \"service_note_accountable_funds\": \"business_trip\",\n            \"business_trip_consent\": \"business_trip\",\n            \"business_trip_change_service_note\": \"business_trip\"\n        };\n        const appToSubAppsReference = {\n            \"employment_app\": [\n                \"employment_app\",\n                \"electronic_interaction_agreement\",\n                \"labor_contract\",\n                \"admission_order\",\n                \"information_about_labor_activity\",\n                \"job_application\",\n                \"additional_agreement_to_the_contract\",\n                \"additional_agreement\",\n                \"consent_processing_personal_data\"\n            ],\n            \"transfer_application\": [\n                \"transfer_application\",\n                \"order_for_transfer\",\n                \"transfer_approve\",\n                \"additional_transfer_agreement\"\n            ],\n            \"execution_duties\": [\n                \"execution_duties\",\n                \"memo_execution_responsibilities\",\n                \"order_execution_responsibilities\",\n                \"execution_responsibilities_consent\",\n                \"execution_responsibilities_additional_agreement\"\n            ],\n            \"dismissal_app\": [\n                \"dismissal_app\",\n                \"letter_of_resignation\",\n                \"dismissal_order\",\n                \"recall_dismissal\"\n            ],\n            \"category_assignment\": [\n                \"category_assignment\",\n                \"application_category_assignment\"\n            ],\n            \"employees_personal_data\": [\n                \"employees_personal_data\",\n                \"passport_data_application\",\n                \"passport_data_change_order\",\n                \"child_personal_data_consent\"\n            ],\n            \"medical_request\": [\n                \"medical_request\",\n                \"medical_examination\"\n            ],\n            \"docs_lna\": [\n                \"docs_lna\",\n                \"orders_lna\"\n            ],\n            \"vacations\": [\n                \"vacations\",\n                \"vacation_docs\",\n                \"vacation_orders\",\n                \"memo_recall_vacation\",\n                \"consent_recall_vacation\",\n                \"offer_vacation_schedule\",\n                \"notification_vacation_schedule\"\n            ],\n            \"overtime_work\": [\n                \"overtime_work\",\n                \"overtime_requests\",\n                \"overtimeWorkOrders\",\n                \"overtimeWorkNotifications\",\n                \"overtimeWorkConsent\",\n                \"overtime_order\"\n            ],\n            \"businesstrip_requests\": [\n                \"businesstrip_requests\",\n                \"trip_requests\",\n                \"order_for_a_business_trip\",\n                \"avansovyi_otchet\",\n                \"service_assignments\",\n                \"service_note_accountable_funds\",\n                \"business_trip_consent\",\n                \"business_trip_change_service_note\"\n            ]\n        };\n        const additionalNamespaces = {\n            \"vacations\": \"absences_ext\",\n            \"businesstrip_requests\": \"business_trips_ext_settings\"\n        };\n        let tasksContainer;\n        let users;\n        let serializedTasks = [];\n        async function onInit() {\n            users = await System.users.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            const token = await Context.fields.settings.app.search().where(f =\u003e f.code.eq(\"api_key\")).first().then(res =\u003e res.data.value);\n            Context.data.api_key = token;\n            const waitForContainer = window.setInterval(() =\u003e {\n                tasksContainer = document.querySelector(\".linked-tasks_container\");\n                if (!tasksContainer) {\n                    return;\n                }\n                ;\n                window.clearInterval(waitForContainer);\n                getNamespaceProcesses().then(_ =\u003e renderTasks(serializedTasks));\n            }, 200);\n        }\n        ;\n        async function getNamespaceProcesses() {\n            const token = Context.data.api_key;\n            const appCode = Context.data.item_ref.code;\n            const appNs = Context.data.item_ref.namespace;\n            const subAppsCodes = appToSubAppsReference[appCode];\n            if (!subAppsCodes) {\n                console.log(\"wrong app\");\n                return;\n            }\n            ;\n            const appProcessesSchemasCodes = [].concat.apply([], await Promise.all(subAppsCodes.map(code =\u003e {\n                return fetch(`${baseUrl}/pub/v1/scheme/namespaces/${appNs}/apps/${code}/processes`, {\n                    headers: {\n                        Authorization: `Bearer ${token}`\n                    }\n                }).then(res =\u003e res.json()).then(resJson =\u003e resJson.result.result.map((proc) =\u003e proc.code));\n            })));\n            if ([\"businesstrip_requests\", \"vacations\"].indexOf(appCode) !== -1) {\n                appProcessesSchemasCodes.push(\"agreement_workflow\");\n            }\n            ;\n            const templatesIds = await fetch(`${baseUrl}/api/worker/query/system/bp_templates/search`, {\n                method: \"PUT\",\n                body: JSON.stringify({\n                    offset: 0,\n                    limit: 100,\n                    order: [],\n                    filter: {\n                        and: [\n                            {\n                                in: [\n                                    { field: \"code\" },\n                                    { list: appProcessesSchemasCodes }\n                                ]\n                            }\n                        ]\n                    }\n                })\n            });\n            const templatesJson = await templatesIds.json().then(res =\u003e res.items.map((item) =\u003e {\n                console.log(item);\n                const appCode = item.namespace.split(\".\")[1];\n                return {\n                    id: item.__id,\n                    code: item.code\n                };\n            }));\n            const refItemsList = [].concat.apply([], await Promise.all(subAppsCodes.map(code =\u003e {\n                const fieldRef = appToSearchFieldReference[code];\n                if (!fieldRef) {\n                    return;\n                }\n                ;\n                let body = undefined;\n                if (fieldRef === \"__item\") {\n                    body = JSON.stringify({\n                        active: true,\n                        filter: {\n                            tf: {\n                                \"__id\": Context.data.item_ref.id\n                            }\n                        }\n                    });\n                }\n                else {\n                    body = JSON.stringify({\n                        active: true,\n                        \"filter\": {\n                            \"link\": [\n                                { \"field\": fieldRef },\n                                { \"list\": [Context.data.item_ref.id] }\n                            ]\n                        }\n                    });\n                }\n                return fetch(`${baseUrl}/pub/v1/app/${appNs}/${code}/list`, {\n                    method: \"POST\",\n                    body,\n                    headers: {\n                        Authorization: `Bearer ${token}`\n                    }\n                }).then(res =\u003e res.json()).then(resJson =\u003e {\n                    if (resJson.error) {\n                        console.log(resJson.error);\n                        return;\n                    }\n                    ;\n                    return resJson.result.result.map((item) =\u003e {\n                        return {\n                            \"id\": item.__id,\n                            \"code\": code,\n                            \"namespace\": appNs\n                        };\n                    });\n                });\n            }))).filter((item) =\u003e item);\n            console.log(\"refItems: \", refItemsList);\n            const processesList = [].concat.apply([], await Promise.all(templatesJson.map((item) =\u003e {\n                return fetch(`${baseUrl}/pub/v1/bpm/instance/bytemplateid/${item.id}/list`, {\n                    method: \"POST\",\n                    body: JSON.stringify({\n                        active: true,\n                        \"filter\": {\n                            \"in\": [\n                                { \"field\": \"__item\" },\n                                { \"list\": refItemsList }\n                            ]\n                        }\n                    }),\n                    headers: {\n                        Authorization: `Bearer ${token}`\n                    }\n                }).then(res =\u003e res.json()).then(resJson =\u003e {\n                    if (resJson.error) {\n                        console.log(resJson.error);\n                        return;\n                    }\n                    ;\n                    return [...resJson.result.result];\n                });\n            }))).filter((item) =\u003e item);\n            console.log(\"search processes by api: \", processesList);\n            const linkedTasks = [].concat.apply([], processesList.map((process) =\u003e process.__tasks).filter((tasks) =\u003e {\n                return Object.keys(tasks).length \u003e 0;\n            }).map((tasks) =\u003e Object.keys(tasks).map(key =\u003e tasks[key]))).sort((a, b) =\u003e {\n                const aDateObj = new Datetime(a.__createdAt);\n                const bDateObj = new Datetime(b.__createdAt);\n                if (aDateObj.before(bDateObj)) {\n                    return 1;\n                }\n                ;\n                if (aDateObj.after(bDateObj)) {\n                    return -1;\n                }\n                ;\n                return 0;\n            });\n            console.log(linkedTasks);\n            serializedTasks = [].concat.apply([], await Promise.all(linkedTasks.map(serializeTask))).filter((task) =\u003e task);\n        }\n        ;\n        async function serializeTask(taskData) {\n            const performers = taskData.performers;\n            if (!performers || performers.length \u003c 1 || taskData.state === \"cancel\") {\n                console.log(\"no performers or task cancelled\");\n                return;\n            }\n            ;\n            const taskName = taskData.__name;\n            const dueDate = `Сделать до: ${taskData.dueDate ? new Datetime(taskData.dueDate).format(\"DD.MM.YYYY HH:MM:SS\") : \"без срока\"}`;\n            const taskItems = await Promise.all(performers.map(async (id) =\u003e {\n                const user = users.find(user =\u003e user.id === id);\n                if (user) {\n                    return {\n                        id: taskData.__id,\n                        name: taskName,\n                        user_name: user.data.__name,\n                        due_date: dueDate,\n                        task_name: taskName,\n                        avatar_link: user.data.avatar ? await user.data.avatar.getDownloadUrl() : \"\",\n                        user_id: user.id,\n                        state: taskData.state\n                    };\n                }\n                ;\n            })).then(res =\u003e res.filter(task =\u003e task));\n            return taskItems;\n        }\n        ;\n        function renderTasks(tasks) {\n            const taskNodeTemplate = document.querySelector(\".linked-task_item_template\");\n            for (let task of tasks) {\n                const taskElementContent = taskNodeTemplate.content.cloneNode(true);\n                const taskImg = taskElementContent.querySelector(\".linked-task_item-img\");\n                const taskNameElement = taskElementContent.querySelector(\".linked-task_item-info_task-name\");\n                const userNameElement = taskElementContent.querySelector(\".linked-task_item-user-name\");\n                const taskDuedateElement = taskElementContent.querySelector(\".linked-task_item-info_duedate\");\n                const taskElement = taskElementContent.querySelector(\".linked-task_item\");\n                task.state === \"closed\" \u0026\u0026 taskElement.classList.add(\"closed\");\n                taskImg.src = task.avatar_link;\n                taskNameElement.textContent = task.task_name;\n                userNameElement.textContent = task.user_name;\n                taskDuedateElement.textContent = task.due_date;\n                taskNameElement.href = `${window.location.href.replace(/\\(.*/, \"\")}(p:task/${task.id})`;\n                userNameElement.href = `${window.location.href.replace(/\\(.*/, \"\")}(p:user/${task.user_id})`;\n                taskNameElement.target = \"_blank\";\n                userNameElement.target = \"_blank\";\n                tasksContainer.append(taskElementContent);\n            }\n            ;\n        }\n        ;\n        return {\n            onInit,\n            getNamespaceProcesses,\n            serializeTask,\n            renderTasks\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"getNamespaceProcesses","parameters":[],"type":"[object Object]"},{"name":"serializeTask","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"renderTasks","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""}],"clientDependencies":{"applications":[],"collections":[{"namespace":"system","code":"users"},{"namespace":"kedo","code":"settings"}],"pages":[]}},"__createdAt":"2024-03-29T11:29:55.064058796Z","__createdBy":"d78f4b2f-13a2-4903-aeeb-fdb72d5b9d0c","__updatedAt":"2024-04-18T08:04:01.557551336Z","__updatedBy":"54584d91-0741-4200-a803-b00376614edb","__deletedAt":null}
