{
  "__id": "018fbf74-f945-70e2-a1c2-21e0bbf0768a",
  "namespace": "kedo.execution_duties",
  "code": "forma_sozdaniya",
  "__name": "Форма создания",
  "description": "",
  "extensionZoneCode": "",
  "sort": 0,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 7,
  "hidden": false,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "types": ["form"],
    "template": {
      "id": "3520041e-4b87-4ba9-b950-0a99a2d3ca7e",
      "descriptor": "item-form-complex-popup",
      "descriptorVersion": 2,
      "values": {
        "formGroup": {
          "path": ["item"]
        },
        "systemFunctions": {
          "validate": {
            "kind": "Function",
            "name": "validation",
            "type": "client"
          }
        }
      },
      "content": {
        "[headerControls]": [],
        "[headerCustomization]": [],
        "[footer]": [
          {
            "id": "2dcc53e1-f87b-4b9b-bd11-5b2b300b5ad1",
            "descriptor": "zone-content",
            "values": {
              "zoneCode": "[footer]"
            }
          }
        ],
        "[content]": [
          {
            "id": "c18e9118-cda2-49f4-ae50-5414c9b970b2",
            "descriptor": "modal-body",
            "values": {
              "__outlet": "",
              "__baseURL": "",
              "__relativeURL": "",
              "__isConstValues": [],
              "__renderContentAsync": true,
              "__renderContentOnDemand": false
            },
            "content": {
              "": [
                {
                  "id": "65f4bdcc-6026-4ff8-b3e2-211a8e9b754e",
                  "descriptor": "elma-info-block",
                  "values": {
                    "typeEnum": [
                      {
                        "code": "danger",
                        "name": "Ошибка (красный)"
                      }
                    ],
                    "__isConstValues": [],
                    "__renderContentAsync": false,
                    "text": {
                      "path": ["error_text"]
                    },
                    "__hidden": {
                      "path": ["show_error"],
                      "modifier": "not"
                    }
                  },
                  "content": {
                    "": []
                  }
                },
                {
                  "id": "b77f89a6-13c6-4fc5-bdbf-7c57f842f894",
                  "descriptor": "elma-info-block",
                  "values": {
                    "typeEnum": [
                      {
                        "code": "danger",
                        "name": "Ошибка (красный)"
                      }
                    ],
                    "__baseURL": "",
                    "__relativeURL": "",
                    "__isConstValues": [],
                    "__renderContentOnDemand": false,
                    "text": "Внимание! По данному процессу запущен процесс отмены. До завершения процесса рекомендуем не выполнять данную задачу.",
                    "__outlet": "",
                    "__renderContentAsync": false,
                    "__hidden": {
                      "path": ["item", "is_cancellation_process"],
                      "modifier": "not"
                    }
                  },
                  "content": {
                    "": []
                  }
                },
                {
                  "id": "faa9cc1e-6223-4e06-986f-962e2b3c2728",
                  "descriptor": "row-layout",
                  "values": {
                    "elementsAlignEnum": [
                      {
                        "code": "left",
                        "name": "shared.common.row-layout@widget-elements-align-left"
                      }
                    ],
                    "__renderContentAsync": false,
                    "__hidden": {
                      "path": ["view_result"],
                      "modifier": "not"
                    },
                    "__isConstValues": []
                  },
                  "content": {
                    "": [
                      {
                        "id": "8582f92c-6c30-48d9-bc30-e55de905c667",
                        "descriptor": "groupbox",
                        "values": {
                          "title": "Информация о корректировке заявки",
                          "expanded": true,
                          "styleEnum": [
                            {
                              "code": "default",
                              "name": "Default"
                            }
                          ],
                          "collapsible": false,
                          "__isConstValues": [],
                          "__renderContentAsync": false
                        },
                        "content": {
                          "": [
                            {
                              "id": "957c2aa7-7d61-46f3-a25f-07032894dc3f",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "control": {
                                  "path": ["item", "reject_comment"]
                                },
                                "tooltip": null,
                                "hideEmpty": false,
                                "__readOnly": true,
                                "__hidden": {
                                  "path": ["view_result"],
                                  "modifier": "not"
                                },
                                "required": false,
                                "bindingMode": false,
                                "__isConstValues": [],
                                "showDisplayName": true
                              }
                            },
                            {
                              "id": "9bb04f51-ad3b-4b35-9af8-2de96b8bfa81",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "hideEmpty": false,
                                "__isConstValues": [],
                                "showDisplayName": true,
                                "control": {
                                  "path": ["item", "posted_result"]
                                },
                                "tooltip": null,
                                "__hidden": {
                                  "path": ["view_result"],
                                  "modifier": "not"
                                },
                                "required": {
                                  "path": ["view_result"]
                                },
                                "__readOnly": null,
                                "bindingMode": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "id": "7e74ee96-05c6-4dec-8ec3-a0eea7cc699b",
                  "descriptor": "row-layout",
                  "values": {
                    "__isConstValues": [],
                    "elementsAlignEnum": [
                      {
                        "code": "left",
                        "name": "shared.common.row-layout@widget-elements-align-left"
                      }
                    ],
                    "__renderContentAsync": false,
                    "__hidden": {
                      "path": ["item", "started_from_vacation_process"],
                      "modifier": "not"
                    }
                  },
                  "content": {
                    "": [
                      {
                        "id": "3a68adbc-9655-4757-b499-480d7aca00f2",
                        "descriptor": "groupbox",
                        "values": {
                          "title": "Принять решение по замещению",
                          "expanded": true,
                          "styleEnum": [
                            {
                              "code": "default",
                              "name": "Default"
                            }
                          ],
                          "collapsible": false,
                          "__isConstValues": [],
                          "__renderContentAsync": false
                        },
                        "content": {
                          "": [
                            {
                              "id": "d6f88747-ee3d-40c8-b9c4-a96546758b41",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "__readOnly": null,
                                "__isConstValues": [],
                                "showDisplayName": false,
                                "control": {
                                  "path": ["item", "create_result"]
                                },
                                "required": {
                                  "path": [
                                    "item",
                                    "started_from_vacation_process"
                                  ]
                                },
                                "hideEmpty": false,
                                "bindingMode": false,
                                "onChangeValue": {
                                  "kind": "Function",
                                  "name": "changeRequriedFields",
                                  "type": "client"
                                },
                                "tooltip": null
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "id": "164c9801-8a0c-43ea-ac51-5567e89e5e0f",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "tooltip": null,
                    "__readOnly": true,
                    "__isConstValues": [],
                    "showDisplayName": true,
                    "control": {
                      "path": ["item", "initiator"]
                    },
                    "required": false,
                    "hideEmpty": false,
                    "bindingMode": false,
                    "showCreateItem": false
                  }
                },
                {
                  "id": "8a5d0234-6d26-4ad8-a7fd-62640d7de2fb",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "control": {
                      "path": ["item", "substitution_date"]
                    },
                    "hideEmpty": false,
                    "__readOnly": null,
                    "bindingMode": false,
                    "__isConstValues": [],
                    "showDisplayName": true,
                    "tooltip": null,
                    "__hidden": {
                      "path": ["item", "define_substitution_later"],
                      "modifier": "not"
                    },
                    "required": {
                      "path": ["item", "define_substitution_later"]
                    },
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "checkDates",
                      "type": "client"
                    }
                  }
                },
                {
                  "id": "1322db46-f5b7-46cb-bff6-2260e2093723",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "tooltip": null,
                    "bindingMode": false,
                    "__isConstValues": [],
                    "control": {
                      "path": ["item", "app_basis"]
                    },
                    "hideEmpty": false,
                    "__readOnly": false,
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "check_basis_app",
                      "type": "client"
                    },
                    "showDisplayName": true,
                    "required": false
                  }
                },
                {
                  "id": "3af60245-e8ec-4101-8d36-346a4a5beb1a",
                  "descriptor": "row",
                  "values": {
                    "__relativeURL": "",
                    "__isConstValues": [],
                    "__renderContentAsync": false,
                    "__outlet": "",
                    "__baseURL": ""
                  },
                  "content": {
                    "": [
                      {
                        "id": "bb31a1fb-f493-4a25-be83-69ade20079a2",
                        "descriptor": "column",
                        "content": {
                          "": [
                            {
                              "id": "c4efb0cf-5ec8-48ee-a46a-1a077df7f5c0",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "control": {
                                  "path": ["item", "staff"]
                                },
                                "__readOnly": null,
                                "showDisplayName": true,
                                "onChangeValue": {
                                  "kind": "Function",
                                  "name": "check_form",
                                  "type": "client"
                                },
                                "__outlet": "",
                                "__baseURL": "",
                                "bindingMode": false,
                                "__relativeURL": "",
                                "tooltip": null,
                                "hideEmpty": false,
                                "showCreateItem": false,
                                "__renderContentOnDemand": false,
                                "required": {
                                  "path": ["fields_required"]
                                },
                                "__isConstValues": []
                              }
                            }
                          ]
                        }
                      },
                      {
                        "id": "f44054ed-20ac-4aa4-a595-637ae9f32879",
                        "descriptor": "column",
                        "values": {
                          "__outlet": "",
                          "__styles": "display: flex; justify-content: center;",
                          "__baseURL": "",
                          "__relativeURL": "",
                          "__isConstValues": [],
                          "__renderContentAsync": false
                        },
                        "content": {
                          "": [
                            {
                              "id": "077371eb-c787-4bfd-bfb8-bc8f3fc20c7e",
                              "descriptor": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed@staff_position_list_widget",
                              "descriptorVersion": 4,
                              "values": {
                                "__baseURL": "",
                                "__relativeURL": "",
                                "__isConstValues": [],
                                "employment_placement": {
                                  "path": [
                                    "item",
                                    "staff_employment_placement"
                                  ]
                                },
                                "staff": {
                                  "path": ["item", "staff"]
                                },
                                "__outlet": "",
                                "__styles": "width: 100%;"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "id": "2718e2b4-9b04-4b34-82bb-90547128bdba",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "control": {
                      "path": ["item", "approval"]
                    },
                    "tooltip": null,
                    "__hidden": true,
                    "__relativeURL": "",
                    "showCreateItem": false,
                    "__outlet": "",
                    "hideEmpty": false,
                    "__isConstValues": [],
                    "showDisplayName": true,
                    "required": false,
                    "__readOnly": null,
                    "__baseURL": "",
                    "bindingMode": false,
                    "__renderContentOnDemand": false
                  }
                },
                {
                  "id": "ead998bb-712f-4aa9-afeb-dfaad3c4c93b",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "__hidden": true,
                    "required": false,
                    "__readOnly": null,
                    "__isConstValues": [],
                    "__outlet": "",
                    "bindingMode": false,
                    "__renderContentOnDemand": false,
                    "control": {
                      "path": ["item", "substitution_type"]
                    },
                    "tooltip": null,
                    "__baseURL": "",
                    "hideEmpty": false,
                    "onChangeValue": {
                      "kind": "Function",
                      "name": {},
                      "type": "client"
                    },
                    "__relativeURL": "",
                    "showDisplayName": true
                  }
                },
                {
                  "id": "ecffb95d-295f-4342-9b4e-0f8fc8805511",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "control": {
                      "path": ["item", "staff_employment_placement"]
                    },
                    "__outlet": "",
                    "required": false,
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "staffEmploymentPlacementOnChange",
                      "type": "client"
                    },
                    "showDisplayName": true,
                    "__baseURL": "",
                    "hideEmpty": false,
                    "bindingMode": false,
                    "showCreateItem": false,
                    "tooltip": null,
                    "__readOnly": true,
                    "__isConstValues": [],
                    "__hidden": true,
                    "__relativeURL": ""
                  }
                },
                {
                  "id": "7a104171-f36d-479e-9e49-bda6bf4c54a8",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "subtitusuion_set",
                      "type": "client"
                    },
                    "control": {
                      "path": ["item", "type_combination"]
                    },
                    "__readOnly": null,
                    "showDisplayName": true,
                    "__renderContentOnDemand": false,
                    "bindingMode": false,
                    "__isConstValues": [],
                    "__baseURL": "",
                    "hideEmpty": false,
                    "__relativeURL": "",
                    "tooltip": null,
                    "__outlet": "",
                    "required": {
                      "path": ["fields_required"]
                    },
                    "showCreateItem": false
                  }
                },
                {
                  "id": "979c8977-d35e-4336-a06c-205d6926f098",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "bindingMode": false,
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "check_form",
                      "type": "client"
                    },
                    "__isConstValues": [],
                    "showDisplayName": true,
                    "control": {
                      "path": ["item", "start_date"]
                    },
                    "tooltip": null,
                    "__outlet": "",
                    "hideEmpty": false,
                    "__readOnly": null,
                    "__relativeURL": "",
                    "__hidden": {
                      "path": ["show_dates_string"]
                    },
                    "required": {
                      "path": ["fields_required"]
                    },
                    "__baseURL": ""
                  }
                },
                {
                  "id": "1f10daf6-8768-429b-b308-2d4b76a5db77",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "check_form",
                      "type": "client"
                    },
                    "__isConstValues": [],
                    "tooltip": null,
                    "__hidden": {
                      "path": ["show_dates_string"]
                    },
                    "__outlet": "",
                    "__readOnly": null,
                    "__relativeURL": "",
                    "showDisplayName": true,
                    "control": {
                      "path": ["item", "end_date"]
                    },
                    "required": {
                      "path": ["fields_required"]
                    },
                    "__baseURL": "",
                    "hideEmpty": false,
                    "bindingMode": false
                  }
                },
                {
                  "id": "781a7717-1d04-4026-a27e-7d7aab1760c4",
                  "descriptor": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed@converting_dates",
                  "descriptorVersion": 4,
                  "values": {
                    "date_1": {
                      "path": ["item", "start_date"]
                    },
                    "date_2": {
                      "path": ["item", "end_date"]
                    },
                    "__hidden": true,
                    "date_1_string": {
                      "path": ["item", "start_day_line"]
                    },
                    "date_2_string": {
                      "path": ["item", "end_date_line"]
                    },
                    "__isConstValues": []
                  }
                },
                {
                  "id": "521d2273-cffe-4750-a744-6f5f3e36503f",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "control": {
                      "path": ["item", "start_day_line"]
                    },
                    "tooltip": null,
                    "required": false,
                    "__readOnly": true,
                    "bindingMode": false,
                    "displayName": "Дата начала",
                    "__hidden": {
                      "path": ["show_dates_string"],
                      "modifier": "not"
                    },
                    "hideEmpty": false,
                    "__isConstValues": [],
                    "showDisplayName": true
                  }
                },
                {
                  "id": "b14c5f0f-7c0d-4e64-97bc-56dc30ef8c91",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "displayName": "Дата окончания",
                    "showDisplayName": true,
                    "hideEmpty": false,
                    "tooltip": null,
                    "__hidden": {
                      "path": ["show_dates_string"],
                      "modifier": "not"
                    },
                    "required": false,
                    "__readOnly": true,
                    "bindingMode": false,
                    "__isConstValues": [],
                    "control": {
                      "path": ["item", "end_date_line"]
                    }
                  }
                },
                {
                  "id": "89230fe6-0067-4bbe-aebc-b73591237757",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "__classes": "inf_about_acting",
                    "onChangeDone": {
                      "kind": "Function",
                      "name": {},
                      "type": "client"
                    },
                    "widgetCustomSettings": {
                      "kind": "BlobObject",
                      "settings": {
                        "columnsView": {
                          "percent": {
                            "key": false,
                            "font": {
                              "bold": false,
                              "color": "",
                              "italic": false,
                              "underline": false
                            },
                            "align": "left",
                            "width": 175,
                            "hidden": false,
                            "tensile": false,
                            "readonly": false,
                            "required": true,
                            "compression": false,
                            "verticalAlign": "middle",
                            "backgroundColor": ""
                          },
                          "position": {
                            "key": false,
                            "font": {
                              "bold": false,
                              "color": "",
                              "italic": false,
                              "underline": false
                            },
                            "align": "left",
                            "width": 175,
                            "hidden": true,
                            "tensile": false,
                            "readonly": false,
                            "required": false,
                            "compression": false,
                            "verticalAlign": "middle",
                            "backgroundColor": ""
                          },
                          "substitute": {
                            "key": false,
                            "font": {
                              "bold": false,
                              "color": "",
                              "italic": false,
                              "underline": false
                            },
                            "align": "left",
                            "width": 175,
                            "hidden": false,
                            "tensile": false,
                            "readonly": false,
                            "required": true,
                            "compression": false,
                            "verticalAlign": "middle",
                            "backgroundColor": ""
                          },
                          "type_surcharge": {
                            "key": false,
                            "font": {
                              "bold": false,
                              "color": "",
                              "italic": false,
                              "underline": false
                            },
                            "align": "left",
                            "width": 175,
                            "hidden": false,
                            "tensile": false,
                            "readonly": false,
                            "required": true,
                            "compression": false,
                            "verticalAlign": "middle",
                            "backgroundColor": ""
                          },
                          "substitute_employment_placement": {
                            "key": false,
                            "font": {
                              "bold": false,
                              "color": "",
                              "italic": false,
                              "underline": false
                            },
                            "align": "left",
                            "width": 175,
                            "hidden": false,
                            "tensile": false,
                            "readonly": false,
                            "required": true,
                            "compression": false,
                            "verticalAlign": "middle",
                            "backgroundColor": ""
                          }
                        },
                        "allowDeleteRows": true
                      }
                    },
                    "required": {
                      "path": ["inf_about_acting_show"]
                    },
                    "__baseURL": "",
                    "__readOnly": false,
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "check_form",
                      "type": "client"
                    },
                    "__isConstValues": [],
                    "showDisplayName": true,
                    "__renderContentOnDemand": false,
                    "control": {
                      "path": ["item", "inf_about_acting"]
                    },
                    "tooltip": null,
                    "__outlet": "",
                    "__relativeURL": "",
                    "__hidden": {
                      "path": ["inf_about_acting_show"],
                      "modifier": "not"
                    },
                    "hideEmpty": false,
                    "bindingMode": false
                  }
                },
                {
                  "id": "f71228a3-acb2-444c-8b47-2ddec49e0d95",
                  "descriptor": "kedo@custom_info",
                  "descriptorVersion": 4,
                  "values": {
                    "info_type": [
                      {
                        "code": "warning",
                        "name": "Предупреждение"
                      }
                    ],
                    "info_string": {
                      "path": ["inf_about_acting_warning_text"]
                    },
                    "__relativeURL": "",
                    "__isConstValues": [],
                    "__hidden": {
                      "path": ["inf_about_acting_warning_visible"],
                      "modifier": "not"
                    },
                    "__outlet": "",
                    "__styles": "width: 100%",
                    "__baseURL": ""
                  }
                },
                {
                  "id": "8d9a0990-f199-43b7-b463-bb687178ae3e",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "control": {
                      "path": ["item", "install_replacement"]
                    },
                    "tooltip": null,
                    "__outlet": "",
                    "required": {
                      "path": ["fields_required"]
                    },
                    "__baseURL": "",
                    "__isConstValues": [],
                    "__renderContentOnDemand": false,
                    "hideEmpty": false,
                    "__readOnly": {
                      "path": ["install_replacement_readonly"]
                    },
                    "bindingMode": false,
                    "__relativeURL": "",
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "changeInstallReplacement",
                      "type": "client"
                    },
                    "showDisplayName": true
                  }
                },
                {
                  "id": "de873e4b-1213-44cd-99f4-d62b160de33d",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "control": {
                      "path": ["item", "substitute"]
                    },
                    "required": {
                      "path": ["substitute_show"]
                    },
                    "hideEmpty": false,
                    "bindingMode": false,
                    "__relativeURL": "",
                    "showCreateItem": false,
                    "__isConstValues": [],
                    "__hidden": {
                      "path": ["substitute_show"],
                      "modifier": "not"
                    },
                    "__baseURL": "",
                    "__readOnly": null,
                    "onChangeValue": {
                      "kind": "Function",
                      "name": "check_form",
                      "type": "client"
                    },
                    "showDisplayName": true,
                    "__styles": "display: flex; justify-content: center;",
                    "tooltip": "На данного сотрудника на время отсутствия будут поступать все задачи замещаемого сотрудника",
                    "__outlet": ""
                  }
                }
              ]
            }
          }
        ],
        "[sidebar]": [
          {
            "id": "662f08da-59da-4112-9ae1-763785ab8bf2",
            "descriptor": "sidebar-widget",
            "content": {
              "": [
                {
                  "id": "1556d7a7-eaa5-41a2-b262-82ec3b86e64d",
                  "descriptor": "user-guide"
                }
              ]
            }
          }
        ]
      }
    },
    "fields": [
      {
        "code": "substitute_show",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "substitute_show",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "inf_about_acting_show",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "inf_about_acting_show",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "view_result",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "view_result",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_dates_string",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Показать даты (строка)",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "show_error",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "show_error",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "error_text",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "error_text",
          "data": {
            "additionalType": "markdown"
          }
        }
      },
      {
        "code": "vacation",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "holidays",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Отпуска",
          "data": {}
        }
      },
      {
        "code": "block_error",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "block_error",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "kedo_settings",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "settings",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Настройки КЭДО",
          "data": {}
        }
      },
      {
        "code": "fields_required",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Обязательность полей",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "previous_data",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "previous_data",
          "data": {
            "additionalType": "text"
          }
        }
      },
      {
        "code": "inf_about_acting_warning_text",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "inf_about_acting_warning_text",
          "data": {
            "additionalType": "string"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "inf_about_acting_warning_visible",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "inf_about_acting_warning_visible",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "install_replacement_readonly",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Установка замещения для чтения",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "substitute",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "staff",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Замещающий",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "place_employment",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "employment_directory",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Место занятости",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "type_surcharge",
        "type": "ENUM",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "enumItems": [
            {
              "code": "percent_main_position",
              "name": "Процент от оклада по основной должности",
              "checked": false
            },
            {
              "code": "percen_combination",
              "name": "Процент от оклада по должности совмещения",
              "checked": false
            },
            {
              "code": "fixed_amount",
              "name": "Фиксированная сумма",
              "checked": false
            }
          ]
        },
        "view": {
          "name": "Вид доплаты",
          "data": {},
          "input": true,
          "output": true
        }
      },
      {
        "code": "percent",
        "type": "FLOAT",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Процент доплаты / фиксированная сумма",
          "data": {
            "additionalType": "float",
            "showRowSeparator": true
          },
          "input": true,
          "output": true
        }
      },
      {
        "code": "view_error_filling",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Показать ошибку заполнения",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          },
          "input": true,
          "output": true
        }
      }
    ],
    "fieldVisibilityConditions": {
      "percent": {
        "enabled": false,
        "conditions": []
      },
      "vacation": {
        "enabled": false,
        "conditions": []
      },
      "error_text": {
        "enabled": false,
        "conditions": []
      },
      "show_error": {
        "enabled": false,
        "conditions": []
      },
      "substitute": {
        "enabled": false,
        "conditions": []
      },
      "block_error": {
        "enabled": false,
        "conditions": []
      },
      "view_result": {
        "enabled": false,
        "conditions": []
      },
      "kedo_settings": {
        "enabled": false,
        "conditions": []
      },
      "previous_data": {
        "enabled": false,
        "conditions": []
      },
      "type_surcharge": {
        "enabled": false,
        "conditions": []
      },
      "fields_required": {
        "enabled": false,
        "conditions": []
      },
      "substitute_show": {
        "enabled": false,
        "conditions": []
      },
      "place_employment": {
        "enabled": false,
        "conditions": []
      },
      "show_dates_string": {
        "enabled": false,
        "conditions": []
      },
      "view_error_filling": {
        "enabled": false,
        "conditions": []
      },
      "started_in_vacation": {
        "enabled": false,
        "conditions": []
      },
      "inf_about_acting_show": {
        "enabled": false,
        "conditions": []
      },
      "install_replacement_readonly": {
        "enabled": false,
        "conditions": []
      },
      "inf_about_acting_warning_text": {
        "enabled": false,
        "conditions": []
      },
      "inf_about_acting_warning_visible": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {
      "allowNamespace": true
    },
    "clientScripts": "/* Client scripts module */\ndeclare const console: any;\ndeclare const document: any;\nlet all_staffs: ApplicationItem\u003cApplication$kedo$staff$Data, any\u003e[] = []\nfunction show_error_message(text: string) {\n    ViewContext.data.show_error = true;\n    ViewContext.data.error_text = text;\n}\n\nfunction hide_error_message() {\n    ViewContext.data.show_error = false;\n    ViewContext.data.error_text = undefined;\n}\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    ViewContext.data.fields_required = true;\n    let user = await System.users.getCurrentUser();\n    const initiator = await Context.fields.initiator.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.ext_user.eq(user)\n        ))\n        .first();\n\n    if (initiator) {\n        const initiator_employment = await Context.fields.staff_employment_placement.app.search()\n            .where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.__status.eq(Context.fields.staff_employment_placement.app.fields.__status.variants.actual),\n                f.staff.link(initiator)\n            ))\n            .size(100)\n            .all();\n\n        const organizations = initiator_employment\n            .filter(f =\u003e f.data.organization != undefined)\n            .map(f =\u003e f.data.organization!);\n\n        Context.fields.staff.data.setFilter((f, c, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organizations),\n            f.__status.eq(Context.fields.substitute.app.fields.__status.variants.signed_documents)\n        ));\n\n        Context.fields.substitute.data.setFilter((f, c, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.organization.link(organizations),\n            f.__status.eq(Context.fields.substitute.app.fields.__status.variants.signed_documents)\n        ));\n\n        if (initiator.data.organization) {\n            const organiaztion = await initiator.data.organization.fetch();\n\n            if (organiaztion.data.signatories \u0026\u0026 organiaztion.data.signatories.length \u003e 0) {\n                const signatories_app = await Promise.all(organiaztion.data.signatories.map(f =\u003e f.fetch()));\n                const signatories = signatories_app.filter(f =\u003e f.data.ext_user\n                    \u0026\u0026 f.data.__status == f.fields.__status.variants.signed_documents);\n\n                if (signatories.length \u003e 0) {\n                    Context.data.signatory = signatories[0];\n                }\n            }\n            Context.data.organization = initiator.data.organization;\n\n            if (initiator.data.employment_table \u0026\u0026 initiator.data.employment_table.length \u003e 0) {\n                Context.data.oragnizations = initiator.data.employment_table.map(f =\u003e f.organization);\n            }\n        }\n        Context.data.initiator = initiator;\n    }\n\n    if (Context.data.staff) {\n        let staff = await Context.data.staff.fetch();\n        Context.data.oragnization = staff.data.organization;\n    }\n\n    if (ViewContext.data.__formType \u0026\u0026 ViewContext.data.__formType.code == ViewContext.fields.__formType.variants.edit.code) {\n        ViewContext.data.view_result = true;\n        Context.data.started_from_vacation_process = false;\n        await subtitusuion_set();\n    }\n    // if (Context.data.started_from_vacation_process === true) {\n    //     ViewContext.data.show_dates_string = true;\n    // } else {\n        ViewContext.data.show_dates_string = false;\n    // }\n    await check_form();\n\n    all_staffs = await Context.fields.substitute.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.__status.eq(Context.fields.substitute.app.fields.__status.variants.signed_documents)\n    )).size(3000).all()\n\n    //await infAboutActingSetFilter();\n}\n\nasync function subtitusuion_set(): Promise\u003cvoid\u003e {\n    if (Context.data.type_combination) {\n        const type_combination = await Context.data.type_combination!.fetch();\n        ViewContext.data.inf_about_acting_show = false;\n        ViewContext.data.substitute_show = false;\n\n        if (type_combination.data.code == 'substitution_only') {\n            if (!Context.data.create_result || (Context.data.create_result \u0026\u0026 Context.data.create_result.code === Context.fields.create_result.variants.create.code)) {\n                ViewContext.data.substitute_show = true;\n                ViewContext.data.install_replacement_readonly = true;\n                /* Context.fields.substitute.data.setFilter((f, c, g) =\u003e g.and(\n                     f.__status.eq(Context.fields.staff.app.fields.__status.variants.signed_documents),\n                     f.organization.link(Context.data.organization!)\n                 ));*/\n                if (Context.data.inf_about_acting \u0026\u0026 Context.data.inf_about_acting.length \u003e 0) {\n                    for (let i = Context.data.inf_about_acting.length - 1; i \u003e= 0; i--) {\n                        Context.data.inf_about_acting.delete(i);\n                    }\n                    Context.data.inf_about_acting = Context.data.inf_about_acting;\n                }\n            }\n        } else {\n            ViewContext.data.inf_about_acting_show = true;\n            ViewContext.data.install_replacement_readonly = false;\n            await changeInstallReplacement()\n        }\n\n    } else {\n        ViewContext.data.inf_about_acting_show = false;\n        ViewContext.data.substitute_show = false;\n        if (Context.data.inf_about_acting \u0026\u0026 Context.data.inf_about_acting.length \u003e 0) {\n            for (let i = Context.data.inf_about_acting.length - 1; i \u003e= 0; i--) {\n                Context.data.inf_about_acting.delete(i);\n            }\n            Context.data.inf_about_acting = Context.data.inf_about_acting;\n        }\n    }\n}\n\nasync function check_form(): Promise\u003cvoid\u003e {\n    console.log('check form');\n    let current_date = new Datetime;\n    hide_error_message();\n    ViewContext.data.block_error = false;\n    await check_basis_app();\n\n    if (Context.data.inf_about_acting \u0026\u0026 Context.data.inf_about_acting.length \u003e 0) {\n        await table_change();\n    }\n\n    if (Context.data.start_date \u0026\u0026 Context.data.end_date) {\n        if (Context.data.staff) {\n            //await insertion_check(Context.data.staff, false);\n            //await check_staff_replacement(Context.data.staff, false);\n        }\n\n        if (Context.data.substitute) {\n            await insertion_check(Context.data.substitute, true);\n            await check_staff_replacement(Context.data.substitute, true);\n        }\n\n        if (Context.data.start_date.after(Context.data.end_date)) {\n            show_error_message('Дата начала ИО не может быть позже даты окончания')\n        }\n\n        if (!Context.data.start_date.after(current_date.add(new Duration(-1, 'days')))) {\n            show_error_message('Дата начала ИО не может быть раньше текущей даты')\n        }\n\n        if (!Context.data.end_date.after(current_date.add(new Duration(-1, 'days')))) {\n            show_error_message('Дата окончания ИО не может быть раньше текущей даты')\n        }\n    }\n\n    if (Context.data.staff \u0026\u0026 Context.data.substitute \u0026\u0026 Context.data.substitute.id == Context.data.staff.id) {\n        show_error_message('Замещаемый не может быть выбран в качестве замещающего');\n    }\n\n    // if (ViewContext.data.previous_data !== JSON.stringify(await (Context.data.inf_about_acting as any).json())) {\n    //     ViewContext.data.previous_data = JSON.stringify(await (Context.data.inf_about_acting as any).json());\n    //     Context.data.inf_about_acting = Context.data.inf_about_acting\n    // }\n}\n\nasync function check_staff_replacement(staff: TApplication\u003cApplication$kedo$staff$Data, any, Application$kedo$staff_data$Processes\u003e, isSubstitute: boolean): Promise\u003cvoid\u003e {\n    if (staff) {\n        const s = await staff.fetch();\n        const user = s.data.ext_user;\n\n        if (Context.data.start_date \u0026\u0026 Context.data.end_date) {\n            const replacement = await System.replacements.search().where((f, g) =\u003e g.and(\n                f.absent.eq(user!),\n                g.and(\n                    f.begin.lte(Context.data.end_date!),\n                    f.end.gte(Context.data.start_date!)\n                )\n            )).first();\n\n            if (replacement) {\n                show_error_message(`Внимание! По ${isSubstitute == true ? 'замещающему' : 'замещаемому'} сотруднику ${s.data.__name} уже установлено автоделегирование задач c ${replacement.data.begin!.format('DD.MM.YYYY')} по ${replacement.data.end!.format('DD.MM.YYYY')}\\n`);\n            }\n        }\n    }\n}\n\nasync function insertion_check(staff: TApplication\u003cApplication$kedo$staff$Data, any, Application$kedo$staff_data$Processes\u003e, isSubstitute: boolean): Promise\u003cvoid\u003e {\n    if (Context.data.start_date \u0026\u0026 Context.data.end_date \u0026\u0026 staff) {\n        const vacations = await ViewContext.fields.vacation.app.search()\n            .where((f, q) =\u003e q.and(\n                f.__deletedAt.eq(null),\n                q.or(\n                    f.status.eq('signed;Утверждено'),\n                    f.status.eq('transfer;Оформление переноса'),\n                    f.status.eq('ongoing;В процессе'),\n                ),\n                f.kedo_staff.link(staff),\n                q.or(\n                    q.and(\n                        f.start.gte(Context.data.start_date!.getDate()),\n                        f.start.lte(Context.data.end_date!.getDate())\n                    ),\n                    q.and(\n                        f.end.gte(Context.data.start_date!.getDate()),\n                        f.end.lte(Context.data.end_date!.getDate())\n                    )\n                )\n            ))\n            .size(10000)\n            .all();\n\n        let dublicates: any[] = [];\n        if (vacations \u0026\u0026 vacations.length \u003e 0) {\n            dublicates = dublicates.concat(vacations);\n        }\n        const staff_name = (await staff.fetch()).data.__name;\n        if (dublicates \u0026\u0026 dublicates.length \u003e 0) {\n            let error = `Внимание! ${isSubstitute == true ? 'Замещающий сотрудник' : 'Замещаемый сотрудник'} ${staff_name} в указанный период будет отсутствовать. Причина:`\n            for (let dublicate of dublicates) {\n                error += '\\n' + dublicate.data.__name + '; ';\n            }\n            show_error_message(error);\n            if (isSubstitute) {\n                ViewContext.data.block_error = true;\n            }\n        }\n    }\n}\n\n\n\n//не удалять -в разработке (Юля)\nasync function check_basis_app(): Promise\u003cvoid\u003e {\n    if (Context.data.app_basis) {\n        const app_basis = await Context.data.app_basis.fetch();\n        const app_basis_code = app_basis.code;\n        if (app_basis_code === 'vacations') {\n            // const vacation_app = app_basis as TApplication\u003cApplication$absences$vacations$Data, Application$absences$vacations$Params, Application$absences$vacations$Processes\u003e;\n            const vacation = app_basis;\n            if (Context.data.start_date \u0026\u0026 Context.data.end_date \u0026\u0026 vacation.data.start \u0026\u0026 vacation.data.end) {\n                if (Context.data.start_date.before(vacation.data.start)) {\n                    show_error_message('Дата начала заявки на ИО указана раньше даты начала заявки на отпуск/отсутствие');\n                    ViewContext.data.block_error = true;\n                }\n                if (Context.data.start_date.after(vacation.data.end)) {\n                    show_error_message('Дата начала заявки на ИО указана позже даты окончания заявки на отпуск/отсутствие');\n                    ViewContext.data.block_error = true;\n\n                }\n                if (Context.data.end_date.before(vacation.data.start)) {\n                    show_error_message('Дата окончания заявки на ИО указана раньше даты начала заявки на отпуск/отсутствие');\n                    ViewContext.data.block_error = true;\n\n                }\n                if (Context.data.end_date.after(vacation.data.end)) {\n                    show_error_message('Дата окончания заявки на ИО указана позже даты окончания заявки на отпуск/отсутствие');\n                    ViewContext.data.block_error = true;\n\n                }\n\n            }\n        }\n        if (app_basis_code === 'businesstrip_requests') {\n            //@ts-ignore\n            const businesstrip_requests_app = app_basis as TApplication\u003cApplication$business_trips$businesstrip_requests$Data, Application$business_trips$businesstrip_requests$Params, Application$business_trips$businesstrip_requests$Processes\u003e;\n            const businesstrip_requests = await businesstrip_requests_app.fetch();\n            if (Context.data.start_date \u0026\u0026 Context.data.end_date \u0026\u0026 businesstrip_requests.data.start_date \u0026\u0026 businesstrip_requests.data.end_date) {\n                if (Context.data.start_date.before(businesstrip_requests.data.start_date)) {\n                    show_error_message('Дата начала заявки на ИО указана раньше даты начала заявки на командировку');\n                    ViewContext.data.block_error = true;\n\n                }\n                if (Context.data.start_date.after(businesstrip_requests.data.end_date)) {\n                    show_error_message('Дата начала заявки на ИО указана позже даты окончания заявки на командировку');\n                    ViewContext.data.block_error = true;\n\n                }\n                if (Context.data.end_date.before(businesstrip_requests.data.start_date)) {\n                    show_error_message('Дата окончания заявки на ИО указана раньше даты начала заявки на командировку');\n                    ViewContext.data.block_error = true;\n\n                }\n                if (Context.data.end_date.after(businesstrip_requests.data.end_date)) {\n                    show_error_message('Дата окончания заявки на ИО указана позже даты окончания заявки на командировку');\n                    ViewContext.data.block_error = true;\n\n                }\n            }\n        }\n    } else {\n        hide_error_message();\n        ViewContext.data.block_error = false;\n    }\n}\n\nasync function table_change(): Promise\u003cvoid\u003e {\n    await checkLengthTable()\n    ViewContext.data.inf_about_acting_warning_visible = false;\n    ViewContext.data.inf_about_acting_warning_text = undefined;\n\n    let alternate_ids: string[] = [];\n\n    const table = Context.data.inf_about_acting;\n\n    if (table \u0026\u0026 table.length \u003e 0) {\n        const employment_placements = await Promise.all(table.map(f =\u003e f.substitute_employment_placement.fetch()));\n\n        const external_combination = employment_placements.filter(f =\u003e f.data.type_employment?.code == 'external_combination');\n\n        /**\n         * Если есть вн. совместительства, то выводим предупреждение.\n         */\n        if (external_combination.length \u003e 0) {\n            const external_combination_staff = await Promise.all(external_combination.map(f =\u003e f.data.staff!.fetch()));\n\n            //Вывод предупреждения о внешнем совместительстве.\n            ViewContext.data.inf_about_acting_warning_visible = true;\n            ViewContext.data.inf_about_acting_warning_text = `\n            \u003cdiv\u003e\n                \u003cp\u003eВнимание! Проверьте максимально допустимое кол-во часов по совместительству при оформлении замещения на:\u003c/p\u003e\n                \u003cul\u003e\n                    ${external_combination_staff.map(f =\u003e `\u003cli\u003e${f.data.__name}\u003c/li\u003e`)}\n                \u003c/ul\u003e\n            \u003c/div\u003e`;\n        }\n\n        const staffs = await Promise.all(employment_placements.map(f =\u003e f.data.staff!.fetch()));\n\n        for (let i = 0; i \u003c table.length; i++) {\n            const row = table[i];\n            if (!row.organization \u0026\u0026 Context.data.organization) {\n                row.organization = Context.data.organization;\n            }\n            const employment_place = employment_placements.find(f =\u003e f.id == row.substitute_employment_placement.id);\n\n            const staff = staffs.find(f =\u003e f.id == employment_place?.data.staff?.id)!;\n\n            row.substitute = staff;\n\n            await check_staff_replacement(staff, true);\n            await insertion_check(staff, true);\n            alternate_ids.push(staff.id);\n        }\n        // Context.fields.substitute.data.setFilter(fc =\u003e fc.__id.in(alternate_ids));\n    }\n}\n\nasync function validation(): Promise\u003cValidationResult\u003e {\n    let current_date = new Datetime;\n    console.log(\"validate\")\n    let kedo_settings = await ViewContext.fields.kedo_settings.app.search()\n        .where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.code.eq(\"max_total_percent_substitution\")\n        )).first();\n    let total: number = 0;\n    let alternate_ids: string[] = [];\n    const result = new ValidationResult();\n    \n    if (Context.data.inf_about_acting \u0026\u0026 Context.data.inf_about_acting.length \u003e 0) {\n        for (let i = 0; i \u003c Context.data.inf_about_acting.length; i++) {\n            let row = Context.data.inf_about_acting[i];\n            alternate_ids.push(row.substitute.id);\n            if (row.percent \u003e 0 \u0026\u0026 row.type_surcharge.code != Context.fields.inf_about_acting.fields.type_surcharge.variants.fixed_amount.code) {\n                total += row.percent\n            }\n        }\n    }\n    //console.log(alternate_ids)\n    //console.log(\"staff id\")\n    //console.log(Context.data.staff!.id)\n    //console.log(alternate_ids!.indexOf(Context.data.staff!.id) \u003e -1)\n    if (Context.data.posted_result == undefined || Context.data.posted_result.code !== Context.fields.posted_result.variants.reject.code) {\n        if (Context.data.staff \u0026\u0026 alternate_ids.indexOf(Context.data.staff!.id) \u003e -1) {\n            result.addMessage('Замещаемый не может быть выбран в качестве замещающего');\n        }\n        if ((kedo_settings \u0026\u0026 kedo_settings.data.status \u0026\u0026 kedo_settings.data.quantity) \u0026\u0026 total \u003e kedo_settings.data.quantity) {\n            result.addMessage('Максимальный суммарный процент доплаты за ИО не может быть больше ' + kedo_settings.data.quantity)\n        }\n        if (Context.data.staff \u0026\u0026 Context.data.substitute \u0026\u0026 Context.data.substitute.id == Context.data.staff.id) {\n            result.addMessage('Замещаемый не может быть выбран в качестве замещающего');\n        }\n        if (new Set(alternate_ids).size !== alternate_ids.length) {\n            result.addContextError('inf_about_acting', 'Выбор одного заместителя несколько раз не возможен');\n        }\n        if (Context.data.substitution_date \u0026\u0026 Context.data.start_date \u0026\u0026 Context.data.substitution_date.after(Context.data.start_date)) {\n            result.addContextError('substitution_date', 'Дата выбора замещения не может быть после Даты начала замещения');\n        }\n        if (Context.data.substitution_date \u0026\u0026 Context.data.end_date \u0026\u0026 Context.data.substitution_date.after(Context.data.end_date)) {\n            result.addContextError('substitution_date', 'Дата выбора замещения не может быть после Даты окончания замещения')\n        }\n        if (ViewContext.data.block_error == true) {\n            result.addMessage('Ознакомьтесь с ошибками ниже и исправьте их');\n        }\n        if (Context.data.start_date \u0026\u0026 Context.data.end_date) {\n            if (Context.data.start_date.after(Context.data.end_date)) {\n                result.addContextError('start_date', 'Дата начала ИО не может быть позже даты окончания')\n            }\n\n            if (!Context.data.start_date.after(current_date.add(new Duration(-1, 'days')))) {\n                result.addContextError('start_date', 'Дата начала ИО не может быть раньше текущей даты')\n            }\n\n            if (!Context.data.end_date.after(current_date.add(new Duration(-1, 'days')))) {\n                result.addContextError('end_date', 'Дата окончания ИО не может быть раньше текущей даты')\n            }\n            // if (new Date(Context.data.start_date.day, Context.data.start_date.month, Context.data.start_date.year) \u003c (new Date(current_date.day, current_date.month, current_date.year))) {\n            //     result.addContextError('start_date', 'Дата начала ИО не может быть раньше текущей даты')\n            // }\n            // if (new Date(Context.data.end_date.day, Context.data.end_date.month, Context.data.end_date.year) \u003c (new Date(current_date.day, current_date.month, current_date.year))) {\n            //     result.addContextError('end_date', 'Дата окончания ИО не может быть раньше текущей даты')\n            // }\n        }\n    } else {\n        ViewContext.data.inf_about_acting_show = false;\n        ViewContext.data.substitute_show = false;\n    }\n    return result\n}\n\nasync function changeRequriedFields(): Promise\u003cvoid\u003e {\n    Context.data.define_substitution_later = false;\n    Context.data.substitution_date = undefined;\n    ViewContext.data.fields_required = false;\n    if (Context.data.create_result) {\n        if (Context.data.create_result.code == Context.fields.create_result.variants.create.code) {\n            ViewContext.data.fields_required = true;\n            await subtitusuion_set();\n        }\n        if (Context.data.create_result.code == Context.fields.create_result.variants.set_later.code) {\n            Context.data.define_substitution_later = true;\n            ViewContext.data.inf_about_acting_show = false;\n            ViewContext.data.substitute_show = false;\n        }\n        if (Context.data.create_result.code == Context.fields.create_result.variants.cancel.code) {\n            ViewContext.data.inf_about_acting_show = false;\n            ViewContext.data.substitute_show = false;\n        }\n    }\n}\n\n/** Событие при изменении места занятости замещаемого сотрудника. */\nasync function staffEmploymentPlacementOnChange(): Promise\u003cvoid\u003e {\n    // Очищаем таблицу.\n    Context.data.inf_about_acting = Context.fields.inf_about_acting.create();\n\n    //await infAboutActingSetFilter();\n}\n\nclass CustomFilter {\n    constructor(private filter: any) {\n\n    }\n\n    json() {\n        return this.filter;\n    }\n}\n\n// async function infAboutActingSetFilter(): Promise\u003cvoid\u003e {\n//     if (!Context.data.staff_employment_placement) {\n//         Context.fields.inf_about_acting.fields.substitute_employment_placement.data.setFilter((f, c, g) =\u003e g.and(\n//             f.__id.eq(null)\n//         ));\n//         return;\n//     }\n\n//     const substitute_employment_place = await Context.data.staff_employment_placement.fetch();\n\n//     let ids: string[] = [];\n\n//     console.log('here 01');\n\n//     /** Очень плохой костыль, но работает как нужно. */\n//     const elems = await Context.fields.staff_employment_placement.app.search()\n//         .where((f, g) =\u003e g.and(\n//             f.__deletedAt.eq(null),\n//             f.__status.eq(Context.fields.staff_employment_placement.app.fields.__status.variants.actual),\n//             f.organization.link(substitute_employment_place.data.organization!),\n//         ))\n//         .size(10000)\n//         .all();\n\n//     if (all_staffs?.length) {\n//         ids = elems\n//             .filter(e =\u003e e.data.staff?.id != Context.data.staff?.id \u0026\u0026\n//                 all_staffs.find(item =\u003e e.data.staff \u0026\u0026\n//                     item.data.__id == e.data.staff.id \u0026\u0026\n//                     item.data.__status!.code == Context.fields.substitute.app.fields.__status.variants.signed_documents.code)\n//             )\n//             .map(e =\u003e e.data.__id);\n//     } else {\n//         ids = elems\n//             .filter(e =\u003e e.data.staff?.id != Context.data.staff?.id)\n//             .map(e =\u003e e.data.__id);\n//     }\n\n//     Context.fields.inf_about_acting.fields.substitute_employment_placement.data.setFilter((f, c, g) =\u003e g.and(\n//         f.__id.in(ids)\n//     ));\n\n//     // Context.fields.inf_about_acting.fields.substitute_employment_placement.data.setFilter((f, c, g) =\u003e g.and(\n//     //     f.__deletedAt.eq(null),\n//     //     f.__status.eq(Context.fields.inf_about_acting.fields.substitute_employment_placement.app.fields.__status.variants.actual),\n//     //     f.organization.link(substitute_employment_place.data.organization!),\n//     // ));\n// }\n\nasync function changeInstallReplacement(): Promise\u003cvoid\u003e {\n    if (Context.data.install_replacement) {\n        ViewContext.data.substitute_show = true;\n    } else {\n        ViewContext.data.substitute_show = false;\n    }\n}\n\nasync function checkLengthTable(): Promise\u003cvoid\u003e {\n    const children = document.querySelectorAll('elma-type-table-full-line') //ищем все табличные строки на странице\n    console.log(children)\n    const lastRow = children[children.length - 2];//Последняя строка - всегда футер таблицы, поэтому берем пред-предыдущую строку\n    if (Context.data.inf_about_acting!.length == 5) {\n        lastRow.style.display = 'none';//Отключаем отображение\n    } else {\n        lastRow.style.display = '';\n    }\n}\n\n",
    "clientScriptOptions": {
      "allowNamespace": true,
      "allowServer": true
    },
    "serverScripts": "/* Server scripts module */\n",
    "serverScriptOptions": {
      "allowNamespace": true
    },
    "widgetZones": [
      {
        "code": "[footer]"
      }
    ],
    "dataFieldCode": "item"
  },
  "dataNamespace": "kedo",
  "dataCode": "execution_duties",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        let all_staffs = [];\n        function show_error_message(text) {\n            ViewContext.data.show_error = true;\n            ViewContext.data.error_text = text;\n        }\n        function hide_error_message() {\n            ViewContext.data.show_error = false;\n            ViewContext.data.error_text = undefined;\n        }\n        async function onInit() {\n            ViewContext.data.fields_required = true;\n            let user = await System.users.getCurrentUser();\n            const initiator = await Context.fields.initiator.app.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.ext_user.eq(user)))\n                .first();\n            if (initiator) {\n                const initiator_employment = await Context.fields.staff_employment_placement.app.search()\n                    .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(Context.fields.staff_employment_placement.app.fields.__status.variants.actual), f.staff.link(initiator)))\n                    .size(100)\n                    .all();\n                const organizations = initiator_employment\n                    .filter(f =\u003e f.data.organization != undefined)\n                    .map(f =\u003e f.data.organization);\n                Context.fields.staff.data.setFilter((f, c, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organizations), f.__status.eq(Context.fields.substitute.app.fields.__status.variants.signed_documents)));\n                Context.fields.substitute.data.setFilter((f, c, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(organizations), f.__status.eq(Context.fields.substitute.app.fields.__status.variants.signed_documents)));\n                if (initiator.data.organization) {\n                    const organiaztion = await initiator.data.organization.fetch();\n                    if (organiaztion.data.signatories \u0026\u0026 organiaztion.data.signatories.length \u003e 0) {\n                        const signatories_app = await Promise.all(organiaztion.data.signatories.map(f =\u003e f.fetch()));\n                        const signatories = signatories_app.filter(f =\u003e f.data.ext_user\n                            \u0026\u0026 f.data.__status == f.fields.__status.variants.signed_documents);\n                        if (signatories.length \u003e 0) {\n                            Context.data.signatory = signatories[0];\n                        }\n                    }\n                    Context.data.organization = initiator.data.organization;\n                    if (initiator.data.employment_table \u0026\u0026 initiator.data.employment_table.length \u003e 0) {\n                        Context.data.oragnizations = initiator.data.employment_table.map(f =\u003e f.organization);\n                    }\n                }\n                Context.data.initiator = initiator;\n            }\n            if (Context.data.staff) {\n                let staff = await Context.data.staff.fetch();\n                Context.data.oragnization = staff.data.organization;\n            }\n            if (ViewContext.data.__formType \u0026\u0026 ViewContext.data.__formType.code == ViewContext.fields.__formType.variants.edit.code) {\n                ViewContext.data.view_result = true;\n                Context.data.started_from_vacation_process = false;\n                await subtitusuion_set();\n            }\n            ViewContext.data.show_dates_string = false;\n            await check_form();\n            all_staffs = await Context.fields.substitute.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__status.eq(Context.fields.substitute.app.fields.__status.variants.signed_documents))).size(3000).all();\n        }\n        async function subtitusuion_set() {\n            if (Context.data.type_combination) {\n                const type_combination = await Context.data.type_combination.fetch();\n                ViewContext.data.inf_about_acting_show = false;\n                ViewContext.data.substitute_show = false;\n                if (type_combination.data.code == 'substitution_only') {\n                    if (!Context.data.create_result || (Context.data.create_result \u0026\u0026 Context.data.create_result.code === Context.fields.create_result.variants.create.code)) {\n                        ViewContext.data.substitute_show = true;\n                        ViewContext.data.install_replacement_readonly = true;\n                        if (Context.data.inf_about_acting \u0026\u0026 Context.data.inf_about_acting.length \u003e 0) {\n                            for (let i = Context.data.inf_about_acting.length - 1; i \u003e= 0; i--) {\n                                Context.data.inf_about_acting.delete(i);\n                            }\n                            Context.data.inf_about_acting = Context.data.inf_about_acting;\n                        }\n                    }\n                }\n                else {\n                    ViewContext.data.inf_about_acting_show = true;\n                    ViewContext.data.install_replacement_readonly = false;\n                    await changeInstallReplacement();\n                }\n            }\n            else {\n                ViewContext.data.inf_about_acting_show = false;\n                ViewContext.data.substitute_show = false;\n                if (Context.data.inf_about_acting \u0026\u0026 Context.data.inf_about_acting.length \u003e 0) {\n                    for (let i = Context.data.inf_about_acting.length - 1; i \u003e= 0; i--) {\n                        Context.data.inf_about_acting.delete(i);\n                    }\n                    Context.data.inf_about_acting = Context.data.inf_about_acting;\n                }\n            }\n        }\n        async function check_form() {\n            console.log('check form');\n            let current_date = new Datetime;\n            hide_error_message();\n            ViewContext.data.block_error = false;\n            await check_basis_app();\n            if (Context.data.inf_about_acting \u0026\u0026 Context.data.inf_about_acting.length \u003e 0) {\n                await table_change();\n            }\n            if (Context.data.start_date \u0026\u0026 Context.data.end_date) {\n                if (Context.data.staff) {\n                }\n                if (Context.data.substitute) {\n                    await insertion_check(Context.data.substitute, true);\n                    await check_staff_replacement(Context.data.substitute, true);\n                }\n                if (Context.data.start_date.after(Context.data.end_date)) {\n                    show_error_message('Дата начала ИО не может быть позже даты окончания');\n                }\n                if (!Context.data.start_date.after(current_date.add(new Duration(-1, 'days')))) {\n                    show_error_message('Дата начала ИО не может быть раньше текущей даты');\n                }\n                if (!Context.data.end_date.after(current_date.add(new Duration(-1, 'days')))) {\n                    show_error_message('Дата окончания ИО не может быть раньше текущей даты');\n                }\n            }\n            if (Context.data.staff \u0026\u0026 Context.data.substitute \u0026\u0026 Context.data.substitute.id == Context.data.staff.id) {\n                show_error_message('Замещаемый не может быть выбран в качестве замещающего');\n            }\n        }\n        async function check_staff_replacement(staff, isSubstitute) {\n            if (staff) {\n                const s = await staff.fetch();\n                const user = s.data.ext_user;\n                if (Context.data.start_date \u0026\u0026 Context.data.end_date) {\n                    const replacement = await System.replacements.search().where((f, g) =\u003e g.and(f.absent.eq(user), g.and(f.begin.lte(Context.data.end_date), f.end.gte(Context.data.start_date)))).first();\n                    if (replacement) {\n                        show_error_message(`Внимание! По ${isSubstitute == true ? 'замещающему' : 'замещаемому'} сотруднику ${s.data.__name} уже установлено автоделегирование задач c ${replacement.data.begin.format('DD.MM.YYYY')} по ${replacement.data.end.format('DD.MM.YYYY')}\\n`);\n                    }\n                }\n            }\n        }\n        async function insertion_check(staff, isSubstitute) {\n            if (Context.data.start_date \u0026\u0026 Context.data.end_date \u0026\u0026 staff) {\n                const vacations = await ViewContext.fields.vacation.app.search()\n                    .where((f, q) =\u003e q.and(f.__deletedAt.eq(null), q.or(f.status.eq('signed;Утверждено'), f.status.eq('transfer;Оформление переноса'), f.status.eq('ongoing;В процессе')), f.kedo_staff.link(staff), q.or(q.and(f.start.gte(Context.data.start_date.getDate()), f.start.lte(Context.data.end_date.getDate())), q.and(f.end.gte(Context.data.start_date.getDate()), f.end.lte(Context.data.end_date.getDate())))))\n                    .size(10000)\n                    .all();\n                let dublicates = [];\n                if (vacations \u0026\u0026 vacations.length \u003e 0) {\n                    dublicates = dublicates.concat(vacations);\n                }\n                const staff_name = (await staff.fetch()).data.__name;\n                if (dublicates \u0026\u0026 dublicates.length \u003e 0) {\n                    let error = `Внимание! ${isSubstitute == true ? 'Замещающий сотрудник' : 'Замещаемый сотрудник'} ${staff_name} в указанный период будет отсутствовать. Причина:`;\n                    for (let dublicate of dublicates) {\n                        error += '\\n' + dublicate.data.__name + '; ';\n                    }\n                    show_error_message(error);\n                    if (isSubstitute) {\n                        ViewContext.data.block_error = true;\n                    }\n                }\n            }\n        }\n        async function check_basis_app() {\n            if (Context.data.app_basis) {\n                const app_basis = await Context.data.app_basis.fetch();\n                const app_basis_code = app_basis.code;\n                if (app_basis_code === 'vacations') {\n                    const vacation = app_basis;\n                    if (Context.data.start_date \u0026\u0026 Context.data.end_date \u0026\u0026 vacation.data.start \u0026\u0026 vacation.data.end) {\n                        if (Context.data.start_date.before(vacation.data.start)) {\n                            show_error_message('Дата начала заявки на ИО указана раньше даты начала заявки на отпуск/отсутствие');\n                            ViewContext.data.block_error = true;\n                        }\n                        if (Context.data.start_date.after(vacation.data.end)) {\n                            show_error_message('Дата начала заявки на ИО указана позже даты окончания заявки на отпуск/отсутствие');\n                            ViewContext.data.block_error = true;\n                        }\n                        if (Context.data.end_date.before(vacation.data.start)) {\n                            show_error_message('Дата окончания заявки на ИО указана раньше даты начала заявки на отпуск/отсутствие');\n                            ViewContext.data.block_error = true;\n                        }\n                        if (Context.data.end_date.after(vacation.data.end)) {\n                            show_error_message('Дата окончания заявки на ИО указана позже даты окончания заявки на отпуск/отсутствие');\n                            ViewContext.data.block_error = true;\n                        }\n                    }\n                }\n                if (app_basis_code === 'businesstrip_requests') {\n                    const businesstrip_requests_app = app_basis;\n                    const businesstrip_requests = await businesstrip_requests_app.fetch();\n                    if (Context.data.start_date \u0026\u0026 Context.data.end_date \u0026\u0026 businesstrip_requests.data.start_date \u0026\u0026 businesstrip_requests.data.end_date) {\n                        if (Context.data.start_date.before(businesstrip_requests.data.start_date)) {\n                            show_error_message('Дата начала заявки на ИО указана раньше даты начала заявки на командировку');\n                            ViewContext.data.block_error = true;\n                        }\n                        if (Context.data.start_date.after(businesstrip_requests.data.end_date)) {\n                            show_error_message('Дата начала заявки на ИО указана позже даты окончания заявки на командировку');\n                            ViewContext.data.block_error = true;\n                        }\n                        if (Context.data.end_date.before(businesstrip_requests.data.start_date)) {\n                            show_error_message('Дата окончания заявки на ИО указана раньше даты начала заявки на командировку');\n                            ViewContext.data.block_error = true;\n                        }\n                        if (Context.data.end_date.after(businesstrip_requests.data.end_date)) {\n                            show_error_message('Дата окончания заявки на ИО указана позже даты окончания заявки на командировку');\n                            ViewContext.data.block_error = true;\n                        }\n                    }\n                }\n            }\n            else {\n                hide_error_message();\n                ViewContext.data.block_error = false;\n            }\n        }\n        async function table_change() {\n            await checkLengthTable();\n            ViewContext.data.inf_about_acting_warning_visible = false;\n            ViewContext.data.inf_about_acting_warning_text = undefined;\n            let alternate_ids = [];\n            const table = Context.data.inf_about_acting;\n            if (table \u0026\u0026 table.length \u003e 0) {\n                const employment_placements = await Promise.all(table.map(f =\u003e f.substitute_employment_placement.fetch()));\n                const external_combination = employment_placements.filter(f =\u003e { var _a; return ((_a = f.data.type_employment) === null || _a === void 0 ? void 0 : _a.code) == 'external_combination'; });\n                if (external_combination.length \u003e 0) {\n                    const external_combination_staff = await Promise.all(external_combination.map(f =\u003e f.data.staff.fetch()));\n                    ViewContext.data.inf_about_acting_warning_visible = true;\n                    ViewContext.data.inf_about_acting_warning_text = `\n            \u003cdiv\u003e\n                \u003cp\u003eВнимание! Проверьте максимально допустимое кол-во часов по совместительству при оформлении замещения на:\u003c/p\u003e\n                \u003cul\u003e\n                    ${external_combination_staff.map(f =\u003e `\u003cli\u003e${f.data.__name}\u003c/li\u003e`)}\n                \u003c/ul\u003e\n            \u003c/div\u003e`;\n                }\n                const staffs = await Promise.all(employment_placements.map(f =\u003e f.data.staff.fetch()));\n                for (let i = 0; i \u003c table.length; i++) {\n                    const row = table[i];\n                    if (!row.organization \u0026\u0026 Context.data.organization) {\n                        row.organization = Context.data.organization;\n                    }\n                    const employment_place = employment_placements.find(f =\u003e f.id == row.substitute_employment_placement.id);\n                    const staff = staffs.find(f =\u003e { var _a; return f.id == ((_a = employment_place === null || employment_place === void 0 ? void 0 : employment_place.data.staff) === null || _a === void 0 ? void 0 : _a.id); });\n                    row.substitute = staff;\n                    await check_staff_replacement(staff, true);\n                    await insertion_check(staff, true);\n                    alternate_ids.push(staff.id);\n                }\n            }\n        }\n        async function validation() {\n            let current_date = new Datetime;\n            console.log(\"validate\");\n            let kedo_settings = await ViewContext.fields.kedo_settings.app.search()\n                .where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(\"max_total_percent_substitution\"))).first();\n            let total = 0;\n            let alternate_ids = [];\n            const result = new ValidationResult();\n            if (Context.data.inf_about_acting \u0026\u0026 Context.data.inf_about_acting.length \u003e 0) {\n                for (let i = 0; i \u003c Context.data.inf_about_acting.length; i++) {\n                    let row = Context.data.inf_about_acting[i];\n                    alternate_ids.push(row.substitute.id);\n                    if (row.percent \u003e 0 \u0026\u0026 row.type_surcharge.code != Context.fields.inf_about_acting.fields.type_surcharge.variants.fixed_amount.code) {\n                        total += row.percent;\n                    }\n                }\n            }\n            if (Context.data.posted_result == undefined || Context.data.posted_result.code !== Context.fields.posted_result.variants.reject.code) {\n                if (Context.data.staff \u0026\u0026 alternate_ids.indexOf(Context.data.staff.id) \u003e -1) {\n                    result.addMessage('Замещаемый не может быть выбран в качестве замещающего');\n                }\n                if ((kedo_settings \u0026\u0026 kedo_settings.data.status \u0026\u0026 kedo_settings.data.quantity) \u0026\u0026 total \u003e kedo_settings.data.quantity) {\n                    result.addMessage('Максимальный суммарный процент доплаты за ИО не может быть больше ' + kedo_settings.data.quantity);\n                }\n                if (Context.data.staff \u0026\u0026 Context.data.substitute \u0026\u0026 Context.data.substitute.id == Context.data.staff.id) {\n                    result.addMessage('Замещаемый не может быть выбран в качестве замещающего');\n                }\n                if (new Set(alternate_ids).size !== alternate_ids.length) {\n                    result.addContextError('inf_about_acting', 'Выбор одного заместителя несколько раз не возможен');\n                }\n                if (Context.data.substitution_date \u0026\u0026 Context.data.start_date \u0026\u0026 Context.data.substitution_date.after(Context.data.start_date)) {\n                    result.addContextError('substitution_date', 'Дата выбора замещения не может быть после Даты начала замещения');\n                }\n                if (Context.data.substitution_date \u0026\u0026 Context.data.end_date \u0026\u0026 Context.data.substitution_date.after(Context.data.end_date)) {\n                    result.addContextError('substitution_date', 'Дата выбора замещения не может быть после Даты окончания замещения');\n                }\n                if (ViewContext.data.block_error == true) {\n                    result.addMessage('Ознакомьтесь с ошибками ниже и исправьте их');\n                }\n                if (Context.data.start_date \u0026\u0026 Context.data.end_date) {\n                    if (Context.data.start_date.after(Context.data.end_date)) {\n                        result.addContextError('start_date', 'Дата начала ИО не может быть позже даты окончания');\n                    }\n                    if (!Context.data.start_date.after(current_date.add(new Duration(-1, 'days')))) {\n                        result.addContextError('start_date', 'Дата начала ИО не может быть раньше текущей даты');\n                    }\n                    if (!Context.data.end_date.after(current_date.add(new Duration(-1, 'days')))) {\n                        result.addContextError('end_date', 'Дата окончания ИО не может быть раньше текущей даты');\n                    }\n                }\n            }\n            else {\n                ViewContext.data.inf_about_acting_show = false;\n                ViewContext.data.substitute_show = false;\n            }\n            return result;\n        }\n        async function changeRequriedFields() {\n            Context.data.define_substitution_later = false;\n            Context.data.substitution_date = undefined;\n            ViewContext.data.fields_required = false;\n            if (Context.data.create_result) {\n                if (Context.data.create_result.code == Context.fields.create_result.variants.create.code) {\n                    ViewContext.data.fields_required = true;\n                    await subtitusuion_set();\n                }\n                if (Context.data.create_result.code == Context.fields.create_result.variants.set_later.code) {\n                    Context.data.define_substitution_later = true;\n                    ViewContext.data.inf_about_acting_show = false;\n                    ViewContext.data.substitute_show = false;\n                }\n                if (Context.data.create_result.code == Context.fields.create_result.variants.cancel.code) {\n                    ViewContext.data.inf_about_acting_show = false;\n                    ViewContext.data.substitute_show = false;\n                }\n            }\n        }\n        async function staffEmploymentPlacementOnChange() {\n            Context.data.inf_about_acting = Context.fields.inf_about_acting.create();\n        }\n        class CustomFilter {\n            constructor(filter) {\n                this.filter = filter;\n            }\n            json() {\n                return this.filter;\n            }\n        }\n        async function changeInstallReplacement() {\n            if (Context.data.install_replacement) {\n                ViewContext.data.substitute_show = true;\n            }\n            else {\n                ViewContext.data.substitute_show = false;\n            }\n        }\n        async function checkLengthTable() {\n            const children = document.querySelectorAll('elma-type-table-full-line');\n            console.log(children);\n            const lastRow = children[children.length - 2];\n            if (Context.data.inf_about_acting.length == 5) {\n                lastRow.style.display = 'none';\n            }\n            else {\n                lastRow.style.display = '';\n            }\n        }\n        return {\n            show_error_message,\n            hide_error_message,\n            onInit,\n            subtitusuion_set,\n            check_form,\n            check_staff_replacement,\n            insertion_check,\n            check_basis_app,\n            table_change,\n            validation,\n            changeRequriedFields,\n            staffEmploymentPlacementOnChange,\n            changeInstallReplacement,\n            checkLengthTable\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "show_error_message",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "hide_error_message",
        "parameters": [],
        "type": ""
      },
      {
        "name": "onInit",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "subtitusuion_set",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "check_form",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "check_staff_replacement",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "insertion_check",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          },
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": "[object Object]"
      },
      {
        "name": "check_basis_app",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "table_change",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "validation",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "changeRequriedFields",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "staffEmploymentPlacementOnChange",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "changeInstallReplacement",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "checkLengthTable",
        "parameters": [],
        "type": "[object Object]"
      }
    ],
    "clientDependencies": {
      "applications": [
        {
          "namespace": "kedo",
          "code": "employment_directory"
        },
        {
          "namespace": "kedo",
          "code": "staff"
        }
      ],
      "collections": [
        {
          "namespace": "kedo",
          "code": "staff"
        },
        {
          "namespace": "kedo",
          "code": "employment_directory"
        },
        {
          "namespace": "system",
          "code": "substitutions"
        },
        {
          "namespace": "kedo",
          "code": "holidays"
        },
        {
          "namespace": "kedo",
          "code": "settings"
        }
      ],
      "pages": []
    }
  },
  "__createdAt": "2024-05-28T13:47:45.342369579Z",
  "__createdBy": "af06abd7-3dd9-4097-a87c-2cb69da9d9fb",
  "__updatedAt": "2024-06-06T10:50:52.275004713Z",
  "__updatedBy": "af06abd7-3dd9-4097-a87c-2cb69da9d9fb",
  "__deletedAt": null
}
