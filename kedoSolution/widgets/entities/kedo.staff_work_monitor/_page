{"__id":"018c8758-1f5d-7b92-98b2-af21c623afeb","namespace":"kedo.staff_work_monitor","code":"_page","__name":"График отсутствий","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":4,"hidden":true,"draft":false,"readonly":false,"descriptor":{"types":["page"],"template":{"id":"0264e156-1779-48d7-9a53-2033586ec6e5","descriptor":"custom-page","values":{"systemFunctions":{}},"content":{"":[{"id":"68426b41-2039-4f85-accd-1b69de3078da","descriptor":"page-header","content":{"[title]":[{"id":"60b37384-ccfd-4b48-a816-395de0740a9d","descriptor":"label","values":{"text":"График отсутствий"}}]}},{"id":"fcc0f3e8-6d6e-4049-968d-37cc7909b0e7","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    app-page-wrapper {\n        overflow-y: scroll;\n    }\n\n    .app-page-content {\n        overflow-y: hidden;\n    }\n\n    .elma-form-row.ng-untouched.ng-pristine.ng-valid  {\n        flex-direction: row;\n        flex-wrap: nowrap;\n        font-size: 1.5rem;\n        margin-bottom: 0;\n    }\n\n    .elma-form-row.ng-untouched.ng-dirty.ng-valid  {\n        flex-direction: row;\n        flex-wrap: nowrap;\n        font-size: 1.5rem;\n        margin-bottom: 0;\n    }\n\n    .elma-form-row.ng-untouched.ng-dirty.ng-valid .elma-form-label {\n        flex-direction: row;\n        flex-wrap: nowrap;\n        font-size: 1.5rem;\n        margin-bottom: 0;\n    }\n    \n    .elma-form-row.ng-untouched.ng-pristine.ng-valid elma-form-control {\n        flex-shrink: 2;\n    }\n\n    .elma-form-row.ng-untouched.ng-dirty.ng-valid elma-form-control {\n        flex-shrink: 2;\n    }\n\n    .elma-form-row.ng-untouched.ng-pristine.ng-valid span {\n        font-size: 1.5rem;\n    }\n\n    .elma-form-row.ng-untouched.ng-dirty.ng-valid span {\n        font-size: 1.5rem;\n    }\n\n    .loader-spinner {\n        width: 25px;\n        height: 25px;\n        position: absolute;\n        top: 23.5rem;\n        left: 32vw;\n        animation: rotation 0.5s linear infinite;\n        z-index: 9999\n    }\n\n    .glow {\n        animation: glow 1s ease-in-out infinite alternate;\n    }\n\n    @keyframes glow {\n        from {\n            box-shadow: \"\"\n        }\n        to {\n            box-shadow: 0px 0px 25px 8px rgb(28 112 191 / 20%);\n        }\n    }\n\n    @keyframes rotation {\n        100% { \n            -webkit-transform: rotate(360deg); \n            transform:rotate(360deg); \n        } \n    }\n\n    .button-wrapper {\n        width: 100%;\n        position: relative;\n    }\n\n    .show-types {\n        padding: 3px 10px;\n        border: 1px solid #d8d6d6;\n        border-radius: 0.4rem;\n        font-weight: 400;\n        font-size: 14px;\n        font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,Liberation Sans,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",Segoe UI Symbol,\"Noto Color Emoji\";\n        background-color: white;\n        width: 100%;\n        height: 32px;\n        text-align: left;\n        position: relative;\n        z-index: 1050;\n        cursor: pointer;\n    }\n\n    .dropdown-arrow {\n        position: absolute;\n        content: \"\";\n        width: 5px;\n        height: 5px;\n        border-bottom: 1px solid #303030;\n        border-right: 1px solid #303030;\n        top: 12px;\n        right: 0.9rem;\n        transform: rotate(45deg);\n    }\n\n    .hidden-types {\n        position: absolute;\n        background-color: white;\n        padding: 5px;\n        opacity: 0;\n        transition: opacity 0.1s;\n        width: 100%;\n        z-index: -1;\n        border-radius: 0.3rem;\n        display: flex;\n        flex-direction: column;\n        box-shadow: 0 0px 0px 0px white,\n                    0 0px 0px 0px white,\n                    3px 0 10px -3px rgba(183, 183, 183, 0.8),\n                    -3px 0 10px -3px rgba(183, 183, 183, 0.8);\n    }\n\n    .hidden-types.expand {\n        z-index: 1050;\n        opacity: 1;\n    }\n\n    .vacation-variant input[type=checkbox] {\n        display: none;\n        cursor: pointer;\n        position: relative;\n    }\n\n    .vacation-variant input[type=checkbox]:after {\n        content: \"\";\n        position: absolute;\n        left: 0px;\n        top: 0px;\n        width: 16px;\n        height: 16px;\n        border: 1px solid #e4e4e4;\n        border-top: 2px solid #dedede;\n        background-color: #ffffff;\n        border-radius: 10%;\n    }\n\n    .vacation-variant input[type=checkbox]:checked + div {\n        display: block;\n    }\n\n    .flag {\n        display: none;\n        transform: rotate(42deg);\n        position: absolute;\n        border-right: 1px solid #295a72;\n        border-bottom: 1px solid #295a72;\n        width: 3px;\n        height: 8px;\n        right: 0.8rem;\n        top: 1.2rem;\n    }\n\n    .vacation-variant {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 10px 5px;\n        height: 30px;\n        position: relative;\n    }\n\n    .vacation-variant__label {\n        flex-grow: 1;\n        font-weight: 400;\n        font-size: 14px;\n        font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,Liberation Sans,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",Segoe UI Symbol,\"Noto Color Emoji\";\n    }\n\n    .arrow {\n        border: solid black;\n        border-width: 0 1px 1px 0;\n        display: inline-block;\n        padding: 2.3px;\n        transform: rotate(45deg);\n        position: absolute;\n        top: 24rem;\n        left: 25rem;\n    }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"css"}},{"id":"9adf9f8f-af75-48cf-8d7c-5dda5605e561","descriptor":"page-content","values":{"__styles":"","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"2d3716e6-9d61-48cd-8f6a-a628b8df17c3","descriptor":"row","values":{"__renderContentAsync":false,"__styles":"background-color: #f7f7f7","__isConstValues":[]},"content":{"":[{"id":"b4c0e800-ab95-44e6-856f-248234f39fe5","descriptor":"column","content":{"":[{"id":"fa3d7970-9983-4b8e-ad09-34f0404602bb","descriptor":"dynamic-form-row","values":{"control":{"path":["organization"]},"__readOnly":null,"showDisplayName":true,"tooltip":null,"required":false,"hideEmpty":false,"bindingMode":false,"showCreateItem":false,"__isConstValues":[]}},{"id":"d0a2c672-6ac1-4115-aec9-4db36b7618a5","descriptor":"dynamic-form-row","values":{"control":{"path":["subdivision"]},"showCreateItem":false,"__isConstValues":[],"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":null,"bindingMode":false,"showDisplayName":true}},{"id":"5142461e-b709-48da-a5e7-26da92805d6e","descriptor":"dynamic-form-row","values":{"bindingMode":false,"__isConstValues":[],"control":{"path":["staff"]},"required":false,"hideEmpty":false,"__readOnly":null,"tooltip":null,"showCreateItem":false,"showDisplayName":true}}]}},{"id":"66915797-b61b-4ac6-8373-adae6c3bee4a","descriptor":"column","content":{"":[{"id":"11096cda-8938-42c7-ab0c-6ef86c2214e1","descriptor":"dynamic-form-row","values":{"control":{"path":["absence_type"]},"required":false,"hideEmpty":false,"bindingMode":false,"showDisplayName":true,"tooltip":null,"__readOnly":null,"onChangeValue":{"kind":"Function","name":"handleVariantsDisplay","type":"client"},"__isConstValues":[]}},{"id":"bc4ac286-face-4fe6-a552-f1f5205d9f72","descriptor":"code","values":{"html":"\u003c% if (Context.data.show_vacation_variants) { %\u003e    \n    \u003capp-dynamic-form-row _nghost-snr-c169=\"\"\u003e\n        \u003celma-form-row _ngcontent-ftt-c169=\"\" _nghost-ftt-c193=\"\" class=\"elma-form-row ng-untouched ng-pristine ng-valid\"\u003e\n            \u003celma-form-label _ngcontent-ftt-c193=\"\" _nghost-ftt-c192=\"\" class=\"elma-form-label\"\u003e\n                \u003cspan _ngcontent-ftt-c192=\"\" class=\"labelName\"\u003e\n                    Виды отсутствия\n                \u003c/span\u003e\n            \u003c/elma-form-label\u003e\n            \u003celma-form-control _ngcontent-wxm-c193=\"\" _nghost-wxm-c191=\"\" class=\"elma-form-control text-base\"\u003e\n                \u003cdiv class=\"button-wrapper\"\u003e\n                    \u003cbutton class=\"show-types\"\u003e\n                        \u003cspan class=\"dropdown-arrow\"\u003e\n\n                        \u003c/span\u003e\n                    \u003c/button\u003e\n                    \u003cdiv class=\"hidden-types\"\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    Без сохранения заработной платы\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\"  data-variant=\"unpaid\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    Больничный\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"sick-leave\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    По графику отпусков\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"basic\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    Дополнительный отдых\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"additional\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    По беременности и родам\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"pregnancy\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    По уходу за ребенком\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"child_care\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    По учёбе\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"study\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    Ежегодный оплачиваемый отпуск\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"scheduled\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    Исполнение гос. обязанностей\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"duty\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    Уход за детьми-инвалидами\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"invalid_child\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"vacation-variant\"\u003e\n                                \u003cdiv class=\"vacation-variant__label\"\u003e\n                                    Сдача крови\n                                \u003c/div\u003e\n                                \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"blood_donation\"\u003e\n                                \u003cdiv class=\"flag\"\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003c% if (!Context.data.vacations_exists) { %\u003e\n                                \u003cdiv class=\"vacation-variant\"\u003e\n                                    \u003cdiv class=\"vacation-variant__label\"\u003e\n                                        Без сохранения заработной платы\n                                    \u003c/div\u003e\n                                    \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\"  data-variant=\"application_for_leave_without_pay\"\u003e\n                                    \u003cdiv class=\"flag\"\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"vacation-variant\"\u003e\n                                    \u003cdiv class=\"vacation-variant__label\"\u003e\n                                        Ежегодный оплачиваемый отпуск\n                                    \u003c/div\u003e\n                                    \u003cinput type=\"checkbox\" class=\"vacation-variant__checkbox\" data-variant=\"paid_leave\"\u003e\n                                    \u003cdiv class=\"flag\"\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c% } %\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/elma-form-control\u003e\n        \u003c/elma-form-row\u003e\n    \u003c/app-dynamic-form-row\u003e\n\u003c% } %\u003e\n    \u003cscript\u003e\n        var dropdown = document.querySelector(\".hidden-types\");\n        var showButton = document.querySelector(\".show-types\");\n        var variantLabels = document.querySelectorAll(\".vacation-variant\");\n        var variantCheckboxes = document.querySelectorAll(\".vacation-variant__checkbox\");\n        var restrictVariants = [\n            \"vacation-variant\",\n            \"vacation-variant__label\",\n            \"vacation-variant__checkbox\",\n            \"flag\"\n        ];\n\n\n        function showVariants(e) {\n            console.log(\"showVariants\")\n            if (dropdown.classList.contains(\"expand\")) {\n                variantCheckboxes.forEach(variant =\u003e variant.style.display = \"none\")\n                showButton.style.border = \"\"\n                showButton.style.boxShadow = \"\"\n                dropdown.classList.remove(\"expand\")\n            } else {\n                variantCheckboxes.forEach(variant =\u003e variant.style.display = \"block\")\n                showButton.style.border = \"1px solid #1e6599\"\n                showButton.style.boxShadow = \"0px 0px 3px 1px rgb(66 136 186)\"\n                dropdown.classList.add(\"expand\")\n            }\n        };\n        \n        function hideVariants(e) {\n            console.log(\"hideVariants\")\n            if (e.target != showButton \u0026\u0026 !restrictVariants.includes(e.target.className)) {\n                variantCheckboxes.forEach(variant =\u003e variant.style.display = \"none\")\n                showButton.style.border = \"\"\n                showButton.style.boxShadow = \"\"\n                dropdown.classList.remove(\"expand\")\n            }\n        }\n\n        if (variantCheckboxes) {\n            variantCheckboxes.forEach(el =\u003e el.addEventListener(\"click\", \u003c%= Scripts%\u003e.addVacationType));\n        };\n        if (showButton) {\n            showButton.addEventListener(\"click\", showVariants);\n        };\n    \u003c/script\u003e","hideContent":true,"contentPlaceholder":"custom dropdown"}},{"id":"00e8daef-8c81-48ce-847c-2916921606cf","descriptor":"dynamic-form-row","values":{"__isConstValues":[],"showDisplayName":true,"control":{"path":["staff_types"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":null,"bindingMode":false}},{"id":"60898100-cd92-48ca-9b9b-f310ab01726e","descriptor":"row","values":{"__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"d40d0175-63f3-445d-8943-cdfbeb3357d2","descriptor":"column","content":{"":[{"id":"81f042ec-31c1-4023-a636-73410a5a472d","descriptor":"dynamic-form-row","values":{"__readOnly":null,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["show_overwork"]},"tooltip":null,"required":false,"hideEmpty":false}}]}},{"id":"f02bb814-b5e0-4d25-a971-404d4b24c2bf","descriptor":"column","content":{"":[]}}]}}]}}]}},{"id":"c8724bcb-d682-4cd8-9036-efd41d52f4b9","descriptor":"row-layout","values":{"__styles":"background-color: #f7f7f7","__isConstValues":[],"elementsAlignEnum":[{"code":"left","name":"shared.common.row-layout@widget-elements-align-left"}],"__renderContentAsync":false},"content":{"":[{"id":"c0585e21-bc24-44d9-827b-ab253ab1edf8","descriptor":"html","descriptorVersion":3,"values":{"html":"\u003cp\u003e\u003cspan style=\"color: #666;\"\u003eПериод\u003c/span\u003e\u003c/p\u003e"}}]}},{"id":"48517fcd-6268-4f37-9eb3-c6bf5c81ae42","descriptor":"row","values":{"__styles":"background-color: #f7f7f7","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"60c00457-0b51-4f22-899f-a17d1442af6a","descriptor":"column","values":{"__isConstValues":[],"__renderContentAsync":false,"__styles":"flex-grow: 0; justify-content: center;"},"content":{"":[{"id":"1dc94708-b7bc-4b4a-9e5f-99d223376f91","descriptor":"dynamic-form-row","values":{"bindingMode":false,"__isConstValues":[],"showDisplayName":false,"required":false,"hideEmpty":false,"__readOnly":null,"control":{"path":["from_date"]},"tooltip":null,"__styles":"min-width: auto;"}}]}},{"id":"922fedde-c6d3-4303-b7e4-9ef20abf2045","descriptor":"column","values":{"__styles":"justify-content: center; flex-grow: 0;","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"bb4ec56a-ff0f-4125-9ea7-d8af79ed4e42","descriptor":"html","descriptorVersion":3,"values":{"html":"\u003cp\u003e\u003cspan\u003e—\u003c/span\u003e\u003c/p\u003e"}}]}},{"id":"fe6f07c9-58bb-42b9-9e92-590fed99fba0","descriptor":"column","values":{"__styles":"flex-grow: 0; justify-content: center;","__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"dfe3ed8e-d5d9-47b4-871d-ee4c48ae4673","descriptor":"dynamic-form-row","values":{"tooltip":null,"hideEmpty":false,"bindingMode":false,"control":{"path":["to_date"]},"__styles":"min-width: auto;","required":false,"__readOnly":null,"__isConstValues":[],"showDisplayName":false}}]}},{"id":"211927dd-823d-4376-b6d7-9f3171fc0676","descriptor":"column","values":{"__isConstValues":[],"__renderContentAsync":false},"content":{"":[{"id":"77fff33f-ad65-4bf1-9e90-ecd5af2fb1cb","descriptor":"button","values":{"__isConstValues":[],"processPopoverSize":[{"code":"default","name":"shared.common.button@widget-process-popover-size-default","translate":true}],"runInPopover":null,"runActionEnum":[{"code":"undefined","name":"shared.common.button@widget-runAction-none","translate":true}],"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"view":"default","label":"Найти отсутствия","action":null,"onClick":{"kind":"Function","name":"getAbsences","type":"client"}}}]}}]}},{"id":"21d25068-3bd0-4d9a-ade2-e9a234e7a969","descriptor":"code","values":{"html":"\u003c% if (Context.data.absences_empty) { %\u003e\n    \u003cdiv class=\"empty-absence\"\u003e\n        \u003ch3\u003eОтсутствия не найдены\u003c/h3\u003e\n    \u003c/div\u003e\n\u003c% } %\u003e\n\u003cdiv class=\"calendar-schedule calendar-schedule__container\"\u003e\n\n    \u003cdiv class=\"calendar-schedule__left-menu\"\u003e\n        \u003cdiv class=\"calendar-schedule__left-menu-header\"\u003e\n            \u003cp class=\"calendar-schedule__header-text\"\u003eСотрудник\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"calendar-schedule__left-menu-container\"\u003e\u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"calendar-schedule__calendar-wrapper\"\u003e\n\n    \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"calendar-legend\"\u003e\n    \u003cdiv class=\"calendar-legend__vacation_types\"\u003e\n        \u003ch4\u003eВиды отсутствий\u003c/h4\u003e\n        \u003cdiv class=\"calendar-legend-row\"\u003e\n            \u003cdiv class=\"calendar-legend-row__dot\" style=\"background-color: #FFA900\"\u003e\u003c/div\u003e\n            \u003cdiv class=\"calendar-legend-row__label\"\u003eДекрет (По беременности, по уходу за ребёнком)\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"calendar-legend-row\"\u003e\n            \u003cdiv class=\"calendar-legend-row__dot\" style=\"background-color: #8F04A8\"\u003e\u003c/div\u003e\n            \u003cdiv class=\"calendar-legend-row__label\"\u003eБольничный\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"calendar-legend-row\"\u003e\n            \u003cdiv class=\"calendar-legend-row__dot\" style=\"background-color: #6BAAD8\"\u003e\u003c/div\u003e\n            \u003cdiv class=\"calendar-legend-row__label\"\u003eПрочие отсутствия\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"calendar-legend-row\"\u003e\n            \u003cdiv class=\"calendar-legend-row__dot\" style=\"background-color: #6BD67C\"\u003e\u003c/div\u003e\n            \u003cdiv class=\"calendar-legend-row__label\"\u003eКомандировка\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"calendar-legend-row\"\u003e\n            \u003cdiv class=\"calendar-legend-row__dot\" style=\"background-color: #FF7976\"\u003e\u003c/div\u003e\n            \u003cdiv class=\"calendar-legend-row__label\"\u003eОтсутствие с запретом на отзыв\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"calendar-legend-row\"\u003e\n            \u003cdiv class=\"time-tracking-dot\" style=\"display: inline-block; position: static\"\u003e\u003c/div\u003e\n            \u003cdiv class=\"calendar-legend-row__label\"\u003eПереработки\u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003ctemplate class=\"left-menu__template\"\u003e\n    \u003cdiv class=\"left-menu__item\"\u003e\n        \u003cdiv class=\"left-menu__content-wrapper\"\u003e\n            \u003cp class=\"left-menu__item-text\"\u003e\n\n            \u003c/p\u003e\n            \u003cdiv class=\"left-menu__correction-icon\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"user-card\"\u003e\n            \u003cdiv class=\"user-card__content\"\u003e\n                \u003cdiv class=\"user-card__left-side-content\"\u003e\n                    \u003cdiv class=\"user-card__name-container\"\u003e\n                        \u003cp class=\"user-card__name\"\u003e\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"user-card__phone-container\"\u003e\n                        \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                            \u003cpath\n                                d=\"M15.1326 10.312L11.9579 8.95109C11.6729 8.82989 11.3563 8.80427 11.0555 8.87807C10.7548 8.95187 10.486 9.12112 10.2895 9.36046L9.26758 10.6105C7.62832 9.71703 6.281 8.37047 5.38664 6.73171L6.63664 5.70984C6.87598 5.51309 7.0452 5.24416 7.11899 4.94324C7.19278 4.64233 7.16718 4.32562 7.04601 4.04046L5.68726 0.867965C5.55612 0.559222 5.32033 0.306597 5.02135 0.154506C4.72237 0.00241575 4.37934 -0.0394032 4.05258 0.0364024L1.10914 0.71484C0.793309 0.786515 0.511324 0.963658 0.309661 1.21707C0.107999 1.47048 -0.00130566 1.78504 -0.000236369 2.1089C-0.000236369 9.80453 6.23976 16.0027 13.8923 15.9995C14.2161 16.0005 14.5305 15.8911 14.7839 15.6894C15.0372 15.4877 15.2142 15.2056 15.2857 14.8898L15.9638 11.9455C16.0386 11.6189 15.9963 11.2766 15.8444 10.978C15.6924 10.6795 15.4405 10.4438 15.1326 10.312ZM13.8329 14.5023C7.03351 14.4711 1.53101 8.96828 1.49976 2.16515L4.33383 1.51203L5.64914 4.5814L3.52133 6.32234C4.97101 9.41609 6.58976 11.0295 9.67758 12.4786L11.4179 10.3502L14.4863 11.6661L13.8329 14.5023Z\"\n                                fill=\"#8C8C8C\" /\u003e\n                        \u003c/svg\u003e\n                        \u003cp class=\"user-card__phone\"\u003e\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"user-card__email-container\"\u003e\n                        \u003csvg width=\"17\" height=\"17\" viewBox=\"0 0 17 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n                            \u003cpath\n                                d=\"M15.4062 2.125H1.59375C0.713535 2.125 0 2.83854 0 3.71875V13.2812C0 14.1615 0.713535 14.875 1.59375 14.875H15.4062C16.2865 14.875 17 14.1615 17 13.2812V3.71875C17 2.83854 16.2865 2.125 15.4062 2.125ZM15.4062 3.71875V5.0736C14.6618 5.67986 13.4749 6.62256 10.9375 8.6094C10.3784 9.04925 9.27071 10.1059 8.5 10.0936C7.72942 10.1061 6.6214 9.04908 6.06246 8.6094C3.52551 6.62286 2.33833 5.67996 1.59375 5.0736V3.71875H15.4062ZM1.59375 13.2812V7.11868C2.35457 7.72467 3.4335 8.57504 5.07802 9.86279C5.80374 10.434 7.07466 11.6951 8.5 11.6875C9.91834 11.6951 11.1732 10.4523 11.9217 9.86305C13.5662 8.57534 14.6454 7.72474 15.4062 7.11872V13.2812H1.59375Z\"\n                                fill=\"#8C8C8C\" /\u003e\n                        \u003c/svg\u003e\n                        \u003ca href=\"\" class=\"user-card__email\"\u003e\u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"user-card__right-side-content\"\u003e\n                    \u003cdiv class=\"user-card__image-container\"\u003e\n                        \u003cp class=\"user-card__image-text\"\u003e\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003ctemplate class=\"template-calendar-week\"\u003e\n    \u003cdiv class=\"calendar__week-wrapper\"\u003e\n        \u003cdiv class=\"calendar__week-header\"\u003e\n            \u003cdiv class=\"calendar__week-header-top\"\u003e\n                \u003cp class=\"calendar__week-header-text\"\u003e\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"calendar__days-wrapper\"\u003e\n            \u003cdiv class=\"calendar__day\" data-day=\"0\"\u003e\n                \u003cdiv class=\"calendar__week-day\"\u003e\n                    \u003cp\u003eпн\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__day-number\"\u003e\n                    \u003cp class=\"calendar__day-number_text\"\u003e\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__column-day-container\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"calendar__day\" data-day=\"1\"\u003e\n                \u003cdiv class=\"calendar__week-day\"\u003e\n                    \u003cp\u003eвт\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__day-number\"\u003e\n                    \u003cp class=\"calendar__day-number_text\"\u003e\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__column-day-container\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"calendar__day\" data-day=\"2\"\u003e\n                \u003cdiv class=\"calendar__week-day\"\u003e\n                    \u003cp\u003eср\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__day-number\"\u003e\n                    \u003cp class=\"calendar__day-number_text\"\u003e\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__column-day-container\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"calendar__day\" data-day=\"3\"\u003e\n                \u003cdiv class=\"calendar__week-day\"\u003e\n                    \u003cp\u003eчт\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__day-number\"\u003e\n                    \u003cp class=\"calendar__day-number_text\"\u003e\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__column-day-container\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"calendar__day\" data-day=\"4\"\u003e\n                \u003cdiv class=\"calendar__week-day\"\u003e\n                    \u003cp\u003eпт\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__day-number\"\u003e\n                    \u003cp class=\"calendar__day-number_text\"\u003e\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__column-day-container\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"calendar__day\" data-day=\"5\"\u003e\n                \u003cdiv class=\"calendar__week-day\"\u003e\n                    \u003cp\u003eсб\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__day-number\"\u003e\n                    \u003cp class=\"calendar__day-number_text\"\u003e\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__column-day-container\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"calendar__day\" data-day=\"6\"\u003e\n                \u003cdiv class=\"calendar__week-day\"\u003e\n                    \u003cp\u003eвс\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__day-number\"\u003e\n                    \u003cp class=\"calendar__day-number_text\"\u003e\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"calendar__column-day-container\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e","hideContent":true,"contentPlaceholder":"gantt html"}},{"id":"140b053a-ff72-4834-b923-5a47cabe3fef","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    .loader-wrapper {\n        z-index: 9999;\n        background-color: rgba(0, 0, 0, 0.1);\n        position: absolute;\n        width: 100%;\n        height: 100%;\n    }\n\n    .empty-absence {\n        text-align: center;\n        margin-top: 10px;\n    }\n\n    .calendar-schedule__container {\n        display: flex;\n        flex-wrap: nowrap;\n    }\n\n    .calendar-schedule__left-menu {\n        min-width: 30rem;\n    }\n\n    .calendar-schedule__left-menu-header {\n        height: 6.3rem;\n        background-color: #f7f7f7;\n        padding: 10px 24px;\n    }\n\n    .calendar-schedule__header-text {\n        font-weight: 600;\n        font-size: 15px;\n        line-height: 22px;\n\n        color: #252525;\n\n        margin: 0;\n    }\n\n    .calendar-schedule__left-menu-container {\n        padding: 8px 0;\n    }\n\n    .left-menu__item {\n        position: relative;\n        padding: 6px 24px;\n\n        cursor: pointer;\n    }\n\n    .left-menu__content-wrapper {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .left-menu-item--correction {\n        background-color: #f4fafe;\n    }\n\n    .left-menu-item--correction .left-menu__correction-icon {\n        min-width: 14px;\n        min-height: 14px;\n        background-image: url(\"data:image/svg+xml,%3Csvg width='14' height='14' viewBox='0 0 14 14' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M14 1.5V12.5C14 13.3284 13.3284 14 12.5 14H1.5C0.671562 14 0 13.3284 0 12.5V1.5C0 0.671562 0.671562 0 1.5 0H12.5C13.3284 0 14 0.671562 14 1.5ZM12.5 12.3125V1.6875C12.5 1.63777 12.4802 1.59008 12.4451 1.55492C12.4099 1.51975 12.3622 1.5 12.3125 1.5H1.6875C1.63777 1.5 1.59008 1.51975 1.55492 1.55492C1.51975 1.59008 1.5 1.63777 1.5 1.6875V12.3125C1.5 12.3622 1.51975 12.4099 1.55492 12.4451C1.59008 12.4802 1.63777 12.5 1.6875 12.5H12.3125C12.3622 12.5 12.4099 12.4802 12.4451 12.4451C12.4802 12.4099 12.5 12.3622 12.5 12.3125ZM8.3125 10C8.3125 10.7237 7.72372 11.3125 7 11.3125C6.27628 11.3125 5.6875 10.7237 5.6875 10C5.6875 9.27628 6.27628 8.6875 7 8.6875C7.72372 8.6875 8.3125 9.27628 8.3125 10ZM5.76969 3.39372L5.98219 7.64372C5.99216 7.84331 6.15691 8 6.35672 8H7.64328C7.84309 8 8.00784 7.84331 8.01781 7.64372L8.23031 3.39372C8.24103 3.17953 8.07025 3 7.85578 3H6.14422C5.92975 3 5.75897 3.17953 5.76969 3.39372Z' fill='%231E6599'/%3E%3C/svg%3E\");\n        align-self: center;\n        background-repeat: no-repeat;\n    }\n\n    .left-menu__item-text {\n        width: 100%;\n        font-weight: 400;\n        font-size: 15px;\n        line-height: 22px;\n\n        color: #1e6599;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n\n        margin: 0;\n    }\n\n    .calendar-schedule__calendar-wrapper {\n        overflow-x: scroll;\n        display: flex;\n        flex-wrap: nowrap;\n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n    }\n\n    .calendar__week-wrapper {\n        \n        height: 100%;\n        border: 1px solid #d9d9d9;\n        border-right: 0;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .calendar__week-wrapper:last-child {\n        border-right: 1px solid #d9d9d9;\n    }\n\n    .calendar__week-header {}\n\n    .calendar__week-header-top {\n        background-color: #f0f0f0;\n    }\n\n    .calendar__week-header-text {\n        font-size: 13px;\n        line-height: 20px;\n\n        color: #252525;\n\n        margin: 0;\n        padding-left: 3px;\n    }\n\n    .calendar__week-days {\n        display: flex;\n    }\n\n    .calendar__day-number {\n        font-size: 13px;\n        line-height: 20px;\n        color: #595959;\n        display: flex;\n        justify-content: center;\n        height: 2rem;\n        border-bottom: 1px solid #f0f0f0;\n    }\n\n    .calendar__day-number_text {\n        color: #9d9d9d;\n    }\n\n    .calendar__week-day {\n        font-size: 13px;\n        line-height: 20px;\n        color: #595959;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .calendar__week-day p {\n        margin: 0;\n    }\n\n    .calendar__days-wrapper {\n        flex-grow: 1;\n\n        display: flex;\n    }\n\n    .calendar__day {\n        flex-grow: 1;\n        border-right: 1px solid #f0f0f0;\n        display: flex;\n        flex-direction: column;\n        width: 1.5rem;\n    }\n\n    .calendar__day:last-child {\n        border-right: 0;\n    }\n\n    .calendar__day--weekend .calendar__week-day {\n        background-color: #f4fafe;\n    }\n\n    .calendar__day--weekend .calendar__week-day p {\n        color: #367eb2;\n    }\n\n    .calendar__day--weekend .calendar__column-day-container {\n        background-color: #f4fafe;\n    }\n\n    .calendar-schedule__calendar-wrapper::-webkit-scrollbar {\n        height: 8px;\n    }\n\n    /* Track */\n    .calendar-schedule__calendar-wrapper::-webkit-scrollbar-track {\n        background: #fff;\n    }\n\n    /* Handle */\n    .calendar-schedule__calendar-wrapper::-webkit-scrollbar-thumb {\n        background: #c4c4c4;\n        border-radius: 10px;\n    }\n\n    .calendar-schedule__calendar-wrapper::-webkit-scrollbar-thumb:hover {\n        background: #a4a4a4;\n    }\n\n    .calendar__column-day-container {\n        padding: 8px 0;\n        flex-grow: 1;\n    }\n\n    .day-cell {\n        height: 20px;\n        margin: 6px 0 14.3px;\n        position: relative;\n    }\n\n    .calendar-legend {\n        display: flex;\n        gap: 10px;\n    }\n\n    .calendar-legend__absences {\n        display: flex;\n        flex-direction: column;\n    }\n    .calendar-legend-label {\n        \n    }\n    .calendar-legend-row {\n        display: flex;\n        gap: 5px;\n        align-items: center\n    }\n\n    .calendar-legend-row__label {\n        \n    }\n\n    .calendar-legend-row__dot {\n        height: 3px;\n        width: 20px;\n        display: inline-block;\n    }\n\n    .vacation-bar {\n        height: 100%;\n        position: absolute;\n        z-index: 200;\n        display: flex;\n        transition: all 0.3s;\n        border-radius: 2px;\n        pointer-events: none\n    }\n\n    .vacation-bar .vacation-bar__tooltip {\n        min-width: 300px;\n        color: white;\n        visibility: hidden;\n        position: absolute;\n        background-color: #4f7fa1;\n        text-align: center;\n        padding: 5px 8px;\n        border-radius: 4px;\n        z-index: 500;\n        opacity: 0;\n        transition: opacity .3s;\n        pointer-events: none;\n    }\n\n    .vacation-bar:hover {\n        outline: 1px solid white;\n    }\n\n    .vacation-bar:hover + .vacation-bar__tooltip {\n        padding: 0;\n        visibility: visible;\n        opacity: 1;\n    }\n\n    .vacation-bar--correction {\n        outline: 1px solid white;\n    }\n\n    .vacation-bar--correction:hover {\n        outline: 1px solid white;\n    }\n\n    .vacation-bar--correction:hover .vacation-bar__tooltip {\n        outline: 1px solid white;\n        visibility: hidden;\n        opacity: 0;\n    }\n\n    .vacation-bar__tooltip {\n        min-width: 300px;\n        max-width: min-content;\n        color: white;\n        visibility: hidden;\n        position: absolute;\n        background-color: #4f7fa1;\n        text-align: center;\n        padding: 5px 8px;\n        border-radius: 4px;\n        z-index: 500;\n        opacity: 0;\n        bottom: calc(100% + 8px);\n        right: 50%;\n        transform: translateX(50%);\n        transition: opacity .3s;\n        pointer-events: none;\n    }\n\n    .vacation-bar__tooltip p {\n        color: #fff;\n        margin: 0;\n        white-space: nowrap;\n    }\n\n    .vacation-bar--correction .vacation-bar__part {\n        background: #ffccce;\n    }\n\n    .vacation-bar--correction .vacation-bar__part--dashed {\n        background: background: repeating-linear-gradient(45deg, white 0, white 2px, rgb(107 170 216 / 0%) 3px, rgb(107 170 216 / 0%) 5px);\n    }\n\n    .vacation-bar__part {\n        height: 100%;\n        cursor: pointer;\n        pointer-events: auto;\n    }\n\n    .vacation-bar__part--start {\n        border-radius: 2px 0 0 2px;\n    }\n\n    .vacation-bar__part--end {\n        flex-grow: 1;\n        border-radius: 0 2px 2px 0;\n    }\n\n    .time-tracking-dot {\n        position: absolute;\n        height: 1rem;\n        width: 1rem;\n        top: 27%;\n        left: 25%;\n        border-radius: 50%;\n        display: inline-block;\n        background-color: #5eafd8;\n        z-index: 1;\n    }\n\n    .time-tracking-dot .vacation-bar__tooltip {\n        min-width: 300px;\n        color: white;\n        visibility: hidden;\n        position: absolute;\n        background-color: #4f7fa1;\n        text-align: center;\n        padding: 5px 8px;\n        border-radius: 4px;\n        z-index: 500;\n        opacity: 0;\n        bottom: calc(100% + 8px);\n        right: 50%;\n        transform: translateX(50%);\n        transition: opacity .3s;\n        pointer-events: none;\n    }\n\n    .time-tracking-dot:hover + .vacation-bar__tooltip {\n        visibility: visible;\n        opacity: 1;\n    }\n    .vacation-bar__part--start.vacation-bar__part--end {\n        border-radius: 2px;\n    }\n\n    .vacation-bar__part--dashed {\n        background: repeating-linear-gradient(45deg, white 0, white 2px, rgb(107 170 216 / 0%) 3px, rgb(107 170 216 / 0%) 5px);\n    }\n\n    .left-menu__item .user-card {\n        position: absolute;\n        top: 35px;\n        z-index: 10;\n        padding: 22px 24px;\n        background: #fff;\n        box-shadow: 0px 2px 8px rgba(37, 41, 65, 0.16);\n        border-radius: 4px;\n        display: none;\n    }\n\n    .left-menu__item .user-card--active {\n        display: block;\n    }\n\n    .user-card__name-container {\n        margin-bottom: 30px;\n    }\n\n    .user-card__name {\n        color: #262626;\n        font-weight: 600;\n        line-height: 22px;\n        font-size: 15px;\n    }\n\n    .user-card__phone-container {\n        display: flex;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .user-card__phone {\n        font-size: 15px;\n        line-height: 22px;\n        margin-left: 8px;\n    }\n\n    .user-card__email-container {\n        display: flex;\n        align-items: center;\n    }\n\n    .user-card__email {\n        margin-left: 8px;\n    }\n\n    .user-card p {\n        margin-bottom: 0;\n    }\n\n    .user-card__content {\n        display: flex;\n    }\n\n    .user-card__image-container {\n        width: 74px;\n        height: 74px;\n        border-radius: 37px;\n        background: #52b794;\n        margin-left: 36px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .user-card__image-text {\n        color: white;\n        font-size: 4rem;\n    }\n\u003c/style\u003e","hideContent":true,"contentPlaceholder":"gantt css"}},{"id":"9e211a04-6ea3-4c18-9ca7-7a24e365292c","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    app-page-content .content-body__inner {\n        padding-left: 0;\n    }\n\u003c/style\u003e","hideContent":false,"contentPlaceholder":""}}]}}]}},"fields":[{"code":"vacations_exists","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Есть решение Отпуска","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"business_trips_exists","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Есть решение Командировки","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"vacations_contract","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"holidays","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Отпуска контракт","data":{}}},{"code":"business_trips_contract","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"business_trips","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Командировки контракт","data":{}}},{"code":"default_main_vacation_app","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"paid_leave_order","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"personnel_documents","isDependent":false,"linkedFieldCode":""},"view":{"name":"Приказ на оплачиваемый отпуск ","data":{}}},{"code":"default_unpaid_vacation_app","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"leave_without_pay","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"personnel_documents","isDependent":false,"linkedFieldCode":""},"view":{"name":"Приказ на отпуск без сохранения заработной платы","data":{}}},{"code":"default_business_trips_app","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"order_for_business_trip","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"personnel_documents","isDependent":false,"linkedFieldCode":""},"view":{"name":"Приказ на командировку","data":{}}},{"code":"kedo_options","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"settings","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Настройки КЭДО","data":{}}},{"code":"from_date","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"С даты","data":{"additionalType":"date","defaultTimeType":"startOfDay","timeOptional":false}}},{"code":"to_date","type":"DATETIME","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"По дату","data":{"additionalType":"date","defaultTimeType":"startOfDay","timeOptional":false}}},{"code":"staff","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":false,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"staff","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Сотрудники","data":{}}},{"code":"absence_type","type":"ENUM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"enumItems":[{"code":"vacations","name":"Отсутствия на рабочем месте","checked":false},{"code":"business_trips","name":"Командировки","checked":false},{"code":"all","name":"Все","checked":true}]},"view":{"name":"Тип отсутствия","data":{}}},{"code":"organization","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"organization","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Организация","data":{}}},{"code":"subdivision","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"structural_subdivision","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Подразделение","data":{}}},{"code":"category_test","type":"ENUM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"enumItems":[{"code":"test1","name":"test1","checked":false},{"code":"test2","name":"test2","checked":false},{"code":"test3","name":"test3","checked":false},{"code":"test4","name":"test4","checked":false}]},"view":{"name":"category_test","data":{}}},{"code":"vacation_types_ids","type":"JSON","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Идентификаторы типов отпусков","data":{}}},{"code":"show_vacation_variants","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":true,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Показать варианты отпусков","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"base_vacations","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"base_vacations","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"kedo","isDependent":false,"linkedFieldCode":""},"view":{"name":"Базовые отпуска","data":{}}},{"code":"base_businesstrips","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"memo_business_trip","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"personnel_documents","isDependent":false,"linkedFieldCode":""},"view":{"name":"Базовые командировки","data":{}}},{"code":"show_all_staff","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Отобразить всех сотрудников","data":{"additionalType":"checkbox","noValue":"Нет","yesValue":"Да"}}},{"code":"show_overwork","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Отобразить переработки","data":{"additionalType":"checkbox","noValue":"Нет","yesValue":"Да"}}},{"code":"staff_docs","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"personnel_documents","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"personnel_documents","isDependent":false,"linkedFieldCode":""},"view":{"name":"Кадровые документы","data":{}}},{"code":"absences_empty","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":false,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Отсутствия не найдены","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"staff_docs_new","type":"SYS_COLLECTION","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"code":"personnel_documents","filter":{"value":{"tf":{}},"enabled":false},"bindings":null,"namespace":"personnel_documents","isDependent":false,"linkedFieldCode":""},"view":{"name":"Кадровые документы (актуальные)","data":{}}},{"code":"staff_types","type":"ENUM","searchable":false,"indexed":false,"deleted":false,"array":true,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{"enumItems":[{"code":"missing","name":"Отсутствующих","checked":true},{"code":"all","name":"Всех","checked":false},{"code":"in_work","name":"Всех кроме уволенных","checked":false}]},"view":{"name":"Отобразить","data":{}}}],"fieldVisibilityConditions":{"test":{"enabled":false,"conditions":[]},"staff":{"enabled":false,"conditions":[]},"to_date":{"enabled":false,"conditions":[]},"__hidden":{"enabled":false,"conditions":[]},"__styles":{"enabled":false,"conditions":[]},"__classes":{"enabled":false,"conditions":[]},"from_date":{"enabled":false,"conditions":[]},"__readOnly":{"enabled":false,"conditions":[]},"staff_docs":{"enabled":false,"conditions":[]},"staff_types":{"enabled":false,"conditions":[]},"subdivision":{"enabled":false,"conditions":[]},"absence_type":{"enabled":false,"conditions":[]},"kedo_options":{"enabled":false,"conditions":[]},"organization":{"enabled":false,"conditions":[]},"category_test":{"enabled":false,"conditions":[]},"show_overwork":{"enabled":false,"conditions":[]},"__onMouseEnter":{"enabled":false,"conditions":[]},"__onMouseLeave":{"enabled":false,"conditions":[]},"absences_empty":{"enabled":false,"conditions":[]},"base_vacations":{"enabled":false,"conditions":[]},"show_all_staff":{"enabled":false,"conditions":[]},"staff_docs_new":{"enabled":false,"conditions":[]},"__isConstValues":{"enabled":false,"conditions":[]},"vacations_exists":{"enabled":false,"conditions":[]},"base_businesstrips":{"enabled":false,"conditions":[]},"vacation_types_ids":{"enabled":false,"conditions":[]},"vacations_contract":{"enabled":false,"conditions":[]},"base_business_trips":{"enabled":false,"conditions":[]},"show_vacation_types":{"enabled":false,"conditions":[]},"__renderContentAsync":{"enabled":false,"conditions":[]},"business_trips_exists":{"enabled":false,"conditions":[]},"show_vacation_variants":{"enabled":false,"conditions":[]},"business_trips_contract":{"enabled":false,"conditions":[]},"default_main_vacation_app":{"enabled":false,"conditions":[]},"default_business_trips_app":{"enabled":false,"conditions":[]},"default_unpaid_vacation_app":{"enabled":false,"conditions":[]}},"scriptOptions":{"allowNamespace":true},"clientScripts":"declare const console: any;\ndeclare const document: any;\n\nconst fieldReferences = {\n    baseVacations: {\n        search_field_name: \"staff_docs_new\",\n        start_date: \"start_date\",\n        end_date: \"end_date\",\n        duration: \"duration\",\n        staff: \"staff\",\n        status: \"line_status\"\n    },\n    additionalVacations: {\n        search_field_name: \"vacations_contract\",\n        start_date: \"start\",\n        end_date: \"end\",\n        duration: \"amount_of_days\",\n        staff: \"kedo_staff\",\n        status: \"status\"\n    },\n    baseBusinessTrips: {\n        search_field_name: \"staff_docs_new\",\n        start_date: \"start_date\",\n        end_date: \"end_date\",\n        duration: \"duration\",\n        staff: \"staff\",\n        status: \"line_status\"\n    },\n    additionalBusinessTrips: {\n        search_field_name: \"business_trips_contract\",\n        start_date: \"start_date\",\n        end_date: \"end_date\",\n        duration: \"duration\",\n        staff: \"kedo_staff\",\n        status: \"status\"\n    }\n};\n\n\nlet vacationFieldFilters: filterFields;\nlet businessTripsFieldFilters: filterFields;\nlet users: ApplicationItem\u003cApplication$kedo$staff$Data, any\u003e[] = [];\nlet subdivisions: ApplicationItem\u003cApplication$kedo$structural_subdivision$Data, any\u003e[] = [];\nlet userCategories: ApplicationItem\u003cApplication$kedo$employees_categories$Data, any\u003e[] = [];\nlet vacationsListMain: ItemData[] = [];\nlet businessTripsMain: ItemData[] = [];\nlet overtimeWorkMain: ItemData[] = [];\nlet allAbsences: absense[] = [];\nlet vacationsSearch: any;\nlet businessTripsSearch: any;\nlet overworkSearch: any;\nlet vacationData: PersonVacations[] = [];\nlet takenRanges: DateRange[] = [];\nlet absenseUsers: ApplicationItem\u003cApplication$kedo$staff$Data, any\u003e[] = [];\nlet dateRange: DateRange;\nlet absenseFromDateLimit = new TDate();\nlet absenseToDateLimit = new TDate();\nconst weekDayReferences = [\n    \"вс\",\n    \"пн\",\n    \"вт\",\n    \"ср\",\n    \"чт\",\n    \"пт\",\n    \"сб\"\n];\nconst MONTHS = ['', \"янв\", \"фев\", \"марта\", \"апр\", \"мая\", \"июня\", \"июля\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\"];\nconst colorReferences = {\n    business_trip: \"#6BD67C\",\n    common: \"#6BAAD8\",\n    restrict_cancel: \"#FF7976\",\n    pregnancy: \"#FFA900\",\n    child_care: \"#FFA900\",\n    sick_leave: \"#8F04A8\"\n};\n\ninterface DateRange {\n    startDate: TDate,\n    endDate: TDate\n};\n\ninterface PersonVacations {\n    id: string;\n    name: string;\n    vacations: absense[];\n};\n\ninterface VacationParts {\n    dashed: boolean;\n    daysAmount: number;\n};\n\ntype filterFields = {\n    search_field_name: string,\n    start_date: string,\n    end_date: string,\n    duration: string,\n    staff: string,\n};\n\ntype absense = {\n    id: string,\n    staff_id: string,\n    days_amount: number,\n    from_date: TDate,\n    to_date: TDate,\n    comment?: string,\n    absence_type: string,\n    absence_link: string,\n    restrict_cancel: boolean,\n    vacation_type: string,\n    from_date_for_render: string,\n    to_date_for_render: string,\n    vacation_type_name: string\n};\n\ntype colorKey = keyof typeof colorReferences;\n\nfunction setFieldReference() {\n    businessTripsFieldFilters = Context.data.business_trips_exists ? fieldReferences.additionalBusinessTrips : fieldReferences.baseBusinessTrips;\n    vacationFieldFilters = Context.data.vacations_exists ? fieldReferences.additionalVacations : fieldReferences.baseVacations;\n};\n\nfunction addVacationType(event: any) {\n    let vacationCode = event.target.dataset.variant;\n\n    if (Context.data.vacation_types_ids.indexOf(vacationCode) == -1) {\n        Context.data.vacation_types_ids.push(vacationCode);\n    } else {\n        let codeIndex = Context.data.vacation_types_ids.indexOf(vacationCode);\n        Context.data.vacation_types_ids.splice(codeIndex, 1);\n    };\n};\n\nasync function handleVariantsDisplay(): Promise\u003cvoid\u003e {\n    Context.data.show_vacation_variants = [\"all\", \"vacations\"].indexOf(Context.data.absence_type!.code) != -1;\n};\n\nasync function getAndSetDateRange() {\n    let now = new TDate();\n    let fromDate = new TDate(now.year, now.month, 1);\n    let toDate = fromDate.addDate(0, 1, -1);\n    Context.data.from_date = fromDate;\n    Context.data.to_date = toDate;\n}\n\nasync function getOptions(): Promise\u003cvoid\u003e {\n    const kedoOptions = Context.fields.kedo_options.app;\n    const vacationsIncluded = await kedoOptions.search().where(f =\u003e f.code.eq(\"podklyuchen_razdel_otpuskov\")).first().then(item =\u003e item!.data.status);\n    const businessTripsIncluded = await kedoOptions.search().where(f =\u003e f.code.eq(\"travel_section_added\")).first().then(item =\u003e item!.data.status);\n    Context.data.vacations_exists = vacationsIncluded;\n    Context.data.business_trips_exists = businessTripsIncluded;\n};\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    Context.data.vacation_types_ids = [];\n    await getOptions();\n    setFieldReference();\n    await getAndSetDateRange();\n    [subdivisions, userCategories] = await Promise.all([\n        await Context.fields.subdivision.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all(),\n        await Namespace.app.employees_categories.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()\n    ]);\n};\n\nasync function getAbsences(): Promise\u003cvoid\u003e {\n    clearCalendar();\n    let dismissedUsersIds: string[];\n    users = await Context.fields.staff.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    if (Context.data.staff_types \u0026\u0026 Context.data.staff_types.code == \"in_work\") {\n        dismissedUsersIds = users.filter(user =\u003e user.data.__status!.code == \"dismissed\").map(user =\u003e user.id);\n        users = users.filter(user =\u003e user.data.__status!.code != \"dismissed\");\n    };\n    allAbsences = [];\n    let fromDate = Context.data.from_date!;\n    let toDate = Context.data.to_date!;\n    const vacationSearchExists = [\"all\", \"vacations\"].indexOf(Context.data.absence_type!.code) != -1;\n    const businesstripSearchExists = [\"all\", \"business_trips\"].indexOf(Context.data.absence_type!.code) != -1;\n    const overtimeWorkExists = Context.data.show_overwork;\n\n    if (overtimeWorkExists) {\n        overworkSearch = Context.fields.staff_docs_new.app.search().size(10000).where((f, g) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f.line_status.neq(null),\n            f.start_date.neq(null),\n            f.duration.neq(null),\n            f.staff.neq(null),\n            f.__name.like(\"сверхуроч\")\n        ));\n    };\n\n    if (vacationSearchExists) {\n        //@ts-ignore\n        vacationsSearch = Context.fields[vacationFieldFilters.search_field_name].app.search().size(10000).where((f: any, g: any) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f[vacationFieldFilters.start_date].neq(null),\n            f[vacationFieldFilters.end_date].neq(null),\n            // f[vacationFieldFilters.status].neq(null),\n            f[vacationFieldFilters.staff].neq(null)\n        ));\n    };\n\n    if (businesstripSearchExists) {\n        //@ts-ignore\n        businessTripsSearch = Context.fields[businessTripsFieldFilters.search_field_name].app.search().size(10000).where((f: any, g: any) =\u003e g.and(\n            f.__deletedAt.eq(null),\n            f[businessTripsFieldFilters.start_date].neq(null),\n            f[businessTripsFieldFilters.end_date].neq(null),\n            // f[businessTripsFieldFilters.status].neq(null),\n            f[businessTripsFieldFilters.staff].neq(null)\n        ));\n    };\n\n    if (!Context.data.vacations_exists) {\n        vacationsSearch.where((f: any, g: any) =\u003e g.and(\n            f.__name.like(\"отпуск\"),\n            f.__name.like(\"приказ\")\n        ));\n    };\n\n    if (!Context.data.business_trips_exists) {\n        businessTripsSearch.where((f: any, g: any) =\u003e g.and(\n            f.__name.like(\"командировку\"),\n            f.__name.like(\"приказ\")\n        ))\n    };\n\n    if (Context.data.from_date) {\n        if (vacationSearchExists) {\n            vacationsSearch.where((f: any, g: any) =\u003e g.and(\n                f[vacationFieldFilters.end_date].gte(fromDate)\n            ));\n        };\n        if (businesstripSearchExists) {\n            businessTripsSearch.where((f: any, g: any) =\u003e g.and(\n                f[businessTripsFieldFilters.end_date].gte(fromDate.asDatetime(new TTime))\n            ));\n        };\n        if (overtimeWorkExists) {\n            overworkSearch.where((f: any) =\u003e f.start_date.gte(Context.data.from_date));\n        };\n    };\n    if (Context.data.to_date) {\n        if (overtimeWorkExists) {\n            overworkSearch.where((f: any) =\u003e f.start_date.lte(Context.data.to_date));\n        };\n        if (vacationSearchExists) {\n            vacationsSearch.where((f: any, g: any) =\u003e g.and(\n                f[vacationFieldFilters.start_date].lte(toDate)\n            ));\n        };\n        if (businessTripsSearch) {\n            businessTripsSearch.where((f: any, g: any) =\u003e g.and(\n                f[businessTripsFieldFilters.start_date].lte(toDate.asDatetime(new TTime)),\n            ));\n        };\n    };\n    if (vacationSearchExists) {\n        vacationsListMain = await vacationsSearch.all();\n    };\n    if (businesstripSearchExists) {\n        businessTripsMain = await businessTripsSearch.all();\n    };\n    if (overtimeWorkExists) {\n        overtimeWorkMain = await overworkSearch.all();\n    };\n\n    if (Context.data.vacation_types_ids \u0026\u0026 Context.data.vacation_types_ids.length \u003e 0 \u0026\u0026 vacationSearchExists) {\n        if (Context.data.vacations_exists) {\n            vacationsListMain = vacationsListMain.filter(vacation =\u003e Context.data.vacation_types_ids.indexOf(vacation.data.type_of?.code) != -1);\n        } else {\n            vacationsListMain = vacationsListMain.filter(vacation =\u003e Context.data.vacation_types_ids.indexOf(vacation.data.__sourceRef.code) != -1);\n        };\n    };\n\n    if (vacationSearchExists) {\n        vacationsListMain = vacationsListMain.filter(vacation =\u003e !vacation.data[vacationFieldFilters.start_date].after(vacation.data[vacationFieldFilters.end_date]));\n    };\n    if (businesstripSearchExists) {\n        businessTripsMain = businessTripsMain.filter(trip =\u003e !trip.data[businessTripsFieldFilters.start_date].after(trip.data[businessTripsFieldFilters.end_date]));\n    };\n\n    if (!!Context.data.staff \u0026\u0026 Context.data.staff?.length \u003e 0) {\n        let staffUsers = await Promise.all([...Context.data.staff!.map(async user =\u003e await user.fetch())]).then(users =\u003e users.map(u =\u003e u.id))\n\n        if (overtimeWorkExists) {\n            overtimeWorkMain = overtimeWorkMain.filter((work) =\u003e {\n                if (!work.data.staff) {\n                    return;\n                };\n                return staffUsers.indexOf(work.data.staff.id) != -1;\n            });\n        };\n        if (vacationSearchExists) {\n            vacationsListMain = vacationsListMain.filter((vacation) =\u003e {\n                if (!vacation.data[vacationFieldFilters.staff]) {\n                    return false;\n                };\n                return staffUsers.indexOf(vacation.data[vacationFieldFilters.staff].id) != -1\n            });\n        };\n        if (businesstripSearchExists) {\n            businessTripsMain = businessTripsMain.filter((trip) =\u003e {\n                if (!trip.data[businessTripsFieldFilters.staff]) {\n                    return false;\n                };\n                return staffUsers.indexOf(trip.data[businessTripsFieldFilters.staff].id) != -1;\n            });\n        };\n    };\n    if (!!Context.data.organization) {\n        let organizationId = Context.data.organization!.id;\n        if (overtimeWorkExists) {\n            overtimeWorkMain = overtimeWorkMain.filter(work =\u003e {\n                let staffUser = users.find(user =\u003e user.id == work.data.staff?.id);\n                if (!staffUser) {\n                    return;\n                };\n                return staffUser.data.organization?.id == organizationId;\n            });\n        }\n        if (vacationSearchExists) {\n            vacationsListMain = vacationsListMain.filter((v) =\u003e {\n                let staffUser = users.find(user =\u003e user.id == v.data[vacationFieldFilters.staff].id);\n\n                if (!staffUser) {\n                    return false;\n                };\n\n                return staffUser.data.organization!.id == organizationId;\n            });\n        };\n        if (businesstripSearchExists) {\n            businessTripsMain = businessTripsMain.filter((trip) =\u003e {\n                let travelingUser = users.find(user =\u003e user.id == trip.data[businessTripsFieldFilters.staff].id);\n\n                if (!travelingUser) {\n                    return false;\n                };\n\n                return travelingUser.data.organization?.id == organizationId\n            });\n        };\n    };\n\n    if (!!Context.data.subdivision) {\n        let subdivisionId = Context.data.subdivision!.id;\n        if (overtimeWorkExists) {\n            overtimeWorkMain = overtimeWorkMain.filter((work) =\u003e {\n                let staffUser = users.find(user =\u003e user.id == work.data.staff?.id);\n                if (!staffUser) {\n                    return;\n                };\n                return staffUser.data.structural_subdivision?.id == subdivisionId;\n            });\n        }\n        if (vacationSearchExists) {\n            vacationsListMain = vacationsListMain.filter((vacation) =\u003e {\n                let user = users.find(u =\u003e u.id == vacation.data[vacationFieldFilters.staff].id);\n\n                if (!user) {\n                    return false;\n                };\n\n                return user.data.structural_subdivision?.id == subdivisionId;\n            });\n        };\n        if (businesstripSearchExists) {\n            businessTripsMain = businessTripsMain.filter((trip) =\u003e {\n                let travellingUser = users.find(u =\u003e u.id == trip.data[businessTripsFieldFilters.staff].id);\n\n                if (!travellingUser) {\n                    return false;\n                };\n\n                return travellingUser.data.structural_subdivision?.id == subdivisionId;\n            });\n        };\n    };\n    if (Context.data.staff_types \u0026\u0026 Context.data.staff_types.code == \"in_work\") {\n        if (vacationSearchExists) {\n            vacationsListMain = vacationsListMain.filter(vacation =\u003e dismissedUsersIds.indexOf(vacation.data[vacationFieldFilters.staff].id) == -1);\n        };\n        if (businesstripSearchExists) {\n            businessTripsMain = businessTripsMain.filter(trip =\u003e dismissedUsersIds.indexOf(trip.data[businessTripsFieldFilters.staff].id) == -1);\n        };\n        if (overtimeWorkExists) {\n            overtimeWorkMain = overtimeWorkMain.filter(work =\u003e dismissedUsersIds.indexOf(work.data.staff.id) == -1);\n        };\n    };\n\n    if (vacationSearchExists) {\n        vacationsListMain.forEach(vacation =\u003e serializeData(vacation));\n    };\n    if (businesstripSearchExists) {\n        businessTripsMain.forEach(trip =\u003e serializeData(trip));\n    };\n\n    if (vacationsListMain.length \u003c 1 \u0026\u0026 businessTripsMain.length \u003c 1) {\n        Context.data.absences_empty = true;\n        return;\n    };\n    console.log(allAbsences)\n    await renderGantt();\n};\n\nasync function serializeData(absence: any) {\n    let absenseObj: absense;\n    let id: string = \"\";\n    let staff_id: string = \"\";\n    let days_amount: number = 0;\n    let from_date: TDate;\n    let to_date: TDate;\n    let absence_type: string = \"\";\n    let absence_link: string = \"\";\n    let absenseIsBusinessTrip = [\"business_trips\", \"memo_business_trip\"].indexOf(absence.code) != -1;\n    let serializeFieldsReference = absenseIsBusinessTrip ? businessTripsFieldFilters : vacationFieldFilters;\n    let userIdMock = \"123456\"\n    let restrict_cancel: boolean = false;\n    let vacation_type: string = \"\";\n    let user = users.find(u =\u003e u.id == absence.data[serializeFieldsReference.staff].id);\n    let userCategoryIds = user!.data.staff_categories?.map(category =\u003e category.id) || [];\n    let fetchedCategories = userCategories.filter(category =\u003e userCategoryIds.indexOf(category.id) != -1);\n    let vacation_type_name: string = \"\";\n    let fromDateString: string = \"\";\n    let toDateString: string = \"\";\n\n    if (fetchedCategories.some(category =\u003e !category.data.possibility_recall_from_vacation)) {\n        restrict_cancel = true;\n    };\n\n    id = absence.id;\n    staff_id = user?.id || userIdMock;\n    days_amount = absence.data[serializeFieldsReference.duration];\n\n    if (absenseIsBusinessTrip) {\n        let tripFromDate = absence.data[serializeFieldsReference.start_date];\n        let tripToDate = absence.data[serializeFieldsReference.end_date];\n        from_date = tripFromDate\n        to_date = tripToDate\n        if (Context.data.business_trips_exists) {\n            fromDateString = absence.data.start_date_string;\n            toDateString = absence.data.end_date_string;\n        }\n    } else {\n        let vacationFromDate = absence.data[serializeFieldsReference.start_date];\n        let vacationToDate = absence.data[serializeFieldsReference.end_date];\n        from_date = vacationFromDate\n        to_date = vacationToDate\n        if (Context.data.vacations_exists) {\n            fromDateString = absence.data.start_string;\n            toDateString = absence.data.end_string;\n        }\n    };\n\n    absence_type = absenseIsBusinessTrip ? \"business_trips\" : \"vacations\";\n\n    if (absence.data.__sourceRef) {\n        const sourceRef = absence.data.__sourceRef;\n        absence_link = `./(p:item/${sourceRef.namespace}/${sourceRef.code}/${sourceRef.id})`;\n    } else {\n        absence_link = `./(p:item/${absence.namespace}/${absence.code}/${id})`;\n    }\n    \n    restrict_cancel = false;\n    vacation_type = absence.data.type_of?.code || undefined;\n\n    if (absence.data.type_of) {\n        vacation_type_name = absence.data.type_of.name;\n    } else if (!absenseIsBusinessTrip) {\n        vacation_type_name = absence.data.__sourceRef.code == \"leave_without_pay\" ? \"Отпуск без сохранения заработной платы\" : \"Ежегодный отпуск\"\n    } else {\n        vacation_type_name = \"Командировка\"\n        vacation_type = \"business_trip\"\n    };\n\n\n    absenseObj = {\n        id,\n        staff_id,\n        days_amount,\n        from_date,\n        to_date,\n        absence_type,\n        absence_link,\n        restrict_cancel,\n        vacation_type,\n        to_date_for_render: toDateString,\n        from_date_for_render: fromDateString,\n        vacation_type_name\n    };\n\n    allAbsences.push(absenseObj)\n};\n\n// DOM render\nasync function renderGantt(): Promise\u003cvoid\u003e {\n    vacationData = [];\n    takenRanges = [];\n\n    for (let absense of allAbsences) {\n        const personsVacation = vacationData.find(item =\u003e item.id === absense.staff_id);\n        const personWasAdded = !!personsVacation;\n\n        if (personWasAdded) {\n            personsVacation!.vacations.push(absense)\n            continue;\n        };\n\n        const user = users.find(u =\u003e u.id == absense.staff_id)!;\n        const name = user.data.__name;\n\n        const newPerson: PersonVacations = {\n            id: absense.staff_id,\n            name: name,\n            vacations: [absense]\n        };\n        vacationData.push(newPerson)\n    };\n    await renderPage();\n};\n\nasync function renderPage() {\n    await renderUsers();\n    await renderCalendar();\n    renderVacations();\n};\n\nfunction addStaffAtWork(staff: ApplicationItem\u003cApplication$kedo$staff$Data, any\u003e[]) {\n    const root = document.querySelector(\".calendar-schedule__left-menu-container\");\n    const template = document.querySelector(\".left-menu__template\");\n\n    for (let user of staff) {\n        const element = template.content.cloneNode(true);\n        const text = element.querySelector(\".left-menu__item-text\");\n        text.innerText = user.data.__name;\n        const wrapper = element.querySelector(\".left-menu__item\");\n        wrapper.dataset.id = user.data.__id\n\n        const card = element.querySelector(\".user-card\");\n        card.dataset.key = user.data.__id\n\n        const cardName = card.querySelector(\".user-card__name\");\n        cardName.innerText = user.data.__name;\n\n\n        if (user.data.email) {\n            const cardEmail = card.querySelector(\".user-card__email\");\n            cardEmail.innerText = user.data.email?.email;\n            cardEmail.href = `mailto: ${user.data.email?.email}`\n        }\n\n        if (user.data.phone) {\n            const cardPhone = card.querySelector(\".user-card__phone\");\n            cardPhone.innerText = user.data.phone?.tel;\n        }\n\n        const userImageText = element.querySelector(\".user-card__image-text\");\n        let userNameArray = user.data.__name.split(\" \")\n        userImageText.innerText = userNameArray.length \u003e 1 ? userNameArray[0][0] + userNameArray[1][0] : userNameArray[0];\n\n        const userTextElement = element.querySelector(\".left-menu__item\");\n\n        userTextElement.addEventListener(\"click\", async (e: any) =\u003e {\n            e.stopPropagation();\n            const activeCard = document.querySelector(\".user-card--active\");\n            if (!!activeCard) {\n                activeCard.classList.remove(\"user-card--active\")\n            }\n\n            if (activeCard?.dataset.key === user.data.__id) return;\n\n            const userCard = document.querySelector(`[data-key='${user.data.__id}']`);\n            userCard.classList.toggle(\"user-card--active\");\n\n        });\n\n        card.addEventListener(\"click\", (e: any) =\u003e {\n            e.stopPropagation();\n        });\n\n        root.append(element);\n    }\n}\n\nasync function renderUsers() {\n    const root = document.querySelector(\".calendar-schedule__left-menu-container\");\n    const template = document.querySelector(\".left-menu__template\");\n\n    for (let absense of vacationData) {\n        const user = users.find(item =\u003e item.id === absense.id);\n\n        if (!user) {\n            continue;\n        };\n\n        const element = template.content.cloneNode(true);\n        const text = element.querySelector(\".left-menu__item-text\");\n        const wrapper = element.querySelector(\".left-menu__item\");\n        const card = element.querySelector(\".user-card\");\n        const cardName = card.querySelector(\".user-card__name\");\n\n        text.innerText = absense.name;\n        wrapper.dataset.id = absense.id\n        card.dataset.key = absense.id\n\n        cardName.innerText = absense.name;\n\n        if (user.data.email) {\n            const cardEmail = card.querySelector(\".user-card__email\");\n            cardEmail.innerText = user.data.email?.email;\n            cardEmail.href = `mailto: ${user.data.email?.email}`\n        }\n\n        if (user.data.phone) {\n            const cardPhone = card.querySelector(\".user-card__phone\");\n            cardPhone.innerText = user.data.phone?.tel;\n        }\n\n        const userImageText = element.querySelector(\".user-card__image-text\");\n        let userNameArray = user.data.__name.split(\" \")\n        userImageText.innerText = userNameArray[0][0] + userNameArray[1][0];\n\n        const userTextElement = element.querySelector(\".left-menu__item\");\n\n        userTextElement.addEventListener(\"click\", async (e: any) =\u003e {\n            e.stopPropagation();\n            const activeCard = document.querySelector(\".user-card--active\");\n            if (!!activeCard) {\n                activeCard.classList.remove(\"user-card--active\")\n            }\n\n            if (activeCard?.dataset.key === user.data.__id) return;\n\n            const userCard = document.querySelector(`[data-key='${user.data.__id}']`);\n            userCard.classList.toggle(\"user-card--active\");\n\n        });\n\n        card.addEventListener(\"click\", (e: any) =\u003e {\n            e.stopPropagation();\n        });\n        root.appendChild(element);\n    };\n\n    if (Context.data.staff_types \u0026\u0026 Context.data.staff_types.code !== \"missing\") {\n        const staffAtWork = users.filter(user =\u003e vacationData.map(data =\u003e data.id).indexOf(user.id) == -1);\n        addStaffAtWork(staffAtWork)\n    };\n};\n\nconst renderCalendar = async () =\u003e {\n    dateRange = { startDate: Context.data.from_date!, endDate: Context.data.to_date! };\n    const weekTemplate = document.querySelector(\".template-calendar-week\");\n    const root = document.querySelector(\".calendar-schedule__calendar-wrapper\");\n\n    while (dateRange.startDate.before(dateRange.endDate)) {\n        //render week\n        const element = weekTemplate.content.cloneNode(true);\n        let dayElements = element.querySelectorAll(\".calendar__day-number\");\n        let weekDaysElements = element.querySelectorAll(\".calendar__week-day p\");\n        let weekStart = dateRange.startDate;\n\n        for (let i = 0; i \u003c= 6; i++) {\n            let weekDate = new Date(weekStart.format());\n            let weekDay = weekDate.getDay();\n            let weekDayName = weekDayReferences[weekDay];\n            weekDaysElements[i].innerText = weekDayName;\n            weekStart = weekStart.addDate(0, 0, 1)\n        }\n\n        let dayNumber = dateRange.startDate.day;\n\n        let i = 0;\n\n        for (i; i \u003c= 6; i++) {\n            let dayText = dayElements[i].querySelector(\"p\");\n            dayText.innerText = dayNumber;\n            dayNumber = dateRange.startDate.addDate(0, 0, i + 1).day;\n        };\n\n        const weekText = element.querySelector(\".calendar__week-header-text\");\n        let innerTextWeek = '';\n        const startWeekText = dateRange.startDate.day;\n        const endWeekText = dateRange.startDate.addDate(0, 0, 6).day;\n\n        if (endWeekText \u003c startWeekText) {\n            innerTextWeek = `${startWeekText} ${MONTHS[dateRange.startDate.month]} - ${endWeekText} ${MONTHS[dateRange.startDate.addDate(0, 0, 6).month]}`\n        } else {\n            innerTextWeek = `${dateRange.startDate.day}-${dateRange.startDate.day + i} ${MONTHS[dateRange.startDate.month]}`\n        };\n\n        weekText.innerText = innerTextWeek\n        const containers: any[] = Array.from(element.querySelector(\".calendar__days-wrapper\").children);\n        for (let f = 0; f \u003c i + 1; f++) {\n            if (f \u003e= 7) {\n                continue;\n            }\n            const elementContainer = containers[f].querySelector('.calendar__column-day-container');\n\n            for (let j = 0; j \u003c vacationData.length; j++) {\n                const cell = document.createElement(\"div\");\n                cell.classList.add(\"day-cell\");\n                cell.dataset.userid = vacationData[j].id;\n                cell.dataset.day = dateRange.startDate.addDate(0, 0, f).format(\"DD.MM.YYYY\")\n                elementContainer.append(cell)\n            }\n            containers[f].append(elementContainer)\n\n            //weekends\n            let weekDay = containers[f].querySelector(\".calendar__week-day p\").innerText;\n            if (weekDay == \"пт\" || weekDay == \"сб\") {\n                containers[f].classList.add('calendar__day--weekend')\n            }\n        }\n\n        let weekWrapper = element.querySelector(\".calendar__days-wrapper\");\n        root.append(element);\n        let minWidth = Math.floor(18 * i);\n        weekWrapper.style.minWidth = `${minWidth}px`;\n\n        const cell = document.createElement(\"div\")\n        cell.classList.add(\"day-cell\")\n\n        dateRange.startDate = dateRange.startDate.addDate(0, 0, 7);\n    };\n\n    absenseFromDateLimit = Context.data.from_date!;\n    let lastWeekWrapper = \u003cany\u003eArray.from(document.querySelectorAll(\".calendar__days-wrapper\")).slice(-1)[0];\n    let lastDayWrapper = \u003cany\u003eArray.from(lastWeekWrapper.querySelectorAll(\".calendar__day\")).slice(-1)[0];\n    let lastDayDate = lastDayWrapper.querySelector(\".calendar__column-day-container .day-cell\").dataset.day;\n    let dateArray = lastDayDate.split(\".\");\n    let [day, month, year] = [dateArray[0], dateArray[1], dateArray[2]];\n    absenseToDateLimit = new TDate(year, month, day);\n    setMinMaxDates();\n};\n\nfunction setTooltipOffset(tooltip: any) {\n    let offsetX = Math.ceil(tooltip.previousSibling.offsetWidth / 2) + Math.ceil(tooltip.offsetWidth / 2);\n    tooltip.style.transform = `translateX(${offsetX}px)`;\n};\n\nconst renderVacations = () =\u003e {\n    const allRanges: DateRange[] = []\n    const root = document.querySelector(\".calendar-schedule__calendar-wrapper\");\n    const leftBorder = root.getBoundingClientRect().x;\n    const rightBorder = root.getBoundingClientRect().width + root.getBoundingClientRect().x\n\n    for (let personVacations of vacationData) {\n        for (let vacation of personVacations.vacations) {\n            allRanges.push({ startDate: vacation.from_date, endDate: vacation.to_date })\n        };\n    };\n\n    let counterHelper = 0\n\n    for (let personVacations of vacationData) {\n        let userNameArr = personVacations.name.split(\" \");\n        let userName = userNameArr.length \u003e 2 ? `${userNameArr[0]} ${userNameArr[1][0]}. ${userNameArr[2][0]}.` : `${userNameArr[0]} ${userNameArr[1][0]}.`\n\n        for (let vacation of personVacations.vacations) {\n\n            let vacationFromDate = vacation.from_date_for_render;\n            let vacationToDate = vacation.to_date_for_render;\n            let correspondingCell = document.querySelector(`[data-day='${vacation.from_date.format(\"DD.MM.YYYY\")}'][data-userid='${personVacations.id}']`)\n            // correspondingCell.style.zIndex = i + 1;\n\n            const newElement = document.createElement('a');\n            let tooltipBackgroundColor = \"\";\n\n            const vacationRenderParts: VacationParts[] = getRenderParts(allRanges, { startDate: vacation.from_date, endDate: vacation.to_date }, counterHelper)\n            console.log(vacationRenderParts)\n\n            for (let k = 0; k \u003c vacationRenderParts.length; k++) {\n                const barPartElement = document.createElement(\"div\");\n                barPartElement.classList.add('vacation-bar__part');\n                let borderColor = vacation.restrict_cancel ? colorReferences[\"restrict_cancel\" as colorKey] : colorReferences[vacation.vacation_type as colorKey] || colorReferences.common;\n                tooltipBackgroundColor = borderColor;\n                barPartElement.style.border = `2px solid ${borderColor}`;\n\n                if (k === 0) {\n                    barPartElement.classList.add('vacation-bar__part--start');\n                }\n\n                if (k === vacationRenderParts.length - 1) {\n                    barPartElement.classList.add('vacation-bar__part--end');\n                }\n\n                if (vacationRenderParts[k].dashed) {\n                    barPartElement.classList.add(\"dashed\");\n                    barPartElement.style.background = `repeating-linear-gradient(45deg, ${borderColor} 0, ${borderColor} 2px, rgb(107 170 216 / 0%) 3px, rgb(107 170 216 / 0%) 5px)`\n\n                    if (k !== 0) {\n                        barPartElement.style.borderLeft = `0`\n                    };\n                };\n\n                //barPartElement.style.width = k === vacationRenderParts.length - 1 ? `${vacationRenderParts[k].daysAmount * 19.1}px` : `${vacationRenderParts[k].daysAmount * 18.8}px`;\n                barPartElement.style.width = `${vacationRenderParts[k].daysAmount * 18.2}px`;\n                newElement.append(barPartElement)\n            };\n\n            newElement.classList.add('vacation-bar');\n            // newElement.style.width = `${vacation.daysAmount * 19}px`;\n            // if (vacationData[i].vacations[j].correction) {\n            //     newElement.classList.add('vacation-bar--correction')\n            // }\n\n            //tooltip\n            const tooltip = document.createElement('div');\n            tooltip.classList.add('vacation-bar__tooltip');\n            tooltip.style.backgroundColor = tooltipBackgroundColor;\n            tooltip.innerHTML = `${userName}\u003cbr\u003e${vacation.vacation_type_name}\u003cbr\u003e${vacationFromDate} - ${vacationToDate}`;\n\n            newElement.href = vacation.absence_link\n\n            takenRanges.push({ startDate: vacation.from_date, endDate: vacation.to_date })\n\n            newElement.addEventListener(\"mousemove\", (e: any) =\u003e {\n                let tooltip = newElement.nextElementSibling;\n                let rect = e.target.getBoundingClientRect();\n                let x = e.clientX - rect.left;\n                let tooltipWidth = tooltip.getBoundingClientRect().width;\n                let toolTipOffset = x - tooltipWidth;\n                let oldLeftValue = tooltip.style.left;\n\n                if (tooltip.getBoundingClientRect().x \u003c leftBorder) {\n                    toolTipOffset += leftBorder - tooltip.getBoundingClientRect().x;\n                } else if (tooltip.getBoundingClientRect().x + tooltipWidth \u003e rightBorder) {\n                    let tooltipRightBorder = tooltip.getBoundingClientRect().x + tooltipWidth;\n                    toolTipOffset += rightBorder - tooltipRightBorder\n                };\n\n                tooltip.style.left = `${toolTipOffset}px`;\n                if (tooltip.getBoundingClientRect().x \u003c leftBorder) {\n                    tooltip.style.left = oldLeftValue;\n                } else if (tooltip.getBoundingClientRect().x + tooltipWidth \u003e rightBorder) {\n                    tooltip.style.left = oldLeftValue;\n                };\n            });\n\n            correspondingCell.append(newElement)\n            correspondingCell.append(tooltip)\n\n            // setTooltipOffset(tooltip)\n            counterHelper++\n        };\n    };\n    if (!!overtimeWorkMain \u0026\u0026 overtimeWorkMain.length \u003e 0) {\n        setTimeTrackingDots();\n    };\n};\n\nasync function setTimeTrackingDots() {\n    let dayCells = document.querySelectorAll(\".day-cell\");\n\n    for (let cell of dayCells) {\n        let cellDay = cell.getAttribute(\"data-day\");\n        let cellUserId = cell.getAttribute(\"data-userid\");\n\n        let trackingDot = overtimeWorkMain.find((item) =\u003e {\n            return item.data.staff.id == cellUserId \u0026\u0026 item.data.start_date.format(\"DD.MM.YYYY\") == cellDay;\n        });\n\n        if (!!trackingDot) {\n            const tooltip = document.createElement('div')\n            let user = users.find(u =\u003e u.id == trackingDot!.data.staff.id)\n            let newDot = document.createElement(\"div\");\n            let hours = trackingDot.data.duration;\n            let hoursSpelling: string = \"\";\n\n            switch (true) {\n                case (hours \u003c 2):\n                    hoursSpelling = \"час\";\n                    break;\n                case (hours \u003e 1 \u0026\u0026 hours \u003c 5):\n                    hoursSpelling = \"часа\";\n                    break;\n                case (hours \u003e 4 \u0026\u0026 hours \u003c 21):\n                    hoursSpelling = \"часов\";\n                    break;\n                case (hours.toString().split(\"\")[0] == \"1\"):\n                    hoursSpelling = \"часа\";\n                    break;\n                default:\n                    hoursSpelling = \"часов\"\n            };\n\n            tooltip.classList.add('vacation-bar__tooltip');\n            tooltip.style.backgroundColor = \"#5eafd8\";\n            tooltip.innerHTML = `${user!.data.__name}\u003cbr\u003e${trackingDot.data.__name}\u003cbr\u003e${trackingDot.data.start_date.format(\"DD.MM.YY\")} (${hours} ${hoursSpelling})`\n            newDot.className = \"time-tracking-dot\";\n            cell.appendChild(newDot);\n            cell.appendChild(tooltip);\n            setTooltipOffset(tooltip)\n        };\n    };\n};\n\nfunction clearCalendar() {\n    let leftMenuRoot = document.querySelector(\".calendar-schedule__left-menu-container\");\n    let calendarRoot = document.querySelector(\".calendar-schedule__calendar-wrapper\");\n\n    leftMenuRoot.innerHTML = \"\";\n    calendarRoot.innerHTML = \"\";\n};\n\nfunction setMinMaxDates() {\n    vacationData.forEach((data) =\u003e {\n        data.vacations.forEach((vacation) =\u003e {\n            if (vacation.from_date.before(absenseFromDateLimit.asDatetime(new TTime))) {\n                vacation.from_date = absenseFromDateLimit;\n            };\n            if (vacation.to_date.after(absenseToDateLimit.asDatetime(new TTime))) {\n                vacation.to_date = absenseToDateLimit;\n            };\n        });\n    });\n};\n\nfunction getRenderParts(ranges: DateRange[], itemRange: DateRange, skipIndex?: number): VacationParts[] {\n    const parts: VacationParts[] = [];\n    const isStartDateCrossed = !!ranges.find((item, index) =\u003e {\n        if (index !== skipIndex) {\n            if (\n                itemRange.startDate.format(\"DD.MM.YY\") === item.startDate.format(\"DD.MM.YY\")\n                || itemRange.endDate.format(\"DD.MM.YY\") === item.endDate.format(\"DD.MM.YY\")\n                || itemRange.endDate.format(\"DD.MM.YY\") === item.startDate.format(\"DD.MM.YY\")\n                || itemRange.startDate.format(\"DD.MM.YY\") === item.endDate.format(\"DD.MM.YY\")\n                || (itemRange.endDate.before(item.endDate) \u0026\u0026 itemRange.endDate.after(item.startDate))\n                || (itemRange.startDate.after(item.startDate) \u0026\u0026 itemRange.startDate.before(item.endDate))\n            ) {\n                return true\n            }\n        }\n\n        return false;\n    })\n    parts.push({\n        daysAmount: 1,\n        dashed: isStartDateCrossed\n    })\n    let currentIndex = 0;\n    itemRange.startDate = itemRange.startDate.addDate(0, 0, 1);\n\n    while (!itemRange.startDate.after(itemRange.endDate)) {\n        const isCurrentDayCrossed = !!ranges.find((item, index) =\u003e {\n            if (index !== skipIndex) {\n                if (\n                    itemRange.startDate.equal(item.startDate)\n                    || itemRange.endDate.equal(item.endDate)\n                    || itemRange.endDate.equal(item.startDate)\n                    || itemRange.startDate.equal(item.endDate)\n                    || (itemRange.endDate.before(item.endDate) \u0026\u0026 itemRange.endDate.after(item.startDate))\n                    || (itemRange.startDate.after(item.startDate) \u0026\u0026 itemRange.startDate.before(item.endDate))\n                ) {\n                    return true\n                }\n            }\n\n            return false;\n        });\n\n        const currentItem = parts[currentIndex];\n        if (currentItem.dashed !== isCurrentDayCrossed) {\n            currentIndex++\n            parts.push({\n                daysAmount: 1,\n                dashed: isCurrentDayCrossed\n            })\n        } else {\n            parts[currentIndex].daysAmount++;\n        }\n\n        itemRange.startDate = itemRange.startDate.addDate(0, 0, 1);\n    }\n\n    return parts;\n};","clientScriptOptions":{"allowNamespace":true,"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{"allowNamespace":true}},"dataNamespace":"","dataCode":"","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        const fieldReferences = {\n            baseVacations: {\n                search_field_name: \"staff_docs_new\",\n                start_date: \"start_date\",\n                end_date: \"end_date\",\n                duration: \"duration\",\n                staff: \"staff\",\n                status: \"line_status\"\n            },\n            additionalVacations: {\n                search_field_name: \"vacations_contract\",\n                start_date: \"start\",\n                end_date: \"end\",\n                duration: \"amount_of_days\",\n                staff: \"kedo_staff\",\n                status: \"status\"\n            },\n            baseBusinessTrips: {\n                search_field_name: \"staff_docs_new\",\n                start_date: \"start_date\",\n                end_date: \"end_date\",\n                duration: \"duration\",\n                staff: \"staff\",\n                status: \"line_status\"\n            },\n            additionalBusinessTrips: {\n                search_field_name: \"business_trips_contract\",\n                start_date: \"start_date\",\n                end_date: \"end_date\",\n                duration: \"duration\",\n                staff: \"kedo_staff\",\n                status: \"status\"\n            }\n        };\n        let vacationFieldFilters;\n        let businessTripsFieldFilters;\n        let users = [];\n        let subdivisions = [];\n        let userCategories = [];\n        let vacationsListMain = [];\n        let businessTripsMain = [];\n        let overtimeWorkMain = [];\n        let allAbsences = [];\n        let vacationsSearch;\n        let businessTripsSearch;\n        let overworkSearch;\n        let vacationData = [];\n        let takenRanges = [];\n        let absenseUsers = [];\n        let dateRange;\n        let absenseFromDateLimit = new TDate();\n        let absenseToDateLimit = new TDate();\n        const weekDayReferences = [\n            \"вс\",\n            \"пн\",\n            \"вт\",\n            \"ср\",\n            \"чт\",\n            \"пт\",\n            \"сб\"\n        ];\n        const MONTHS = ['', \"янв\", \"фев\", \"марта\", \"апр\", \"мая\", \"июня\", \"июля\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\"];\n        const colorReferences = {\n            business_trip: \"#6BD67C\",\n            common: \"#6BAAD8\",\n            restrict_cancel: \"#FF7976\",\n            pregnancy: \"#FFA900\",\n            child_care: \"#FFA900\",\n            sick_leave: \"#8F04A8\"\n        };\n        ;\n        ;\n        ;\n        function setFieldReference() {\n            businessTripsFieldFilters = Context.data.business_trips_exists ? fieldReferences.additionalBusinessTrips : fieldReferences.baseBusinessTrips;\n            vacationFieldFilters = Context.data.vacations_exists ? fieldReferences.additionalVacations : fieldReferences.baseVacations;\n        }\n        ;\n        function addVacationType(event) {\n            let vacationCode = event.target.dataset.variant;\n            if (Context.data.vacation_types_ids.indexOf(vacationCode) == -1) {\n                Context.data.vacation_types_ids.push(vacationCode);\n            }\n            else {\n                let codeIndex = Context.data.vacation_types_ids.indexOf(vacationCode);\n                Context.data.vacation_types_ids.splice(codeIndex, 1);\n            }\n            ;\n        }\n        ;\n        async function handleVariantsDisplay() {\n            Context.data.show_vacation_variants = [\"all\", \"vacations\"].indexOf(Context.data.absence_type.code) != -1;\n        }\n        ;\n        async function getAndSetDateRange() {\n            let now = new TDate();\n            let fromDate = new TDate(now.year, now.month, 1);\n            let toDate = fromDate.addDate(0, 1, -1);\n            Context.data.from_date = fromDate;\n            Context.data.to_date = toDate;\n        }\n        async function getOptions() {\n            const kedoOptions = Context.fields.kedo_options.app;\n            const vacationsIncluded = await kedoOptions.search().where(f =\u003e f.code.eq(\"podklyuchen_razdel_otpuskov\")).first().then(item =\u003e item.data.status);\n            const businessTripsIncluded = await kedoOptions.search().where(f =\u003e f.code.eq(\"travel_section_added\")).first().then(item =\u003e item.data.status);\n            Context.data.vacations_exists = vacationsIncluded;\n            Context.data.business_trips_exists = businessTripsIncluded;\n        }\n        ;\n        async function onInit() {\n            Context.data.vacation_types_ids = [];\n            await getOptions();\n            setFieldReference();\n            await getAndSetDateRange();\n            [subdivisions, userCategories] = await Promise.all([\n                await Context.fields.subdivision.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all(),\n                await Namespace.app.employees_categories.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all()\n            ]);\n        }\n        ;\n        async function getAbsences() {\n            var _a;\n            clearCalendar();\n            let dismissedUsersIds;\n            users = await Context.fields.staff.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            if (Context.data.staff_types \u0026\u0026 Context.data.staff_types.code == \"in_work\") {\n                dismissedUsersIds = users.filter(user =\u003e user.data.__status.code == \"dismissed\").map(user =\u003e user.id);\n                users = users.filter(user =\u003e user.data.__status.code != \"dismissed\");\n            }\n            ;\n            allAbsences = [];\n            let fromDate = Context.data.from_date;\n            let toDate = Context.data.to_date;\n            const vacationSearchExists = [\"all\", \"vacations\"].indexOf(Context.data.absence_type.code) != -1;\n            const businesstripSearchExists = [\"all\", \"business_trips\"].indexOf(Context.data.absence_type.code) != -1;\n            const overtimeWorkExists = Context.data.show_overwork;\n            if (overtimeWorkExists) {\n                overworkSearch = Context.fields.staff_docs_new.app.search().size(10000).where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.line_status.neq(null), f.start_date.neq(null), f.duration.neq(null), f.staff.neq(null), f.__name.like(\"сверхуроч\")));\n            }\n            ;\n            if (vacationSearchExists) {\n                vacationsSearch = Context.fields[vacationFieldFilters.search_field_name].app.search().size(10000).where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f[vacationFieldFilters.start_date].neq(null), f[vacationFieldFilters.end_date].neq(null), f[vacationFieldFilters.staff].neq(null)));\n            }\n            ;\n            if (businesstripSearchExists) {\n                businessTripsSearch = Context.fields[businessTripsFieldFilters.search_field_name].app.search().size(10000).where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f[businessTripsFieldFilters.start_date].neq(null), f[businessTripsFieldFilters.end_date].neq(null), f[businessTripsFieldFilters.staff].neq(null)));\n            }\n            ;\n            if (!Context.data.vacations_exists) {\n                vacationsSearch.where((f, g) =\u003e g.and(f.__name.like(\"отпуск\"), f.__name.like(\"приказ\")));\n            }\n            ;\n            if (!Context.data.business_trips_exists) {\n                businessTripsSearch.where((f, g) =\u003e g.and(f.__name.like(\"командировку\"), f.__name.like(\"приказ\")));\n            }\n            ;\n            if (Context.data.from_date) {\n                if (vacationSearchExists) {\n                    vacationsSearch.where((f, g) =\u003e g.and(f[vacationFieldFilters.end_date].gte(fromDate)));\n                }\n                ;\n                if (businesstripSearchExists) {\n                    businessTripsSearch.where((f, g) =\u003e g.and(f[businessTripsFieldFilters.end_date].gte(fromDate.asDatetime(new TTime))));\n                }\n                ;\n                if (overtimeWorkExists) {\n                    overworkSearch.where((f) =\u003e f.start_date.gte(Context.data.from_date));\n                }\n                ;\n            }\n            ;\n            if (Context.data.to_date) {\n                if (overtimeWorkExists) {\n                    overworkSearch.where((f) =\u003e f.start_date.lte(Context.data.to_date));\n                }\n                ;\n                if (vacationSearchExists) {\n                    vacationsSearch.where((f, g) =\u003e g.and(f[vacationFieldFilters.start_date].lte(toDate)));\n                }\n                ;\n                if (businessTripsSearch) {\n                    businessTripsSearch.where((f, g) =\u003e g.and(f[businessTripsFieldFilters.start_date].lte(toDate.asDatetime(new TTime))));\n                }\n                ;\n            }\n            ;\n            if (vacationSearchExists) {\n                vacationsListMain = await vacationsSearch.all();\n            }\n            ;\n            if (businesstripSearchExists) {\n                businessTripsMain = await businessTripsSearch.all();\n            }\n            ;\n            if (overtimeWorkExists) {\n                overtimeWorkMain = await overworkSearch.all();\n            }\n            ;\n            if (Context.data.vacation_types_ids \u0026\u0026 Context.data.vacation_types_ids.length \u003e 0 \u0026\u0026 vacationSearchExists) {\n                if (Context.data.vacations_exists) {\n                    vacationsListMain = vacationsListMain.filter(vacation =\u003e { var _a; return Context.data.vacation_types_ids.indexOf((_a = vacation.data.type_of) === null || _a === void 0 ? void 0 : _a.code) != -1; });\n                }\n                else {\n                    vacationsListMain = vacationsListMain.filter(vacation =\u003e Context.data.vacation_types_ids.indexOf(vacation.data.__sourceRef.code) != -1);\n                }\n                ;\n            }\n            ;\n            if (vacationSearchExists) {\n                vacationsListMain = vacationsListMain.filter(vacation =\u003e !vacation.data[vacationFieldFilters.start_date].after(vacation.data[vacationFieldFilters.end_date]));\n            }\n            ;\n            if (businesstripSearchExists) {\n                businessTripsMain = businessTripsMain.filter(trip =\u003e !trip.data[businessTripsFieldFilters.start_date].after(trip.data[businessTripsFieldFilters.end_date]));\n            }\n            ;\n            if (!!Context.data.staff \u0026\u0026 ((_a = Context.data.staff) === null || _a === void 0 ? void 0 : _a.length) \u003e 0) {\n                let staffUsers = await Promise.all([...Context.data.staff.map(async (user) =\u003e await user.fetch())]).then(users =\u003e users.map(u =\u003e u.id));\n                if (overtimeWorkExists) {\n                    overtimeWorkMain = overtimeWorkMain.filter((work) =\u003e {\n                        if (!work.data.staff) {\n                            return;\n                        }\n                        ;\n                        return staffUsers.indexOf(work.data.staff.id) != -1;\n                    });\n                }\n                ;\n                if (vacationSearchExists) {\n                    vacationsListMain = vacationsListMain.filter((vacation) =\u003e {\n                        if (!vacation.data[vacationFieldFilters.staff]) {\n                            return false;\n                        }\n                        ;\n                        return staffUsers.indexOf(vacation.data[vacationFieldFilters.staff].id) != -1;\n                    });\n                }\n                ;\n                if (businesstripSearchExists) {\n                    businessTripsMain = businessTripsMain.filter((trip) =\u003e {\n                        if (!trip.data[businessTripsFieldFilters.staff]) {\n                            return false;\n                        }\n                        ;\n                        return staffUsers.indexOf(trip.data[businessTripsFieldFilters.staff].id) != -1;\n                    });\n                }\n                ;\n            }\n            ;\n            if (!!Context.data.organization) {\n                let organizationId = Context.data.organization.id;\n                if (overtimeWorkExists) {\n                    overtimeWorkMain = overtimeWorkMain.filter(work =\u003e {\n                        var _a;\n                        let staffUser = users.find(user =\u003e { var _a; return user.id == ((_a = work.data.staff) === null || _a === void 0 ? void 0 : _a.id); });\n                        if (!staffUser) {\n                            return;\n                        }\n                        ;\n                        return ((_a = staffUser.data.organization) === null || _a === void 0 ? void 0 : _a.id) == organizationId;\n                    });\n                }\n                if (vacationSearchExists) {\n                    vacationsListMain = vacationsListMain.filter((v) =\u003e {\n                        let staffUser = users.find(user =\u003e user.id == v.data[vacationFieldFilters.staff].id);\n                        if (!staffUser) {\n                            return false;\n                        }\n                        ;\n                        return staffUser.data.organization.id == organizationId;\n                    });\n                }\n                ;\n                if (businesstripSearchExists) {\n                    businessTripsMain = businessTripsMain.filter((trip) =\u003e {\n                        var _a;\n                        let travelingUser = users.find(user =\u003e user.id == trip.data[businessTripsFieldFilters.staff].id);\n                        if (!travelingUser) {\n                            return false;\n                        }\n                        ;\n                        return ((_a = travelingUser.data.organization) === null || _a === void 0 ? void 0 : _a.id) == organizationId;\n                    });\n                }\n                ;\n            }\n            ;\n            if (!!Context.data.subdivision) {\n                let subdivisionId = Context.data.subdivision.id;\n                if (overtimeWorkExists) {\n                    overtimeWorkMain = overtimeWorkMain.filter((work) =\u003e {\n                        var _a;\n                        let staffUser = users.find(user =\u003e { var _a; return user.id == ((_a = work.data.staff) === null || _a === void 0 ? void 0 : _a.id); });\n                        if (!staffUser) {\n                            return;\n                        }\n                        ;\n                        return ((_a = staffUser.data.structural_subdivision) === null || _a === void 0 ? void 0 : _a.id) == subdivisionId;\n                    });\n                }\n                if (vacationSearchExists) {\n                    vacationsListMain = vacationsListMain.filter((vacation) =\u003e {\n                        var _a;\n                        let user = users.find(u =\u003e u.id == vacation.data[vacationFieldFilters.staff].id);\n                        if (!user) {\n                            return false;\n                        }\n                        ;\n                        return ((_a = user.data.structural_subdivision) === null || _a === void 0 ? void 0 : _a.id) == subdivisionId;\n                    });\n                }\n                ;\n                if (businesstripSearchExists) {\n                    businessTripsMain = businessTripsMain.filter((trip) =\u003e {\n                        var _a;\n                        let travellingUser = users.find(u =\u003e u.id == trip.data[businessTripsFieldFilters.staff].id);\n                        if (!travellingUser) {\n                            return false;\n                        }\n                        ;\n                        return ((_a = travellingUser.data.structural_subdivision) === null || _a === void 0 ? void 0 : _a.id) == subdivisionId;\n                    });\n                }\n                ;\n            }\n            ;\n            if (Context.data.staff_types \u0026\u0026 Context.data.staff_types.code == \"in_work\") {\n                if (vacationSearchExists) {\n                    vacationsListMain = vacationsListMain.filter(vacation =\u003e dismissedUsersIds.indexOf(vacation.data[vacationFieldFilters.staff].id) == -1);\n                }\n                ;\n                if (businesstripSearchExists) {\n                    businessTripsMain = businessTripsMain.filter(trip =\u003e dismissedUsersIds.indexOf(trip.data[businessTripsFieldFilters.staff].id) == -1);\n                }\n                ;\n                if (overtimeWorkExists) {\n                    overtimeWorkMain = overtimeWorkMain.filter(work =\u003e dismissedUsersIds.indexOf(work.data.staff.id) == -1);\n                }\n                ;\n            }\n            ;\n            if (vacationSearchExists) {\n                vacationsListMain.forEach(vacation =\u003e serializeData(vacation));\n            }\n            ;\n            if (businesstripSearchExists) {\n                businessTripsMain.forEach(trip =\u003e serializeData(trip));\n            }\n            ;\n            if (vacationsListMain.length \u003c 1 \u0026\u0026 businessTripsMain.length \u003c 1) {\n                Context.data.absences_empty = true;\n                return;\n            }\n            ;\n            console.log(allAbsences);\n            await renderGantt();\n        }\n        ;\n        async function serializeData(absence) {\n            var _a, _b;\n            let absenseObj;\n            let id = \"\";\n            let staff_id = \"\";\n            let days_amount = 0;\n            let from_date;\n            let to_date;\n            let absence_type = \"\";\n            let absence_link = \"\";\n            let absenseIsBusinessTrip = [\"business_trips\", \"memo_business_trip\"].indexOf(absence.code) != -1;\n            let serializeFieldsReference = absenseIsBusinessTrip ? businessTripsFieldFilters : vacationFieldFilters;\n            let userIdMock = \"123456\";\n            let restrict_cancel = false;\n            let vacation_type = \"\";\n            let user = users.find(u =\u003e u.id == absence.data[serializeFieldsReference.staff].id);\n            let userCategoryIds = ((_a = user.data.staff_categories) === null || _a === void 0 ? void 0 : _a.map(category =\u003e category.id)) || [];\n            let fetchedCategories = userCategories.filter(category =\u003e userCategoryIds.indexOf(category.id) != -1);\n            let vacation_type_name = \"\";\n            let fromDateString = \"\";\n            let toDateString = \"\";\n            if (fetchedCategories.some(category =\u003e !category.data.possibility_recall_from_vacation)) {\n                restrict_cancel = true;\n            }\n            ;\n            id = absence.id;\n            staff_id = (user === null || user === void 0 ? void 0 : user.id) || userIdMock;\n            days_amount = absence.data[serializeFieldsReference.duration];\n            if (absenseIsBusinessTrip) {\n                let tripFromDate = absence.data[serializeFieldsReference.start_date];\n                let tripToDate = absence.data[serializeFieldsReference.end_date];\n                from_date = tripFromDate;\n                to_date = tripToDate;\n                if (Context.data.business_trips_exists) {\n                    fromDateString = absence.data.start_date_string;\n                    toDateString = absence.data.end_date_string;\n                }\n            }\n            else {\n                let vacationFromDate = absence.data[serializeFieldsReference.start_date];\n                let vacationToDate = absence.data[serializeFieldsReference.end_date];\n                from_date = vacationFromDate;\n                to_date = vacationToDate;\n                if (Context.data.vacations_exists) {\n                    fromDateString = absence.data.start_string;\n                    toDateString = absence.data.end_string;\n                }\n            }\n            ;\n            absence_type = absenseIsBusinessTrip ? \"business_trips\" : \"vacations\";\n            if (absence.data.__sourceRef) {\n                const sourceRef = absence.data.__sourceRef;\n                absence_link = `./(p:item/${sourceRef.namespace}/${sourceRef.code}/${sourceRef.id})`;\n            }\n            else {\n                absence_link = `./(p:item/${absence.namespace}/${absence.code}/${id})`;\n            }\n            restrict_cancel = false;\n            vacation_type = ((_b = absence.data.type_of) === null || _b === void 0 ? void 0 : _b.code) || undefined;\n            if (absence.data.type_of) {\n                vacation_type_name = absence.data.type_of.name;\n            }\n            else if (!absenseIsBusinessTrip) {\n                vacation_type_name = absence.data.__sourceRef.code == \"leave_without_pay\" ? \"Отпуск без сохранения заработной платы\" : \"Ежегодный отпуск\";\n            }\n            else {\n                vacation_type_name = \"Командировка\";\n                vacation_type = \"business_trip\";\n            }\n            ;\n            absenseObj = {\n                id,\n                staff_id,\n                days_amount,\n                from_date,\n                to_date,\n                absence_type,\n                absence_link,\n                restrict_cancel,\n                vacation_type,\n                to_date_for_render: toDateString,\n                from_date_for_render: fromDateString,\n                vacation_type_name\n            };\n            allAbsences.push(absenseObj);\n        }\n        ;\n        async function renderGantt() {\n            vacationData = [];\n            takenRanges = [];\n            for (let absense of allAbsences) {\n                const personsVacation = vacationData.find(item =\u003e item.id === absense.staff_id);\n                const personWasAdded = !!personsVacation;\n                if (personWasAdded) {\n                    personsVacation.vacations.push(absense);\n                    continue;\n                }\n                ;\n                const user = users.find(u =\u003e u.id == absense.staff_id);\n                const name = user.data.__name;\n                const newPerson = {\n                    id: absense.staff_id,\n                    name: name,\n                    vacations: [absense]\n                };\n                vacationData.push(newPerson);\n            }\n            ;\n            await renderPage();\n        }\n        ;\n        async function renderPage() {\n            await renderUsers();\n            await renderCalendar();\n            renderVacations();\n        }\n        ;\n        function addStaffAtWork(staff) {\n            var _a, _b, _c;\n            const root = document.querySelector(\".calendar-schedule__left-menu-container\");\n            const template = document.querySelector(\".left-menu__template\");\n            for (let user of staff) {\n                const element = template.content.cloneNode(true);\n                const text = element.querySelector(\".left-menu__item-text\");\n                text.innerText = user.data.__name;\n                const wrapper = element.querySelector(\".left-menu__item\");\n                wrapper.dataset.id = user.data.__id;\n                const card = element.querySelector(\".user-card\");\n                card.dataset.key = user.data.__id;\n                const cardName = card.querySelector(\".user-card__name\");\n                cardName.innerText = user.data.__name;\n                if (user.data.email) {\n                    const cardEmail = card.querySelector(\".user-card__email\");\n                    cardEmail.innerText = (_a = user.data.email) === null || _a === void 0 ? void 0 : _a.email;\n                    cardEmail.href = `mailto: ${(_b = user.data.email) === null || _b === void 0 ? void 0 : _b.email}`;\n                }\n                if (user.data.phone) {\n                    const cardPhone = card.querySelector(\".user-card__phone\");\n                    cardPhone.innerText = (_c = user.data.phone) === null || _c === void 0 ? void 0 : _c.tel;\n                }\n                const userImageText = element.querySelector(\".user-card__image-text\");\n                let userNameArray = user.data.__name.split(\" \");\n                userImageText.innerText = userNameArray.length \u003e 1 ? userNameArray[0][0] + userNameArray[1][0] : userNameArray[0];\n                const userTextElement = element.querySelector(\".left-menu__item\");\n                userTextElement.addEventListener(\"click\", async (e) =\u003e {\n                    e.stopPropagation();\n                    const activeCard = document.querySelector(\".user-card--active\");\n                    if (!!activeCard) {\n                        activeCard.classList.remove(\"user-card--active\");\n                    }\n                    if ((activeCard === null || activeCard === void 0 ? void 0 : activeCard.dataset.key) === user.data.__id)\n                        return;\n                    const userCard = document.querySelector(`[data-key='${user.data.__id}']`);\n                    userCard.classList.toggle(\"user-card--active\");\n                });\n                card.addEventListener(\"click\", (e) =\u003e {\n                    e.stopPropagation();\n                });\n                root.append(element);\n            }\n        }\n        async function renderUsers() {\n            var _a, _b, _c;\n            const root = document.querySelector(\".calendar-schedule__left-menu-container\");\n            const template = document.querySelector(\".left-menu__template\");\n            for (let absense of vacationData) {\n                const user = users.find(item =\u003e item.id === absense.id);\n                if (!user) {\n                    continue;\n                }\n                ;\n                const element = template.content.cloneNode(true);\n                const text = element.querySelector(\".left-menu__item-text\");\n                const wrapper = element.querySelector(\".left-menu__item\");\n                const card = element.querySelector(\".user-card\");\n                const cardName = card.querySelector(\".user-card__name\");\n                text.innerText = absense.name;\n                wrapper.dataset.id = absense.id;\n                card.dataset.key = absense.id;\n                cardName.innerText = absense.name;\n                if (user.data.email) {\n                    const cardEmail = card.querySelector(\".user-card__email\");\n                    cardEmail.innerText = (_a = user.data.email) === null || _a === void 0 ? void 0 : _a.email;\n                    cardEmail.href = `mailto: ${(_b = user.data.email) === null || _b === void 0 ? void 0 : _b.email}`;\n                }\n                if (user.data.phone) {\n                    const cardPhone = card.querySelector(\".user-card__phone\");\n                    cardPhone.innerText = (_c = user.data.phone) === null || _c === void 0 ? void 0 : _c.tel;\n                }\n                const userImageText = element.querySelector(\".user-card__image-text\");\n                let userNameArray = user.data.__name.split(\" \");\n                userImageText.innerText = userNameArray[0][0] + userNameArray[1][0];\n                const userTextElement = element.querySelector(\".left-menu__item\");\n                userTextElement.addEventListener(\"click\", async (e) =\u003e {\n                    e.stopPropagation();\n                    const activeCard = document.querySelector(\".user-card--active\");\n                    if (!!activeCard) {\n                        activeCard.classList.remove(\"user-card--active\");\n                    }\n                    if ((activeCard === null || activeCard === void 0 ? void 0 : activeCard.dataset.key) === user.data.__id)\n                        return;\n                    const userCard = document.querySelector(`[data-key='${user.data.__id}']`);\n                    userCard.classList.toggle(\"user-card--active\");\n                });\n                card.addEventListener(\"click\", (e) =\u003e {\n                    e.stopPropagation();\n                });\n                root.appendChild(element);\n            }\n            ;\n            if (Context.data.staff_types \u0026\u0026 Context.data.staff_types.code !== \"missing\") {\n                const staffAtWork = users.filter(user =\u003e vacationData.map(data =\u003e data.id).indexOf(user.id) == -1);\n                addStaffAtWork(staffAtWork);\n            }\n            ;\n        }\n        ;\n        const renderCalendar = async () =\u003e {\n            dateRange = { startDate: Context.data.from_date, endDate: Context.data.to_date };\n            const weekTemplate = document.querySelector(\".template-calendar-week\");\n            const root = document.querySelector(\".calendar-schedule__calendar-wrapper\");\n            while (dateRange.startDate.before(dateRange.endDate)) {\n                const element = weekTemplate.content.cloneNode(true);\n                let dayElements = element.querySelectorAll(\".calendar__day-number\");\n                let weekDaysElements = element.querySelectorAll(\".calendar__week-day p\");\n                let weekStart = dateRange.startDate;\n                for (let i = 0; i \u003c= 6; i++) {\n                    let weekDate = new Date(weekStart.format());\n                    let weekDay = weekDate.getDay();\n                    let weekDayName = weekDayReferences[weekDay];\n                    weekDaysElements[i].innerText = weekDayName;\n                    weekStart = weekStart.addDate(0, 0, 1);\n                }\n                let dayNumber = dateRange.startDate.day;\n                let i = 0;\n                for (i; i \u003c= 6; i++) {\n                    let dayText = dayElements[i].querySelector(\"p\");\n                    dayText.innerText = dayNumber;\n                    dayNumber = dateRange.startDate.addDate(0, 0, i + 1).day;\n                }\n                ;\n                const weekText = element.querySelector(\".calendar__week-header-text\");\n                let innerTextWeek = '';\n                const startWeekText = dateRange.startDate.day;\n                const endWeekText = dateRange.startDate.addDate(0, 0, 6).day;\n                if (endWeekText \u003c startWeekText) {\n                    innerTextWeek = `${startWeekText} ${MONTHS[dateRange.startDate.month]} - ${endWeekText} ${MONTHS[dateRange.startDate.addDate(0, 0, 6).month]}`;\n                }\n                else {\n                    innerTextWeek = `${dateRange.startDate.day}-${dateRange.startDate.day + i} ${MONTHS[dateRange.startDate.month]}`;\n                }\n                ;\n                weekText.innerText = innerTextWeek;\n                const containers = Array.from(element.querySelector(\".calendar__days-wrapper\").children);\n                for (let f = 0; f \u003c i + 1; f++) {\n                    if (f \u003e= 7) {\n                        continue;\n                    }\n                    const elementContainer = containers[f].querySelector('.calendar__column-day-container');\n                    for (let j = 0; j \u003c vacationData.length; j++) {\n                        const cell = document.createElement(\"div\");\n                        cell.classList.add(\"day-cell\");\n                        cell.dataset.userid = vacationData[j].id;\n                        cell.dataset.day = dateRange.startDate.addDate(0, 0, f).format(\"DD.MM.YYYY\");\n                        elementContainer.append(cell);\n                    }\n                    containers[f].append(elementContainer);\n                    let weekDay = containers[f].querySelector(\".calendar__week-day p\").innerText;\n                    if (weekDay == \"пт\" || weekDay == \"сб\") {\n                        containers[f].classList.add('calendar__day--weekend');\n                    }\n                }\n                let weekWrapper = element.querySelector(\".calendar__days-wrapper\");\n                root.append(element);\n                let minWidth = Math.floor(18 * i);\n                weekWrapper.style.minWidth = `${minWidth}px`;\n                const cell = document.createElement(\"div\");\n                cell.classList.add(\"day-cell\");\n                dateRange.startDate = dateRange.startDate.addDate(0, 0, 7);\n            }\n            ;\n            absenseFromDateLimit = Context.data.from_date;\n            let lastWeekWrapper = Array.from(document.querySelectorAll(\".calendar__days-wrapper\")).slice(-1)[0];\n            let lastDayWrapper = Array.from(lastWeekWrapper.querySelectorAll(\".calendar__day\")).slice(-1)[0];\n            let lastDayDate = lastDayWrapper.querySelector(\".calendar__column-day-container .day-cell\").dataset.day;\n            let dateArray = lastDayDate.split(\".\");\n            let [day, month, year] = [dateArray[0], dateArray[1], dateArray[2]];\n            absenseToDateLimit = new TDate(year, month, day);\n            setMinMaxDates();\n        };\n        function setTooltipOffset(tooltip) {\n            let offsetX = Math.ceil(tooltip.previousSibling.offsetWidth / 2) + Math.ceil(tooltip.offsetWidth / 2);\n            tooltip.style.transform = `translateX(${offsetX}px)`;\n        }\n        ;\n        const renderVacations = () =\u003e {\n            const allRanges = [];\n            const root = document.querySelector(\".calendar-schedule__calendar-wrapper\");\n            const leftBorder = root.getBoundingClientRect().x;\n            const rightBorder = root.getBoundingClientRect().width + root.getBoundingClientRect().x;\n            for (let personVacations of vacationData) {\n                for (let vacation of personVacations.vacations) {\n                    allRanges.push({ startDate: vacation.from_date, endDate: vacation.to_date });\n                }\n                ;\n            }\n            ;\n            let counterHelper = 0;\n            for (let personVacations of vacationData) {\n                let userNameArr = personVacations.name.split(\" \");\n                let userName = userNameArr.length \u003e 2 ? `${userNameArr[0]} ${userNameArr[1][0]}. ${userNameArr[2][0]}.` : `${userNameArr[0]} ${userNameArr[1][0]}.`;\n                for (let vacation of personVacations.vacations) {\n                    let vacationFromDate = vacation.from_date_for_render;\n                    let vacationToDate = vacation.to_date_for_render;\n                    let correspondingCell = document.querySelector(`[data-day='${vacation.from_date.format(\"DD.MM.YYYY\")}'][data-userid='${personVacations.id}']`);\n                    const newElement = document.createElement('a');\n                    let tooltipBackgroundColor = \"\";\n                    const vacationRenderParts = getRenderParts(allRanges, { startDate: vacation.from_date, endDate: vacation.to_date }, counterHelper);\n                    console.log(vacationRenderParts);\n                    for (let k = 0; k \u003c vacationRenderParts.length; k++) {\n                        const barPartElement = document.createElement(\"div\");\n                        barPartElement.classList.add('vacation-bar__part');\n                        let borderColor = vacation.restrict_cancel ? colorReferences[\"restrict_cancel\"] : colorReferences[vacation.vacation_type] || colorReferences.common;\n                        tooltipBackgroundColor = borderColor;\n                        barPartElement.style.border = `2px solid ${borderColor}`;\n                        if (k === 0) {\n                            barPartElement.classList.add('vacation-bar__part--start');\n                        }\n                        if (k === vacationRenderParts.length - 1) {\n                            barPartElement.classList.add('vacation-bar__part--end');\n                        }\n                        if (vacationRenderParts[k].dashed) {\n                            barPartElement.classList.add(\"dashed\");\n                            barPartElement.style.background = `repeating-linear-gradient(45deg, ${borderColor} 0, ${borderColor} 2px, rgb(107 170 216 / 0%) 3px, rgb(107 170 216 / 0%) 5px)`;\n                            if (k !== 0) {\n                                barPartElement.style.borderLeft = `0`;\n                            }\n                            ;\n                        }\n                        ;\n                        barPartElement.style.width = `${vacationRenderParts[k].daysAmount * 18.2}px`;\n                        newElement.append(barPartElement);\n                    }\n                    ;\n                    newElement.classList.add('vacation-bar');\n                    const tooltip = document.createElement('div');\n                    tooltip.classList.add('vacation-bar__tooltip');\n                    tooltip.style.backgroundColor = tooltipBackgroundColor;\n                    tooltip.innerHTML = `${userName}\u003cbr\u003e${vacation.vacation_type_name}\u003cbr\u003e${vacationFromDate} - ${vacationToDate}`;\n                    newElement.href = vacation.absence_link;\n                    takenRanges.push({ startDate: vacation.from_date, endDate: vacation.to_date });\n                    newElement.addEventListener(\"mousemove\", (e) =\u003e {\n                        let tooltip = newElement.nextElementSibling;\n                        let rect = e.target.getBoundingClientRect();\n                        let x = e.clientX - rect.left;\n                        let tooltipWidth = tooltip.getBoundingClientRect().width;\n                        let toolTipOffset = x - tooltipWidth;\n                        let oldLeftValue = tooltip.style.left;\n                        if (tooltip.getBoundingClientRect().x \u003c leftBorder) {\n                            toolTipOffset += leftBorder - tooltip.getBoundingClientRect().x;\n                        }\n                        else if (tooltip.getBoundingClientRect().x + tooltipWidth \u003e rightBorder) {\n                            let tooltipRightBorder = tooltip.getBoundingClientRect().x + tooltipWidth;\n                            toolTipOffset += rightBorder - tooltipRightBorder;\n                        }\n                        ;\n                        tooltip.style.left = `${toolTipOffset}px`;\n                        if (tooltip.getBoundingClientRect().x \u003c leftBorder) {\n                            tooltip.style.left = oldLeftValue;\n                        }\n                        else if (tooltip.getBoundingClientRect().x + tooltipWidth \u003e rightBorder) {\n                            tooltip.style.left = oldLeftValue;\n                        }\n                        ;\n                    });\n                    correspondingCell.append(newElement);\n                    correspondingCell.append(tooltip);\n                    counterHelper++;\n                }\n                ;\n            }\n            ;\n            if (!!overtimeWorkMain \u0026\u0026 overtimeWorkMain.length \u003e 0) {\n                setTimeTrackingDots();\n            }\n            ;\n        };\n        async function setTimeTrackingDots() {\n            let dayCells = document.querySelectorAll(\".day-cell\");\n            for (let cell of dayCells) {\n                let cellDay = cell.getAttribute(\"data-day\");\n                let cellUserId = cell.getAttribute(\"data-userid\");\n                let trackingDot = overtimeWorkMain.find((item) =\u003e {\n                    return item.data.staff.id == cellUserId \u0026\u0026 item.data.start_date.format(\"DD.MM.YYYY\") == cellDay;\n                });\n                if (!!trackingDot) {\n                    const tooltip = document.createElement('div');\n                    let user = users.find(u =\u003e u.id == trackingDot.data.staff.id);\n                    let newDot = document.createElement(\"div\");\n                    let hours = trackingDot.data.duration;\n                    let hoursSpelling = \"\";\n                    switch (true) {\n                        case (hours \u003c 2):\n                            hoursSpelling = \"час\";\n                            break;\n                        case (hours \u003e 1 \u0026\u0026 hours \u003c 5):\n                            hoursSpelling = \"часа\";\n                            break;\n                        case (hours \u003e 4 \u0026\u0026 hours \u003c 21):\n                            hoursSpelling = \"часов\";\n                            break;\n                        case (hours.toString().split(\"\")[0] == \"1\"):\n                            hoursSpelling = \"часа\";\n                            break;\n                        default:\n                            hoursSpelling = \"часов\";\n                    }\n                    ;\n                    tooltip.classList.add('vacation-bar__tooltip');\n                    tooltip.style.backgroundColor = \"#5eafd8\";\n                    tooltip.innerHTML = `${user.data.__name}\u003cbr\u003e${trackingDot.data.__name}\u003cbr\u003e${trackingDot.data.start_date.format(\"DD.MM.YY\")} (${hours} ${hoursSpelling})`;\n                    newDot.className = \"time-tracking-dot\";\n                    cell.appendChild(newDot);\n                    cell.appendChild(tooltip);\n                    setTooltipOffset(tooltip);\n                }\n                ;\n            }\n            ;\n        }\n        ;\n        function clearCalendar() {\n            let leftMenuRoot = document.querySelector(\".calendar-schedule__left-menu-container\");\n            let calendarRoot = document.querySelector(\".calendar-schedule__calendar-wrapper\");\n            leftMenuRoot.innerHTML = \"\";\n            calendarRoot.innerHTML = \"\";\n        }\n        ;\n        function setMinMaxDates() {\n            vacationData.forEach((data) =\u003e {\n                data.vacations.forEach((vacation) =\u003e {\n                    if (vacation.from_date.before(absenseFromDateLimit.asDatetime(new TTime))) {\n                        vacation.from_date = absenseFromDateLimit;\n                    }\n                    ;\n                    if (vacation.to_date.after(absenseToDateLimit.asDatetime(new TTime))) {\n                        vacation.to_date = absenseToDateLimit;\n                    }\n                    ;\n                });\n            });\n        }\n        ;\n        function getRenderParts(ranges, itemRange, skipIndex) {\n            const parts = [];\n            const isStartDateCrossed = !!ranges.find((item, index) =\u003e {\n                if (index !== skipIndex) {\n                    if (itemRange.startDate.format(\"DD.MM.YY\") === item.startDate.format(\"DD.MM.YY\")\n                        || itemRange.endDate.format(\"DD.MM.YY\") === item.endDate.format(\"DD.MM.YY\")\n                        || itemRange.endDate.format(\"DD.MM.YY\") === item.startDate.format(\"DD.MM.YY\")\n                        || itemRange.startDate.format(\"DD.MM.YY\") === item.endDate.format(\"DD.MM.YY\")\n                        || (itemRange.endDate.before(item.endDate) \u0026\u0026 itemRange.endDate.after(item.startDate))\n                        || (itemRange.startDate.after(item.startDate) \u0026\u0026 itemRange.startDate.before(item.endDate))) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n            parts.push({\n                daysAmount: 1,\n                dashed: isStartDateCrossed\n            });\n            let currentIndex = 0;\n            itemRange.startDate = itemRange.startDate.addDate(0, 0, 1);\n            while (!itemRange.startDate.after(itemRange.endDate)) {\n                const isCurrentDayCrossed = !!ranges.find((item, index) =\u003e {\n                    if (index !== skipIndex) {\n                        if (itemRange.startDate.equal(item.startDate)\n                            || itemRange.endDate.equal(item.endDate)\n                            || itemRange.endDate.equal(item.startDate)\n                            || itemRange.startDate.equal(item.endDate)\n                            || (itemRange.endDate.before(item.endDate) \u0026\u0026 itemRange.endDate.after(item.startDate))\n                            || (itemRange.startDate.after(item.startDate) \u0026\u0026 itemRange.startDate.before(item.endDate))) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n                const currentItem = parts[currentIndex];\n                if (currentItem.dashed !== isCurrentDayCrossed) {\n                    currentIndex++;\n                    parts.push({\n                        daysAmount: 1,\n                        dashed: isCurrentDayCrossed\n                    });\n                }\n                else {\n                    parts[currentIndex].daysAmount++;\n                }\n                itemRange.startDate = itemRange.startDate.addDate(0, 0, 1);\n            }\n            return parts;\n        }\n        ;\n        return {\n            setFieldReference,\n            addVacationType,\n            handleVariantsDisplay,\n            getAndSetDateRange,\n            getOptions,\n            onInit,\n            getAbsences,\n            serializeData,\n            renderGantt,\n            renderPage,\n            addStaffAtWork,\n            renderUsers,\n            setTooltipOffset,\n            setTimeTrackingDots,\n            clearCalendar,\n            setMinMaxDates,\n            getRenderParts\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"setFieldReference","parameters":[],"type":""},{"name":"addVacationType","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"handleVariantsDisplay","parameters":[],"type":"[object Object]"},{"name":"getAndSetDateRange","parameters":[],"type":""},{"name":"getOptions","parameters":[],"type":"[object Object]"},{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"getAbsences","parameters":[],"type":"[object Object]"},{"name":"serializeData","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"renderGantt","parameters":[],"type":"[object Object]"},{"name":"renderPage","parameters":[],"type":""},{"name":"addStaffAtWork","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"renderUsers","parameters":[],"type":""},{"name":"setTooltipOffset","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"setTimeTrackingDots","parameters":[],"type":""},{"name":"clearCalendar","parameters":[],"type":""},{"name":"setMinMaxDates","parameters":[],"type":""},{"name":"getRenderParts","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:08.557689894Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:08:10.017757399Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
