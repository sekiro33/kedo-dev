{"__id":"018c8757-f912-7a23-adad-6187c1cfa99c","namespace":"kedo.rights_settings_by_doc","code":"forma_prosmotra","__name":"Форма просмотра","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":4,"hidden":false,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"3077c0fb-d133-4bbb-bfb3-a90e987ab1e1","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"formGroup":{"path":["item"]}},"content":{"[footer]":[{"id":"e5f835fc-97b9-4ed5-9df5-45e83bad58a5","descriptor":"zone-content","values":{"zoneCode":"[footer]"}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"11072e42-0082-4ff3-97ce-7e80684dae33","descriptor":"dynamic-form-row","values":{"control":{"path":["item","organization"]},"tooltip":null,"required":false,"hideEmpty":false,"__readOnly":true,"showDisplayName":true,"bindingMode":false,"showCreateItem":false,"__isConstValues":[]}},{"id":"c8f3c817-905a-4069-a76e-777c6a897b14","descriptor":"dynamic-form-row","values":{"__readOnly":true,"bindingMode":false,"__isConstValues":[],"showDisplayName":true,"control":{"path":["item","org_groups"]},"tooltip":null,"required":false,"hideEmpty":false}},{"id":"30339cee-4a19-4d5f-a92f-ddc712308804","descriptor":"groupbox","values":{"styleEnum":[{"code":"default","name":"Default"}],"collapsible":false,"__isConstValues":[],"__renderContentAsync":false,"title":"Доступы","expanded":true},"content":{"":[{"id":"1c95f438-89eb-405f-aaea-902e22533aa8","descriptor":"code","values":{"html":"\u003cstyle\u003e\n    .kedo-table {\n        border-collapse: separate;\n        border-spacing: 3rem;\n        white-space: normal;\n        width: 100%;\n        table-layout: fixed;\n    }\n\n    .kedo-table_head-cell:last-child {\n        margin-right: 4.5rem;\n    }\n\n    .doc-row {\n        align-items: center;\n        border-bottom: 1px solid #D9D9D9;\n        padding: 1rem;\n        justify-content: space-between;\n        position: relative;\n        width: 100%;\n    }\n\n    .doc-cell {\n        word-wrap: break-word;\n    }\n\n    .table-head {\n        font-weight: 600;\n        border-bottom: 1px solid black;\n    }\n\n    .doc-access {\n        display: flex;\n    }\n\n    .kedo-button {\n        width: 5rem;\n        height: 4rem;\n        text-align: center;\n        border: 1px solid #d9d9d9;\n        color: #595959;\n        transition: all 0.3s;\n    }\n\n    .kedo-button:hover {\n        background-color: #e8e8e8;\n    }\n\n    .kedo-button.clicked {\n        background-color: #cccccc;\n        cursor: default;\n    }\n\n    .button-access {\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n    }\n\n    .button-restrict{\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n    }\n\n\u003c/style\u003e\n\u003ctable class=\"kedo-table\"\u003e\n    \u003cthead class=\"kedo-table_head\"\u003e\n        \u003ctr class=\"table-head doc-row\"\u003e\n            \u003ctd class=\"kedo-table_head-cell\"\u003eДокумент\u003c/th\u003e\n            \u003ctd class=\"kedo-table_head-cell\"\u003eНеймспейс и код\u003c/th\u003e\n            \u003ctd class=\"kedo-table_head-cell\"\u003eДоступ\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n\u003c/table\u003e\n\u003ctemplate class=\"custom-table-row\"\u003e\n    \u003ctr class=\"doc-row\"\u003e\n        \u003ctd class=\"doc-cell doc-name\"\u003e\n            Тестовый документ\n        \u003c/td\u003e\n        \u003ctd class=\"doc-cell doc-ns-code\"\u003e\n            kedo;personnel_documents\n        \u003c/td\u003e\n        \u003ctd class=\"doc-cell doc-access\"\u003e\n            \u003cbutton class=\"kedo-button button-restrict\" data-access=\"false\"\u003eНет\u003c/button\u003e\n            \u003cbutton class=\"kedo-button button-access\" data-access=\"true\"\u003eДа\u003c/button\u003e\n        \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/template\u003e","hideContent":false,"contentPlaceholder":""}}]}}]}}],"[sidebar]":[{"id":"32a2c1e4-d376-4aea-8808-09ff7d74034b","descriptor":"sidebar-widget","content":{"":[{"id":"484d74f7-e2f0-413b-83fd-42416ffc4c9f","descriptor":"portal-user-profile-status","values":{"formGroup":{"path":["item"]}}}]}},{"id":"2f4caa85-bf2f-4379-b888-119b342093c8","descriptor":"sidebar-widget","values":{"title":"Статус в Диадок"},"content":{"":[{"id":"6dbf42cc-a55b-4720-827a-93d271b847b0","descriptor":"diadoc-status","values":{"tooltip":"app-integration@diadoc-status","itemModel":{"path":["itemModel"]},"applicationItem":{"path":["item"]}}}]}},{"id":"cbd8cadb-d5e7-4b19-91da-5881637efc78","descriptor":"sidebar-widget","values":{"title":"Статус подписи"},"content":{"":[{"id":"5476c0e0-829c-4d53-b03b-88b0d6534fb0","descriptor":"app-sign-status","values":{"itemModel":{"path":["itemModel"]}}}]}},{"id":"1c6ef61f-6d0e-41d1-8a1f-211bc70f3d92","descriptor":"sidebar-widget","content":{"":[{"id":"3a3d29c6-7fca-42eb-95f8-74789b8b7f22","descriptor":"docflow-approval-lists","values":{"item":{"path":["itemModel"]}}}]}},{"id":"8326be58-15ff-4903-8ab0-e20b08b8306b","descriptor":"sidebar-widget","content":{"":[{"id":"3a3d29c6-7fca-42eb-95f8-74789b8b7f22","descriptor":"docflow-inform-lists","values":{"item":{"path":["itemModel"]}}}]}},{"id":"a3c6e12f-c346-4519-932b-7ab965384039","descriptor":"sidebar-widget","content":{"":[{"id":"4cc755bb-f919-4ff7-8e47-5c59047dad62","descriptor":"item-status","values":{"item":{"path":["itemModel"]},"application":{"path":["application"]}}}]}},{"id":"ff81ce95-4e79-44b7-9084-d7b0e0f764c3","descriptor":"sidebar-widget","content":{"":[{"id":"d23366cd-07b0-4ae4-bb2c-73a203ec7786","descriptor":"item-tasks","descriptorVersion":4,"values":{"formGroup":{"path":["item"]}}}]}},{"id":"3ab3e301-da8a-4030-ba48-4e02c136b812","descriptor":"sidebar-widget","content":{"":[{"id":"5c77c4f0-b9f3-4d77-ac9c-5aaadde543dd","descriptor":"messages-target","values":{"target":{"path":["target"]}}}]}}],"[headerControls]":[{"id":"d8e970da-6c0b-49fb-963c-d2515788b7b1","descriptor":"item-subscribe","values":{"item":{"path":["itemModel"]},"application":{"path":["application"]}}},{"id":"5a72dd17-31f2-4412-a056-a474e01ac17c","descriptor":"button","values":{"tooltip":"Отправить","runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"send_approve","view":"icon","action":{"path":["docflowSendAction"]}}},{"id":"b0237e26-4b99-4ce8-9d6f-a78b44c9263b","descriptor":"button","values":{"view":"icon","label":"Права доступа","action":{"path":["accessSettings"]},"runProcessSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"createAppItemSettings":{"kind":"","settings":{"code":"","field":"","binding":null,"namespace":""}},"icon":"lock"}},{"id":"17a52e8f-7486-4031-bd01-5838fcfc8f70","descriptor":"extension-zone-toolbar-widget","values":{"item":{"path":["__itemRef"]}}},{"id":"13599e1c-12ed-11eb-adc1-0242ac120002","descriptor":"edo-diadoc-full-widget","values":{"view":"icon","label":"Права доступа","itemModel":{"path":["itemModel"]},"icon":"lock","item":{"path":["item"]}}},{"id":"1d3e0cf2-9996-43a6-945d-4b949ff7939e","descriptor":"app-signing","descriptorVersion":3,"values":{"label":"Права доступа","itemModel":{"path":["itemModel"]}}}],"[headerUpperTitle]":[{"id":"7fe87b6f-803f-40af-ae04-2c46f1919291","descriptor":"app-navigation-crumbs-tree-widget","values":{"item":{"path":["itemModel"]},"application":{"path":["application"]}}}],"[headerCustomization]":[]}},"fieldVisibilityConditions":{},"scriptOptions":{},"clientScripts":"declare const document: any;\ndeclare const window: any;\ndeclare const console: any;\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    const table = Context.data.doc_table;\n    if (!table || table.length \u003c 1) {\n        return;\n    };\n    let waitForTable = window.setInterval(() =\u003e {\n        let domTable = document.querySelector(\".kedo-table\");\n        if(!table) {\n            return;\n        };\n        window.clearInterval(waitForTable);\n        for (let row of table) {\n            const rowTemplate = document.querySelector(\".custom-table-row\").content.cloneNode(true);\n            const tableRow = rowTemplate.querySelector(\".doc-row\")\n            const rowName = rowTemplate.querySelector(\".doc-name\");\n            const rowNsCode = rowTemplate.querySelector(\".doc-ns-code\");\n            const rowAccess = rowTemplate.querySelectorAll(\".doc-access .kedo-button\");\n            rowAccess.forEach((btn: any) =\u003e btn.addEventListener(\"click\", async (e: any) =\u003e {\n                await handleAccessChange(e, tableRow);\n            }));\n            let buttonToDisable: any;\n            if (row.access) {\n                buttonToDisable = tableRow.querySelector(\".button-access\");\n            } else {\n                buttonToDisable = tableRow.querySelector(\".button-restrict\");\n            };\n            buttonToDisable.disabled = true;\n            buttonToDisable.classList.add(\"clicked\");\n            rowName.textContent = row.doc_type;\n            rowNsCode.textContent = row.ns_and_code;\n            domTable.append(rowTemplate);\n        };\n    }, 200)\n};\n\nfunction handleButtonsBlock() {\n    const kedoButtons = document.querySelectorAll(\".kedo-button\");\n    kedoButtons.forEach((button: any) =\u003e button.classList.toggle(\"disabled\"));\n}\n\nasync function handleAccessChange(e: any, row: any) {\n    handleButtonsBlock();\n    e.target.classList.add(\"clicked\");\n    const access = e.target.dataset.access == \"true\" ? true : false;\n    const otherButton = access ? e.target.previousElementSibling : e.target.nextElementSibling;\n    otherButton.disabled = false;\n    otherButton.classList.remove(\"clicked\");\n    e.target.disabled = true;\n    const docNsAndCode = row.querySelector(\".doc-ns-code\").textContent;\n    const docName = row.querySelector(\".doc-name\").textContent;\n    const tableRow = Context.data.doc_table!.find(row =\u003e row.ns_and_code === docNsAndCode);\n\n    if (tableRow) {\n        tableRow.access = access;\n        const docCode = docNsAndCode.split(\";\").slice(-1)[0];\n        await changeDocAccess(docCode, access, docName);\n    };\n    handleButtonsBlock();\n};\n\nasync function changeDocAccess(docCode: string, access: boolean, docName: string): Promise\u003cvoid\u003e {\n    const organization = await Context.data.organization!.fetch();\n    const orgRights = await Context.fields.rights_by_organization_app.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.organization.link(Context.data.organization!)\n    )).first();\n    console.log({orgRights})\n    const roleId = Context.data.org_groups![0].code;\n    const group = await System.userGroups.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.__id.eq(roleId)\n    )).first();\n    if (group) {\n        console.log({group})\n        const groupName = `Доступы для ${docName} ${organization.data.__name}`\n        if (orgRights) {\n            const groupToChange = await System.userGroups.search().where((f, g) =\u003e g.and(\n                f.__deletedAt.eq(null),\n                f.__name.eq(groupName)\n            )).first();\n            if (groupToChange) {\n                console.log({groupToChange})\n                let groupExists: boolean;\n                if (groupToChange.data.subOrgunitIds?.find(gr =\u003e gr === group.id)) {\n                    groupExists = true;\n                } else {\n                    groupExists = !groupToChange.data.subOrgunitIds || groupToChange.data.subOrgunitIds.length \u003c 1;\n                }\n\n                if (access) {\n                    if (!groupExists) {\n                        console.log(\"add item\")\n                        await groupToChange.addItem(group)\n                    } else {\n                        console.log(\"already added\")\n                    }\n                } else {\n                    if (groupExists) {\n                        console.log(\"delete group from access\")\n                        if (groupToChange.data.subOrgunitIds) {\n                            for (let id of groupToChange.data.subOrgunitIds!) {\n                                if (id == group.data.__id) {\n                                    console.log(\"id exists\")\n                                    delete groupToChange.data.subOrgunitIds![groupToChange.data.subOrgunitIds!.indexOf(id)];\n                                    break;\n                                };\n                            };\n                            groupToChange.data.subOrgunitIds = groupToChange.data.subOrgunitIds!.filter(id =\u003e id);\n                        }\n                    };\n                };\n                await groupToChange.save();\n                const currentElement = await Application.search().where(f =\u003e f.__id.eq(Context.data.__id)).first();\n                if (currentElement) {\n                    const table = currentElement.data.doc_table;\n                    const rowToChange = table!.find(row =\u003e row.ns_and_code.split(\";\")[1] === docCode);\n                    if (rowToChange) {\n                        rowToChange.access = access;\n                        currentElement.data.doc_table = table;\n                        await currentElement.save();\n                    };\n                }\n            };\n        };\n    }\n};","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{},"widgetZones":[{"code":"[footer]"}],"dataFieldCode":"item"},"dataNamespace":"kedo","dataCode":"rights_settings_by_doc","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        async function onInit() {\n            const table = Context.data.doc_table;\n            if (!table || table.length \u003c 1) {\n                return;\n            }\n            ;\n            let waitForTable = window.setInterval(() =\u003e {\n                let domTable = document.querySelector(\".kedo-table\");\n                if (!table) {\n                    return;\n                }\n                ;\n                window.clearInterval(waitForTable);\n                for (let row of table) {\n                    const rowTemplate = document.querySelector(\".custom-table-row\").content.cloneNode(true);\n                    const tableRow = rowTemplate.querySelector(\".doc-row\");\n                    const rowName = rowTemplate.querySelector(\".doc-name\");\n                    const rowNsCode = rowTemplate.querySelector(\".doc-ns-code\");\n                    const rowAccess = rowTemplate.querySelectorAll(\".doc-access .kedo-button\");\n                    rowAccess.forEach((btn) =\u003e btn.addEventListener(\"click\", async (e) =\u003e {\n                        await handleAccessChange(e, tableRow);\n                    }));\n                    let buttonToDisable;\n                    if (row.access) {\n                        buttonToDisable = tableRow.querySelector(\".button-access\");\n                    }\n                    else {\n                        buttonToDisable = tableRow.querySelector(\".button-restrict\");\n                    }\n                    ;\n                    buttonToDisable.disabled = true;\n                    buttonToDisable.classList.add(\"clicked\");\n                    rowName.textContent = row.doc_type;\n                    rowNsCode.textContent = row.ns_and_code;\n                    domTable.append(rowTemplate);\n                }\n                ;\n            }, 200);\n        }\n        ;\n        function handleButtonsBlock() {\n            const kedoButtons = document.querySelectorAll(\".kedo-button\");\n            kedoButtons.forEach((button) =\u003e button.classList.toggle(\"disabled\"));\n        }\n        async function handleAccessChange(e, row) {\n            handleButtonsBlock();\n            e.target.classList.add(\"clicked\");\n            const access = e.target.dataset.access == \"true\" ? true : false;\n            const otherButton = access ? e.target.previousElementSibling : e.target.nextElementSibling;\n            otherButton.disabled = false;\n            otherButton.classList.remove(\"clicked\");\n            e.target.disabled = true;\n            const docNsAndCode = row.querySelector(\".doc-ns-code\").textContent;\n            const docName = row.querySelector(\".doc-name\").textContent;\n            const tableRow = Context.data.doc_table.find(row =\u003e row.ns_and_code === docNsAndCode);\n            if (tableRow) {\n                tableRow.access = access;\n                const docCode = docNsAndCode.split(\";\").slice(-1)[0];\n                await changeDocAccess(docCode, access, docName);\n            }\n            ;\n            handleButtonsBlock();\n        }\n        ;\n        async function changeDocAccess(docCode, access, docName) {\n            var _a;\n            const organization = await Context.data.organization.fetch();\n            const orgRights = await Context.fields.rights_by_organization_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.organization.link(Context.data.organization))).first();\n            console.log({ orgRights });\n            const roleId = Context.data.org_groups[0].code;\n            const group = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(roleId))).first();\n            if (group) {\n                console.log({ group });\n                const groupName = `Доступы для ${docName} ${organization.data.__name}`;\n                if (orgRights) {\n                    const groupToChange = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__name.eq(groupName))).first();\n                    if (groupToChange) {\n                        console.log({ groupToChange });\n                        let groupExists;\n                        if ((_a = groupToChange.data.subOrgunitIds) === null || _a === void 0 ? void 0 : _a.find(gr =\u003e gr === group.id)) {\n                            groupExists = true;\n                        }\n                        else {\n                            groupExists = !groupToChange.data.subOrgunitIds || groupToChange.data.subOrgunitIds.length \u003c 1;\n                        }\n                        if (access) {\n                            if (!groupExists) {\n                                console.log(\"add item\");\n                                await groupToChange.addItem(group);\n                            }\n                            else {\n                                console.log(\"already added\");\n                            }\n                        }\n                        else {\n                            if (groupExists) {\n                                console.log(\"delete group from access\");\n                                if (groupToChange.data.subOrgunitIds) {\n                                    for (let id of groupToChange.data.subOrgunitIds) {\n                                        if (id == group.data.__id) {\n                                            console.log(\"id exists\");\n                                            delete groupToChange.data.subOrgunitIds[groupToChange.data.subOrgunitIds.indexOf(id)];\n                                            break;\n                                        }\n                                        ;\n                                    }\n                                    ;\n                                    groupToChange.data.subOrgunitIds = groupToChange.data.subOrgunitIds.filter(id =\u003e id);\n                                }\n                            }\n                            ;\n                        }\n                        ;\n                        await groupToChange.save();\n                        const currentElement = await Application.search().where(f =\u003e f.__id.eq(Context.data.__id)).first();\n                        if (currentElement) {\n                            const table = currentElement.data.doc_table;\n                            const rowToChange = table.find(row =\u003e row.ns_and_code.split(\";\")[1] === docCode);\n                            if (rowToChange) {\n                                rowToChange.access = access;\n                                currentElement.data.doc_table = table;\n                                await currentElement.save();\n                            }\n                            ;\n                        }\n                    }\n                    ;\n                }\n                ;\n            }\n        }\n        ;\n        return {\n            onInit,\n            handleButtonsBlock,\n            handleAccessChange,\n            changeDocAccess\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"handleButtonsBlock","parameters":[],"type":""},{"name":"handleAccessChange","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":""},{"name":"changeDocAccess","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:08:58.767660395Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:07:55.648767652Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
