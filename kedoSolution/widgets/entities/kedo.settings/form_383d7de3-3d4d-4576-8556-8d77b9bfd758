{"__id":"018c8758-2a72-7c46-b866-4276fae4ce4c","namespace":"kedo.settings","code":"form_383d7de3-3d4d-4576-8556-8d77b9bfd758","__name":"Форма запуска","description":"","extensionZoneCode":"","sort":0,"category":"00000000-0000-0000-0000-000000000000","version":7,"hidden":true,"draft":false,"readonly":false,"descriptor":{"types":["form"],"template":{"id":"70bf25ce-c774-481c-a14c-df8a9b9cc97c","descriptor":"item-form-complex-popup","descriptorVersion":2,"values":{"formType":"start-process-form","formGroup":{"path":["context"]},"systemFunctions":{}},"content":{"[footer]":[{"id":"cc734fcd-17d6-4b8c-8529-91a25cc2a94e","descriptor":"buttons-panel","values":{"buttons":{"path":["actionButtons"]}}}],"[content]":[{"id":"c18e9118-cda2-49f4-ae50-5414c9b970b2","descriptor":"modal-body","values":{"shadow":true},"content":{"":[{"id":"03416f39-8220-47d5-966f-09551fe45830","descriptor":"dynamic-form-row","values":{"control":{"path":["context","domen"]},"__baseURL":"","__isConstValues":[],"showDisplayName":true,"tooltip":null,"__outlet":"","required":false,"hideEmpty":false,"__readOnly":true,"bindingMode":false,"__relativeURL":""}},{"id":"0c7b9e9b-bb39-4566-a4df-3c5361bbc388","descriptor":"dynamic-form-row","values":{"required":{"path":["token_required"]},"__baseURL":"","__readOnly":{"path":["token_readonly"]},"__relativeURL":"","__isConstValues":[],"control":{"path":["context","token"]},"tooltip":null,"__outlet":"","hideEmpty":false,"bindingMode":false,"showDisplayName":true}},{"id":"20400d24-2e54-4efc-ae02-29f948970309","descriptor":"dynamic-form-row","values":{"__outlet":"","__baseURL":"","__readOnly":null,"bindingMode":false,"__relativeURL":"","__isConstValues":[],"control":{"path":["context","need_integration_1c"]},"tooltip":null,"showDisplayName":true,"required":true,"hideEmpty":false}}]}}],"[sidebar]":[{"id":"0ceaa8ec-5cdc-4385-9a6b-b0ae1e04039b","descriptor":"sidebar-widget","content":{"":[{"id":"2c1bfe32-44b9-46d5-bee7-2ed66205f4d6","descriptor":"user-guide","values":{"userGuide":{"path":["instruction"]}}}]}},{"id":"2112f287-a8ad-433c-862d-f9808c2d4f7b","descriptor":"sidebar-widget","content":{"":[{"id":"8900384e-a047-46b0-8ba7-462c23711e72","descriptor":"target-widget","values":{"context":{"path":["context"]}}}]}}],"[headerControls]":[],"[headerCustomization]":[]}},"fields":[{"code":"token_readonly","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Поле \"Токен\" только для чтения?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}},{"code":"token_required","type":"BOOLEAN","searchable":false,"indexed":false,"deleted":false,"array":false,"required":false,"single":true,"defaultValue":null,"calcByFormula":false,"formula":"","data":{},"view":{"name":"Поле \"Токен\" обязательно?","data":{"additionalType":"radio","noValue":"Нет","yesValue":"Да"}}}],"fieldVisibilityConditions":{"token_readonly":{"enabled":false,"conditions":[]},"token_required":{"enabled":false,"conditions":[]}},"scriptOptions":{},"clientScripts":"/* Client scripts module */\n\ndeclare const document: any;\ndeclare const window: any;\ndeclare const console: any;\n\nconst TOKEN_NAME = \"Токен КЭДО\";\n\nconst INSTRUCTION_TEXT = `В рамках данного процесса будет выполнена настройка всех доступных решений КЭДО.`;\n\ninterface ITokenRequest {\n    userId: string,\n    __name: string,\n}\n\ninterface IToken {\n    expiredAt: string,\n    token: string,\n    userId: string,\n    __createdAt: string,\n    __createdBy: string,\n    __deletedAt: string,\n    __id: string,\n    __name: string,\n    __updatedAt: string\n    __updatedBy: string,\n}\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    ViewContext.data.instruction_text = INSTRUCTION_TEXT;\n    getDomen();\n    await createKedoToken();\n}\n\nfunction getDomen(): void {\n    Context.data.domen = window.location.host;\n}\n\nasync function createKedoToken(): Promise\u003cvoid\u003e {\n    ViewContext.data.token_required = true;\n    ViewContext.data.token_readonly = false;\n\n    let authToken = await getAuthTokenRequest();\n\n    if (!authToken) {\n        throw new Error(\"Не удалось получить токен авторизации\");\n    }\n\n    const user = await System.users.getCurrentUser();\n    const userId = user.id;\n\n    const tokens: IToken[] = await getCreatedTokenRequest(authToken) ?? [];\n\n    // Проверяем - токен КЭДО уже создан?\n    const kedoToken = tokens.find(f =\u003e f.__name == TOKEN_NAME);\n\n    if (!kedoToken) {\n        const token = await createTokenRequest(authToken, userId);\n        Context.data.token = token;\n    } else {\n        Context.data.token = kedoToken.token;\n    }\n\n    ViewContext.data.token_readonly = true;\n    ViewContext.data.token_required = false;\n}\n\n/** Запрос на получение токена авторизации. */\nasync function getAuthTokenRequest(): Promise\u003cstring | undefined\u003e {\n    const request = await fetch(`${System.getBaseUrl()}/api/auth`);\n\n    if (!request.ok) {\n        throw new Error(JSON.stringify(request));\n    }\n\n    const authToken = request.headers.get('token');\n    return authToken;\n}\n\n/** Запрос на создание токена. */\nasync function createTokenRequest(vtoken: string, userId: string): Promise\u003cstring\u003e {\n    try {\n        const request = await fetch(`${System.getBaseUrl()}/api/token`, {\n            method: \"POST\",\n            headers: {\n                \"Cookie\": `vtoken=${vtoken}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                userId: userId,\n                __name: TOKEN_NAME,\n            }),\n        })\n\n        if (!request.ok) {\n            throw new Error(JSON.stringify(request));\n        }\n\n        const response = await request.json();\n        return response.token;\n\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\n/** Запрос на получение списка созданных токенов. */\nasync function getCreatedTokenRequest(vtoken: string): Promise\u003cIToken[]\u003e {\n    let tokens: IToken[] = [];\n\n    try {\n        const request = await fetch(`${System.getBaseUrl()}/api/token`, {\n            method: \"GET\",\n            headers: {\n                \"Cookie\": `vtoken=${vtoken}`,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n\n        if (!request.ok) {\n            throw new Error(JSON.stringify(request));\n        }\n\n        const response = await request.json();\n        tokens = response.result as IToken[];\n        return tokens;\n\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\n/** Тестовый запрос на проверку приложенного токена. */\nasync function testRequest(): Promise\u003cFetchResponse\u003e {\n    const request = await fetch(`${System.getBaseUrl()}/pub/v1/scheme/namespaces`, {\n        method: \"GET\",\n        headers: {\n            \"Authorization\": `Bearer ${Context.data.token}`\n        }\n    });\n\n    return request;\n}\n\nasync function validation(): Promise\u003cValidationResult\u003e {\n    const result = new ValidationResult();\n\n    const testResponse = await testRequest();\n\n    if (testResponse.status == 401) {\n        result.addContextError(\"token\", \"Некорректный токен\");\n    }\n\n    return result;\n}\n","clientScriptOptions":{"allowServer":true},"serverScripts":"/* Server scripts module */\n","serverScriptOptions":{},"dataFieldCode":"context"},"dataNamespace":"kedo.settings","dataCode":"_process_initial_configure_kedo_workflow","runtime":{"version":1,"clientScripts":"System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        const TOKEN_NAME = \"Токен КЭДО\";\n        const INSTRUCTION_TEXT = `В рамках данного процесса будет выполнена настройка всех доступных решений КЭДО.`;\n        async function onInit() {\n            ViewContext.data.instruction_text = INSTRUCTION_TEXT;\n            getDomen();\n            await createKedoToken();\n        }\n        function getDomen() {\n            Context.data.domen = window.location.host;\n        }\n        async function createKedoToken() {\n            var _a;\n            ViewContext.data.token_required = true;\n            ViewContext.data.token_readonly = false;\n            let authToken = await getAuthTokenRequest();\n            if (!authToken) {\n                throw new Error(\"Не удалось получить токен авторизации\");\n            }\n            const user = await System.users.getCurrentUser();\n            const userId = user.id;\n            const tokens = (_a = await getCreatedTokenRequest(authToken)) !== null \u0026\u0026 _a !== void 0 ? _a : [];\n            const kedoToken = tokens.find(f =\u003e f.__name == TOKEN_NAME);\n            if (!kedoToken) {\n                const token = await createTokenRequest(authToken, userId);\n                Context.data.token = token;\n            }\n            else {\n                Context.data.token = kedoToken.token;\n            }\n            ViewContext.data.token_readonly = true;\n            ViewContext.data.token_required = false;\n        }\n        async function getAuthTokenRequest() {\n            const request = await fetch(`${System.getBaseUrl()}/api/auth`);\n            if (!request.ok) {\n                throw new Error(JSON.stringify(request));\n            }\n            const authToken = request.headers.get('token');\n            return authToken;\n        }\n        async function createTokenRequest(vtoken, userId) {\n            try {\n                const request = await fetch(`${System.getBaseUrl()}/api/token`, {\n                    method: \"POST\",\n                    headers: {\n                        \"Cookie\": `vtoken=${vtoken}`,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        userId: userId,\n                        __name: TOKEN_NAME,\n                    }),\n                });\n                if (!request.ok) {\n                    throw new Error(JSON.stringify(request));\n                }\n                const response = await request.json();\n                return response.token;\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n        }\n        async function getCreatedTokenRequest(vtoken) {\n            let tokens = [];\n            try {\n                const request = await fetch(`${System.getBaseUrl()}/api/token`, {\n                    method: \"GET\",\n                    headers: {\n                        \"Cookie\": `vtoken=${vtoken}`,\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                if (!request.ok) {\n                    throw new Error(JSON.stringify(request));\n                }\n                const response = await request.json();\n                tokens = response.result;\n                return tokens;\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n        }\n        async function testRequest() {\n            const request = await fetch(`${System.getBaseUrl()}/pub/v1/scheme/namespaces`, {\n                method: \"GET\",\n                headers: {\n                    \"Authorization\": `Bearer ${Context.data.token}`\n                }\n            });\n            return request;\n        }\n        async function validation() {\n            const result = new ValidationResult();\n            const testResponse = await testRequest();\n            if (testResponse.status == 401) {\n                result.addContextError(\"token\", \"Некорректный токен\");\n            }\n            return result;\n        }\n        return {\n            onInit,\n            getDomen,\n            createKedoToken,\n            getAuthTokenRequest,\n            createTokenRequest,\n            getCreatedTokenRequest,\n            testRequest,\n            validation\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n","clientFnDeclarations":[{"name":"onInit","parameters":[],"type":"[object Object]"},{"name":"getDomen","parameters":[],"type":"[object Object]"},{"name":"createKedoToken","parameters":[],"type":"[object Object]"},{"name":"getAuthTokenRequest","parameters":[],"type":"[object Object]"},{"name":"createTokenRequest","parameters":[{"name":"[object Object]","type":"[object Object]"},{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"getCreatedTokenRequest","parameters":[{"name":"[object Object]","type":"[object Object]"}],"type":"[object Object]"},{"name":"testRequest","parameters":[],"type":"[object Object]"},{"name":"validation","parameters":[],"type":"[object Object]"}]},"__createdAt":"2023-12-20T13:09:11.403081986Z","__createdBy":"7303b866-4220-4086-a09e-348a76b12c73","__updatedAt":"2024-02-14T11:07:54.788190825Z","__updatedBy":"7303b866-4220-4086-a09e-348a76b12c73","__deletedAt":null}
