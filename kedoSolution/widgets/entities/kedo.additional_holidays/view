{
  "__id": "018f0a75-4bbf-7a42-b387-a551c5e7a64c",
  "namespace": "kedo.additional_holidays",
  "code": "view",
  "__name": "Форма просмотра",
  "description": "",
  "extensionZoneCode": "",
  "sort": 0,
  "category": "00000000-0000-0000-0000-000000000000",
  "version": 4,
  "hidden": false,
  "draft": false,
  "readonly": false,
  "descriptor": {
    "types": ["form"],
    "template": {
      "id": "cc3566cf-4a4f-4fdc-bc0f-4c47c0249d16",
      "descriptor": "item-form-complex-popup",
      "descriptorVersion": 2,
      "values": {
        "formGroup": {
          "path": ["item"]
        }
      },
      "content": {
        "[footer]": [
          {
            "id": "118e01b5-facc-4321-ae1b-fbc0c6c0dcc7",
            "descriptor": "zone-content",
            "values": {
              "zoneCode": "[footer]"
            }
          }
        ],
        "[content]": [
          {
            "id": "c18e9118-cda2-49f4-ae50-5414c9b970b2",
            "descriptor": "modal-body",
            "values": {
              "shadow": true
            },
            "content": {
              "": [
                {
                  "id": "431d44ad-db08-4a65-8d93-ea3ba6fa892e",
                  "descriptor": "dynamic-form-row",
                  "values": {
                    "__isConstValues": [],
                    "control": {
                      "path": ["item", "year_string"]
                    },
                    "tooltip": null,
                    "required": false,
                    "hideEmpty": false,
                    "__readOnly": true,
                    "bindingMode": false,
                    "__outlet": "",
                    "__baseURL": "",
                    "displayName": "Год",
                    "__relativeURL": "",
                    "showDisplayName": true
                  }
                },
                {
                  "id": "e471446b-0117-46e4-8a33-10eb64b7f930",
                  "descriptor": "code",
                  "values": {
                    "html": "\u003cstyle\u003e\n    .add-date-button button {\n        background-color: #1e6599;\n        pointer-events: auto;\n    }\n    .add-date-button.disabled,\n    .add-date-button.disabled button {\n        background-color: #e2e2e2;\n        pointer-events: none;\n    }\n\u003c/style\u003e",
                    "hideContent": true,
                    "contentPlaceholder": "button style"
                  }
                },
                {
                  "id": "1dc0e4b0-5b20-472d-bcc0-6ce323086302",
                  "descriptor": "groupbox",
                  "values": {
                    "__relativeURL": "",
                    "__isConstValues": [],
                    "title": "Выходные и праздничные дни",
                    "__outlet": "",
                    "expanded": true,
                    "collapsible": false,
                    "__baseURL": "",
                    "styleEnum": [
                      {
                        "code": "default",
                        "name": "Default"
                      }
                    ],
                    "__renderContentAsync": false
                  },
                  "content": {
                    "": [
                      {
                        "id": "bef37b5d-ef10-48d9-90f2-cb0e3a6f017a",
                        "descriptor": "groupbox",
                        "values": {
                          "expanded": true,
                          "__baseURL": "",
                          "__relativeURL": "",
                          "__renderContentAsync": false,
                          "title": "Добавление нового дня",
                          "__outlet": "",
                          "styleEnum": [
                            {
                              "code": "default",
                              "name": "Default"
                            }
                          ],
                          "collapsible": true,
                          "__isConstValues": []
                        },
                        "content": {
                          "": [
                            {
                              "id": "45396cf1-22aa-46db-b404-f15bad930e21",
                              "descriptor": "elma-info-block",
                              "values": {
                                "typeEnum": [
                                  {
                                    "code": "warning",
                                    "name": "Предупреждение (оранжевый)"
                                  }
                                ],
                                "__baseURL": "",
                                "__relativeURL": "",
                                "__isConstValues": [],
                                "__renderContentAsync": false,
                                "text": "Данное число уже добавлено в таблицу",
                                "__hidden": {
                                  "path": ["error_exists"],
                                  "modifier": "not"
                                },
                                "__outlet": ""
                              },
                              "content": {
                                "": []
                              }
                            },
                            {
                              "id": "89dc4e15-f195-4a0f-88a5-fa36b336a7e2",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "__baseURL": "",
                                "__relativeURL": "",
                                "showCreateItem": false,
                                "showDisplayName": true,
                                "__renderContentOnDemand": false,
                                "control": {
                                  "path": ["region"]
                                },
                                "bindingMode": false,
                                "__readOnly": false,
                                "tooltip": null,
                                "required": false,
                                "hideEmpty": false,
                                "onChangeValue": {
                                  "kind": "Function",
                                  "name": "handleDateChange",
                                  "type": "client"
                                },
                                "__isConstValues": [],
                                "__outlet": ""
                              }
                            },
                            {
                              "id": "fa1880fe-e1c2-4747-bc25-2e075763e691",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "__baseURL": "",
                                "__readOnly": false,
                                "bindingMode": false,
                                "onChangeValue": {
                                  "kind": "Function",
                                  "name": "handleDateChange",
                                  "type": "client"
                                },
                                "__renderContentOnDemand": false,
                                "control": {
                                  "path": ["date"]
                                },
                                "tooltip": null,
                                "__outlet": "",
                                "required": false,
                                "hideEmpty": false,
                                "__relativeURL": "",
                                "__isConstValues": [],
                                "showDisplayName": true
                              }
                            },
                            {
                              "id": "8c8e7c05-e845-4dd1-b5f4-17134b039c1b",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "control": {
                                  "path": ["holiday_name"]
                                },
                                "tooltip": null,
                                "__outlet": "",
                                "hideEmpty": false,
                                "bindingMode": false,
                                "displayName": "Название выходного/праздничного дня",
                                "required": false,
                                "__baseURL": "",
                                "__readOnly": null,
                                "__relativeURL": "",
                                "__isConstValues": [],
                                "showDisplayName": true
                              }
                            },
                            {
                              "id": "2d07aaff-9e77-4913-b5ac-89fe86c9a1bc",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "control": {
                                  "path": ["holiday"]
                                },
                                "__outlet": "",
                                "required": false,
                                "__readOnly": false,
                                "bindingMode": false,
                                "showDisplayName": true,
                                "tooltip": null,
                                "__baseURL": "",
                                "hideEmpty": false,
                                "__relativeURL": "",
                                "onChangeValue": {
                                  "kind": "Function",
                                  "name": "handleHolidayChange",
                                  "type": "client"
                                },
                                "__isConstValues": []
                              }
                            },
                            {
                              "id": "446a4a03-c19b-4364-b556-2268b118a441",
                              "descriptor": "dynamic-form-row",
                              "values": {
                                "control": {
                                  "path": ["day_off"]
                                },
                                "__outlet": "",
                                "required": false,
                                "__readOnly": {
                                  "path": ["holiday_choose"]
                                },
                                "bindingMode": false,
                                "__relativeURL": "",
                                "tooltip": null,
                                "__baseURL": "",
                                "hideEmpty": false,
                                "__isConstValues": [],
                                "showDisplayName": true
                              }
                            },
                            {
                              "id": "4c9d8cf5-4f10-462f-8bc7-7fa263709ff5",
                              "descriptor": "button",
                              "values": {
                                "onClick": {
                                  "kind": "Function",
                                  "name": "addDateToTable",
                                  "type": "client"
                                },
                                "runInPopover": null,
                                "__isConstValues": [],
                                "view": "primary",
                                "__classes": "add-date-button",
                                "runProcessSettings": {
                                  "kind": "",
                                  "settings": {
                                    "code": "",
                                    "field": "",
                                    "binding": null,
                                    "namespace": ""
                                  }
                                },
                                "__renderContentOnDemand": false,
                                "action": null,
                                "__relativeURL": "",
                                "processPopoverSize": [
                                  {
                                    "code": "default",
                                    "name": "shared.common.button@widget-process-popover-size-default",
                                    "translate": true
                                  }
                                ],
                                "createAppItemSettings": {
                                  "kind": "",
                                  "settings": {
                                    "code": "",
                                    "field": "",
                                    "binding": null,
                                    "namespace": ""
                                  }
                                },
                                "label": "Добавить",
                                "__outlet": "",
                                "__baseURL": "",
                                "runActionEnum": [
                                  {
                                    "code": "undefined",
                                    "name": "shared.common.button@widget-runAction-none",
                                    "translate": true
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "id": "3a881b56-0415-41d0-bf17-54dc35783066",
                        "descriptor": "code",
                        "values": {
                          "html": "\u003ctable class=\"kedo-table\"\u003e\n    \u003cthead class=\"kedo-table_head\"\u003e\n        \u003ctr class=\"table-head day-row\"\u003e\n            \u003ctd class=\"kedo-table_head-cell\"\u003eДата\u003c/th\u003e\n            \u003ctd class=\"kedo-table_head-cell\"\u003eРегион\u003c/th\u003e\n            \u003ctd class=\"kedo-table_head-cell\"\u003eВыходной\u003c/th\u003e\n            \u003ctd class=\"kedo-table_head-cell\"\u003eПраздничный\u003c/th\u003e\n            \u003ctd class=\"kedo-table_head-cell\"\u003eНазвание\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n\u003c/table\u003e\n\n\u003ctemplate class=\"custom-table-row\"\u003e\n    \u003ctr class=\"day-row\"\u003e\n        \u003ctd class=\"day-cell day-date\"\u003e\n        \u003c/td\u003e\n        \u003ctd class=\"day-cell day-region\"\u003e\n            \n        \u003c/td\u003e\n        \u003ctd class=\"day-cell day-off\"\u003e\n            \n        \u003c/td\u003e\n        \u003ctd class=\"day-cell day-holiday\"\u003e\n            \n        \u003c/td\u003e\n        \u003ctd class=\"day-cell day-holiday-name\"\u003e\n            \n        \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/template\u003e\n\n\u003cstyle\u003e\n    .kedo-table {\n        border-collapse: separate;\n        border-spacing: 3rem;\n        white-space: normal;\n        width: 100%;\n        table-layout: fixed;\n    }\n\n    .kedo-table_head-cell:last-child {\n        margin-right: 4.5rem;\n    }\n\n    .day-row {\n        align-items: center;\n        border-bottom: 1px solid #D9D9D9;\n        padding: 1rem;\n        justify-content: space-between;\n        position: relative;\n        width: 100%;\n    }\n\n    .day-cell {\n        word-wrap: break-word;\n    }\n\n    .day-date {\n        position: relative;\n    }\n\n    .delete-button-wrapper {\n        position: absolute;\n        width: 16px;\n        height: 16px;\n        background-image: url(\"data:image/svg+xml,%3Csvg width='16' height='16' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M15.375 20.25H16.125C16.2245 20.25 16.3198 20.2105 16.3902 20.1402C16.4605 20.0698 16.5 19.9745 16.5 19.875V7.125C16.5 7.02554 16.4605 6.93016 16.3902 6.85983C16.3198 6.78951 16.2245 6.75 16.125 6.75H15.375C15.2755 6.75 15.1802 6.78951 15.1098 6.85983C15.0395 6.93016 15 7.02554 15 7.125V19.875C15 19.9745 15.0395 20.0698 15.1098 20.1402C15.1802 20.2105 15.2755 20.25 15.375 20.25ZM7.875 20.25H8.625C8.72446 20.25 8.81984 20.2105 8.89017 20.1402C8.96049 20.0698 9 19.9745 9 19.875V7.125C9 7.02554 8.96049 6.93016 8.89017 6.85983C8.81984 6.78951 8.72446 6.75 8.625 6.75H7.875C7.77554 6.75 7.68016 6.78951 7.60983 6.85983C7.53951 6.93016 7.5 7.02554 7.5 7.125V19.875C7.5 19.9745 7.53951 20.0698 7.60983 20.1402C7.68016 20.2105 7.77554 20.25 7.875 20.25ZM22.125 3H17.25L15.675 0.9C15.4654 0.620559 15.1937 0.393751 14.8812 0.237539C14.5688 0.0813265 14.2243 0 13.875 0L10.125 0C9.7757 0 9.43119 0.0813265 9.11877 0.237539C8.80634 0.393751 8.53458 0.620559 8.325 0.9L6.75 3H1.875C1.77554 3 1.68016 3.03951 1.60983 3.10984C1.53951 3.18016 1.5 3.27554 1.5 3.375V4.125C1.5 4.22446 1.53951 4.31984 1.60983 4.39016C1.68016 4.46049 1.77554 4.5 1.875 4.5H3V21.75C3 22.3467 3.23705 22.919 3.65901 23.341C4.08097 23.7629 4.65326 24 5.25 24H18.75C19.3467 24 19.919 23.7629 20.341 23.341C20.7629 22.919 21 22.3467 21 21.75V4.5H22.125C22.2245 4.5 22.3198 4.46049 22.3902 4.39016C22.4605 4.31984 22.5 4.22446 22.5 4.125V3.375C22.5 3.27554 22.4605 3.18016 22.3902 3.10984C22.3198 3.03951 22.2245 3 22.125 3ZM9.525 1.8C9.59511 1.70712 9.68575 1.63171 9.78983 1.57967C9.89392 1.52763 10.0086 1.50036 10.125 1.5H13.875C13.9914 1.50036 14.1061 1.52763 14.2102 1.57967C14.3142 1.63171 14.4049 1.70712 14.475 1.8L15.375 3H8.625L9.525 1.8ZM19.5 21.75C19.5 21.9489 19.421 22.1397 19.2803 22.2803C19.1397 22.421 18.9489 22.5 18.75 22.5H5.25C5.05109 22.5 4.86032 22.421 4.71967 22.2803C4.57902 22.1397 4.5 21.9489 4.5 21.75V4.5H19.5V21.75ZM11.625 20.25H12.375C12.4745 20.25 12.5698 20.2105 12.6402 20.1402C12.7105 20.0698 12.75 19.9745 12.75 19.875V7.125C12.75 7.02554 12.7105 6.93016 12.6402 6.85983C12.5698 6.78951 12.4745 6.75 12.375 6.75H11.625C11.5255 6.75 11.4302 6.78951 11.3598 6.85983C11.2895 6.93016 11.25 7.02554 11.25 7.125V19.875C11.25 19.9745 11.2895 20.0698 11.3598 20.1402C11.4302 20.2105 11.5255 20.25 11.625 20.25Z' fill='%23e00000'/%3E%3C/svg%3E%0A\");\n        top: 3px;\n        left: -2rem;\n    }\n\n    .delete-button-wrapper:hover {\n        cursor: pointer;\n    }\n\n    .table-head {\n        font-weight: 600;\n        border-bottom: 1px solid black;\n    }\n\u003c/style\u003e",
                          "hideContent": false,
                          "contentPlaceholder": ""
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "[sidebar]": [
          {
            "id": "32a2c1e4-d376-4aea-8808-09ff7d74034b",
            "descriptor": "sidebar-widget",
            "content": {
              "": [
                {
                  "id": "484d74f7-e2f0-413b-83fd-42416ffc4c9f",
                  "descriptor": "portal-user-profile-status",
                  "values": {
                    "formGroup": {
                      "path": ["item"]
                    }
                  }
                }
              ]
            }
          },
          {
            "id": "2f4caa85-bf2f-4379-b888-119b342093c8",
            "descriptor": "sidebar-widget",
            "values": {
              "title": "Статус в Диадок"
            },
            "content": {
              "": [
                {
                  "id": "6dbf42cc-a55b-4720-827a-93d271b847b0",
                  "descriptor": "diadoc-status",
                  "values": {
                    "applicationItem": {
                      "path": ["item"]
                    },
                    "tooltip": "app-integration@diadoc-status",
                    "itemModel": {
                      "path": ["itemModel"]
                    }
                  }
                }
              ]
            }
          },
          {
            "id": "cbd8cadb-d5e7-4b19-91da-5881637efc78",
            "descriptor": "sidebar-widget",
            "values": {
              "title": "Статус подписи"
            },
            "content": {
              "": [
                {
                  "id": "5476c0e0-829c-4d53-b03b-88b0d6534fb0",
                  "descriptor": "app-sign-status",
                  "values": {
                    "itemModel": {
                      "path": ["itemModel"]
                    }
                  }
                }
              ]
            }
          },
          {
            "id": "1c6ef61f-6d0e-41d1-8a1f-211bc70f3d92",
            "descriptor": "sidebar-widget",
            "content": {
              "": [
                {
                  "id": "3a3d29c6-7fca-42eb-95f8-74789b8b7f22",
                  "descriptor": "docflow-approval-lists",
                  "values": {
                    "item": {
                      "path": ["itemModel"]
                    }
                  }
                }
              ]
            }
          },
          {
            "id": "8326be58-15ff-4903-8ab0-e20b08b8306b",
            "descriptor": "sidebar-widget",
            "content": {
              "": [
                {
                  "id": "3a3d29c6-7fca-42eb-95f8-74789b8b7f22",
                  "descriptor": "docflow-inform-lists",
                  "values": {
                    "item": {
                      "path": ["itemModel"]
                    }
                  }
                }
              ]
            }
          },
          {
            "id": "a3c6e12f-c346-4519-932b-7ab965384039",
            "descriptor": "sidebar-widget",
            "content": {
              "": [
                {
                  "id": "4cc755bb-f919-4ff7-8e47-5c59047dad62",
                  "descriptor": "item-status",
                  "values": {
                    "item": {
                      "path": ["itemModel"]
                    },
                    "application": {
                      "path": ["application"]
                    }
                  }
                }
              ]
            }
          },
          {
            "id": "ff81ce95-4e79-44b7-9084-d7b0e0f764c3",
            "descriptor": "sidebar-widget",
            "content": {
              "": [
                {
                  "id": "d23366cd-07b0-4ae4-bb2c-73a203ec7786",
                  "descriptor": "item-tasks",
                  "descriptorVersion": 4,
                  "values": {
                    "formGroup": {
                      "path": ["item"]
                    },
                    "itemModel": {
                      "path": ["itemModel"]
                    }
                  }
                }
              ]
            }
          },
          {
            "id": "3ab3e301-da8a-4030-ba48-4e02c136b812",
            "descriptor": "sidebar-widget",
            "content": {
              "": [
                {
                  "id": "5c77c4f0-b9f3-4d77-ac9c-5aaadde543dd",
                  "descriptor": "messages-target",
                  "values": {
                    "target": {
                      "path": ["target"]
                    }
                  }
                }
              ]
            }
          }
        ],
        "[headerControls]": [
          {
            "id": "d8e970da-6c0b-49fb-963c-d2515788b7b1",
            "descriptor": "item-subscribe",
            "values": {
              "item": {
                "path": ["itemModel"]
              },
              "application": {
                "path": ["application"]
              }
            }
          },
          {
            "id": "5a72dd17-31f2-4412-a056-a474e01ac17c",
            "descriptor": "button",
            "values": {
              "createAppItemSettings": {
                "kind": "",
                "settings": {
                  "code": "",
                  "field": "",
                  "binding": null,
                  "namespace": ""
                }
              },
              "icon": "send_approve",
              "view": "icon",
              "action": {
                "path": ["docflowSendAction"]
              },
              "tooltip": "Отправить",
              "runProcessSettings": {
                "kind": "",
                "settings": {
                  "code": "",
                  "field": "",
                  "binding": null,
                  "namespace": ""
                }
              }
            }
          },
          {
            "id": "b0237e26-4b99-4ce8-9d6f-a78b44c9263b",
            "descriptor": "button",
            "values": {
              "icon": "lock",
              "view": "icon",
              "label": "Права доступа",
              "action": {
                "path": ["accessSettings"]
              },
              "runProcessSettings": {
                "kind": "",
                "settings": {
                  "code": "",
                  "field": "",
                  "binding": null,
                  "namespace": ""
                }
              },
              "createAppItemSettings": {
                "kind": "",
                "settings": {
                  "code": "",
                  "field": "",
                  "binding": null,
                  "namespace": ""
                }
              }
            }
          },
          {
            "id": "17a52e8f-7486-4031-bd01-5838fcfc8f70",
            "descriptor": "extension-zone-toolbar-widget",
            "values": {
              "item": {
                "path": ["__itemRef"]
              }
            }
          },
          {
            "id": "13599e1c-12ed-11eb-adc1-0242ac120002",
            "descriptor": "edo-diadoc-full-widget",
            "values": {
              "icon": "lock",
              "item": {
                "path": ["item"]
              },
              "view": "icon",
              "label": "Права доступа",
              "itemModel": {
                "path": ["itemModel"]
              }
            }
          },
          {
            "id": "1d3e0cf2-9996-43a6-945d-4b949ff7939e",
            "descriptor": "app-signing",
            "descriptorVersion": 3,
            "values": {
              "label": "Права доступа",
              "itemModel": {
                "path": ["itemModel"]
              }
            }
          }
        ],
        "[headerUpperTitle]": [
          {
            "id": "7fe87b6f-803f-40af-ae04-2c46f1919291",
            "descriptor": "app-navigation-crumbs-tree-widget",
            "values": {
              "item": {
                "path": ["itemModel"]
              },
              "application": {
                "path": ["application"]
              }
            }
          }
        ],
        "[headerCustomization]": []
      }
    },
    "fields": [
      {
        "code": "region",
        "type": "SYS_COLLECTION",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": true,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {
          "code": "directory_of_regions",
          "filter": {
            "value": {
              "tf": {}
            },
            "enabled": false
          },
          "bindings": null,
          "namespace": "kedo",
          "isDependent": false,
          "linkedFieldCode": ""
        },
        "view": {
          "name": "Регион",
          "data": {}
        }
      },
      {
        "code": "date",
        "type": "DATETIME",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Дата",
          "data": {
            "additionalType": "date",
            "defaultTimeType": "startOfDay",
            "setCurrentDatetime": true,
            "timeOptional": false
          }
        }
      },
      {
        "code": "holiday",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Праздничный",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "day_off",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Выходной",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "error_exists",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Есть ошибка?",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "holiday_choose",
        "type": "BOOLEAN",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": false,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Выбран праздничный день",
          "data": {
            "additionalType": "radio",
            "noValue": "Нет",
            "yesValue": "Да"
          }
        }
      },
      {
        "code": "holiday_name",
        "type": "STRING",
        "searchable": false,
        "indexed": false,
        "deleted": false,
        "array": false,
        "required": false,
        "single": true,
        "defaultValue": null,
        "calcByFormula": false,
        "formula": "",
        "data": {},
        "view": {
          "name": "Название выходного дня (не обязательно)",
          "data": {
            "additionalType": "string"
          }
        }
      }
    ],
    "fieldVisibilityConditions": {
      "date": {
        "enabled": false,
        "conditions": []
      },
      "region": {
        "enabled": false,
        "conditions": []
      },
      "day_off": {
        "enabled": false,
        "conditions": []
      },
      "holiday": {
        "enabled": false,
        "conditions": []
      },
      "error_exists": {
        "enabled": false,
        "conditions": []
      },
      "holiday_name": {
        "enabled": false,
        "conditions": []
      },
      "holiday_choose": {
        "enabled": false,
        "conditions": []
      }
    },
    "scriptOptions": {},
    "clientScripts": "declare const document: any;\ndeclare const window: any;\ndeclare const console: any;\n\nlet customTable: any;\nlet addDateButton: any;\nlet regions: ApplicationItem\u003cApplication$kedo$directory_of_regions$Data, any\u003e[];\nlet globalIndex = 0;\n\nasync function onInit(): Promise\u003cvoid\u003e {\n    const [firstDayArr, lastDayArr]: string[][] = [`01.01.${Context.data.year_string}`, `31.12.${Context.data.year_string}`].map(date =\u003e date.split(\".\"));\n    const [fDay, fMonth, fYear, lDay, lMonth, lYear] = [].concat.apply([], [firstDayArr, lastDayArr].map(arr =\u003e arr.map(item =\u003e Number(item))));\n    const [firstDay, lastDay] = [new TDate(fYear, fMonth, fDay), new TDate(lYear, lMonth, lDay)]\n    ViewContext.fields.date.data.setFilter((f, g) =\u003e g.and(\n        f.gte(firstDay),\n        f.lte(lastDay),\n    ));\n\n    regions = await Context.fields.region.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    let waitForTable = window.setInterval(async () =\u003e {\n        customTable = document.querySelector(\".kedo-table\");\n        addDateButton = document.querySelector(\".add-date-button button\");\n        if (!customTable || !addDateButton) {\n            return;\n        };\n        window.clearInterval(waitForTable);\n        if (Context.data.dates_table \u0026\u0026 Context.data.dates_table.length \u003e 0) {\n            const table = Context.data.dates_table;\n\n            for (let row of table) {\n                try {\n                    const region = row.region ? regions.find(r =\u003e r.id === row.region.id) : undefined;\n                    const regionName = region ? region.data.__name : \"Общероссийский\";\n                    const date = row.date.format(\"DD.MM.YYYY\");\n                    const isDayOff = row.day_off ? \"✓\" : \"✗\";\n                    const isHoliday = row.holiday ? \"✓\" : \"✗\";\n                    const holidayName = row.holiday_name ? row.holiday_name : '';\n                    await addRowToDomTable({ regionName, date, isDayOff, isHoliday, index: row.row_index, holidayName });\n                } catch (err) {\n                    console.log(err.message)\n                    continue;\n                };\n            };\n\n            Context.data.dates_table = table;\n        };\n        handleDateChange();\n    })\n};\n\nasync function addRowToDomTable(rowData: any) {\n    const newRowTemplate = document.querySelector(\".custom-table-row\").content.cloneNode(true);\n    const newRow = newRowTemplate.querySelector(\"tr\");\n    const holidayNode = newRowTemplate.querySelector(\".day-holiday\");\n    const dayOffNode = newRowTemplate.querySelector(\".day-off\");\n    const dateNode = newRowTemplate.querySelector(\".day-date\");\n    const regionNode = newRowTemplate.querySelector(\".day-region\");\n    const holidayName = newRowTemplate.querySelector(\".day-holiday-name\");\n    const deleteButtonNode = document.createElement(\"div\");\n    const currentElement = await Application.search().where(f =\u003e f.__id.eq(Context.data.__id)).first();\n    deleteButtonNode.className = \"delete-button-wrapper\";\n    dateNode.textContent = rowData.date;\n    regionNode.textContent = rowData.regionName;\n    holidayNode.innerHTML = rowData.isHoliday;\n    dayOffNode.innerHTML = rowData.isDayOff;\n    holidayName.textContent = rowData.holidayName;\n    dateNode.appendChild(deleteButtonNode);\n    deleteButtonNode.addEventListener(\"click\", async () =\u003e {\n        newRow.remove();\n        deleteButtonNode.remove();\n        const restDeleteNodes = document.querySelectorAll(\".delete-button-wrapper\");\n        restDeleteNodes.forEach((node: any) =\u003e {\n            node.style.pointerEvents = \"none\";\n        });\n\n        const table = Context.data.dates_table;\n        const rowToDelete = table!.find((r: any) =\u003e r.row_index === rowData.index);\n        console.log(rowToDelete)\n        console.log(table!.indexOf(rowToDelete!))\n        table!.delete(table!.indexOf(rowToDelete!));\n\n        Context.data.dates_table = table;\n        currentElement!.data.dates_table = table;\n        await currentElement!.save();\n        await Context.fetch();\n        restDeleteNodes.forEach((node: any) =\u003e {\n            node.style.pointerEvents = \"auto\";\n        });\n        handleDateChange();\n    });\n    handleDateChange();\n    customTable.append(newRowTemplate);\n}\n\nasync function addDateToTable(): Promise\u003cvoid\u003e {\n    await handleDateChange();\n    if (!ViewContext.data.error_exists) {\n        const table = Context.data.dates_table ? Context.data.dates_table : Context.fields.dates_table.create();\n        const newRow = table.insert();\n        newRow.date = ViewContext.data.date!;\n        newRow.region = ViewContext.data.region!;\n        newRow.day_off = ViewContext.data.day_off!;\n        newRow.holiday = ViewContext.data.holiday!;\n        newRow.row_index = table.length + 100;\n        newRow.holiday_name = ViewContext.data.holiday_name || \"\";\n        const currentElement = await Application.search().where(f =\u003e f.__id.eq(Context.data.__id)).first();\n        currentElement!.data.dates_table = table;\n        await currentElement!.save();\n\n        const region = ViewContext.data.region ? regions.find(r =\u003e r.id === ViewContext.data.region!.id) : undefined;\n        let regionName = region ? region.data.__name : \"Общероссийский\";\n        const date = ViewContext.data.date!.format(\"DD.MM.YYYY\");\n        const isDayOff = ViewContext.data.day_off ? \"\u0026check;\" : \"\u0026cross;\";\n        const isHoliday = ViewContext.data.holiday ? \"\u0026check;\" : \"\u0026cross;\";\n\n        await addRowToDomTable({ regionName, date, isDayOff, isHoliday, index: newRow.row_index, holidayName: newRow.holiday_name });\n    }\n};\n//обрабатываем изменение даты\nasync function handleDateChange(): Promise\u003cvoid\u003e {\n    const table = Context.data.dates_table;\n    const rows = table!.filter((row: any) =\u003e row.date.equal(ViewContext.data.date!))   //получаем строки с такой же датой\n    if (rows \u0026\u0026 rows.length \u003e 0) {\n        \n        if (ViewContext.data.region \u0026\u0026 rows!.some((row: any) =\u003e row.region \u0026\u0026 row.region.id == ViewContext.data.region!.id)) { //если среди строк есть такая где совпадает регион\n            addDateButton.classList.add(\"disabled\");\n            ViewContext.data.error_exists = true;\n            return\n        }\n        if (!ViewContext.data.region \u0026\u0026 rows!.some((row: any) =\u003e row.region == undefined)) {    //среди строк есть строка без региона и мы его не указывали\n            addDateButton.classList.add(\"disabled\");\n            ViewContext.data.error_exists = true;\n            return\n        }\n    };\n\n    addDateButton.classList.remove(\"disabled\");\n    ViewContext.data.error_exists = false;\n\n};\n\nasync function handleHolidayChange(): Promise\u003cvoid\u003e {\n    if (ViewContext.data.holiday) {\n        ViewContext.data.holiday_choose = true;\n        ViewContext.data.day_off = true;\n        return;\n    };\n    ViewContext.data.holiday_choose = false;\n};\n",
    "clientScriptOptions": {
      "allowServer": true
    },
    "serverScripts": "/* Server scripts module */\n",
    "serverScriptOptions": {},
    "widgetZones": [
      {
        "code": "[footer]"
      }
    ],
    "dataFieldCode": "item"
  },
  "dataNamespace": "kedo",
  "dataCode": "additional_holidays",
  "runtime": {
    "version": 1,
    "clientScripts": "System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 \u0026\u0026 context_1.id;\n    function default_1(Context, ViewContext, Server, System) {\n        let customTable;\n        let addDateButton;\n        let regions;\n        let globalIndex = 0;\n        async function onInit() {\n            const [firstDayArr, lastDayArr] = [`01.01.${Context.data.year_string}`, `31.12.${Context.data.year_string}`].map(date =\u003e date.split(\".\"));\n            const [fDay, fMonth, fYear, lDay, lMonth, lYear] = [].concat.apply([], [firstDayArr, lastDayArr].map(arr =\u003e arr.map(item =\u003e Number(item))));\n            const [firstDay, lastDay] = [new TDate(fYear, fMonth, fDay), new TDate(lYear, lMonth, lDay)];\n            ViewContext.fields.date.data.setFilter((f, g) =\u003e g.and(f.gte(firstDay), f.lte(lastDay)));\n            regions = await Context.fields.region.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n            let waitForTable = window.setInterval(async () =\u003e {\n                customTable = document.querySelector(\".kedo-table\");\n                addDateButton = document.querySelector(\".add-date-button button\");\n                if (!customTable || !addDateButton) {\n                    return;\n                }\n                ;\n                window.clearInterval(waitForTable);\n                if (Context.data.dates_table \u0026\u0026 Context.data.dates_table.length \u003e 0) {\n                    const table = Context.data.dates_table;\n                    for (let row of table) {\n                        try {\n                            const region = row.region ? regions.find(r =\u003e r.id === row.region.id) : undefined;\n                            const regionName = region ? region.data.__name : \"Общероссийский\";\n                            const date = row.date.format(\"DD.MM.YYYY\");\n                            const isDayOff = row.day_off ? \"✓\" : \"✗\";\n                            const isHoliday = row.holiday ? \"✓\" : \"✗\";\n                            const holidayName = row.holiday_name ? row.holiday_name : '';\n                            await addRowToDomTable({ regionName, date, isDayOff, isHoliday, index: row.row_index, holidayName });\n                        }\n                        catch (err) {\n                            console.log(err.message);\n                            continue;\n                        }\n                        ;\n                    }\n                    ;\n                    Context.data.dates_table = table;\n                }\n                ;\n                handleDateChange();\n            });\n        }\n        ;\n        async function addRowToDomTable(rowData) {\n            const newRowTemplate = document.querySelector(\".custom-table-row\").content.cloneNode(true);\n            const newRow = newRowTemplate.querySelector(\"tr\");\n            const holidayNode = newRowTemplate.querySelector(\".day-holiday\");\n            const dayOffNode = newRowTemplate.querySelector(\".day-off\");\n            const dateNode = newRowTemplate.querySelector(\".day-date\");\n            const regionNode = newRowTemplate.querySelector(\".day-region\");\n            const holidayName = newRowTemplate.querySelector(\".day-holiday-name\");\n            const deleteButtonNode = document.createElement(\"div\");\n            const currentElement = await Application.search().where(f =\u003e f.__id.eq(Context.data.__id)).first();\n            deleteButtonNode.className = \"delete-button-wrapper\";\n            dateNode.textContent = rowData.date;\n            regionNode.textContent = rowData.regionName;\n            holidayNode.innerHTML = rowData.isHoliday;\n            dayOffNode.innerHTML = rowData.isDayOff;\n            holidayName.textContent = rowData.holidayName;\n            dateNode.appendChild(deleteButtonNode);\n            deleteButtonNode.addEventListener(\"click\", async () =\u003e {\n                newRow.remove();\n                deleteButtonNode.remove();\n                const restDeleteNodes = document.querySelectorAll(\".delete-button-wrapper\");\n                restDeleteNodes.forEach((node) =\u003e {\n                    node.style.pointerEvents = \"none\";\n                });\n                const table = Context.data.dates_table;\n                const rowToDelete = table.find((r) =\u003e r.row_index === rowData.index);\n                console.log(rowToDelete);\n                console.log(table.indexOf(rowToDelete));\n                table.delete(table.indexOf(rowToDelete));\n                Context.data.dates_table = table;\n                currentElement.data.dates_table = table;\n                await currentElement.save();\n                await Context.fetch();\n                restDeleteNodes.forEach((node) =\u003e {\n                    node.style.pointerEvents = \"auto\";\n                });\n                handleDateChange();\n            });\n            handleDateChange();\n            customTable.append(newRowTemplate);\n        }\n        async function addDateToTable() {\n            await handleDateChange();\n            if (!ViewContext.data.error_exists) {\n                const table = Context.data.dates_table ? Context.data.dates_table : Context.fields.dates_table.create();\n                const newRow = table.insert();\n                newRow.date = ViewContext.data.date;\n                newRow.region = ViewContext.data.region;\n                newRow.day_off = ViewContext.data.day_off;\n                newRow.holiday = ViewContext.data.holiday;\n                newRow.row_index = table.length + 100;\n                newRow.holiday_name = ViewContext.data.holiday_name || \"\";\n                const currentElement = await Application.search().where(f =\u003e f.__id.eq(Context.data.__id)).first();\n                currentElement.data.dates_table = table;\n                await currentElement.save();\n                const region = ViewContext.data.region ? regions.find(r =\u003e r.id === ViewContext.data.region.id) : undefined;\n                let regionName = region ? region.data.__name : \"Общероссийский\";\n                const date = ViewContext.data.date.format(\"DD.MM.YYYY\");\n                const isDayOff = ViewContext.data.day_off ? \"\u0026check;\" : \"\u0026cross;\";\n                const isHoliday = ViewContext.data.holiday ? \"\u0026check;\" : \"\u0026cross;\";\n                await addRowToDomTable({ regionName, date, isDayOff, isHoliday, index: newRow.row_index, holidayName: newRow.holiday_name });\n            }\n        }\n        ;\n        async function handleDateChange() {\n            const table = Context.data.dates_table;\n            const rows = table.filter((row) =\u003e row.date.equal(ViewContext.data.date));\n            if (rows \u0026\u0026 rows.length \u003e 0) {\n                if (ViewContext.data.region \u0026\u0026 rows.some((row) =\u003e row.region \u0026\u0026 row.region.id == ViewContext.data.region.id)) {\n                    addDateButton.classList.add(\"disabled\");\n                    ViewContext.data.error_exists = true;\n                    return;\n                }\n                if (!ViewContext.data.region \u0026\u0026 rows.some((row) =\u003e row.region == undefined)) {\n                    addDateButton.classList.add(\"disabled\");\n                    ViewContext.data.error_exists = true;\n                    return;\n                }\n            }\n            ;\n            addDateButton.classList.remove(\"disabled\");\n            ViewContext.data.error_exists = false;\n        }\n        ;\n        async function handleHolidayChange() {\n            if (ViewContext.data.holiday) {\n                ViewContext.data.holiday_choose = true;\n                ViewContext.data.day_off = true;\n                return;\n            }\n            ;\n            ViewContext.data.holiday_choose = false;\n        }\n        ;\n        return {\n            onInit,\n            addRowToDomTable,\n            addDateToTable,\n            handleDateChange,\n            handleHolidayChange\n        };\n    }\n    exports_1(\"default\", default_1);\n    return {\n        setters: [],\n        execute: function () {\n        }\n    };\n});\n",
    "clientFnDeclarations": [
      {
        "name": "onInit",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "addRowToDomTable",
        "parameters": [
          {
            "name": "[object Object]",
            "type": "[object Object]"
          }
        ],
        "type": ""
      },
      {
        "name": "addDateToTable",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "handleDateChange",
        "parameters": [],
        "type": "[object Object]"
      },
      {
        "name": "handleHolidayChange",
        "parameters": [],
        "type": "[object Object]"
      }
    ],
    "clientDependencies": {
      "applications": [],
      "collections": [
        {
          "namespace": "kedo",
          "code": "directory_of_regions"
        },
        {
          "namespace": "kedo",
          "code": "additional_holidays"
        }
      ],
      "pages": []
    }
  },
  "__createdAt": "2024-04-23T10:16:50.364083362Z",
  "__createdBy": "099fd2a1-8125-406b-aaff-0db06d81aa40",
  "__updatedAt": "2024-04-26T11:56:51.543873744Z",
  "__updatedBy": "099fd2a1-8125-406b-aaff-0db06d81aa40",
  "__deletedAt": null
}
