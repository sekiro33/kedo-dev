{
  "id": "eac85c5e-136d-469a-8997-7b614bdf7d45",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "handlerType": "script",
  "handlerData": {
    "scripts": "async function action(): Promise\u003cvoid\u003e {\n    const newAccounting = Context.data.__data.item.accounting;\n    const newHrDepartment = Context.data.__data.item.hr_department;\n    const hrDepartmentCode = \"abdecf4b-b6ba-419f-bac7-c1455d2a6159\";\n    const accountingCode = \"dfede5be-5011-4ec9-b535-8c9ca3fc4d19\";\n    const allOrganizations = await Namespace.params.fields.org_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const hrDepartmentGroup = await System.userGroups.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.code.eq(hrDepartmentCode)\n    )).first();\n    const accountingGroup = await System.userGroups.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.code.eq(accountingCode)\n    )).first();\n    const allStaff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null)\n    )).size(10000).all();\n    const allUsers = await System.users.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    let addElementToAccounting = false;\n    let addElementToHr = false;\n    let allUids: string[] = [];\n    let debug = \"\";\n\n    try {\n        const nonEmptyAccounting = allOrganizations.filter(org =\u003e org.data.accounting);\n        allUids = [].concat.apply([], [].concat.apply(nonEmptyAccounting.map(org =\u003e org.data.accounting!.map(staff =\u003e {\n            const staffApp = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffApp \u0026\u0026 staffApp.data.ext_user) {\n                return staffApp.data.ext_user.id;\n            };\n        }))));\n        \n        accountingGroup!.data.subOrgunitIds = allUids;\n        await accountingGroup!.save();\n\n        const nonEmptyHr = allOrganizations.filter(org =\u003e org.data.hr_department);\n        allUids = [].concat.apply([], [].concat.apply(nonEmptyHr.map(org =\u003e org.data.hr_department!.map(staff =\u003e {\n            const staffApp = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffApp \u0026\u0026 staffApp.data.ext_user) {\n                return staffApp.data.ext_user.id;\n            };\n        }))));\n        \n        hrDepartmentGroup!.data.subOrgunitIds = allUids;\n        await hrDepartmentGroup!.save();\n        await fetch(\"https://webhook.site/a152e890-82a8-4af8-89e1-182f63ce1f24\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                addElementToAccounting,\n                addElementToHr,\n                debug,\n                allUids,\n                data: (\u003cany\u003eContext).json(),\n            })\n        });\n    } catch (err) {\n        await fetch(\"https://webhook.site/a152e890-82a8-4af8-89e1-182f63ce1f24\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                error: err.message,\n                allUids\n            })\n        })\n    }\n}",
    "compiledScripts": "async function action() {\n    const newAccounting = Context.data.__data.item.accounting;\n    const newHrDepartment = Context.data.__data.item.hr_department;\n    const hrDepartmentCode = \"abdecf4b-b6ba-419f-bac7-c1455d2a6159\";\n    const accountingCode = \"dfede5be-5011-4ec9-b535-8c9ca3fc4d19\";\n    const allOrganizations = await Namespace.params.fields.org_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const hrDepartmentGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(hrDepartmentCode))).first();\n    const accountingGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(accountingCode))).first();\n    const allStaff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null))).size(10000).all();\n    const allUsers = await System.users.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    let addElementToAccounting = false;\n    let addElementToHr = false;\n    let allUids = [];\n    let debug = \"\";\n    try {\n        const nonEmptyAccounting = allOrganizations.filter(org =\u003e org.data.accounting);\n        allUids = [].concat.apply([], [].concat.apply(nonEmptyAccounting.map(org =\u003e org.data.accounting.map(staff =\u003e {\n            const staffApp = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffApp \u0026\u0026 staffApp.data.ext_user) {\n                return staffApp.data.ext_user.id;\n            }\n            ;\n        }))));\n        accountingGroup.data.subOrgunitIds = allUids;\n        await accountingGroup.save();\n        const nonEmptyHr = allOrganizations.filter(org =\u003e org.data.hr_department);\n        allUids = [].concat.apply([], [].concat.apply(nonEmptyHr.map(org =\u003e org.data.hr_department.map(staff =\u003e {\n            const staffApp = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffApp \u0026\u0026 staffApp.data.ext_user) {\n                return staffApp.data.ext_user.id;\n            }\n            ;\n        }))));\n        hrDepartmentGroup.data.subOrgunitIds = allUids;\n        await hrDepartmentGroup.save();\n        await fetch(\"https://webhook.site/a152e890-82a8-4af8-89e1-182f63ce1f24\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                addElementToAccounting,\n                addElementToHr,\n                debug,\n                allUids,\n                data: Context.json(),\n            })\n        });\n    }\n    catch (err) {\n        await fetch(\"https://webhook.site/a152e890-82a8-4af8-89e1-182f63ce1f24\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                error: err.message,\n                allUids\n            })\n        });\n    }\n}\n(async function () {\n    action();\n});\n"
  },
  "name": "Добавление пользователя в группу при изменении организации",
  "company": "4hmzqbuznzs76",
  "entityNamespace": "kedo",
  "entityCode": "organization",
  "entityId": "",
  "event": "item_update",
  "expiredAt": null,
  "createdAt": "2023-09-18T07:20:30.375823Z",
  "createdBy": "5d4a0602-0470-4d58-9ba2-89062f72b084",
  "updatedAt": "2023-09-19T05:58:22.607315Z",
  "updatedBy": "5d4a0602-0470-4d58-9ba2-89062f72b084"
}
