{
  "id": "da1a4d68-206c-4955-9579-24e4328491aa",
  "namespace": "ext_7fe3de7d-f459-4f75-940c-271c6e9ea1ed",
  "handlerType": "script",
  "handlerData": {
    "scripts": "const hrDepartmentCode = \"abdecf4b-b6ba-419f-bac7-c1455d2a6159\";\nconst accountingCode = \"dfede5be-5011-4ec9-b535-8c9ca3fc4d19\";\n\nasync function action(): Promise\u003cvoid\u003e {\n    const allOrganizations = await Namespace.params.fields.org_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const hrDepartmentGroup = await System.userGroups.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.code.eq(hrDepartmentCode)\n    )).first();\n    const accountingGroup = await System.userGroups.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.code.eq(accountingCode)\n    )).first();\n    const allStaff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null)\n    )).size(10000).all();\n    let addElementToAccounting = false;\n    let addElementToHr = false;\n    let allUids: string[] = [];\n    let debug = \"\";\n\n    try {\n        const nonEmptyAccounting = allOrganizations.filter(org =\u003e org.data.accounting);\n        allUids = [].concat.apply([], [].concat.apply(nonEmptyAccounting.map(org =\u003e org.data.accounting!.map(staff =\u003e {\n            const staffApp = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffApp \u0026\u0026 staffApp.data.ext_user) {\n                return staffApp.data.ext_user.id;\n            };\n        }))));\n        \n        accountingGroup!.data.subOrgunitIds = allUids;\n        await accountingGroup!.save();\n\n        const nonEmptyHr = allOrganizations.filter(org =\u003e org.data.hr_department);\n        allUids = [].concat.apply([], [].concat.apply(nonEmptyHr.map(org =\u003e org.data.hr_department!.map(staff =\u003e {\n            const staffApp = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffApp \u0026\u0026 staffApp.data.ext_user) {\n                return staffApp.data.ext_user.id;\n            };\n        }))));\n        \n        hrDepartmentGroup!.data.subOrgunitIds = allUids;\n        await hrDepartmentGroup!.save();\n        await checkInnerUsers(hrDepartmentGroup!, accountingGroup!)\n    } catch (err) {\n        await fetch(\"https://webhook.site/2f1e9fb6-00d2-4cfc-a700-86ada78683e0\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                error: err.message,\n                allUids\n            })\n        })\n    };\n};\n\nasync function checkInnerUsers(hrGroup: UserGroupItem, accountingGroup: UserGroupItem): Promise\u003cvoid\u003e {\n    if (!Context.data.__data.item.access_settings_organization || Context.data.__data.item.access_settings_organization.length \u003c 1) {\n        return;\n    };\n\n    const accessSettingsId = Context.data.__data.item.access_settings_organization[0];\n    const orgRights = \u003cApplicationItem\u003cApplication$kedo$access_settings_organization$Data, any\u003e\u003eawait Namespace.params.fields.access_settings_organization_app.app.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.__id.eq(accessSettingsId)\n    )).first();\n    const innerUsersField = orgRights.data.inner_org_staff;\n    if (!innerUsersField || innerUsersField.length \u003c 1) {\n        return;\n    };\n\n    const innerUsersRights = await System.userGroups.search().where((f, g) =\u003e g.and(\n        f.__deletedAt.eq(null),\n        f.__id.eq(innerUsersField[0].code)\n    )).first();\n    if (!innerUsersRights) {\n        return;\n    };\n    const innerUsersIds = innerUsersRights.data.subOrgunitIds;\n    if (!innerUsersIds || innerUsersIds.length \u003c 1) {\n        return;\n    };\n    const groupsIds: string[] = [].concat.apply([], [accountingGroup.data.subOrgunitIds, hrGroup.data.subOrgunitIds]).filter((item: any) =\u003e item != null);\n    if (groupsIds \u0026\u0026 groupsIds.length \u003e 0) {\n        const idsToDelete = innerUsersIds.filter(id =\u003e groupsIds.indexOf(id) != -1);\n        for (let id of innerUsersRights!.data.subOrgunitIds!) {\n            if (idsToDelete.indexOf(id) != -1) {\n                delete innerUsersRights.data.subOrgunitIds![innerUsersRights.data.subOrgunitIds!.indexOf(id)];\n            };\n        };\n        await innerUsersRights.save();\n        await fetch(\"https://webhook.site/2f1e9fb6-00d2-4cfc-a700-86ada78683e0\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                data: innerUsersRights.data.subOrgunitIds!\n            })\n        });\n    };\n};",
    "compiledScripts": "const hrDepartmentCode = \"abdecf4b-b6ba-419f-bac7-c1455d2a6159\";\nconst accountingCode = \"dfede5be-5011-4ec9-b535-8c9ca3fc4d19\";\nasync function action() {\n    const allOrganizations = await Namespace.params.fields.org_app.app.search().where(f =\u003e f.__deletedAt.eq(null)).size(10000).all();\n    const hrDepartmentGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(hrDepartmentCode))).first();\n    const accountingGroup = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.code.eq(accountingCode))).first();\n    const allStaff = await Namespace.params.fields.employee_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null))).size(10000).all();\n    let addElementToAccounting = false;\n    let addElementToHr = false;\n    let allUids = [];\n    let debug = \"\";\n    try {\n        const nonEmptyAccounting = allOrganizations.filter(org =\u003e org.data.accounting);\n        allUids = [].concat.apply([], [].concat.apply(nonEmptyAccounting.map(org =\u003e org.data.accounting.map(staff =\u003e {\n            const staffApp = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffApp \u0026\u0026 staffApp.data.ext_user) {\n                return staffApp.data.ext_user.id;\n            }\n            ;\n        }))));\n        accountingGroup.data.subOrgunitIds = allUids;\n        await accountingGroup.save();\n        const nonEmptyHr = allOrganizations.filter(org =\u003e org.data.hr_department);\n        allUids = [].concat.apply([], [].concat.apply(nonEmptyHr.map(org =\u003e org.data.hr_department.map(staff =\u003e {\n            const staffApp = allStaff.find(s =\u003e s.id === staff.id);\n            if (staffApp \u0026\u0026 staffApp.data.ext_user) {\n                return staffApp.data.ext_user.id;\n            }\n            ;\n        }))));\n        hrDepartmentGroup.data.subOrgunitIds = allUids;\n        await hrDepartmentGroup.save();\n        await checkInnerUsers(hrDepartmentGroup, accountingGroup);\n    }\n    catch (err) {\n        await fetch(\"https://webhook.site/2f1e9fb6-00d2-4cfc-a700-86ada78683e0\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                error: err.message,\n                allUids\n            })\n        });\n    }\n    ;\n}\n;\nasync function checkInnerUsers(hrGroup, accountingGroup) {\n    if (!Context.data.__data.item.access_settings_organization || Context.data.__data.item.access_settings_organization.length \u003c 1) {\n        return;\n    }\n    ;\n    const accessSettingsId = Context.data.__data.item.access_settings_organization[0];\n    const orgRights = await Namespace.params.fields.access_settings_organization_app.app.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(accessSettingsId))).first();\n    const innerUsersField = orgRights.data.inner_org_staff;\n    if (!innerUsersField || innerUsersField.length \u003c 1) {\n        return;\n    }\n    ;\n    const innerUsersRights = await System.userGroups.search().where((f, g) =\u003e g.and(f.__deletedAt.eq(null), f.__id.eq(innerUsersField[0].code))).first();\n    if (!innerUsersRights) {\n        return;\n    }\n    ;\n    const innerUsersIds = innerUsersRights.data.subOrgunitIds;\n    if (!innerUsersIds || innerUsersIds.length \u003c 1) {\n        return;\n    }\n    ;\n    const groupsIds = [].concat.apply([], [accountingGroup.data.subOrgunitIds, hrGroup.data.subOrgunitIds]).filter((item) =\u003e item != null);\n    if (groupsIds \u0026\u0026 groupsIds.length \u003e 0) {\n        const idsToDelete = innerUsersIds.filter(id =\u003e groupsIds.indexOf(id) != -1);\n        for (let id of innerUsersRights.data.subOrgunitIds) {\n            if (idsToDelete.indexOf(id) != -1) {\n                delete innerUsersRights.data.subOrgunitIds[innerUsersRights.data.subOrgunitIds.indexOf(id)];\n            }\n            ;\n        }\n        ;\n        await innerUsersRights.save();\n        await fetch(\"https://webhook.site/2f1e9fb6-00d2-4cfc-a700-86ada78683e0\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                data: innerUsersRights.data.subOrgunitIds\n            })\n        });\n    }\n    ;\n}\n;\n(async function () {\n    action();\n});\n"
  },
  "name": "Добавление пользователя в группу при изменении организации",
  "company": "head",
  "entityNamespace": "kedo",
  "entityCode": "organization",
  "entityId": "",
  "event": "item_update",
  "expiredAt": null,
  "createdAt": "2023-09-27T06:09:53.786941Z",
  "createdBy": "56f26bbd-d550-4ad9-ad48-bbfe5971581d",
  "updatedAt": "2023-09-29T08:01:25.567677Z",
  "updatedBy": "56f26bbd-d550-4ad9-ad48-bbfe5971581d"
}
